--- !ruby/object:Provider::Ansible::Example
task: !ruby/object:Provider::Ansible::Task
  name: azure_rm_datafactoryv2dataflowdebugsession
  description: DataFlowDebugSession_AddDataFlow
  code:
    resource_group: myResourceGroup
    name: myFactory
    request:
      dataFlow:
        name: dataflow1
        properties:
          type: MappingDataFlow
          typeProperties:
            sources:
              - dataset:
                  referenceName: DelimitedText2
                  type: DatasetReference
                name: source1
            sinks: []
            transformations: []
            script: "\n\nsource(output(\n\t\tColumn_1 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1"
      datasets:
        - name: dataset1
          properties:
            linkedServiceName:
              referenceName: linkedService5
              type: LinkedServiceReference
            annotations: []
            type: DelimitedText
            typeProperties:
              location:
                type: AzureBlobStorageLocation
                fileName: Ansiencoding.csv
                container: dataflow-sample-data
              columnDelimiter: ','
              escapeChar: \
              firstRowAsHeader: true
              quoteChar: '"'
            schema:
              - type: String
      linkedServices:
        - name: linkedService1
          properties:
            type: AzureBlobStorage
            typeProperties:
              connectionString: >-
                DefaultEndpointsProtocol=https;AccountName=<storageName>;EndpointSuffix=core.windows.net;
              encryptedCredential: <credential>
            annotations: []
      debugSettings:
        sourceSettings:
          - sourceName: source1
            rowLimit: '1000'
          - sourceName: source2
            rowLimit: '222'
        parameters:
          sourcePath: Toy
        datasetParameters:
          Movies:
            path: abc
          Output:
            time: def
      sessionId: f06ed247-9d07-49b2-b05e-2cb4a2fc871e
  