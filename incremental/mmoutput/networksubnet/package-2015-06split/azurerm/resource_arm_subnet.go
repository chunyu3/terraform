// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmSubnet() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmSubnetCreateUpdate,
        Read: resourceArmSubnetRead,
        Update: resourceArmSubnetCreateUpdate,
        Delete: resourceArmSubnetDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "virtual_network_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "address_prefix": {
                Type: schema.TypeString,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "ip_configurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ipallocation_method": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Static),
                                string(network.Dynamic),
                            }, false),
                            Default: string(network.Static),
                        },
                        "public_ip_address": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "tags": tags.Schema(),
                                },
                            },
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "network_security_group": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "default_security_rules": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "location": azure.SchemaLocation(),
                        "network_interfaces": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "tags": tags.Schema(),
                                },
                            },
                        },
                        "resource_guid": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "security_rules": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "subnets": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "tags": tags.Schema(),
                    },
                },
            },

            "route_table": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "location": azure.SchemaLocation(),
                        "routes": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "subnets": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "tags": tags.Schema(),
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmSubnetCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).subnetsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    virtualNetworkName := d.Get("virtual_network_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, virtualNetworkName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Subnet %q (Virtual Network Name %q / Resource Group %q): %+v", name, virtualNetworkName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_subnet", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    name := d.Get("name").(string)
    addressPrefix := d.Get("address_prefix").(string)
    etag := d.Get("etag").(string)
    ipConfigurations := d.Get("ip_configurations").([]interface{})
    networkSecurityGroup := d.Get("network_security_group").([]interface{})
    routeTable := d.Get("route_table").([]interface{})

    subnetParameters := network.Subnet{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Name: utils.String(name),
        SubnetPropertiesFormat: &network.SubnetPropertiesFormat{
            AddressPrefix: utils.String(addressPrefix),
            IpConfigurations: expandArmSubnetIPConfiguration(ipConfigurations),
            NetworkSecurityGroup: expandArmSubnetSecurityGroup(networkSecurityGroup),
            RouteTable: expandArmSubnetRouteTable(routeTable),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, virtualNetworkName, name, subnetParameters)
    if err != nil {
        return fmt.Errorf("Error creating Subnet %q (Virtual Network Name %q / Resource Group %q): %+v", name, virtualNetworkName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Subnet %q (Virtual Network Name %q / Resource Group %q): %+v", name, virtualNetworkName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, virtualNetworkName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Subnet %q (Virtual Network Name %q / Resource Group %q): %+v", name, virtualNetworkName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Subnet %q (Virtual Network Name %q / Resource Group %q) ID", name, virtualNetworkName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmSubnetRead(d, meta)
}

func resourceArmSubnetRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).subnetsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    virtualNetworkName := id.Path["virtualnetworks"]
    name := id.Path["subnets"]

    resp, err := client.Get(ctx, resourceGroup, virtualNetworkName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Subnet %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Subnet %q (Virtual Network Name %q / Resource Group %q): %+v", name, virtualNetworkName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if subnetPropertiesFormat := resp.SubnetPropertiesFormat; subnetPropertiesFormat != nil {
        d.Set("address_prefix", subnetPropertiesFormat.AddressPrefix)
        if err := d.Set("ip_configurations", flattenArmSubnetIPConfiguration(subnetPropertiesFormat.IpConfigurations)); err != nil {
            return fmt.Errorf("Error setting `ip_configurations`: %+v", err)
        }
        if err := d.Set("network_security_group", flattenArmSubnetSecurityGroup(subnetPropertiesFormat.NetworkSecurityGroup)); err != nil {
            return fmt.Errorf("Error setting `network_security_group`: %+v", err)
        }
        d.Set("provisioning_state", subnetPropertiesFormat.ProvisioningState)
        if err := d.Set("route_table", flattenArmSubnetRouteTable(subnetPropertiesFormat.RouteTable)); err != nil {
            return fmt.Errorf("Error setting `route_table`: %+v", err)
        }
    }
    d.Set("etag", resp.Etag)
    d.Set("virtual_network_name", virtualNetworkName)

    return nil
}


func resourceArmSubnetDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).subnetsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    virtualNetworkName := id.Path["virtualnetworks"]
    name := id.Path["subnets"]

    future, err := client.Delete(ctx, resourceGroup, virtualNetworkName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Subnet %q (Virtual Network Name %q / Resource Group %q): %+v", name, virtualNetworkName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Subnet %q (Virtual Network Name %q / Resource Group %q): %+v", name, virtualNetworkName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmSubnetIPConfiguration(input []interface{}) *[]network.IPConfiguration {
    results := make([]network.IPConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        privateIpAddress := v["private_ip_address"].(string)
        privateIpallocationMethod := v["private_ipallocation_method"].(string)
        subnet := v["subnet"].([]interface{})
        publicIpAddress := v["public_ip_address"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.IPConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            IPConfigurationPropertiesFormat: &network.IPConfigurationPropertiesFormat{
                PrivateIpAddress: utils.String(privateIpAddress),
                PrivateIpallocationMethod: network.IPAllocationMethod(privateIpallocationMethod),
                PublicIpAddress: expandArmSubnetPublicIPAddress(publicIpAddress),
                Subnet: expandArmSubnetSubnet(subnet),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmSubnetSecurityGroup(input []interface{}) *network.SecurityGroup {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    location := azure.NormalizeLocation(v["location"].(string))
    t := v["tags"].(map[string]interface{})
    securityRules := v["security_rules"].([]interface{})
    defaultSecurityRules := v["default_security_rules"].([]interface{})
    networkInterfaces := v["network_interfaces"].([]interface{})
    subnets := v["subnets"].([]interface{})
    resourceGuid := v["resource_guid"].(string)
    etag := v["etag"].(string)

    result := network.SecurityGroup{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        SecurityGroupPropertiesFormat: &network.SecurityGroupPropertiesFormat{
            DefaultSecurityRules: expandArmSubnetSecurityRule(defaultSecurityRules),
            NetworkInterfaces: expandArmSubnetInterface(networkInterfaces),
            ResourceGuid: utils.String(resourceGuid),
            SecurityRules: expandArmSubnetSecurityRule(securityRules),
            Subnets: expandArmSubnetSubnet(subnets),
        },
        Tags: tags.Expand(t),
    }
    return &result
}

func expandArmSubnetRouteTable(input []interface{}) *network.RouteTable {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    location := azure.NormalizeLocation(v["location"].(string))
    t := v["tags"].(map[string]interface{})
    routes := v["routes"].([]interface{})
    subnets := v["subnets"].([]interface{})
    etag := v["etag"].(string)

    result := network.RouteTable{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        RouteTablePropertiesFormat: &network.RouteTablePropertiesFormat{
            Routes: expandArmSubnetRoute(routes),
            Subnets: expandArmSubnetSubnet(subnets),
        },
        Tags: tags.Expand(t),
    }
    return &result
}

func expandArmSubnetPublicIPAddress(input []interface{}) *network.PublicIPAddress {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    location := azure.NormalizeLocation(v["location"].(string))
    t := v["tags"].(map[string]interface{})
    etag := v["etag"].(string)

    result := network.PublicIPAddress{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        Tags: tags.Expand(t),
    }
    return &result
}

func expandArmSubnetSubnet(input []interface{}) *network.Subnet {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    name := v["name"].(string)
    etag := v["etag"].(string)

    result := network.Subnet{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Name: utils.String(name),
    }
    return &result
}

func expandArmSubnetSecurityRule(input []interface{}) *[]network.SecurityRule {
    results := make([]network.SecurityRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.SecurityRule{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmSubnetInterface(input []interface{}) *[]network.Interface {
    results := make([]network.Interface, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        location := azure.NormalizeLocation(v["location"].(string))
        t := v["tags"].(map[string]interface{})
        etag := v["etag"].(string)

        result := network.Interface{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Location: utils.String(location),
            Tags: tags.Expand(t),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmSubnetSubnet(input []interface{}) *[]network.Subnet {
    results := make([]network.Subnet, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.Subnet{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmSubnetRoute(input []interface{}) *[]network.Route {
    results := make([]network.Route, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.Route{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmSubnetIPConfiguration(input *[]network.IPConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if iPConfigurationPropertiesFormat := item.IPConfigurationPropertiesFormat; iPConfigurationPropertiesFormat != nil {
            if privateIpAddress := iPConfigurationPropertiesFormat.PrivateIpAddress; privateIpAddress != nil {
                v["private_ip_address"] = *privateIpAddress
            }
            v["private_ipallocation_method"] = string(iPConfigurationPropertiesFormat.PrivateIpallocationMethod)
            v["public_ip_address"] = flattenArmSubnetPublicIPAddress(iPConfigurationPropertiesFormat.PublicIpAddress)
            v["subnet"] = flattenArmSubnetSubnet(iPConfigurationPropertiesFormat.Subnet)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmSubnetSecurityGroup(input *network.SecurityGroup) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if location := input.Location; location != nil {
        result["location"] = azure.NormalizeLocation(*location)
    }
    if securityGroupPropertiesFormat := input.SecurityGroupPropertiesFormat; securityGroupPropertiesFormat != nil {
        result["default_security_rules"] = flattenArmSubnetSecurityRule(securityGroupPropertiesFormat.DefaultSecurityRules)
        result["network_interfaces"] = flattenArmSubnetInterface(securityGroupPropertiesFormat.NetworkInterfaces)
        if resourceGuid := securityGroupPropertiesFormat.ResourceGuid; resourceGuid != nil {
            result["resource_guid"] = *resourceGuid
        }
        result["security_rules"] = flattenArmSubnetSecurityRule(securityGroupPropertiesFormat.SecurityRules)
        result["subnets"] = flattenArmSubnetSubnet(securityGroupPropertiesFormat.Subnets)
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }

    return []interface{}{result}
}

func flattenArmSubnetRouteTable(input *network.RouteTable) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if location := input.Location; location != nil {
        result["location"] = azure.NormalizeLocation(*location)
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }
    if routeTablePropertiesFormat := input.RouteTablePropertiesFormat; routeTablePropertiesFormat != nil {
        result["routes"] = flattenArmSubnetRoute(routeTablePropertiesFormat.Routes)
        result["subnets"] = flattenArmSubnetSubnet(routeTablePropertiesFormat.Subnets)
    }

    return []interface{}{result}
}

func flattenArmSubnetPublicIPAddress(input *network.PublicIPAddress) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if location := input.Location; location != nil {
        result["location"] = azure.NormalizeLocation(*location)
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }

    return []interface{}{result}
}

func flattenArmSubnetSubnet(input *network.Subnet) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }

    return []interface{}{result}
}

func flattenArmSubnetSecurityRule(input *[]network.SecurityRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmSubnetInterface(input *[]network.Interface) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if location := item.Location; location != nil {
            v["location"] = azure.NormalizeLocation(*location)
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmSubnetSubnet(input *[]network.Subnet) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmSubnetRoute(input *[]network.Route) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}
