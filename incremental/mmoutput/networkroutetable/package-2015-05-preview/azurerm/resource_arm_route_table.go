// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmRouteTable() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmRouteTableCreateUpdate,
        Read: resourceArmRouteTableRead,
        Update: resourceArmRouteTableCreateUpdate,
        Delete: resourceArmRouteTableDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "route_table_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "routes": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "next_hop_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.VirtualNetworkGateway),
                                string(network.VnetLocal),
                                string(network.Internet),
                                string(network.VirtualAppliance),
                                string(network.None),
                            }, false),
                        },
                        "address_prefix": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "next_hop_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "subnets": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "tags": tags.Schema(),

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmRouteTableCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).routeTablesClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("route_table_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Route Table (Route Table Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_route_table", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    etag := d.Get("etag").(string)
    routes := d.Get("routes").([]interface{})
    subnets := d.Get("subnets").([]interface{})
    tags := d.Get("tags").(map[string]interface{})

    parameters := network.RouteTable{
        Etag: utils.String(etag),
        Location: utils.String(location),
        RouteTablePropertiesFormat: &network.RouteTablePropertiesFormat{
            Routes: expandArmRouteTableRoute(routes),
            Subnets: expandArmRouteTableSubResource(subnets),
        },
        Tags: tags.Expand(tags),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroupName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Route Table (Route Table Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Route Table (Route Table Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Route Table (Route Table Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Route Table (Route Table Name %q / Resource Group %q) ID", name, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmRouteTableRead(d, meta)
}

func resourceArmRouteTableRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).routeTablesClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["routeTables"]

    resp, err := client.Get(ctx, resourceGroupName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Route Table %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Route Table (Route Table Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("etag", resp.Etag)
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    if routeTablePropertiesFormat := resp.RouteTablePropertiesFormat; routeTablePropertiesFormat != nil {
        d.Set("provisioning_state", routeTablePropertiesFormat.ProvisioningState)
        if err := d.Set("routes", flattenArmRouteTableRoute(routeTablePropertiesFormat.Routes)); err != nil {
            return fmt.Errorf("Error setting `routes`: %+v", err)
        }
        if err := d.Set("subnets", flattenArmRouteTableSubResource(routeTablePropertiesFormat.Subnets)); err != nil {
            return fmt.Errorf("Error setting `subnets`: %+v", err)
        }
    }
    d.Set("route_table_name", name)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmRouteTableDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).routeTablesClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["routeTables"]

    future, err := client.Delete(ctx, resourceGroupName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Route Table (Route Table Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Route Table (Route Table Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
        }
    }

    return nil
}

func expandArmRouteTableRoute(input []interface{}) *[]network.Route {
    results := make([]network.Route, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)
        addressPrefix := v["address_prefix"].(string)
        nextHopType := v["next_hop_type"].(string)
        nextHopIPAddress := v["next_hop_ip_address"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.Route{
            Etag: utils.String(etag),
            ID: utils.String(iD),
            Name: utils.String(name),
            RoutePropertiesFormat: &network.RoutePropertiesFormat{
                AddressPrefix: utils.String(addressPrefix),
                NextHopIPAddress: utils.String(nextHopIPAddress),
                NextHopType: network.RouteNextHopType(nextHopType),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmRouteTableSubResource(input []interface{}) *[]network.SubResource {
    results := make([]network.SubResource, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)

        result := network.SubResource{
            ID: utils.String(iD),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmRouteTableRoute(input *[]network.Route) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if routePropertiesFormat := item.RoutePropertiesFormat; routePropertiesFormat != nil {
            if addressPrefix := routePropertiesFormat.AddressPrefix; addressPrefix != nil {
                v["address_prefix"] = *addressPrefix
            }
            if nextHopIpAddress := routePropertiesFormat.NextHopIPAddress; nextHopIpAddress != nil {
                v["next_hop_ip_address"] = *nextHopIpAddress
            }
            v["next_hop_type"] = string(routePropertiesFormat.NextHopType)
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }

        results = append(results, v)
    }

    return results
}

func flattenArmRouteTableSubResource(input *[]network.SubResource) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }

        results = append(results, v)
    }

    return results
}
