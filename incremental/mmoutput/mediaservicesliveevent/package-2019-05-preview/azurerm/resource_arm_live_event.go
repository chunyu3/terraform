// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmLiveEvent() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmLiveEventCreate,
        Read: resourceArmLiveEventRead,
        Update: resourceArmLiveEventUpdate,
        Delete: resourceArmLiveEventDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "input": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "streaming_protocol": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(mediaservices.FragmentedMP4),
                                string(mediaservices.RTMP),
                            }, false),
                        },
                        "access_control": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "ip": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "allow": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    Elem: &schema.Resource{
                                                        Schema: map[string]*schema.Schema{
                                                            "address": {
                                                                Type: schema.TypeString,
                                                                Optional: true,
                                                            },
                                                            "name": {
                                                                Type: schema.TypeString,
                                                                Optional: true,
                                                            },
                                                            "subnet_prefix_length": {
                                                                Type: schema.TypeInt,
                                                                Optional: true,
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "access_token": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "endpoints": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "protocol": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "url": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "key_frame_interval_duration": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "auto_start": {
                Type: schema.TypeBool,
                Optional: true,
                ForceNew: true,
            },

            "cross_site_access_policies": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "client_access_policy": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "cross_domain_policy": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "encoding": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "encoding_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(mediaservices.None),
                                string(mediaservices.Basic),
                                string(mediaservices.Standard),
                                string(mediaservices.Premium1080p),
                            }, false),
                            Default: string(mediaservices.None),
                        },
                        "preset_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "preview": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "access_control": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "ip": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "allow": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    Elem: &schema.Resource{
                                                        Schema: map[string]*schema.Schema{
                                                            "address": {
                                                                Type: schema.TypeString,
                                                                Optional: true,
                                                            },
                                                            "name": {
                                                                Type: schema.TypeString,
                                                                Optional: true,
                                                            },
                                                            "subnet_prefix_length": {
                                                                Type: schema.TypeInt,
                                                                Optional: true,
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "alternative_media_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "endpoints": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "protocol": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "url": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "preview_locator": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "streaming_policy_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "stream_options": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                    ValidateFunc: validation.StringInSlice([]string{
                        string(mediaservices.Default),
                        string(mediaservices.LowLatency),
                   }, false),
                },
            },

            "transcriptions": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "input_track_selection": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "operation": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "property": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "value": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "language": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "output_transcription_track": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "track_name": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "vanity_url": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "created": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_modified": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmLiveEventCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).liveEventsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    autoStart := d.Get("auto_start").(bool)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Live Event %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_live_event", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    crossSiteAccessPolicies := d.Get("cross_site_access_policies").([]interface{})
    description := d.Get("description").(string)
    encoding := d.Get("encoding").([]interface{})
    input := d.Get("input").([]interface{})
    preview := d.Get("preview").([]interface{})
    streamOptions := d.Get("stream_options").([]interface{})
    transcriptions := d.Get("transcriptions").([]interface{})
    vanityUrl := d.Get("vanity_url").(bool)
    t := d.Get("tags").(map[string]interface{})

    parameters := mediaservices.LiveEvent{
        Location: utils.String(location),
        LiveEventProperties: &mediaservices.LiveEventProperties{
            CrossSiteAccessPolicies: expandArmLiveEventCrossSiteAccessPolicies(crossSiteAccessPolicies),
            Description: utils.String(description),
            Encoding: expandArmLiveEventLiveEventEncoding(encoding),
            Input: expandArmLiveEventLiveEventInput(input),
            Preview: expandArmLiveEventLiveEventPreview(preview),
            StreamOptions: expandArmLiveEvent(streamOptions),
            Transcriptions: expandArmLiveEventLiveEventTranscription(transcriptions),
            VanityURL: utils.Bool(vanityUrl),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Create(ctx, resourceGroup, accountName, name, autoStart, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Live Event %q (Auto Start %q / Account Name %q / Resource Group %q): %+v", name, autoStart, accountName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Live Event %q (Auto Start %q / Account Name %q / Resource Group %q): %+v", name, autoStart, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Live Event %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Live Event %q (Account Name %q / Resource Group %q) ID", name, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmLiveEventRead(d, meta)
}

func resourceArmLiveEventRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).liveEventsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaservices"]
    name := id.Path["liveEvents"]

    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Live Event %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Live Event %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("account_name", accountName)
    if liveEventProperties := resp.LiveEventProperties; liveEventProperties != nil {
        d.Set("created", (liveEventProperties.Created).String())
        if err := d.Set("cross_site_access_policies", flattenArmLiveEventCrossSiteAccessPolicies(liveEventProperties.CrossSiteAccessPolicies)); err != nil {
            return fmt.Errorf("Error setting `cross_site_access_policies`: %+v", err)
        }
        d.Set("description", liveEventProperties.Description)
        if err := d.Set("encoding", flattenArmLiveEventLiveEventEncoding(liveEventProperties.Encoding)); err != nil {
            return fmt.Errorf("Error setting `encoding`: %+v", err)
        }
        if err := d.Set("input", flattenArmLiveEventLiveEventInput(liveEventProperties.Input)); err != nil {
            return fmt.Errorf("Error setting `input`: %+v", err)
        }
        d.Set("last_modified", (liveEventProperties.LastModified).String())
        if err := d.Set("preview", flattenArmLiveEventLiveEventPreview(liveEventProperties.Preview)); err != nil {
            return fmt.Errorf("Error setting `preview`: %+v", err)
        }
        d.Set("provisioning_state", liveEventProperties.ProvisioningState)
        d.Set("resource_state", string(liveEventProperties.ResourceState))
        if err := d.Set("stream_options", flattenArmLiveEvent(string(liveEventProperties.StreamOptions))); err != nil {
            return fmt.Errorf("Error setting `stream_options`: %+v", err)
        }
        if err := d.Set("transcriptions", flattenArmLiveEventLiveEventTranscription(liveEventProperties.Transcriptions)); err != nil {
            return fmt.Errorf("Error setting `transcriptions`: %+v", err)
        }
        d.Set("vanity_url", liveEventProperties.VanityURL)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmLiveEventUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).liveEventsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    crossSiteAccessPolicies := d.Get("cross_site_access_policies").([]interface{})
    description := d.Get("description").(string)
    encoding := d.Get("encoding").([]interface{})
    input := d.Get("input").([]interface{})
    preview := d.Get("preview").([]interface{})
    streamOptions := d.Get("stream_options").([]interface{})
    transcriptions := d.Get("transcriptions").([]interface{})
    vanityUrl := d.Get("vanity_url").(bool)
    t := d.Get("tags").(map[string]interface{})

    parameters := mediaservices.LiveEvent{
        Location: utils.String(location),
        LiveEventProperties: &mediaservices.LiveEventProperties{
            CrossSiteAccessPolicies: expandArmLiveEventCrossSiteAccessPolicies(crossSiteAccessPolicies),
            Description: utils.String(description),
            Encoding: expandArmLiveEventLiveEventEncoding(encoding),
            Input: expandArmLiveEventLiveEventInput(input),
            Preview: expandArmLiveEventLiveEventPreview(preview),
            StreamOptions: expandArmLiveEvent(streamOptions),
            Transcriptions: expandArmLiveEventLiveEventTranscription(transcriptions),
            VanityURL: utils.Bool(vanityUrl),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, accountName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Live Event %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Live Event %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    return resourceArmLiveEventRead(d, meta)
}

func resourceArmLiveEventDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).liveEventsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaservices"]
    name := id.Path["liveEvents"]

    future, err := client.Delete(ctx, resourceGroup, accountName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Live Event %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Live Event %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmLiveEventCrossSiteAccessPolicies(input []interface{}) *mediaservices.CrossSiteAccessPolicies {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    clientAccessPolicy := v["client_access_policy"].(string)
    crossDomainPolicy := v["cross_domain_policy"].(string)

    result := mediaservices.CrossSiteAccessPolicies{
        ClientAccessPolicy: utils.String(clientAccessPolicy),
        CrossDomainPolicy: utils.String(crossDomainPolicy),
    }
    return &result
}

func expandArmLiveEventLiveEventEncoding(input []interface{}) *mediaservices.LiveEventEncoding {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    encodingType := v["encoding_type"].(string)
    presetName := v["preset_name"].(string)

    result := mediaservices.LiveEventEncoding{
        EncodingType: mediaservices.LiveEventEncodingType(encodingType),
        PresetName: utils.String(presetName),
    }
    return &result
}

func expandArmLiveEventLiveEventInput(input []interface{}) *mediaservices.LiveEventInput {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    streamingProtocol := v["streaming_protocol"].(string)
    accessControl := v["access_control"].([]interface{})
    keyFrameIntervalDuration := v["key_frame_interval_duration"].(string)
    accessToken := v["access_token"].(string)
    endpoints := v["endpoints"].([]interface{})

    result := mediaservices.LiveEventInput{
        AccessControl: expandArmLiveEventLiveEventInputAccessControl(accessControl),
        AccessToken: utils.String(accessToken),
        Endpoints: expandArmLiveEventLiveEventEndpoint(endpoints),
        KeyFrameIntervalDuration: utils.String(keyFrameIntervalDuration),
        StreamingProtocol: mediaservices.LiveEventInputProtocol(streamingProtocol),
    }
    return &result
}

func expandArmLiveEventLiveEventPreview(input []interface{}) *mediaservices.LiveEventPreview {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    endpoints := v["endpoints"].([]interface{})
    accessControl := v["access_control"].([]interface{})
    previewLocator := v["preview_locator"].(string)
    streamingPolicyName := v["streaming_policy_name"].(string)
    alternativeMediaId := v["alternative_media_id"].(string)

    result := mediaservices.LiveEventPreview{
        AccessControl: expandArmLiveEventLiveEventPreviewAccessControl(accessControl),
        AlternativeMediaID: utils.String(alternativeMediaId),
        Endpoints: expandArmLiveEventLiveEventEndpoint(endpoints),
        PreviewLocator: utils.String(previewLocator),
        StreamingPolicyName: utils.String(streamingPolicyName),
    }
    return &result
}

func expandArmLiveEvent(input []interface{}) *[]mediaservices. {
    results := make([]mediaservices., 0)
    for _, item := range input {
        v := item.(string)
        result := mediaservices.(v)
        results = append(results, result)
    }
    return &results
}

func expandArmLiveEventLiveEventTranscription(input []interface{}) *[]mediaservices.LiveEventTranscription {
    results := make([]mediaservices.LiveEventTranscription, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        language := v["language"].(string)
        inputTrackSelection := v["input_track_selection"].([]interface{})
        outputTranscriptionTrack := v["output_transcription_track"].([]interface{})

        result := mediaservices.LiveEventTranscription{
            InputTrackSelection: expandArmLiveEventLiveEventInputTrackSelection(inputTrackSelection),
            Language: utils.String(language),
            OutputTranscriptionTrack: expandArmLiveEventLiveEventOutputTranscriptionTrack(outputTranscriptionTrack),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmLiveEventLiveEventInputAccessControl(input []interface{}) *mediaservices.LiveEventInputAccessControl {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    ip := v["ip"].([]interface{})

    result := mediaservices.LiveEventInputAccessControl{
        Ip: expandArmLiveEventIPAccessControl(ip),
    }
    return &result
}

func expandArmLiveEventLiveEventEndpoint(input []interface{}) *[]mediaservices.LiveEventEndpoint {
    results := make([]mediaservices.LiveEventEndpoint, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        protocol := v["protocol"].(string)
        url := v["url"].(string)

        result := mediaservices.LiveEventEndpoint{
            Protocol: utils.String(protocol),
            URL: utils.String(url),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmLiveEventLiveEventPreviewAccessControl(input []interface{}) *mediaservices.LiveEventPreviewAccessControl {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    ip := v["ip"].([]interface{})

    result := mediaservices.LiveEventPreviewAccessControl{
        Ip: expandArmLiveEventIPAccessControl(ip),
    }
    return &result
}

func expandArmLiveEventLiveEventInputTrackSelection(input []interface{}) *[]mediaservices.LiveEventInputTrackSelection {
    results := make([]mediaservices.LiveEventInputTrackSelection, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        property := v["property"].(string)
        operation := v["operation"].(string)
        value := v["value"].(string)

        result := mediaservices.LiveEventInputTrackSelection{
            Operation: utils.String(operation),
            Property: utils.String(property),
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmLiveEventLiveEventOutputTranscriptionTrack(input []interface{}) *mediaservices.LiveEventOutputTranscriptionTrack {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    trackName := v["track_name"].(string)

    result := mediaservices.LiveEventOutputTranscriptionTrack{
        TrackName: utils.String(trackName),
    }
    return &result
}

func expandArmLiveEventIPAccessControl(input []interface{}) *mediaservices.IPAccessControl {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    allow := v["allow"].([]interface{})

    result := mediaservices.IPAccessControl{
        Allow: expandArmLiveEventIPRange(allow),
    }
    return &result
}

func expandArmLiveEventIPRange(input []interface{}) *[]mediaservices.IPRange {
    results := make([]mediaservices.IPRange, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        address := v["address"].(string)
        subnetPrefixLength := v["subnet_prefix_length"].(int)

        result := mediaservices.IPRange{
            Address: utils.String(address),
            Name: utils.String(name),
            SubnetPrefixLength: utils.Int32(int32(subnetPrefixLength)),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmLiveEventCrossSiteAccessPolicies(input *mediaservices.CrossSiteAccessPolicies) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if clientAccessPolicy := input.ClientAccessPolicy; clientAccessPolicy != nil {
        result["client_access_policy"] = *clientAccessPolicy
    }
    if crossDomainPolicy := input.CrossDomainPolicy; crossDomainPolicy != nil {
        result["cross_domain_policy"] = *crossDomainPolicy
    }

    return []interface{}{result}
}

func flattenArmLiveEventLiveEventEncoding(input *mediaservices.LiveEventEncoding) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["encoding_type"] = string(input.EncodingType)
    if presetName := input.PresetName; presetName != nil {
        result["preset_name"] = *presetName
    }

    return []interface{}{result}
}

func flattenArmLiveEventLiveEventInput(input *mediaservices.LiveEventInput) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["access_control"] = flattenArmLiveEventLiveEventInputAccessControl(input.AccessControl)
    if accessToken := input.AccessToken; accessToken != nil {
        result["access_token"] = *accessToken
    }
    result["endpoints"] = flattenArmLiveEventLiveEventEndpoint(input.Endpoints)
    if keyFrameIntervalDuration := input.KeyFrameIntervalDuration; keyFrameIntervalDuration != nil {
        result["key_frame_interval_duration"] = *keyFrameIntervalDuration
    }
    result["streaming_protocol"] = string(input.StreamingProtocol)

    return []interface{}{result}
}

func flattenArmLiveEventLiveEventPreview(input *mediaservices.LiveEventPreview) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["access_control"] = flattenArmLiveEventLiveEventPreviewAccessControl(input.AccessControl)
    if alternativeMediaId := input.AlternativeMediaID; alternativeMediaId != nil {
        result["alternative_media_id"] = *alternativeMediaId
    }
    result["endpoints"] = flattenArmLiveEventLiveEventEndpoint(input.Endpoints)
    if previewLocator := input.PreviewLocator; previewLocator != nil {
        result["preview_locator"] = *previewLocator
    }
    if streamingPolicyName := input.StreamingPolicyName; streamingPolicyName != nil {
        result["streaming_policy_name"] = *streamingPolicyName
    }

    return []interface{}{result}
}

func flattenArmLiveEvent(input *[]mediaservices.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}

func flattenArmLiveEventLiveEventTranscription(input *[]mediaservices.LiveEventTranscription) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["input_track_selection"] = flattenArmLiveEventLiveEventInputTrackSelection(item.InputTrackSelection)
        if language := item.Language; language != nil {
            v["language"] = *language
        }
        v["output_transcription_track"] = flattenArmLiveEventLiveEventOutputTranscriptionTrack(item.OutputTranscriptionTrack)

        results = append(results, v)
    }

    return results
}

func flattenArmLiveEventLiveEventInputAccessControl(input *mediaservices.LiveEventInputAccessControl) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["ip"] = flattenArmLiveEventIPAccessControl(input.Ip)

    return []interface{}{result}
}

func flattenArmLiveEventLiveEventEndpoint(input *[]mediaservices.LiveEventEndpoint) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if protocol := item.Protocol; protocol != nil {
            v["protocol"] = *protocol
        }
        if url := item.URL; url != nil {
            v["url"] = *url
        }

        results = append(results, v)
    }

    return results
}

func flattenArmLiveEventLiveEventPreviewAccessControl(input *mediaservices.LiveEventPreviewAccessControl) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["ip"] = flattenArmLiveEventIPAccessControl(input.Ip)

    return []interface{}{result}
}

func flattenArmLiveEventLiveEventInputTrackSelection(input *[]mediaservices.LiveEventInputTrackSelection) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if operation := item.Operation; operation != nil {
            v["operation"] = *operation
        }
        if property := item.Property; property != nil {
            v["property"] = *property
        }
        if value := item.Value; value != nil {
            v["value"] = *value
        }

        results = append(results, v)
    }

    return results
}

func flattenArmLiveEventLiveEventOutputTranscriptionTrack(input *mediaservices.LiveEventOutputTranscriptionTrack) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if trackName := input.TrackName; trackName != nil {
        result["track_name"] = *trackName
    }

    return []interface{}{result}
}

func flattenArmLiveEventIPAccessControl(input *mediaservices.IPAccessControl) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["allow"] = flattenArmLiveEventIPRange(input.Allow)

    return []interface{}{result}
}

func flattenArmLiveEventIPRange(input *[]mediaservices.IPRange) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if address := item.Address; address != nil {
            v["address"] = *address
        }
        if subnetPrefixLength := item.SubnetPrefixLength; subnetPrefixLength != nil {
            v["subnet_prefix_length"] = int(*subnetPrefixLength)
        }

        results = append(results, v)
    }

    return results
}
