// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmScopeAssignment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmScopeAssignmentCreateUpdate,
        Read: resourceArmScopeAssignmentRead,
        Update: resourceArmScopeAssignmentCreateUpdate,
        Delete: resourceArmScopeAssignmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "scope": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "scope_assignment_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },
        },
    }
}

func resourceArmScopeAssignmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).scopeAssignmentsClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    scope := d.Get("scope").(string)
    name := d.Get("scope_assignment_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, scope, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Scope Assignment (Scope Assignment Name %q / Scope %q): %+v", name, scope, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_scope_assignment", *existing.ID)
        }
    }


    parameters := managednetwork.ScopeAssignment{
    }


    if _, err := client.CreateOrUpdate(ctx, scope, name, parameters); err != nil {
        return fmt.Errorf("Error creating Scope Assignment (Scope Assignment Name %q / Scope %q): %+v", name, scope, err)
    }


    resp, err := client.Get(ctx, scope, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Scope Assignment (Scope Assignment Name %q / Scope %q): %+v", name, scope, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Scope Assignment (Scope Assignment Name %q / Scope %q) ID", name, scope)
    }
    d.SetId(*resp.ID)

    return resourceArmScopeAssignmentRead(d, meta)
}

func resourceArmScopeAssignmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).scopeAssignmentsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["scopeAssignments"]

    resp, err := client.Get(ctx, scope, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Scope Assignment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Scope Assignment (Scope Assignment Name %q / Scope %q): %+v", name, scope, err)
    }


    d.Set("scope", scope)
    d.Set("scope_assignment_name", name)

    return nil
}


func resourceArmScopeAssignmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).scopeAssignmentsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["scopeAssignments"]

    if _, err := client.Delete(ctx, scope, name); err != nil {
        return fmt.Errorf("Error deleting Scope Assignment (Scope Assignment Name %q / Scope %q): %+v", name, scope, err)
    }

    return nil
}
