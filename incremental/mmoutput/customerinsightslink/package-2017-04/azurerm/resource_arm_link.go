// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmLink() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmLinkCreateUpdate,
        Read: resourceArmLinkRead,
        Update: resourceArmLinkCreateUpdate,
        Delete: resourceArmLinkDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "hub_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "participant_property_references": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "source_property_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "target_property_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "source_entity_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(customerinsights.None),
                    string(customerinsights.Profile),
                    string(customerinsights.Interaction),
                    string(customerinsights.Relationship),
                }, false),
            },

            "source_entity_type_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "target_entity_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(customerinsights.None),
                    string(customerinsights.Profile),
                    string(customerinsights.Interaction),
                    string(customerinsights.Relationship),
                }, false),
            },

            "target_entity_type_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "description": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "display_name": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "mappings": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "source_property_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "target_property_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "link_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(customerinsights.UpdateAlways),
                                string(customerinsights.CopyIfNull),
                            }, false),
                            Default: string(customerinsights.UpdateAlways),
                        },
                    },
                },
            },

            "operation_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(customerinsights.Upsert),
                    string(customerinsights.Delete),
                }, false),
                Default: string(customerinsights.Upsert),
            },

            "reference_only": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmLinkCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).linksClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    hubName := d.Get("hub_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, hubName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_link", *existing.ID)
        }
    }

    description := d.Get("description").(map[string]interface{})
    displayName := d.Get("display_name").(map[string]interface{})
    mappings := d.Get("mappings").([]interface{})
    operationType := d.Get("operation_type").(string)
    participantPropertyReferences := d.Get("participant_property_references").([]interface{})
    referenceOnly := d.Get("reference_only").(bool)
    sourceEntityType := d.Get("source_entity_type").(string)
    sourceEntityTypeName := d.Get("source_entity_type_name").(string)
    targetEntityType := d.Get("target_entity_type").(string)
    targetEntityTypeName := d.Get("target_entity_type_name").(string)

    parameters := customerinsights.LinkResourceFormat{
        LinkDefinition: &customerinsights.LinkDefinition{
            Description: utils.ExpandKeyValuePairs(description),
            DisplayName: utils.ExpandKeyValuePairs(displayName),
            Mappings: expandArmLinkTypePropertiesMapping(mappings),
            OperationType: customerinsights.InstanceOperationType(operationType),
            ParticipantPropertyReferences: expandArmLinkParticipantPropertyReference(participantPropertyReferences),
            ReferenceOnly: utils.Bool(referenceOnly),
            SourceEntityType: customerinsights.EntityType(sourceEntityType),
            SourceEntityTypeName: utils.String(sourceEntityTypeName),
            TargetEntityType: customerinsights.EntityType(targetEntityType),
            TargetEntityTypeName: utils.String(targetEntityTypeName),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, hubName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, hubName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Link %q (Hub Name %q / Resource Group %q) ID", name, hubName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmLinkRead(d, meta)
}

func resourceArmLinkRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).linksClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    name := id.Path["links"]

    resp, err := client.Get(ctx, resourceGroup, hubName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Link %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("hub_name", hubName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmLinkDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).linksClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    name := id.Path["links"]

    if _, err := client.Delete(ctx, resourceGroup, hubName, name); err != nil {
        return fmt.Errorf("Error deleting Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }

    return nil
}

func expandArmLinkTypePropertiesMapping(input []interface{}) *[]customerinsights.TypePropertiesMapping {
    results := make([]customerinsights.TypePropertiesMapping, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        sourcePropertyName := v["source_property_name"].(string)
        targetPropertyName := v["target_property_name"].(string)
        linkType := v["link_type"].(string)

        result := customerinsights.TypePropertiesMapping{
            LinkType: customerinsights.LinkTypes(linkType),
            SourcePropertyName: utils.String(sourcePropertyName),
            TargetPropertyName: utils.String(targetPropertyName),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmLinkParticipantPropertyReference(input []interface{}) *[]customerinsights.ParticipantPropertyReference {
    results := make([]customerinsights.ParticipantPropertyReference, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        sourcePropertyName := v["source_property_name"].(string)
        targetPropertyName := v["target_property_name"].(string)

        result := customerinsights.ParticipantPropertyReference{
            SourcePropertyName: utils.String(sourcePropertyName),
            TargetPropertyName: utils.String(targetPropertyName),
        }

        results = append(results, result)
    }
    return &results
}
