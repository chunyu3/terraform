// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmConnector() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmConnectorCreate,
        Read: resourceArmConnectorRead,
        Update: resourceArmConnectorUpdate,
        Delete: resourceArmConnectorDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "credentials_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "credentials_secret": {
                Type: schema.TypeString,
                Optional: true,
            },

            "display_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "report_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "status": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(costmanagement.active),
                    string(costmanagement.error),
                    string(costmanagement.suspended),
                }, false),
                Default: string(costmanagement.active),
            },

            "collection": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "error": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "error_code": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "error_message": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "error_start_time": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validateRFC3339Date,
                                    },
                                },
                            },
                        },
                        "last_run": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "last_updated": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "source_last_updated": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                    },
                },
            },

            "created_on": {
                Type: schema.TypeString,
                Computed: true,
            },

            "modified_on": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provider_account_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmConnectorCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectorClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Connector %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_connector", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    credentialsKey := d.Get("credentials_key").(string)
    credentialsSecret := d.Get("credentials_secret").(string)
    displayName := d.Get("display_name").(string)
    kind := d.Get("kind").(string)
    reportId := d.Get("report_id").(string)
    status := d.Get("status").(string)
    t := d.Get("tags").(map[string]interface{})

    connector := costmanagement.ConnectorDefinition{
        Kind: utils.String(kind),
        Location: utils.String(location),
        ConnectorProperties: &costmanagement.ConnectorProperties{
            CredentialsKey: utils.String(credentialsKey),
            CredentialsSecret: utils.String(credentialsSecret),
            DisplayName: utils.String(displayName),
            ReportID: utils.String(reportId),
            Status: costmanagement.ConnectorStatus(status),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, connector); err != nil {
        return fmt.Errorf("Error creating Connector %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Connector %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Connector %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmConnectorRead(d, meta)
}

func resourceArmConnectorRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectorClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    name := id.Path["connectors"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Connector %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Connector %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if connectorProperties := resp.ConnectorProperties; connectorProperties != nil {
        if err := d.Set("collection", flattenArmConnectorConnectorCollectionInfo(connectorProperties.Collection)); err != nil {
            return fmt.Errorf("Error setting `collection`: %+v", err)
        }
        d.Set("created_on", (connectorProperties.CreatedOn).String())
        d.Set("credentials_key", connectorProperties.CredentialsKey)
        d.Set("credentials_secret", connectorProperties.CredentialsSecret)
        d.Set("display_name", connectorProperties.DisplayName)
        d.Set("modified_on", (connectorProperties.ModifiedOn).String())
        d.Set("provider_account_id", connectorProperties.ProviderAccountID)
        d.Set("report_id", connectorProperties.ReportID)
        d.Set("status", string(connectorProperties.Status))
    }
    d.Set("kind", resp.Kind)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmConnectorUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectorClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    credentialsKey := d.Get("credentials_key").(string)
    credentialsSecret := d.Get("credentials_secret").(string)
    displayName := d.Get("display_name").(string)
    kind := d.Get("kind").(string)
    reportId := d.Get("report_id").(string)
    status := d.Get("status").(string)
    t := d.Get("tags").(map[string]interface{})

    connector := costmanagement.ConnectorDefinition{
        Kind: utils.String(kind),
        Location: utils.String(location),
        ConnectorProperties: &costmanagement.ConnectorProperties{
            CredentialsKey: utils.String(credentialsKey),
            CredentialsSecret: utils.String(credentialsSecret),
            DisplayName: utils.String(displayName),
            ReportID: utils.String(reportId),
            Status: costmanagement.ConnectorStatus(status),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, connector); err != nil {
        return fmt.Errorf("Error updating Connector %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmConnectorRead(d, meta)
}

func resourceArmConnectorDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectorClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    name := id.Path["connectors"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Connector %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}


func flattenArmConnectorConnectorCollectionInfo(input *costmanagement.ConnectorCollectionInfo) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})


    return []interface{}{result}
}
