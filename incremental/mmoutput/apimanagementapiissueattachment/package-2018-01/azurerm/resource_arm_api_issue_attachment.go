// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmApiIssueAttachment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmApiIssueAttachmentCreateUpdate,
        Read: resourceArmApiIssueAttachmentRead,
        Update: resourceArmApiIssueAttachmentCreateUpdate,
        Delete: resourceArmApiIssueAttachmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "api_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "attachment_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "content": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "content_format": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "issue_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "title": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmApiIssueAttachmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiIssueAttachmentClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    apiID := d.Get("api_id").(string)
    attachmentID := d.Get("attachment_id").(string)
    issueID := d.Get("issue_id").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, apiID, issueID, attachmentID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Api Issue Attachment %q (Attachment %q / Issue %q / Api %q / Resource Group %q): %+v", name, attachmentID, issueID, apiID, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_api_issue_attachment", *existing.ID)
        }
    }

    content := d.Get("content").(string)
    contentFormat := d.Get("content_format").(string)
    title := d.Get("title").(string)

    parameters := apimanagement.IssueAttachmentContract{
        IssueAttachmentContractProperties: &apimanagement.IssueAttachmentContractProperties{
            Content: utils.String(content),
            ContentFormat: utils.String(contentFormat),
            Title: utils.String(title),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, apiID, issueID, attachmentID, parameters); err != nil {
        return fmt.Errorf("Error creating Api Issue Attachment %q (Attachment %q / Issue %q / Api %q / Resource Group %q): %+v", name, attachmentID, issueID, apiID, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, apiID, issueID, attachmentID)
    if err != nil {
        return fmt.Errorf("Error retrieving Api Issue Attachment %q (Attachment %q / Issue %q / Api %q / Resource Group %q): %+v", name, attachmentID, issueID, apiID, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Api Issue Attachment %q (Attachment %q / Issue %q / Api %q / Resource Group %q) ID", name, attachmentID, issueID, apiID, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmApiIssueAttachmentRead(d, meta)
}

func resourceArmApiIssueAttachmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiIssueAttachmentClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    apiID := id.Path["apis"]
    issueID := id.Path["issues"]
    attachmentID := id.Path["attachments"]

    resp, err := client.Get(ctx, resourceGroup, name, apiID, issueID, attachmentID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Api Issue Attachment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Api Issue Attachment %q (Attachment %q / Issue %q / Api %q / Resource Group %q): %+v", name, attachmentID, issueID, apiID, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("api_id", apiID)
    d.Set("attachment_id", attachmentID)
    if issueAttachmentContractProperties := resp.IssueAttachmentContractProperties; issueAttachmentContractProperties != nil {
        d.Set("content", issueAttachmentContractProperties.Content)
        d.Set("content_format", issueAttachmentContractProperties.ContentFormat)
        d.Set("title", issueAttachmentContractProperties.Title)
    }
    d.Set("issue_id", issueID)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmApiIssueAttachmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiIssueAttachmentClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    apiID := id.Path["apis"]
    issueID := id.Path["issues"]
    attachmentID := id.Path["attachments"]

    if _, err := client.Delete(ctx, resourceGroup, name, apiID, issueID, attachmentID); err != nil {
        return fmt.Errorf("Error deleting Api Issue Attachment %q (Attachment %q / Issue %q / Api %q / Resource Group %q): %+v", name, attachmentID, issueID, apiID, resourceGroup, err)
    }

    return nil
}
