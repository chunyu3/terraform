// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAvailabilityGroupListener() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAvailabilityGroupListenerCreateUpdate,
        Read: resourceArmAvailabilityGroupListenerRead,
        Update: resourceArmAvailabilityGroupListenerCreateUpdate,
        Delete: resourceArmAvailabilityGroupListenerDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "sql_virtual_machine_group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "availability_group_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "create_default_availability_group_if_not_exist": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "load_balancer_configurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "load_balancer_resource_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_address": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "ip_address": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "subnet_resource_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "probe_port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "public_ip_address_resource_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "sql_virtual_machine_instances": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                    },
                },
            },

            "port": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmAvailabilityGroupListenerCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).availabilityGroupListenersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    sQLVirtualMachineGroupName := d.Get("sql_virtual_machine_group_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, sQLVirtualMachineGroupName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Availability Group Listener %q (Sql Virtual Machine Group Name %q / Resource Group %q): %+v", name, sQLVirtualMachineGroupName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_availability_group_listener", *existing.ID)
        }
    }

    availabilityGroupName := d.Get("availability_group_name").(string)
    createDefaultAvailabilityGroupIfNotExist := d.Get("create_default_availability_group_if_not_exist").(bool)
    loadBalancerConfigurations := d.Get("load_balancer_configurations").([]interface{})
    port := d.Get("port").(int)

    parameters := sqlvirtualmachine.AvailabilityGroupListener{
        AvailabilityGroupListenerProperties: &sqlvirtualmachine.AvailabilityGroupListenerProperties{
            AvailabilityGroupName: utils.String(availabilityGroupName),
            CreateDefaultAvailabilityGroupIfNotExist: utils.Bool(createDefaultAvailabilityGroupIfNotExist),
            LoadBalancerConfigurations: expandArmAvailabilityGroupListenerLoadBalancerConfiguration(loadBalancerConfigurations),
            Port: utils.Int32(int32(port)),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, sQLVirtualMachineGroupName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Availability Group Listener %q (Sql Virtual Machine Group Name %q / Resource Group %q): %+v", name, sQLVirtualMachineGroupName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Availability Group Listener %q (Sql Virtual Machine Group Name %q / Resource Group %q): %+v", name, sQLVirtualMachineGroupName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, sQLVirtualMachineGroupName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Availability Group Listener %q (Sql Virtual Machine Group Name %q / Resource Group %q): %+v", name, sQLVirtualMachineGroupName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Availability Group Listener %q (Sql Virtual Machine Group Name %q / Resource Group %q) ID", name, sQLVirtualMachineGroupName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAvailabilityGroupListenerRead(d, meta)
}

func resourceArmAvailabilityGroupListenerRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).availabilityGroupListenersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    sQLVirtualMachineGroupName := id.Path["sqlVirtualMachineGroups"]
    name := id.Path["availabilityGroupListeners"]

    resp, err := client.Get(ctx, resourceGroup, sQLVirtualMachineGroupName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Availability Group Listener %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Availability Group Listener %q (Sql Virtual Machine Group Name %q / Resource Group %q): %+v", name, sQLVirtualMachineGroupName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if availabilityGroupListenerProperties := resp.AvailabilityGroupListenerProperties; availabilityGroupListenerProperties != nil {
        d.Set("availability_group_name", availabilityGroupListenerProperties.AvailabilityGroupName)
        d.Set("create_default_availability_group_if_not_exist", availabilityGroupListenerProperties.CreateDefaultAvailabilityGroupIfNotExist)
        if err := d.Set("load_balancer_configurations", flattenArmAvailabilityGroupListenerLoadBalancerConfiguration(availabilityGroupListenerProperties.LoadBalancerConfigurations)); err != nil {
            return fmt.Errorf("Error setting `load_balancer_configurations`: %+v", err)
        }
        d.Set("port", int(*availabilityGroupListenerProperties.Port))
        d.Set("provisioning_state", availabilityGroupListenerProperties.ProvisioningState)
    }
    d.Set("sql_virtual_machine_group_name", sQLVirtualMachineGroupName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmAvailabilityGroupListenerDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).availabilityGroupListenersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    sQLVirtualMachineGroupName := id.Path["sqlVirtualMachineGroups"]
    name := id.Path["availabilityGroupListeners"]

    future, err := client.Delete(ctx, resourceGroup, sQLVirtualMachineGroupName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Availability Group Listener %q (Sql Virtual Machine Group Name %q / Resource Group %q): %+v", name, sQLVirtualMachineGroupName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Availability Group Listener %q (Sql Virtual Machine Group Name %q / Resource Group %q): %+v", name, sQLVirtualMachineGroupName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmAvailabilityGroupListenerLoadBalancerConfiguration(input []interface{}) *[]sqlvirtualmachine.LoadBalancerConfiguration {
    results := make([]sqlvirtualmachine.LoadBalancerConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        privateIpAddress := v["private_ip_address"].([]interface{})
        publicIpAddressResourceId := v["public_ip_address_resource_id"].(string)
        loadBalancerResourceId := v["load_balancer_resource_id"].(string)
        probePort := v["probe_port"].(int)
        sqlVirtualMachineInstances := v["sql_virtual_machine_instances"].([]interface{})

        result := sqlvirtualmachine.LoadBalancerConfiguration{
            LoadBalancerResourceID: utils.String(loadBalancerResourceId),
            PrivateIPAddress: expandArmAvailabilityGroupListenerPrivateIPAddress(privateIpAddress),
            ProbePort: utils.Int32(int32(probePort)),
            PublicIPAddressResourceID: utils.String(publicIpAddressResourceId),
            SQLVirtualMachineInstances: utils.ExpandStringSlice(sqlVirtualMachineInstances),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmAvailabilityGroupListenerPrivateIPAddress(input []interface{}) *sqlvirtualmachine.PrivateIPAddress {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    ipAddress := v["ip_address"].(string)
    subnetResourceId := v["subnet_resource_id"].(string)

    result := sqlvirtualmachine.PrivateIPAddress{
        IPAddress: utils.String(ipAddress),
        SubnetResourceID: utils.String(subnetResourceId),
    }
    return &result
}


func flattenArmAvailabilityGroupListenerLoadBalancerConfiguration(input *[]sqlvirtualmachine.LoadBalancerConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if loadBalancerResourceId := item.LoadBalancerResourceID; loadBalancerResourceId != nil {
            v["load_balancer_resource_id"] = *loadBalancerResourceId
        }
        v["private_ip_address"] = flattenArmAvailabilityGroupListenerPrivateIPAddress(item.PrivateIPAddress)
        if probePort := item.ProbePort; probePort != nil {
            v["probe_port"] = int(*probePort)
        }
        if publicIpAddressResourceId := item.PublicIPAddressResourceID; publicIpAddressResourceId != nil {
            v["public_ip_address_resource_id"] = *publicIpAddressResourceId
        }
        v["sql_virtual_machine_instances"] = utils.FlattenStringSlice(item.SQLVirtualMachineInstances)

        results = append(results, v)
    }

    return results
}

func flattenArmAvailabilityGroupListenerPrivateIPAddress(input *sqlvirtualmachine.PrivateIPAddress) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if ipAddress := input.IPAddress; ipAddress != nil {
        result["ip_address"] = *ipAddress
    }
    if subnetResourceId := input.SubnetResourceID; subnetResourceId != nil {
        result["subnet_resource_id"] = *subnetResourceId
    }

    return []interface{}{result}
}
