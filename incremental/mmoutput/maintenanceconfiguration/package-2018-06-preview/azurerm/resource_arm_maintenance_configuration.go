// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmMaintenanceConfiguration() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmMaintenanceConfigurationCreateUpdate,
        Read: resourceArmMaintenanceConfigurationRead,
        Update: resourceArmMaintenanceConfigurationCreateUpdate,
        Delete: resourceArmMaintenanceConfigurationDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "extension_properties": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "maintenance_scope": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(maintenance.All),
                    string(maintenance.Host),
                    string(maintenance.Resource),
                    string(maintenance.InResource),
                }, false),
                Default: string(maintenance.All),
            },

            "namespace": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmMaintenanceConfigurationCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).maintenanceConfigurationsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Maintenance Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_maintenance_configuration", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    extensionProperties := d.Get("extension_properties").(map[string]interface{})
    maintenanceScope := d.Get("maintenance_scope").(string)
    namespace := d.Get("namespace").(string)
    t := d.Get("tags").(map[string]interface{})

    configuration := maintenance.Configuration{
        Location: utils.String(location),
        ConfigurationProperties: &maintenance.ConfigurationProperties{
            ExtensionProperties: utils.ExpandKeyValuePairs(extensionProperties),
            MaintenanceScope: maintenance.Scope(maintenanceScope),
            Namespace: utils.String(namespace),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, configuration); err != nil {
        return fmt.Errorf("Error creating Maintenance Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Maintenance Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Maintenance Configuration %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmMaintenanceConfigurationRead(d, meta)
}

func resourceArmMaintenanceConfigurationRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).maintenanceConfigurationsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    name := id.Path["maintenanceConfigurations"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Maintenance Configuration %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Maintenance Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if configurationProperties := resp.ConfigurationProperties; configurationProperties != nil {
        d.Set("extension_properties", utils.FlattenKeyValuePairs(configurationProperties.ExtensionProperties))
        d.Set("maintenance_scope", string(configurationProperties.MaintenanceScope))
        d.Set("namespace", configurationProperties.Namespace)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmMaintenanceConfigurationDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).maintenanceConfigurationsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    name := id.Path["maintenanceConfigurations"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Maintenance Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}
