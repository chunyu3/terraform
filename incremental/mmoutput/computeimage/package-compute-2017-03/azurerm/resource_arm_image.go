// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmImage() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmImageCreateUpdate,
        Read: resourceArmImageRead,
        Update: resourceArmImageCreateUpdate,
        Delete: resourceArmImageDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "source_virtual_machine": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "storage_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "os_disk": {
                            Type: schema.TypeList,
                            Required: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "os_state": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.Generalized),
                                            string(compute.Specialized),
                                        }, false),
                                    },
                                    "os_type": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.Windows),
                                            string(compute.Linux),
                                        }, false),
                                    },
                                    "blob_uri": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "caching": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.None),
                                            string(compute.ReadOnly),
                                            string(compute.ReadWrite),
                                        }, false),
                                        Default: string(compute.None),
                                    },
                                    "disk_size_gb": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "managed_disk": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "id": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "snapshot": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "id": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "storage_account_type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.Standard_LRS),
                                            string(compute.Premium_LRS),
                                        }, false),
                                        Default: string(compute.Standard_LRS),
                                    },
                                },
                            },
                        },
                        "data_disks": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "lun": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "blob_uri": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "caching": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.None),
                                            string(compute.ReadOnly),
                                            string(compute.ReadWrite),
                                        }, false),
                                        Default: string(compute.None),
                                    },
                                    "disk_size_gb": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "managed_disk": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "id": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "snapshot": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "id": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "storage_account_type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.Standard_LRS),
                                            string(compute.Premium_LRS),
                                        }, false),
                                        Default: string(compute.Standard_LRS),
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmImageCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).imagesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Image %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_image", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    sourceVirtualMachine := d.Get("source_virtual_machine").([]interface{})
    storageProfile := d.Get("storage_profile").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := compute.Image{
        Location: utils.String(location),
        ImageProperties: &compute.ImageProperties{
            SourceVirtualMachine: expandArmImageSubResource(sourceVirtualMachine),
            StorageProfile: expandArmImageImageStorageProfile(storageProfile),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Image %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Image %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Image %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Image %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmImageRead(d, meta)
}

func resourceArmImageRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).imagesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["images"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Image %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Image %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmImageDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).imagesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["images"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Image %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Image %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmImageSubResource(input []interface{}) *compute.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := compute.SubResource{
        ID: utils.String(id),
    }
    return &result
}

func expandArmImageImageStorageProfile(input []interface{}) *compute.ImageStorageProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    osDisk := v["os_disk"].([]interface{})
    dataDisks := v["data_disks"].([]interface{})

    result := compute.ImageStorageProfile{
        DataDisks: expandArmImageImageDataDisk(dataDisks),
        OsDisk: expandArmImageImageOSDisk(osDisk),
    }
    return &result
}

func expandArmImageImageDataDisk(input []interface{}) *[]compute.ImageDataDisk {
    results := make([]compute.ImageDataDisk, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        lun := v["lun"].(int)
        snapshot := v["snapshot"].([]interface{})
        managedDisk := v["managed_disk"].([]interface{})
        blobUri := v["blob_uri"].(string)
        caching := v["caching"].(string)
        diskSizeGb := v["disk_size_gb"].(int)
        storageAccountType := v["storage_account_type"].(string)

        result := compute.ImageDataDisk{
            BlobURI: utils.String(blobUri),
            Caching: compute.CachingTypes(caching),
            DiskSizeGB: utils.Int32(int32(diskSizeGb)),
            Lun: utils.Int32(int32(lun)),
            ManagedDisk: expandArmImageSubResource(managedDisk),
            Snapshot: expandArmImageSubResource(snapshot),
            StorageAccountType: compute.StorageAccountTypes(storageAccountType),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmImageImageOSDisk(input []interface{}) *compute.ImageOSDisk {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    osType := v["os_type"].(string)
    osState := v["os_state"].(string)
    snapshot := v["snapshot"].([]interface{})
    managedDisk := v["managed_disk"].([]interface{})
    blobUri := v["blob_uri"].(string)
    caching := v["caching"].(string)
    diskSizeGb := v["disk_size_gb"].(int)
    storageAccountType := v["storage_account_type"].(string)

    result := compute.ImageOSDisk{
        BlobURI: utils.String(blobUri),
        Caching: compute.CachingTypes(caching),
        DiskSizeGB: utils.Int32(int32(diskSizeGb)),
        ManagedDisk: expandArmImageSubResource(managedDisk),
        OsState: compute.OperatingSystemStateTypes(osState),
        OsType: compute.OperatingSystemTypes(osType),
        Snapshot: expandArmImageSubResource(snapshot),
        StorageAccountType: compute.StorageAccountTypes(storageAccountType),
    }
    return &result
}
