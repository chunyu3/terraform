// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAssessment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAssessmentCreateUpdate,
        Read: resourceArmAssessmentRead,
        Update: resourceArmAssessmentCreateUpdate,
        Delete: resourceArmAssessmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "azure_hybrid_use_benefit": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.Unknown),
                    string(azuremigrate.Yes),
                    string(azuremigrate.No),
                }, false),
            },

            "azure_location": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.Unknown),
                    string(azuremigrate.EastAsia),
                    string(azuremigrate.SoutheastAsia),
                    string(azuremigrate.AustraliaEast),
                    string(azuremigrate.AustraliaSoutheast),
                    string(azuremigrate.BrazilSouth),
                    string(azuremigrate.CanadaCentral),
                    string(azuremigrate.CanadaEast),
                    string(azuremigrate.WestEurope),
                    string(azuremigrate.NorthEurope),
                    string(azuremigrate.CentralIndia),
                    string(azuremigrate.SouthIndia),
                    string(azuremigrate.WestIndia),
                    string(azuremigrate.JapanEast),
                    string(azuremigrate.JapanWest),
                    string(azuremigrate.KoreaCentral),
                    string(azuremigrate.KoreaSouth),
                    string(azuremigrate.UkWest),
                    string(azuremigrate.UkSouth),
                    string(azuremigrate.NorthCentralUs),
                    string(azuremigrate.EastUs),
                    string(azuremigrate.WestUs2),
                    string(azuremigrate.SouthCentralUs),
                    string(azuremigrate.CentralUs),
                    string(azuremigrate.EastUs2),
                    string(azuremigrate.WestUs),
                    string(azuremigrate.WestCentralUs),
                    string(azuremigrate.GermanyCentral),
                    string(azuremigrate.GermanyNortheast),
                    string(azuremigrate.ChinaNorth),
                    string(azuremigrate.ChinaEast),
                }, false),
            },

            "azure_offer_code": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.Unknown),
                    string(azuremigrate.MSAZR0003P),
                    string(azuremigrate.MSAZR0044P),
                    string(azuremigrate.MSAZR0059P),
                    string(azuremigrate.MSAZR0060P),
                    string(azuremigrate.MSAZR0062P),
                    string(azuremigrate.MSAZR0063P),
                    string(azuremigrate.MSAZR0064P),
                    string(azuremigrate.MSAZR0029P),
                    string(azuremigrate.MSAZR0022P),
                    string(azuremigrate.MSAZR0023P),
                    string(azuremigrate.MSAZR0148P),
                    string(azuremigrate.MSAZR0025P),
                    string(azuremigrate.MSAZR0036P),
                    string(azuremigrate.MSAZR0120P),
                    string(azuremigrate.MSAZR0121P),
                    string(azuremigrate.MSAZR0122P),
                    string(azuremigrate.MSAZR0123P),
                    string(azuremigrate.MSAZR0124P),
                    string(azuremigrate.MSAZR0125P),
                    string(azuremigrate.MSAZR0126P),
                    string(azuremigrate.MSAZR0127P),
                    string(azuremigrate.MSAZR0128P),
                    string(azuremigrate.MSAZR0129P),
                    string(azuremigrate.MSAZR0130P),
                    string(azuremigrate.MSAZR0111P),
                    string(azuremigrate.MSAZR0144P),
                    string(azuremigrate.MSAZR0149P),
                    string(azuremigrate.MSMCAZR0044P),
                    string(azuremigrate.MSMCAZR0059P),
                    string(azuremigrate.MSMCAZR0060P),
                    string(azuremigrate.MSMCAZR0063P),
                    string(azuremigrate.MSMCAZR0120P),
                    string(azuremigrate.MSMCAZR0121P),
                    string(azuremigrate.MSMCAZR0125P),
                    string(azuremigrate.MSMCAZR0128P),
                    string(azuremigrate.MSAZRDE0003P),
                    string(azuremigrate.MSAZRDE0044P),
                }, false),
            },

            "azure_pricing_tier": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.Standard),
                    string(azuremigrate.Basic),
                }, false),
            },

            "azure_storage_redundancy": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.Unknown),
                    string(azuremigrate.LocallyRedundant),
                    string(azuremigrate.ZoneRedundant),
                    string(azuremigrate.GeoRedundant),
                    string(azuremigrate.ReadAccessGeoRedundant),
                }, false),
            },

            "currency": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.Unknown),
                    string(azuremigrate.USD),
                    string(azuremigrate.DKK),
                    string(azuremigrate.CAD),
                    string(azuremigrate.IDR),
                    string(azuremigrate.JPY),
                    string(azuremigrate.KRW),
                    string(azuremigrate.NZD),
                    string(azuremigrate.NOK),
                    string(azuremigrate.RUB),
                    string(azuremigrate.SAR),
                    string(azuremigrate.ZAR),
                    string(azuremigrate.SEK),
                    string(azuremigrate.TRY),
                    string(azuremigrate.GBP),
                    string(azuremigrate.MXN),
                    string(azuremigrate.MYR),
                    string(azuremigrate.INR),
                    string(azuremigrate.HKD),
                    string(azuremigrate.BRL),
                    string(azuremigrate.TWD),
                    string(azuremigrate.EUR),
                    string(azuremigrate.CHF),
                    string(azuremigrate.ARS),
                    string(azuremigrate.AUD),
                    string(azuremigrate.CNY),
                }, false),
            },

            "discount_percentage": {
                Type: schema.TypeFloat,
                Required: true,
            },

            "group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "percentile": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.Percentile50),
                    string(azuremigrate.Percentile90),
                    string(azuremigrate.Percentile95),
                    string(azuremigrate.Percentile99),
                }, false),
            },

            "project_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "scaling_factor": {
                Type: schema.TypeFloat,
                Required: true,
            },

            "sizing_criterion": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.PerformanceBased),
                    string(azuremigrate.AsOnPremises),
                }, false),
            },

            "stage": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.InProgress),
                    string(azuremigrate.UnderReview),
                    string(azuremigrate.Approved),
                }, false),
            },

            "time_range": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.Day),
                    string(azuremigrate.Week),
                    string(azuremigrate.Month),
                }, false),
            },

            "e_tag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "confidence_rating_in_percentage": {
                Type: schema.TypeFloat,
                Computed: true,
            },

            "created_timestamp": {
                Type: schema.TypeString,
                Computed: true,
            },

            "monthly_bandwidth_cost": {
                Type: schema.TypeFloat,
                Computed: true,
            },

            "monthly_compute_cost": {
                Type: schema.TypeFloat,
                Computed: true,
            },

            "monthly_storage_cost": {
                Type: schema.TypeFloat,
                Computed: true,
            },

            "number_of_machines": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "prices_timestamp": {
                Type: schema.TypeString,
                Computed: true,
            },

            "status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "updated_timestamp": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmAssessmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assessmentsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    groupName := d.Get("group_name").(string)
    projectName := d.Get("project_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, projectName, groupName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Assessment %q (Group Name %q / Project Name %q / Resource Group %q): %+v", name, groupName, projectName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_assessment", *existing.ID)
        }
    }

    azureHybridUseBenefit := d.Get("azure_hybrid_use_benefit").(string)
    azureLocation := d.Get("azure_location").(string)
    azureOfferCode := d.Get("azure_offer_code").(string)
    azurePricingTier := d.Get("azure_pricing_tier").(string)
    azureStorageRedundancy := d.Get("azure_storage_redundancy").(string)
    currency := d.Get("currency").(string)
    discountPercentage := d.Get("discount_percentage").(float64)
    eTag := d.Get("e_tag").(string)
    percentile := d.Get("percentile").(string)
    scalingFactor := d.Get("scaling_factor").(float64)
    sizingCriterion := d.Get("sizing_criterion").(string)
    stage := d.Get("stage").(string)
    timeRange := d.Get("time_range").(string)

    assessment := azuremigrate.Assessment{
        ETag: utils.String(eTag),
        AssessmentProperties: &azuremigrate.AssessmentProperties{
            AzureHybridUseBenefit: azuremigrate.AzureHybridUseBenefit(azureHybridUseBenefit),
            AzureLocation: azuremigrate.AzureLocation(azureLocation),
            AzureOfferCode: azuremigrate.AzureOfferCode(azureOfferCode),
            AzurePricingTier: azuremigrate.AzurePricingTier(azurePricingTier),
            AzureStorageRedundancy: azuremigrate.AzureStorageRedundancy(azureStorageRedundancy),
            Currency: azuremigrate.Currency(currency),
            DiscountPercentage: utils.Float(discountPercentage),
            Percentile: azuremigrate.Percentile(percentile),
            ScalingFactor: utils.Float(scalingFactor),
            SizingCriterion: azuremigrate.AssessmentSizingCriterion(sizingCriterion),
            Stage: azuremigrate.AssessmentStage(stage),
            TimeRange: azuremigrate.TimeRange(timeRange),
        },
    }


    if _, err := client.Create(ctx, resourceGroup, projectName, groupName, name, assessment); err != nil {
        return fmt.Errorf("Error creating Assessment %q (Group Name %q / Project Name %q / Resource Group %q): %+v", name, groupName, projectName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, projectName, groupName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Assessment %q (Group Name %q / Project Name %q / Resource Group %q): %+v", name, groupName, projectName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Assessment %q (Group Name %q / Project Name %q / Resource Group %q) ID", name, groupName, projectName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAssessmentRead(d, meta)
}

func resourceArmAssessmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assessmentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    projectName := id.Path["projects"]
    groupName := id.Path["groups"]
    name := id.Path["assessments"]

    resp, err := client.Get(ctx, resourceGroup, projectName, groupName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Assessment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Assessment %q (Group Name %q / Project Name %q / Resource Group %q): %+v", name, groupName, projectName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if assessmentProperties := resp.AssessmentProperties; assessmentProperties != nil {
        d.Set("azure_hybrid_use_benefit", string(assessmentProperties.AzureHybridUseBenefit))
        d.Set("azure_location", string(assessmentProperties.AzureLocation))
        d.Set("azure_offer_code", string(assessmentProperties.AzureOfferCode))
        d.Set("azure_pricing_tier", string(assessmentProperties.AzurePricingTier))
        d.Set("azure_storage_redundancy", string(assessmentProperties.AzureStorageRedundancy))
        d.Set("confidence_rating_in_percentage", assessmentProperties.ConfidenceRatingInPercentage)
        d.Set("created_timestamp", (assessmentProperties.CreatedTimestamp).String())
        d.Set("currency", string(assessmentProperties.Currency))
        d.Set("discount_percentage", assessmentProperties.DiscountPercentage)
        d.Set("monthly_bandwidth_cost", assessmentProperties.MonthlyBandwidthCost)
        d.Set("monthly_compute_cost", assessmentProperties.MonthlyComputeCost)
        d.Set("monthly_storage_cost", assessmentProperties.MonthlyStorageCost)
        d.Set("number_of_machines", int(*assessmentProperties.NumberOfMachines))
        d.Set("percentile", string(assessmentProperties.Percentile))
        d.Set("prices_timestamp", (assessmentProperties.PricesTimestamp).String())
        d.Set("scaling_factor", assessmentProperties.ScalingFactor)
        d.Set("sizing_criterion", string(assessmentProperties.SizingCriterion))
        d.Set("stage", string(assessmentProperties.Stage))
        d.Set("status", string(assessmentProperties.Status))
        d.Set("time_range", string(assessmentProperties.TimeRange))
        d.Set("updated_timestamp", (assessmentProperties.UpdatedTimestamp).String())
    }
    d.Set("e_tag", resp.ETag)
    d.Set("group_name", groupName)
    d.Set("project_name", projectName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmAssessmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assessmentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    projectName := id.Path["projects"]
    groupName := id.Path["groups"]
    name := id.Path["assessments"]

    if _, err := client.Delete(ctx, resourceGroup, projectName, groupName, name); err != nil {
        return fmt.Errorf("Error deleting Assessment %q (Group Name %q / Project Name %q / Resource Group %q): %+v", name, groupName, projectName, resourceGroup, err)
    }

    return nil
}
