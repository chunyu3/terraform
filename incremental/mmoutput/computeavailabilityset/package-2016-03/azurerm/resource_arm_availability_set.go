// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAvailabilitySet() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAvailabilitySetCreateUpdate,
        Read: resourceArmAvailabilitySetRead,
        Update: resourceArmAvailabilitySetCreateUpdate,
        Delete: resourceArmAvailabilitySetDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "availability_set_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "platform_fault_domain_count": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "platform_update_domain_count": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "tags": tags.Schema(),

            "virtual_machines": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "statuses": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "code": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "display_status": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "level": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "message": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "time": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmAvailabilitySetCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).availabilitySetsClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("availability_set_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Availability Set (Availability Set Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_availability_set", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    platformFaultDomainCount := d.Get("platform_fault_domain_count").(int)
    platformUpdateDomainCount := d.Get("platform_update_domain_count").(int)
    virtualMachines := d.Get("virtual_machines").([]interface{})
    tags := d.Get("tags").(map[string]interface{})

    parameters := compute.AvailabilitySet{
        Location: utils.String(location),
        AvailabilitySetProperties: &compute.AvailabilitySetProperties{
            PlatformFaultDomainCount: utils.Int32(int32(platformFaultDomainCount)),
            PlatformUpdateDomainCount: utils.Int32(int32(platformUpdateDomainCount)),
            VirtualMachines: expandArmAvailabilitySetSubResource(virtualMachines),
        },
        Tags: tags.Expand(tags),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroupName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Availability Set (Availability Set Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Availability Set (Availability Set Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Availability Set (Availability Set Name %q / Resource Group %q) ID", name, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmAvailabilitySetRead(d, meta)
}

func resourceArmAvailabilitySetRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).availabilitySetsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["availabilitySets"]

    resp, err := client.Get(ctx, resourceGroupName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Availability Set %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Availability Set (Availability Set Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("availability_set_name", name)
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    if availabilitySetProperties := resp.AvailabilitySetProperties; availabilitySetProperties != nil {
        d.Set("platform_fault_domain_count", int(*availabilitySetProperties.PlatformFaultDomainCount))
        d.Set("platform_update_domain_count", int(*availabilitySetProperties.PlatformUpdateDomainCount))
        if err := d.Set("statuses", flattenArmAvailabilitySetInstanceViewStatus(availabilitySetProperties.Statuses)); err != nil {
            return fmt.Errorf("Error setting `statuses`: %+v", err)
        }
        if err := d.Set("virtual_machines", flattenArmAvailabilitySetSubResource(availabilitySetProperties.VirtualMachines)); err != nil {
            return fmt.Errorf("Error setting `virtual_machines`: %+v", err)
        }
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmAvailabilitySetDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).availabilitySetsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["availabilitySets"]

    if _, err := client.Delete(ctx, resourceGroupName, name); err != nil {
        return fmt.Errorf("Error deleting Availability Set (Availability Set Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }

    return nil
}

func expandArmAvailabilitySetSubResource(input []interface{}) *[]compute.SubResource {
    results := make([]compute.SubResource, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)

        result := compute.SubResource{
            ID: utils.String(iD),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmAvailabilitySetInstanceViewStatus(input *[]compute.InstanceViewStatus) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if code := item.Code; code != nil {
            v["code"] = *code
        }
        if displayStatus := item.DisplayStatus; displayStatus != nil {
            v["display_status"] = *displayStatus
        }
        v["level"] = string(item.Level)
        if message := item.Message; message != nil {
            v["message"] = *message
        }
        if time := item.Time; time != nil {
            v["time"] = (*time).String()
        }

        results = append(results, v)
    }

    return results
}

func flattenArmAvailabilitySetSubResource(input *[]compute.SubResource) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }

        results = append(results, v)
    }

    return results
}
