// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmUser() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmUserCreate,
        Read: resourceArmUserRead,
        Update: resourceArmUserUpdate,
        Delete: resourceArmUserDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "email": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "first_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "last_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "password": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "uid": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "note": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "state": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.Active),
                    string(apimanagement.Blocked),
                }, false),
                Default: string(apimanagement.Active),
            },

            "identities": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "provider": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "registration_date": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmUserCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).usersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    uid := d.Get("uid").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, uid)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing User %q (Uid %q / Resource Group %q): %+v", name, uid, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_user", *existing.ID)
        }
    }

    email := d.Get("email").(string)
    firstName := d.Get("first_name").(string)
    lastName := d.Get("last_name").(string)
    note := d.Get("note").(string)
    password := d.Get("password").(string)
    state := d.Get("state").(string)

    parameters := apimanagement.UserCreateParameters{
        Email: utils.String(email),
        FirstName: utils.String(firstName),
        LastName: utils.String(lastName),
        Note: utils.String(note),
        Password: utils.String(password),
        State: apimanagement.UserStateContract(state),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, uid, parameters); err != nil {
        return fmt.Errorf("Error creating User %q (Uid %q / Resource Group %q): %+v", name, uid, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, uid)
    if err != nil {
        return fmt.Errorf("Error retrieving User %q (Uid %q / Resource Group %q): %+v", name, uid, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read User %q (Uid %q / Resource Group %q) ID", name, uid, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmUserRead(d, meta)
}

func resourceArmUserRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).usersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    uid := id.Path["users"]

    resp, err := client.Get(ctx, resourceGroup, name, uid)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] User %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading User %q (Uid %q / Resource Group %q): %+v", name, uid, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    d.Set("email", resp.Email)
    d.Set("first_name", resp.FirstName)
    if err := d.Set("identities", flattenArmUserUserIdentityContract(resp.Identities)); err != nil {
        return fmt.Errorf("Error setting `identities`: %+v", err)
    }
    d.Set("last_name", resp.LastName)
    d.Set("note", resp.Note)
    d.Set("registration_date", (resp.RegistrationDate).String())
    d.Set("state", string(resp.State))
    d.Set("uid", uid)

    return nil
}

func resourceArmUserUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).usersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    email := d.Get("email").(string)
    firstName := d.Get("first_name").(string)
    lastName := d.Get("last_name").(string)
    note := d.Get("note").(string)
    password := d.Get("password").(string)
    state := d.Get("state").(string)
    uid := d.Get("uid").(string)

    parameters := apimanagement.UserCreateParameters{
        Email: utils.String(email),
        FirstName: utils.String(firstName),
        LastName: utils.String(lastName),
        Note: utils.String(note),
        Password: utils.String(password),
        State: apimanagement.UserStateContract(state),
    }


    if _, err := client.Update(ctx, resourceGroup, name, uid, parameters); err != nil {
        return fmt.Errorf("Error updating User %q (Uid %q / Resource Group %q): %+v", name, uid, resourceGroup, err)
    }

    return resourceArmUserRead(d, meta)
}

func resourceArmUserDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).usersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    uid := id.Path["users"]

    if _, err := client.Delete(ctx, resourceGroup, name, uid); err != nil {
        return fmt.Errorf("Error deleting User %q (Uid %q / Resource Group %q): %+v", name, uid, resourceGroup, err)
    }

    return nil
}


func flattenArmUserUserIdentityContract(input *[]apimanagement.UserIdentityContract) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}
