// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmTransform() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmTransformCreate,
        Read: resourceArmTransformRead,
        Update: resourceArmTransformUpdate,
        Delete: resourceArmTransformDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "outputs": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "on_error": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(mediaservices.StopProcessingJob),
                                string(mediaservices.ContinueJob),
                            }, false),
                            Default: string(mediaservices.StopProcessingJob),
                        },
                        "relative_priority": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(mediaservices.Low),
                                string(mediaservices.Normal),
                                string(mediaservices.High),
                            }, false),
                            Default: string(mediaservices.Low),
                        },
                    },
                },
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "created": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_modified": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmTransformCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).transformsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Transform %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_transform", *existing.ID)
        }
    }

    description := d.Get("description").(string)
    outputs := d.Get("outputs").([]interface{})

    parameters := mediaservices.Transform{
        TransformProperties: &mediaservices.TransformProperties{
            Description: utils.String(description),
            Outputs: expandArmTransformTransformOutput(outputs),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, accountName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Transform %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Transform %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Transform %q (Account Name %q / Resource Group %q) ID", name, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmTransformRead(d, meta)
}

func resourceArmTransformRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).transformsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaServices"]
    name := id.Path["transforms"]

    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Transform %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Transform %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("account_name", accountName)
    if transformProperties := resp.TransformProperties; transformProperties != nil {
        d.Set("created", (transformProperties.Created).String())
        d.Set("description", transformProperties.Description)
        d.Set("last_modified", (transformProperties.LastModified).String())
        if err := d.Set("outputs", flattenArmTransformTransformOutput(transformProperties.Outputs)); err != nil {
            return fmt.Errorf("Error setting `outputs`: %+v", err)
        }
    }
    d.Set("type", resp.Type)

    return nil
}

func resourceArmTransformUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).transformsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    description := d.Get("description").(string)
    outputs := d.Get("outputs").([]interface{})

    parameters := mediaservices.Transform{
        TransformProperties: &mediaservices.TransformProperties{
            Description: utils.String(description),
            Outputs: expandArmTransformTransformOutput(outputs),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, accountName, name, parameters); err != nil {
        return fmt.Errorf("Error updating Transform %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    return resourceArmTransformRead(d, meta)
}

func resourceArmTransformDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).transformsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaServices"]
    name := id.Path["transforms"]

    if _, err := client.Delete(ctx, resourceGroup, accountName, name); err != nil {
        return fmt.Errorf("Error deleting Transform %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    return nil
}

func expandArmTransformTransformOutput(input []interface{}) *[]mediaservices.TransformOutput {
    results := make([]mediaservices.TransformOutput, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        onError := v["on_error"].(string)
        relativePriority := v["relative_priority"].(string)

        result := mediaservices.TransformOutput{
            OnError: mediaservices.OnErrorType(onError),
            RelativePriority: mediaservices.Priority(relativePriority),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmTransformTransformOutput(input *[]mediaservices.TransformOutput) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["on_error"] = string(item.OnError)
        v["relative_priority"] = string(item.RelativePriority)

        results = append(results, v)
    }

    return results
}
