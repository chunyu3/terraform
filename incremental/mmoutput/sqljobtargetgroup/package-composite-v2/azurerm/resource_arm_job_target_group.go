// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmJobTargetGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmJobTargetGroupCreateUpdate,
        Read: resourceArmJobTargetGroupRead,
        Update: resourceArmJobTargetGroupCreateUpdate,
        Delete: resourceArmJobTargetGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "job_agent_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "members": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(sql.TargetGroup),
                                string(sql.SqlDatabase),
                                string(sql.SqlElasticPool),
                                string(sql.SqlShardMap),
                                string(sql.SqlServer),
                            }, false),
                        },
                        "database_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "elastic_pool_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "membership_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(sql.Include),
                                string(sql.Exclude),
                            }, false),
                            Default: string(sql.Include),
                        },
                        "refresh_credential": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "server_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "shard_map_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "server_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmJobTargetGroupCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jobTargetGroupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    jobAgentName := d.Get("job_agent_name").(string)
    serverName := d.Get("server_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serverName, jobAgentName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Job Target Group %q (Job Agent Name %q / Server Name %q / Resource Group %q): %+v", name, jobAgentName, serverName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_job_target_group", *existing.ID)
        }
    }

    members := d.Get("members").([]interface{})

    parameters := sql.JobTargetGroup{
        JobTargetGroupProperties: &sql.JobTargetGroupProperties{
            Members: expandArmJobTargetGroupJobTarget(members),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, serverName, jobAgentName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Job Target Group %q (Job Agent Name %q / Server Name %q / Resource Group %q): %+v", name, jobAgentName, serverName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serverName, jobAgentName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Job Target Group %q (Job Agent Name %q / Server Name %q / Resource Group %q): %+v", name, jobAgentName, serverName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Job Target Group %q (Job Agent Name %q / Server Name %q / Resource Group %q) ID", name, jobAgentName, serverName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmJobTargetGroupRead(d, meta)
}

func resourceArmJobTargetGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jobTargetGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    jobAgentName := id.Path["jobAgents"]
    name := id.Path["targetGroups"]

    resp, err := client.Get(ctx, resourceGroup, serverName, jobAgentName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Job Target Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Job Target Group %q (Job Agent Name %q / Server Name %q / Resource Group %q): %+v", name, jobAgentName, serverName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("job_agent_name", jobAgentName)
    d.Set("server_name", serverName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmJobTargetGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jobTargetGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    jobAgentName := id.Path["jobAgents"]
    name := id.Path["targetGroups"]

    if _, err := client.Delete(ctx, resourceGroup, serverName, jobAgentName, name); err != nil {
        return fmt.Errorf("Error deleting Job Target Group %q (Job Agent Name %q / Server Name %q / Resource Group %q): %+v", name, jobAgentName, serverName, resourceGroup, err)
    }

    return nil
}

func expandArmJobTargetGroupJobTarget(input []interface{}) *[]sql.JobTarget {
    results := make([]sql.JobTarget, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        membershipType := v["membership_type"].(string)
        type := v["type"].(string)
        serverName := v["server_name"].(string)
        databaseName := v["database_name"].(string)
        elasticPoolName := v["elastic_pool_name"].(string)
        shardMapName := v["shard_map_name"].(string)
        refreshCredential := v["refresh_credential"].(string)

        result := sql.JobTarget{
            DatabaseName: utils.String(databaseName),
            ElasticPoolName: utils.String(elasticPoolName),
            MembershipType: sql.JobTargetGroupMembershipType(membershipType),
            RefreshCredential: utils.String(refreshCredential),
            ServerName: utils.String(serverName),
            ShardMapName: utils.String(shardMapName),
            Type: sql.JobTargetType(type),
        }

        results = append(results, result)
    }
    return &results
}
