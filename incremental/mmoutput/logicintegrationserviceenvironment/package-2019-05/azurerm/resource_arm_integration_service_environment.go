// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmIntegrationServiceEnvironment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmIntegrationServiceEnvironmentCreate,
        Read: resourceArmIntegrationServiceEnvironmentRead,
        Update: resourceArmIntegrationServiceEnvironmentUpdate,
        Delete: resourceArmIntegrationServiceEnvironmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "endpoints_configuration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "connector": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "access_endpoint_ip_addresses": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "address": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "outgoing_ip_addresses": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "address": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "workflow": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "access_endpoint_ip_addresses": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "address": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "outgoing_ip_addresses": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "address": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "integration_service_environment_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "network_configuration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "access_endpoint": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(logic.NotSpecified),
                                            string(logic.External),
                                            string(logic.Internal),
                                        }, false),
                                        Default: string(logic.NotSpecified),
                                    },
                                },
                            },
                        },
                        "subnets": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "virtual_network_address_space": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "capacity": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(logic.NotSpecified),
                                string(logic.Premium),
                                string(logic.Developer),
                            }, false),
                            Default: string(logic.NotSpecified),
                        },
                    },
                },
            },

            "state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(logic.NotSpecified),
                    string(logic.Completed),
                    string(logic.Enabled),
                    string(logic.Disabled),
                    string(logic.Deleted),
                    string(logic.Suspended),
                }, false),
                Default: string(logic.NotSpecified),
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmIntegrationServiceEnvironmentCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).integrationServiceEnvironmentsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Integration Service Environment %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_integration_service_environment", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    endpointsConfiguration := d.Get("endpoints_configuration").([]interface{})
    integrationServiceEnvironmentId := d.Get("integration_service_environment_id").(string)
    networkConfiguration := d.Get("network_configuration").([]interface{})
    sku := d.Get("sku").([]interface{})
    state := d.Get("state").(string)
    t := d.Get("tags").(map[string]interface{})

    integrationServiceEnvironment := logic.IntegrationServiceEnvironment{
        Location: utils.String(location),
        IntegrationServiceEnvironmentProperties: &logic.IntegrationServiceEnvironmentProperties{
            EndpointsConfiguration: expandArmIntegrationServiceEnvironmentFlowEndpointsConfiguration(endpointsConfiguration),
            IntegrationServiceEnvironmentID: utils.String(integrationServiceEnvironmentId),
            NetworkConfiguration: expandArmIntegrationServiceEnvironmentNetworkConfiguration(networkConfiguration),
            State: logic.WorkflowState(state),
        },
        Sku: expandArmIntegrationServiceEnvironmentIntegrationServiceEnvironmentSku(sku),
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, integrationServiceEnvironment)
    if err != nil {
        return fmt.Errorf("Error creating Integration Service Environment %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Integration Service Environment %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Integration Service Environment %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Integration Service Environment %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmIntegrationServiceEnvironmentRead(d, meta)
}

func resourceArmIntegrationServiceEnvironmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).integrationServiceEnvironmentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["integrationServiceEnvironments"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Integration Service Environment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Integration Service Environment %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmIntegrationServiceEnvironmentUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).integrationServiceEnvironmentsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    endpointsConfiguration := d.Get("endpoints_configuration").([]interface{})
    integrationServiceEnvironmentId := d.Get("integration_service_environment_id").(string)
    networkConfiguration := d.Get("network_configuration").([]interface{})
    resourceGroup := d.Get("resource_group").(string)
    sku := d.Get("sku").([]interface{})
    state := d.Get("state").(string)
    t := d.Get("tags").(map[string]interface{})

    integrationServiceEnvironment := logic.IntegrationServiceEnvironment{
        IntegrationServiceEnvironmentProperties: &logic.IntegrationServiceEnvironmentProperties{
            EndpointsConfiguration: expandArmIntegrationServiceEnvironmentFlowEndpointsConfiguration(endpointsConfiguration),
            IntegrationServiceEnvironmentID: utils.String(integrationServiceEnvironmentId),
            NetworkConfiguration: expandArmIntegrationServiceEnvironmentNetworkConfiguration(networkConfiguration),
            State: logic.WorkflowState(state),
        },
        Sku: expandArmIntegrationServiceEnvironmentIntegrationServiceEnvironmentSku(sku),
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, name, integrationServiceEnvironment)
    if err != nil {
        return fmt.Errorf("Error updating Integration Service Environment %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Integration Service Environment %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmIntegrationServiceEnvironmentRead(d, meta)
}

func resourceArmIntegrationServiceEnvironmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).integrationServiceEnvironmentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["integrationServiceEnvironments"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Integration Service Environment %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}

func expandArmIntegrationServiceEnvironmentFlowEndpointsConfiguration(input []interface{}) *logic.FlowEndpointsConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    workflow := v["workflow"].([]interface{})
    connector := v["connector"].([]interface{})

    result := logic.FlowEndpointsConfiguration{
        Connector: expandArmIntegrationServiceEnvironmentFlowEndpoints(connector),
        Workflow: expandArmIntegrationServiceEnvironmentFlowEndpoints(workflow),
    }
    return &result
}

func expandArmIntegrationServiceEnvironmentNetworkConfiguration(input []interface{}) *logic.NetworkConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    virtualNetworkAddressSpace := v["virtual_network_address_space"].(string)
    accessEndpoint := v["access_endpoint"].([]interface{})
    subnets := v["subnets"].([]interface{})

    result := logic.NetworkConfiguration{
        AccessEndpoint: expandArmIntegrationServiceEnvironmentIntegrationServiceEnvironmentAccessEndpoint(accessEndpoint),
        Subnets: expandArmIntegrationServiceEnvironmentResourceReference(subnets),
        VirtualNetworkAddressSpace: utils.String(virtualNetworkAddressSpace),
    }
    return &result
}

func expandArmIntegrationServiceEnvironmentIntegrationServiceEnvironmentSku(input []interface{}) *logic.IntegrationServiceEnvironmentSku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    capacity := v["capacity"].(int)

    result := logic.IntegrationServiceEnvironmentSku{
        Capacity: utils.Int32(int32(capacity)),
        Name: logic.IntegrationServiceEnvironmentSkuName(name),
    }
    return &result
}

func expandArmIntegrationServiceEnvironmentFlowEndpoints(input []interface{}) *logic.FlowEndpoints {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    outgoingIpAddresses := v["outgoing_ip_addresses"].([]interface{})
    accessEndpointIpAddresses := v["access_endpoint_ip_addresses"].([]interface{})

    result := logic.FlowEndpoints{
        AccessEndpointIPAddresses: expandArmIntegrationServiceEnvironmentIpAddress(accessEndpointIpAddresses),
        OutgoingIPAddresses: expandArmIntegrationServiceEnvironmentIpAddress(outgoingIpAddresses),
    }
    return &result
}

func expandArmIntegrationServiceEnvironmentIntegrationServiceEnvironmentAccessEndpoint(input []interface{}) *logic.IntegrationServiceEnvironmentAccessEndpoint {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)

    result := logic.IntegrationServiceEnvironmentAccessEndpoint{
        Type: logic.IntegrationServiceEnvironmentAccessEndpointType(type),
    }
    return &result
}

func expandArmIntegrationServiceEnvironmentResourceReference(input []interface{}) *[]logic.ResourceReference {
    results := make([]logic.ResourceReference, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)

        result := logic.ResourceReference{
            ID: utils.String(id),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmIntegrationServiceEnvironmentIpAddress(input []interface{}) *[]logic.IpAddress {
    results := make([]logic.IpAddress, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        address := v["address"].(string)

        result := logic.IpAddress{
            Address: utils.String(address),
        }

        results = append(results, result)
    }
    return &results
}
