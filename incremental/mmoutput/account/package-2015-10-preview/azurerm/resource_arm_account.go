// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAccount() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAccountCreate,
        Read: resourceArmAccountRead,
        Update: resourceArmAccountUpdate,
        Delete: resourceArmAccountDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "default_group": {
                Type: schema.TypeString,
                Optional: true,
            },

            "encryption_config": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "key_vault_meta_info": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "encryption_key_name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "encryption_key_version": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "key_vault_resource_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(datalakestore.UserManaged),
                                string(datalakestore.ServiceManaged),
                            }, false),
                            Default: string(datalakestore.UserManaged),
                        },
                    },
                },
            },

            "encryption_state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(datalakestore.Enabled),
                    string(datalakestore.Disabled),
                }, false),
                Default: string(datalakestore.Enabled),
            },

            "endpoint": {
                Type: schema.TypeString,
                Optional: true,
            },

            "identity": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(datalakestore.SystemAssigned),
                            }, false),
                            Default: string(datalakestore.SystemAssigned),
                        },
                    },
                },
            },

            "creation_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "encryption_provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_modified_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmAccountCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Account (Resource Group %q): %+v", resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_account", *existing.ID)
        }
    }

    name := d.Get("name").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    defaultGroup := d.Get("default_group").(string)
    encryptionConfig := d.Get("encryption_config").([]interface{})
    encryptionState := d.Get("encryption_state").(string)
    endpoint := d.Get("endpoint").(string)
    identity := d.Get("identity").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := datalakestore.Account{
        Identity: expandArmAccountEncryptionIdentity(identity),
        Location: utils.String(location),
        Name: utils.String(name),
        AccountProperties: &datalakestore.AccountProperties{
            DefaultGroup: utils.String(defaultGroup),
            EncryptionConfig: expandArmAccountEncryptionConfig(encryptionConfig),
            EncryptionState: datalakestore.EncryptionState(encryptionState),
            Endpoint: utils.String(endpoint),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Create(ctx, resourceGroup, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Account (Resource Group %q): %+v", resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Account (Resource Group %q): %+v", resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup)
    if err != nil {
        return fmt.Errorf("Error retrieving Account (Resource Group %q): %+v", resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Account (Resource Group %q) ID", resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAccountRead(d, meta)
}

func resourceArmAccountRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup

    resp, err := client.Get(ctx, resourceGroup)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Account %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Account (Resource Group %q): %+v", resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if accountProperties := resp.AccountProperties; accountProperties != nil {
        d.Set("creation_time", (accountProperties.CreationTime).String())
        d.Set("default_group", accountProperties.DefaultGroup)
        if err := d.Set("encryption_config", flattenArmAccountEncryptionConfig(accountProperties.EncryptionConfig)); err != nil {
            return fmt.Errorf("Error setting `encryption_config`: %+v", err)
        }
        d.Set("encryption_provisioning_state", string(accountProperties.EncryptionProvisioningState))
        d.Set("encryption_state", string(accountProperties.EncryptionState))
        d.Set("endpoint", accountProperties.Endpoint)
        d.Set("last_modified_time", (accountProperties.LastModifiedTime).String())
        d.Set("provisioning_state", string(accountProperties.ProvisioningState))
        d.Set("state", string(accountProperties.State))
    }
    if err := d.Set("identity", flattenArmAccountEncryptionIdentity(resp.Identity)); err != nil {
        return fmt.Errorf("Error setting `identity`: %+v", err)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmAccountUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    defaultGroup := d.Get("default_group").(string)
    encryptionConfig := d.Get("encryption_config").([]interface{})
    encryptionState := d.Get("encryption_state").(string)
    endpoint := d.Get("endpoint").(string)
    identity := d.Get("identity").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := datalakestore.Account{
        Identity: expandArmAccountEncryptionIdentity(identity),
        Location: utils.String(location),
        Name: utils.String(name),
        AccountProperties: &datalakestore.AccountProperties{
            DefaultGroup: utils.String(defaultGroup),
            EncryptionConfig: expandArmAccountEncryptionConfig(encryptionConfig),
            EncryptionState: datalakestore.EncryptionState(encryptionState),
            Endpoint: utils.String(endpoint),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Account (Resource Group %q): %+v", resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Account (Resource Group %q): %+v", resourceGroup, err)
    }

    return resourceArmAccountRead(d, meta)
}

func resourceArmAccountDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup

    future, err := client.Delete(ctx, resourceGroup)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Account (Resource Group %q): %+v", resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Account (Resource Group %q): %+v", resourceGroup, err)
        }
    }

    return nil
}

func expandArmAccountEncryptionIdentity(input []interface{}) *datalakestore.EncryptionIdentity {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)

    result := datalakestore.EncryptionIdentity{
        Type: datalakestore.EncryptionIdentityType(type),
    }
    return &result
}

func expandArmAccountEncryptionConfig(input []interface{}) *datalakestore.EncryptionConfig {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)
    keyVaultMetaInfo := v["key_vault_meta_info"].([]interface{})

    result := datalakestore.EncryptionConfig{
        KeyVaultMetaInfo: expandArmAccountKeyVaultMetaInfo(keyVaultMetaInfo),
        Type: datalakestore.EncryptionConfigType(type),
    }
    return &result
}

func expandArmAccountKeyVaultMetaInfo(input []interface{}) *datalakestore.KeyVaultMetaInfo {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    keyVaultResourceId := v["key_vault_resource_id"].(string)
    encryptionKeyName := v["encryption_key_name"].(string)
    encryptionKeyVersion := v["encryption_key_version"].(string)

    result := datalakestore.KeyVaultMetaInfo{
        EncryptionKeyName: utils.String(encryptionKeyName),
        EncryptionKeyVersion: utils.String(encryptionKeyVersion),
        KeyVaultResourceID: utils.String(keyVaultResourceId),
    }
    return &result
}


func flattenArmAccountEncryptionConfig(input *datalakestore.EncryptionConfig) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["key_vault_meta_info"] = flattenArmAccountKeyVaultMetaInfo(input.KeyVaultMetaInfo)
    result["type"] = string(input.Type)

    return []interface{}{result}
}

func flattenArmAccountEncryptionIdentity(input *datalakestore.EncryptionIdentity) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["type"] = string(input.Type)

    return []interface{}{result}
}

func flattenArmAccountKeyVaultMetaInfo(input *datalakestore.KeyVaultMetaInfo) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if encryptionKeyName := input.EncryptionKeyName; encryptionKeyName != nil {
        result["encryption_key_name"] = *encryptionKeyName
    }
    if encryptionKeyVersion := input.EncryptionKeyVersion; encryptionKeyVersion != nil {
        result["encryption_key_version"] = *encryptionKeyVersion
    }
    if keyVaultResourceId := input.KeyVaultResourceID; keyVaultResourceId != nil {
        result["key_vault_resource_id"] = *keyVaultResourceId
    }

    return []interface{}{result}
}
