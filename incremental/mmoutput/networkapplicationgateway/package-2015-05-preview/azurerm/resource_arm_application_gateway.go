// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmApplicationGateway() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmApplicationGatewayCreateUpdate,
        Read: resourceArmApplicationGatewayRead,
        Update: resourceArmApplicationGatewayCreateUpdate,
        Delete: resourceArmApplicationGatewayDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "application_gateway_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "backend_address_pools": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "backend_addresses": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "fqdn": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "ip_address": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "backend_ip_configurations": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "backend_http_settings_collection": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "cookie_based_affinity": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Enabled),
                                string(network.Disabled),
                            }, false),
                            Default: string(network.Enabled),
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "protocol": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Http),
                                string(network.Https),
                            }, false),
                            Default: string(network.Http),
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "frontend_ip_configurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_allocation_method": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Static),
                                string(network.Dynamic),
                            }, false),
                            Default: string(network.Static),
                        },
                        "public_ip_address": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "frontend_ports": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "gateway_ip_configurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "http_listeners": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "frontend_ip_configuration": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "frontend_port": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "protocol": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Http),
                                string(network.Https),
                            }, false),
                            Default: string(network.Http),
                        },
                        "ssl_certificate": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "request_routing_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "backend_address_pool": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "backend_http_settings": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "http_listener": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "rule_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Basic),
                            }, false),
                            Default: string(network.Basic),
                        },
                    },
                },
            },

            "resource_guid": {
                Type: schema.TypeString,
                Optional: true,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "capacity": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Standard_Small),
                                string(network.Standard_Medium),
                                string(network.Standard_Large),
                            }, false),
                            Default: string(network.Standard_Small),
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Standard),
                            }, false),
                            Default: string(network.Standard),
                        },
                    },
                },
            },

            "ssl_certificates": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "password": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "public_cert_data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "tags": tags.Schema(),

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "operational_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmApplicationGatewayCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationGatewaysClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("application_gateway_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Application Gateway (Application Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_application_gateway", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    backendAddressPools := d.Get("backend_address_pools").([]interface{})
    backendHTTPSettingsCollection := d.Get("backend_http_settings_collection").([]interface{})
    etag := d.Get("etag").(string)
    frontendIPConfigurations := d.Get("frontend_ip_configurations").([]interface{})
    frontendPorts := d.Get("frontend_ports").([]interface{})
    gatewayIPConfigurations := d.Get("gateway_ip_configurations").([]interface{})
    hTTPListeners := d.Get("http_listeners").([]interface{})
    requestRoutingRules := d.Get("request_routing_rules").([]interface{})
    resourceGUID := d.Get("resource_guid").(string)
    sku := d.Get("sku").([]interface{})
    sslCertificates := d.Get("ssl_certificates").([]interface{})
    tags := d.Get("tags").(map[string]interface{})

    parameters := network.ApplicationGateway{
        Etag: utils.String(etag),
        Location: utils.String(location),
        ApplicationGatewayPropertiesFormat: &network.ApplicationGatewayPropertiesFormat{
            BackendAddressPools: expandArmApplicationGatewayApplicationGatewayBackendAddressPool(backendAddressPools),
            BackendHTTPSettingsCollection: expandArmApplicationGatewayApplicationGatewayBackendHttpSettings(backendHTTPSettingsCollection),
            FrontendIPConfigurations: expandArmApplicationGatewayApplicationGatewayFrontendIPConfiguration(frontendIPConfigurations),
            FrontendPorts: expandArmApplicationGatewayApplicationGatewayFrontendPort(frontendPorts),
            GatewayIPConfigurations: expandArmApplicationGatewayApplicationGatewayIPConfiguration(gatewayIPConfigurations),
            HTTPListeners: expandArmApplicationGatewayApplicationGatewayHttpListener(hTTPListeners),
            RequestRoutingRules: expandArmApplicationGatewayApplicationGatewayRequestRoutingRule(requestRoutingRules),
            ResourceGUID: utils.String(resourceGUID),
            Sku: expandArmApplicationGatewayApplicationGatewaySku(sku),
            SslCertificates: expandArmApplicationGatewayApplicationGatewaySslCertificate(sslCertificates),
        },
        Tags: tags.Expand(tags),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroupName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Application Gateway (Application Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Application Gateway (Application Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Application Gateway (Application Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Application Gateway (Application Gateway Name %q / Resource Group %q) ID", name, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmApplicationGatewayRead(d, meta)
}

func resourceArmApplicationGatewayRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationGatewaysClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["applicationGateways"]

    resp, err := client.Get(ctx, resourceGroupName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Application Gateway %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Application Gateway (Application Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("application_gateway_name", name)
    if applicationGatewayPropertiesFormat := resp.ApplicationGatewayPropertiesFormat; applicationGatewayPropertiesFormat != nil {
        if err := d.Set("backend_address_pools", flattenArmApplicationGatewayApplicationGatewayBackendAddressPool(applicationGatewayPropertiesFormat.BackendAddressPools)); err != nil {
            return fmt.Errorf("Error setting `backend_address_pools`: %+v", err)
        }
        if err := d.Set("backend_http_settings_collection", flattenArmApplicationGatewayApplicationGatewayBackendHttpSettings(applicationGatewayPropertiesFormat.BackendHTTPSettingsCollection)); err != nil {
            return fmt.Errorf("Error setting `backend_http_settings_collection`: %+v", err)
        }
        if err := d.Set("frontend_ip_configurations", flattenArmApplicationGatewayApplicationGatewayFrontendIPConfiguration(applicationGatewayPropertiesFormat.FrontendIPConfigurations)); err != nil {
            return fmt.Errorf("Error setting `frontend_ip_configurations`: %+v", err)
        }
        if err := d.Set("frontend_ports", flattenArmApplicationGatewayApplicationGatewayFrontendPort(applicationGatewayPropertiesFormat.FrontendPorts)); err != nil {
            return fmt.Errorf("Error setting `frontend_ports`: %+v", err)
        }
        if err := d.Set("gateway_ip_configurations", flattenArmApplicationGatewayApplicationGatewayIPConfiguration(applicationGatewayPropertiesFormat.GatewayIPConfigurations)); err != nil {
            return fmt.Errorf("Error setting `gateway_ip_configurations`: %+v", err)
        }
        if err := d.Set("http_listeners", flattenArmApplicationGatewayApplicationGatewayHttpListener(applicationGatewayPropertiesFormat.HTTPListeners)); err != nil {
            return fmt.Errorf("Error setting `http_listeners`: %+v", err)
        }
        d.Set("operational_state", string(applicationGatewayPropertiesFormat.OperationalState))
        d.Set("provisioning_state", applicationGatewayPropertiesFormat.ProvisioningState)
        if err := d.Set("request_routing_rules", flattenArmApplicationGatewayApplicationGatewayRequestRoutingRule(applicationGatewayPropertiesFormat.RequestRoutingRules)); err != nil {
            return fmt.Errorf("Error setting `request_routing_rules`: %+v", err)
        }
        d.Set("resource_guid", applicationGatewayPropertiesFormat.ResourceGUID)
        if err := d.Set("sku", flattenArmApplicationGatewayApplicationGatewaySku(applicationGatewayPropertiesFormat.Sku)); err != nil {
            return fmt.Errorf("Error setting `sku`: %+v", err)
        }
        if err := d.Set("ssl_certificates", flattenArmApplicationGatewayApplicationGatewaySslCertificate(applicationGatewayPropertiesFormat.SslCertificates)); err != nil {
            return fmt.Errorf("Error setting `ssl_certificates`: %+v", err)
        }
    }
    d.Set("etag", resp.Etag)
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmApplicationGatewayDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationGatewaysClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["applicationGateways"]

    future, err := client.Delete(ctx, resourceGroupName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Application Gateway (Application Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Application Gateway (Application Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
        }
    }

    return nil
}

func expandArmApplicationGatewayApplicationGatewayBackendAddressPool(input []interface{}) *[]network.ApplicationGatewayBackendAddressPool {
    results := make([]network.ApplicationGatewayBackendAddressPool, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)
        backendIPConfigurations := v["backend_ip_configurations"].([]interface{})
        backendAddresses := v["backend_addresses"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayBackendAddressPool{
            Etag: utils.String(etag),
            ID: utils.String(iD),
            Name: utils.String(name),
            ApplicationGatewayBackendAddressPoolPropertiesFormat: &network.ApplicationGatewayBackendAddressPoolPropertiesFormat{
                BackendAddresses: expandArmApplicationGatewayApplicationGatewayBackendAddress(backendAddresses),
                BackendIPConfigurations: expandArmApplicationGatewaySubResource(backendIPConfigurations),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayBackendHttpSettings(input []interface{}) *[]network.ApplicationGatewayBackendHttpSettings {
    results := make([]network.ApplicationGatewayBackendHttpSettings, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)
        port := v["port"].(int)
        protocol := v["protocol"].(string)
        cookieBasedAffinity := v["cookie_based_affinity"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayBackendHttpSettings{
            Etag: utils.String(etag),
            ID: utils.String(iD),
            Name: utils.String(name),
            ApplicationGatewayBackendHttpSettingsPropertiesFormat: &network.ApplicationGatewayBackendHttpSettingsPropertiesFormat{
                CookieBasedAffinity: network.ApplicationGatewayCookieBasedAffinity(cookieBasedAffinity),
                Port: utils.Int32(int32(port)),
                Protocol: network.ApplicationGatewayProtocol(protocol),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayFrontendIPConfiguration(input []interface{}) *[]network.ApplicationGatewayFrontendIPConfiguration {
    results := make([]network.ApplicationGatewayFrontendIPConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)
        privateIPAddress := v["private_ip_address"].(string)
        privateIPAllocationMethod := v["private_ip_allocation_method"].(string)
        subnet := v["subnet"].([]interface{})
        publicIPAddress := v["public_ip_address"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayFrontendIPConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(iD),
            Name: utils.String(name),
            ApplicationGatewayFrontendIPConfigurationPropertiesFormat: &network.ApplicationGatewayFrontendIPConfigurationPropertiesFormat{
                PrivateIPAddress: utils.String(privateIPAddress),
                PrivateIPAllocationMethod: network.IpAllocationMethod(privateIPAllocationMethod),
                PublicIPAddress: expandArmApplicationGatewaySubResource(publicIPAddress),
                Subnet: expandArmApplicationGatewaySubResource(subnet),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayFrontendPort(input []interface{}) *[]network.ApplicationGatewayFrontendPort {
    results := make([]network.ApplicationGatewayFrontendPort, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)
        port := v["port"].(int)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayFrontendPort{
            Etag: utils.String(etag),
            ID: utils.String(iD),
            Name: utils.String(name),
            ApplicationGatewayFrontendPortPropertiesFormat: &network.ApplicationGatewayFrontendPortPropertiesFormat{
                Port: utils.Int32(int32(port)),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayIPConfiguration(input []interface{}) *[]network.ApplicationGatewayIPConfiguration {
    results := make([]network.ApplicationGatewayIPConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)
        subnet := v["subnet"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayIPConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(iD),
            Name: utils.String(name),
            ApplicationGatewayIPConfigurationPropertiesFormat: &network.ApplicationGatewayIPConfigurationPropertiesFormat{
                Subnet: expandArmApplicationGatewaySubResource(subnet),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayHttpListener(input []interface{}) *[]network.ApplicationGatewayHttpListener {
    results := make([]network.ApplicationGatewayHttpListener, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)
        frontendIPConfiguration := v["frontend_ip_configuration"].([]interface{})
        frontendPort := v["frontend_port"].([]interface{})
        protocol := v["protocol"].(string)
        sslCertificate := v["ssl_certificate"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayHttpListener{
            Etag: utils.String(etag),
            ID: utils.String(iD),
            Name: utils.String(name),
            ApplicationGatewayHttpListenerPropertiesFormat: &network.ApplicationGatewayHttpListenerPropertiesFormat{
                FrontendIPConfiguration: expandArmApplicationGatewaySubResource(frontendIPConfiguration),
                FrontendPort: expandArmApplicationGatewaySubResource(frontendPort),
                Protocol: network.ApplicationGatewayProtocol(protocol),
                SslCertificate: expandArmApplicationGatewaySubResource(sslCertificate),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayRequestRoutingRule(input []interface{}) *[]network.ApplicationGatewayRequestRoutingRule {
    results := make([]network.ApplicationGatewayRequestRoutingRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)
        ruleType := v["rule_type"].(string)
        backendAddressPool := v["backend_address_pool"].([]interface{})
        backendHTTPSettings := v["backend_http_settings"].([]interface{})
        hTTPListener := v["http_listener"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayRequestRoutingRule{
            Etag: utils.String(etag),
            ID: utils.String(iD),
            Name: utils.String(name),
            ApplicationGatewayRequestRoutingRulePropertiesFormat: &network.ApplicationGatewayRequestRoutingRulePropertiesFormat{
                BackendAddressPool: expandArmApplicationGatewaySubResource(backendAddressPool),
                BackendHTTPSettings: expandArmApplicationGatewaySubResource(backendHTTPSettings),
                HTTPListener: expandArmApplicationGatewaySubResource(hTTPListener),
                RuleType: network.ApplicationGatewayRequestRoutingRuleType(ruleType),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewaySku(input []interface{}) *network.ApplicationGatewaySku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    tier := v["tier"].(string)
    capacity := v["capacity"].(int)

    result := network.ApplicationGatewaySku{
        Capacity: utils.Int32(int32(capacity)),
        Name: network.ApplicationGatewaySkuName(name),
        Tier: network.ApplicationGatewayTier(tier),
    }
    return &result
}

func expandArmApplicationGatewayApplicationGatewaySslCertificate(input []interface{}) *[]network.ApplicationGatewaySslCertificate {
    results := make([]network.ApplicationGatewaySslCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)
        data := v["data"].(string)
        password := v["password"].(string)
        publicCertData := v["public_cert_data"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewaySslCertificate{
            Etag: utils.String(etag),
            ID: utils.String(iD),
            Name: utils.String(name),
            ApplicationGatewaySslCertificatePropertiesFormat: &network.ApplicationGatewaySslCertificatePropertiesFormat{
                Data: utils.String(data),
                Password: utils.String(password),
                PublicCertData: utils.String(publicCertData),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayBackendAddress(input []interface{}) *[]network.ApplicationGatewayBackendAddress {
    results := make([]network.ApplicationGatewayBackendAddress, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        fqdn := v["fqdn"].(string)
        iPAddress := v["ip_address"].(string)

        result := network.ApplicationGatewayBackendAddress{
            Fqdn: utils.String(fqdn),
            IPAddress: utils.String(iPAddress),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewaySubResource(input []interface{}) *[]network.SubResource {
    results := make([]network.SubResource, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)

        result := network.SubResource{
            ID: utils.String(iD),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewaySubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    iD := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(iD),
    }
    return &result
}


func flattenArmApplicationGatewayApplicationGatewayBackendAddressPool(input *[]network.ApplicationGatewayBackendAddressPool) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if applicationGatewayBackendAddressPoolPropertiesFormat := item.ApplicationGatewayBackendAddressPoolPropertiesFormat; applicationGatewayBackendAddressPoolPropertiesFormat != nil {
            v["backend_addresses"] = flattenArmApplicationGatewayApplicationGatewayBackendAddress(applicationGatewayBackendAddressPoolPropertiesFormat.BackendAddresses)
            v["backend_ip_configurations"] = flattenArmApplicationGatewaySubResource(applicationGatewayBackendAddressPoolPropertiesFormat.BackendIPConfigurations)
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayBackendHttpSettings(input *[]network.ApplicationGatewayBackendHttpSettings) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if applicationGatewayBackendHttpSettingsPropertiesFormat := item.ApplicationGatewayBackendHttpSettingsPropertiesFormat; applicationGatewayBackendHttpSettingsPropertiesFormat != nil {
            v["cookie_based_affinity"] = string(applicationGatewayBackendHttpSettingsPropertiesFormat.CookieBasedAffinity)
            if port := applicationGatewayBackendHttpSettingsPropertiesFormat.Port; port != nil {
                v["port"] = int(*port)
            }
            v["protocol"] = string(applicationGatewayBackendHttpSettingsPropertiesFormat.Protocol)
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayFrontendIPConfiguration(input *[]network.ApplicationGatewayFrontendIPConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if applicationGatewayFrontendIPConfigurationPropertiesFormat := item.ApplicationGatewayFrontendIPConfigurationPropertiesFormat; applicationGatewayFrontendIPConfigurationPropertiesFormat != nil {
            if privateIpAddress := applicationGatewayFrontendIPConfigurationPropertiesFormat.PrivateIPAddress; privateIpAddress != nil {
                v["private_ip_address"] = *privateIpAddress
            }
            v["private_ip_allocation_method"] = string(applicationGatewayFrontendIPConfigurationPropertiesFormat.PrivateIPAllocationMethod)
            v["public_ip_address"] = flattenArmApplicationGatewaySubResource(applicationGatewayFrontendIPConfigurationPropertiesFormat.PublicIPAddress)
            v["subnet"] = flattenArmApplicationGatewaySubResource(applicationGatewayFrontendIPConfigurationPropertiesFormat.Subnet)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayFrontendPort(input *[]network.ApplicationGatewayFrontendPort) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if applicationGatewayFrontendPortPropertiesFormat := item.ApplicationGatewayFrontendPortPropertiesFormat; applicationGatewayFrontendPortPropertiesFormat != nil {
            if port := applicationGatewayFrontendPortPropertiesFormat.Port; port != nil {
                v["port"] = int(*port)
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayIPConfiguration(input *[]network.ApplicationGatewayIPConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if applicationGatewayIPConfigurationPropertiesFormat := item.ApplicationGatewayIPConfigurationPropertiesFormat; applicationGatewayIPConfigurationPropertiesFormat != nil {
            v["subnet"] = flattenArmApplicationGatewaySubResource(applicationGatewayIPConfigurationPropertiesFormat.Subnet)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayHttpListener(input *[]network.ApplicationGatewayHttpListener) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if applicationGatewayHttpListenerPropertiesFormat := item.ApplicationGatewayHttpListenerPropertiesFormat; applicationGatewayHttpListenerPropertiesFormat != nil {
            v["frontend_ip_configuration"] = flattenArmApplicationGatewaySubResource(applicationGatewayHttpListenerPropertiesFormat.FrontendIPConfiguration)
            v["frontend_port"] = flattenArmApplicationGatewaySubResource(applicationGatewayHttpListenerPropertiesFormat.FrontendPort)
            v["protocol"] = string(applicationGatewayHttpListenerPropertiesFormat.Protocol)
            v["ssl_certificate"] = flattenArmApplicationGatewaySubResource(applicationGatewayHttpListenerPropertiesFormat.SslCertificate)
        }
        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayRequestRoutingRule(input *[]network.ApplicationGatewayRequestRoutingRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if applicationGatewayRequestRoutingRulePropertiesFormat := item.ApplicationGatewayRequestRoutingRulePropertiesFormat; applicationGatewayRequestRoutingRulePropertiesFormat != nil {
            v["backend_address_pool"] = flattenArmApplicationGatewaySubResource(applicationGatewayRequestRoutingRulePropertiesFormat.BackendAddressPool)
            v["backend_http_settings"] = flattenArmApplicationGatewaySubResource(applicationGatewayRequestRoutingRulePropertiesFormat.BackendHTTPSettings)
            v["http_listener"] = flattenArmApplicationGatewaySubResource(applicationGatewayRequestRoutingRulePropertiesFormat.HTTPListener)
            v["rule_type"] = string(applicationGatewayRequestRoutingRulePropertiesFormat.RuleType)
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewaySku(input *network.ApplicationGatewaySku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if capacity := input.Capacity; capacity != nil {
        result["capacity"] = int(*capacity)
    }
    result["name"] = string(input.Name)
    result["tier"] = string(input.Tier)

    return []interface{}{result}
}

func flattenArmApplicationGatewayApplicationGatewaySslCertificate(input *[]network.ApplicationGatewaySslCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if applicationGatewaySslCertificatePropertiesFormat := item.ApplicationGatewaySslCertificatePropertiesFormat; applicationGatewaySslCertificatePropertiesFormat != nil {
            if data := applicationGatewaySslCertificatePropertiesFormat.Data; data != nil {
                v["data"] = *data
            }
            if password := applicationGatewaySslCertificatePropertiesFormat.Password; password != nil {
                v["password"] = *password
            }
            if publicCertData := applicationGatewaySslCertificatePropertiesFormat.PublicCertData; publicCertData != nil {
                v["public_cert_data"] = *publicCertData
            }
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayBackendAddress(input *[]network.ApplicationGatewayBackendAddress) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if fqdn := item.Fqdn; fqdn != nil {
            v["fqdn"] = *fqdn
        }
        if ipAddress := item.IPAddress; ipAddress != nil {
            v["ip_address"] = *ipAddress
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewaySubResource(input *[]network.SubResource) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewaySubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}
