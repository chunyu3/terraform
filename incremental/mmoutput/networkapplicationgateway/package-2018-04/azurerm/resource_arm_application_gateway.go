// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmApplicationGateway() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmApplicationGatewayCreateUpdate,
        Read: resourceArmApplicationGatewayRead,
        Update: resourceArmApplicationGatewayCreateUpdate,
        Delete: resourceArmApplicationGatewayDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "authentication_certificates": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "autoscale_configuration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "bounds": {
                            Type: schema.TypeList,
                            Required: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "max": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "min": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "backend_address_pools": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "backend_addresses": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "fqdn": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "ip_address": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "backend_ipconfigurations": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "backend_http_settings_collection": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "affinity_cookie_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "authentication_certificates": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "connection_draining": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "drain_timeout_in_sec": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "enabled": {
                                        Type: schema.TypeBool,
                                        Required: true,
                                    },
                                },
                            },
                        },
                        "cookie_based_affinity": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Enabled),
                                string(network.Disabled),
                            }, false),
                            Default: string(network.Enabled),
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "host_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "path": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "pick_host_name_from_backend_address": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "probe": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "probe_enabled": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "protocol": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Http),
                                string(network.Https),
                            }, false),
                            Default: string(network.Http),
                        },
                        "request_timeout": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "enable_fips": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enable_http2": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "frontend_ipconfigurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ipallocation_method": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Static),
                                string(network.Dynamic),
                            }, false),
                            Default: string(network.Static),
                        },
                        "public_ip_address": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "frontend_ports": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "gateway_ipconfigurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "http_listeners": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "frontend_ipconfiguration": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "frontend_port": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "host_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "protocol": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Http),
                                string(network.Https),
                            }, false),
                            Default: string(network.Http),
                        },
                        "require_server_name_indication": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "ssl_certificate": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "probes": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "host": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "interval": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "match": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "body": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "status_codes": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                },
                            },
                        },
                        "min_servers": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "path": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "pick_host_name_from_backend_http_settings": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "protocol": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Http),
                                string(network.Https),
                            }, false),
                            Default: string(network.Http),
                        },
                        "timeout": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "unhealthy_threshold": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "redirect_configurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "include_path": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "include_query_string": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "path_rules": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "redirect_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Permanent),
                                string(network.Found),
                                string(network.SeeOther),
                                string(network.Temporary),
                            }, false),
                            Default: string(network.Permanent),
                        },
                        "request_routing_rules": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "target_listener": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "target_url": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "url_path_maps": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "request_routing_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "backend_address_pool": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "backend_http_settings": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "http_listener": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "redirect_configuration": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "rule_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Basic),
                                string(network.PathBasedRouting),
                            }, false),
                            Default: string(network.Basic),
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "url_path_map": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "resource_guid": {
                Type: schema.TypeString,
                Optional: true,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "capacity": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Standard_Small),
                                string(network.Standard_Medium),
                                string(network.Standard_Large),
                                string(network.WAF_Medium),
                                string(network.WAF_Large),
                                string(network.Standard_v2),
                                string(network.WAF_v2),
                            }, false),
                            Default: string(network.Standard_Small),
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Standard),
                                string(network.WAF),
                                string(network.Standard_v2),
                                string(network.WAF_v2),
                            }, false),
                            Default: string(network.Standard),
                        },
                    },
                },
            },

            "ssl_certificates": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "password": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "public_cert_data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "ssl_policy": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "cipher_suites": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                                ValidateFunc: validation.StringInSlice([]string{
                                    string(network.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384),
                                    string(network.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256),
                                    string(network.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA),
                                    string(network.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA),
                                    string(network.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384),
                                    string(network.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256),
                                    string(network.TLS_DHE_RSA_WITH_AES_256_CBC_SHA),
                                    string(network.TLS_DHE_RSA_WITH_AES_128_CBC_SHA),
                                    string(network.TLS_RSA_WITH_AES_256_GCM_SHA384),
                                    string(network.TLS_RSA_WITH_AES_128_GCM_SHA256),
                                    string(network.TLS_RSA_WITH_AES_256_CBC_SHA256),
                                    string(network.TLS_RSA_WITH_AES_128_CBC_SHA256),
                                    string(network.TLS_RSA_WITH_AES_256_CBC_SHA),
                                    string(network.TLS_RSA_WITH_AES_128_CBC_SHA),
                                    string(network.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384),
                                    string(network.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256),
                                    string(network.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384),
                                    string(network.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256),
                                    string(network.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA),
                                    string(network.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA),
                                    string(network.TLS_DHE_DSS_WITH_AES_256_CBC_SHA256),
                                    string(network.TLS_DHE_DSS_WITH_AES_128_CBC_SHA256),
                                    string(network.TLS_DHE_DSS_WITH_AES_256_CBC_SHA),
                                    string(network.TLS_DHE_DSS_WITH_AES_128_CBC_SHA),
                                    string(network.TLS_RSA_WITH_3DES_EDE_CBC_SHA),
                                    string(network.TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA),
                                    string(network.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256),
                                    string(network.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384),
                               }, false),
                            },
                        },
                        "disabled_ssl_protocols": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                                ValidateFunc: validation.StringInSlice([]string{
                                    string(network.TLSv1_0),
                                    string(network.TLSv1_1),
                                    string(network.TLSv1_2),
                               }, false),
                            },
                        },
                        "min_protocol_version": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.TLSv1_0),
                                string(network.TLSv1_1),
                                string(network.TLSv1_2),
                            }, false),
                            Default: string(network.TLSv1_0),
                        },
                        "policy_name": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.AppGwSslPolicy20150501),
                                string(network.AppGwSslPolicy20170401),
                                string(network.AppGwSslPolicy20170401S),
                            }, false),
                            Default: string(network.AppGwSslPolicy20150501),
                        },
                        "policy_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Predefined),
                                string(network.Custom),
                            }, false),
                            Default: string(network.Predefined),
                        },
                    },
                },
            },

            "url_path_maps": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "default_backend_address_pool": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "default_backend_http_settings": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "default_redirect_configuration": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "path_rules": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "web_application_firewall_configuration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "enabled": {
                            Type: schema.TypeBool,
                            Required: true,
                        },
                        "firewall_mode": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Detection),
                                string(network.Prevention),
                            }, false),
                        },
                        "rule_set_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "rule_set_version": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "disabled_rule_groups": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "rule_group_name": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "rules": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeInt,
                                        },
                                    },
                                },
                            },
                        },
                        "max_request_body_size": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "request_body_check": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                    },
                },
            },

            "zones": {
                Type: schema.TypeList,
                Optional: true,
                ForceNew: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "operational_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmApplicationGatewayCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationGatewaysClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_application_gateway", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    authenticationCertificates := d.Get("authentication_certificates").([]interface{})
    autoscaleConfiguration := d.Get("autoscale_configuration").([]interface{})
    backendAddressPools := d.Get("backend_address_pools").([]interface{})
    backendHttpSettingsCollection := d.Get("backend_http_settings_collection").([]interface{})
    enableFips := d.Get("enable_fips").(bool)
    enableHttp2 := d.Get("enable_http2").(bool)
    etag := d.Get("etag").(string)
    frontendIpconfigurations := d.Get("frontend_ipconfigurations").([]interface{})
    frontendPorts := d.Get("frontend_ports").([]interface{})
    gatewayIpconfigurations := d.Get("gateway_ipconfigurations").([]interface{})
    httpListeners := d.Get("http_listeners").([]interface{})
    probes := d.Get("probes").([]interface{})
    redirectConfigurations := d.Get("redirect_configurations").([]interface{})
    requestRoutingRules := d.Get("request_routing_rules").([]interface{})
    resourceGuid := d.Get("resource_guid").(string)
    sku := d.Get("sku").([]interface{})
    sslCertificates := d.Get("ssl_certificates").([]interface{})
    sslPolicy := d.Get("ssl_policy").([]interface{})
    urlPathMaps := d.Get("url_path_maps").([]interface{})
    webApplicationFirewallConfiguration := d.Get("web_application_firewall_configuration").([]interface{})
    zones := d.Get("zones").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := network.ApplicationGateway{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        ApplicationGatewayPropertiesFormat: &network.ApplicationGatewayPropertiesFormat{
            AuthenticationCertificates: expandArmApplicationGatewayApplicationGatewayAuthenticationCertificate(authenticationCertificates),
            AutoscaleConfiguration: expandArmApplicationGatewayApplicationGatewayAutoscaleConfiguration(autoscaleConfiguration),
            BackendAddressPools: expandArmApplicationGatewayApplicationGatewayBackendAddressPool(backendAddressPools),
            BackendHttpSettingsCollection: expandArmApplicationGatewayApplicationGatewayBackendHttpSettings(backendHttpSettingsCollection),
            EnableFips: utils.Bool(enableFips),
            EnableHttp2: utils.Bool(enableHttp2),
            FrontendIpconfigurations: expandArmApplicationGatewayApplicationGatewayFrontendIPConfiguration(frontendIpconfigurations),
            FrontendPorts: expandArmApplicationGatewayApplicationGatewayFrontendPort(frontendPorts),
            GatewayIpconfigurations: expandArmApplicationGatewayApplicationGatewayIPConfiguration(gatewayIpconfigurations),
            HttpListeners: expandArmApplicationGatewayApplicationGatewayHttpListener(httpListeners),
            Probes: expandArmApplicationGatewayApplicationGatewayProbe(probes),
            RedirectConfigurations: expandArmApplicationGatewayApplicationGatewayRedirectConfiguration(redirectConfigurations),
            RequestRoutingRules: expandArmApplicationGatewayApplicationGatewayRequestRoutingRule(requestRoutingRules),
            ResourceGuid: utils.String(resourceGuid),
            Sku: expandArmApplicationGatewayApplicationGatewaySku(sku),
            SslCertificates: expandArmApplicationGatewayApplicationGatewaySslCertificate(sslCertificates),
            SslPolicy: expandArmApplicationGatewayApplicationGatewaySslPolicy(sslPolicy),
            URLPathMaps: expandArmApplicationGatewayApplicationGatewayUrlPathMap(urlPathMaps),
            WebApplicationFirewallConfiguration: expandArmApplicationGatewayApplicationGatewayWebApplicationFirewallConfiguration(webApplicationFirewallConfiguration),
        },
        Tags: tags.Expand(t),
        Zones: utils.ExpandStringSlice(zones),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Application Gateway %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmApplicationGatewayRead(d, meta)
}

func resourceArmApplicationGatewayRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationGatewaysClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["applicationGateways"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Application Gateway %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if applicationGatewayPropertiesFormat := resp.ApplicationGatewayPropertiesFormat; applicationGatewayPropertiesFormat != nil {
        if err := d.Set("authentication_certificates", flattenArmApplicationGatewayApplicationGatewayAuthenticationCertificate(applicationGatewayPropertiesFormat.AuthenticationCertificates)); err != nil {
            return fmt.Errorf("Error setting `authentication_certificates`: %+v", err)
        }
        if err := d.Set("autoscale_configuration", flattenArmApplicationGatewayApplicationGatewayAutoscaleConfiguration(applicationGatewayPropertiesFormat.AutoscaleConfiguration)); err != nil {
            return fmt.Errorf("Error setting `autoscale_configuration`: %+v", err)
        }
        if err := d.Set("backend_address_pools", flattenArmApplicationGatewayApplicationGatewayBackendAddressPool(applicationGatewayPropertiesFormat.BackendAddressPools)); err != nil {
            return fmt.Errorf("Error setting `backend_address_pools`: %+v", err)
        }
        if err := d.Set("backend_http_settings_collection", flattenArmApplicationGatewayApplicationGatewayBackendHttpSettings(applicationGatewayPropertiesFormat.BackendHttpSettingsCollection)); err != nil {
            return fmt.Errorf("Error setting `backend_http_settings_collection`: %+v", err)
        }
        d.Set("enable_fips", applicationGatewayPropertiesFormat.EnableFips)
        d.Set("enable_http2", applicationGatewayPropertiesFormat.EnableHttp2)
        if err := d.Set("frontend_ipconfigurations", flattenArmApplicationGatewayApplicationGatewayFrontendIPConfiguration(applicationGatewayPropertiesFormat.FrontendIpconfigurations)); err != nil {
            return fmt.Errorf("Error setting `frontend_ipconfigurations`: %+v", err)
        }
        if err := d.Set("frontend_ports", flattenArmApplicationGatewayApplicationGatewayFrontendPort(applicationGatewayPropertiesFormat.FrontendPorts)); err != nil {
            return fmt.Errorf("Error setting `frontend_ports`: %+v", err)
        }
        if err := d.Set("gateway_ipconfigurations", flattenArmApplicationGatewayApplicationGatewayIPConfiguration(applicationGatewayPropertiesFormat.GatewayIpconfigurations)); err != nil {
            return fmt.Errorf("Error setting `gateway_ipconfigurations`: %+v", err)
        }
        if err := d.Set("http_listeners", flattenArmApplicationGatewayApplicationGatewayHttpListener(applicationGatewayPropertiesFormat.HttpListeners)); err != nil {
            return fmt.Errorf("Error setting `http_listeners`: %+v", err)
        }
        d.Set("operational_state", string(applicationGatewayPropertiesFormat.OperationalState))
        if err := d.Set("probes", flattenArmApplicationGatewayApplicationGatewayProbe(applicationGatewayPropertiesFormat.Probes)); err != nil {
            return fmt.Errorf("Error setting `probes`: %+v", err)
        }
        d.Set("provisioning_state", applicationGatewayPropertiesFormat.ProvisioningState)
        if err := d.Set("redirect_configurations", flattenArmApplicationGatewayApplicationGatewayRedirectConfiguration(applicationGatewayPropertiesFormat.RedirectConfigurations)); err != nil {
            return fmt.Errorf("Error setting `redirect_configurations`: %+v", err)
        }
        if err := d.Set("request_routing_rules", flattenArmApplicationGatewayApplicationGatewayRequestRoutingRule(applicationGatewayPropertiesFormat.RequestRoutingRules)); err != nil {
            return fmt.Errorf("Error setting `request_routing_rules`: %+v", err)
        }
        d.Set("resource_guid", applicationGatewayPropertiesFormat.ResourceGuid)
        if err := d.Set("sku", flattenArmApplicationGatewayApplicationGatewaySku(applicationGatewayPropertiesFormat.Sku)); err != nil {
            return fmt.Errorf("Error setting `sku`: %+v", err)
        }
        if err := d.Set("ssl_certificates", flattenArmApplicationGatewayApplicationGatewaySslCertificate(applicationGatewayPropertiesFormat.SslCertificates)); err != nil {
            return fmt.Errorf("Error setting `ssl_certificates`: %+v", err)
        }
        if err := d.Set("ssl_policy", flattenArmApplicationGatewayApplicationGatewaySslPolicy(applicationGatewayPropertiesFormat.SslPolicy)); err != nil {
            return fmt.Errorf("Error setting `ssl_policy`: %+v", err)
        }
        if err := d.Set("url_path_maps", flattenArmApplicationGatewayApplicationGatewayUrlPathMap(applicationGatewayPropertiesFormat.URLPathMaps)); err != nil {
            return fmt.Errorf("Error setting `url_path_maps`: %+v", err)
        }
        if err := d.Set("web_application_firewall_configuration", flattenArmApplicationGatewayApplicationGatewayWebApplicationFirewallConfiguration(applicationGatewayPropertiesFormat.WebApplicationFirewallConfiguration)); err != nil {
            return fmt.Errorf("Error setting `web_application_firewall_configuration`: %+v", err)
        }
    }
    d.Set("etag", resp.Etag)
    d.Set("type", resp.Type)
    d.Set("zones", utils.FlattenStringSlice(resp.Zones))

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmApplicationGatewayDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationGatewaysClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["applicationGateways"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmApplicationGatewayApplicationGatewayAuthenticationCertificate(input []interface{}) *[]network.ApplicationGatewayAuthenticationCertificate {
    results := make([]network.ApplicationGatewayAuthenticationCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        data := v["data"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayAuthenticationCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayAuthenticationCertificatePropertiesFormat: &network.ApplicationGatewayAuthenticationCertificatePropertiesFormat{
                Data: utils.String(data),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayAutoscaleConfiguration(input []interface{}) *network.ApplicationGatewayAutoscaleConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    bounds := v["bounds"].([]interface{})

    result := network.ApplicationGatewayAutoscaleConfiguration{
        Bounds: expandArmApplicationGatewayApplicationGatewayAutoscaleBounds(bounds),
    }
    return &result
}

func expandArmApplicationGatewayApplicationGatewayBackendAddressPool(input []interface{}) *[]network.ApplicationGatewayBackendAddressPool {
    results := make([]network.ApplicationGatewayBackendAddressPool, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        backendIpconfigurations := v["backend_ipconfigurations"].([]interface{})
        backendAddresses := v["backend_addresses"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayBackendAddressPool{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayBackendAddressPoolPropertiesFormat: &network.ApplicationGatewayBackendAddressPoolPropertiesFormat{
                BackendAddresses: expandArmApplicationGatewayApplicationGatewayBackendAddress(backendAddresses),
                BackendIpconfigurations: expandArmApplicationGatewayInterfaceIPConfiguration(backendIpconfigurations),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayBackendHttpSettings(input []interface{}) *[]network.ApplicationGatewayBackendHttpSettings {
    results := make([]network.ApplicationGatewayBackendHttpSettings, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        port := v["port"].(int)
        protocol := v["protocol"].(string)
        cookieBasedAffinity := v["cookie_based_affinity"].(string)
        requestTimeout := v["request_timeout"].(int)
        probe := v["probe"].([]interface{})
        authenticationCertificates := v["authentication_certificates"].([]interface{})
        connectionDraining := v["connection_draining"].([]interface{})
        hostName := v["host_name"].(string)
        pickHostNameFromBackendAddress := v["pick_host_name_from_backend_address"].(bool)
        affinityCookieName := v["affinity_cookie_name"].(string)
        probeEnabled := v["probe_enabled"].(bool)
        path := v["path"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayBackendHttpSettings{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayBackendHttpSettingsPropertiesFormat: &network.ApplicationGatewayBackendHttpSettingsPropertiesFormat{
                AffinityCookieName: utils.String(affinityCookieName),
                AuthenticationCertificates: expandArmApplicationGatewaySubResource(authenticationCertificates),
                ConnectionDraining: expandArmApplicationGatewayApplicationGatewayConnectionDraining(connectionDraining),
                CookieBasedAffinity: network.ApplicationGatewayCookieBasedAffinity(cookieBasedAffinity),
                HostName: utils.String(hostName),
                Path: utils.String(path),
                PickHostNameFromBackendAddress: utils.Bool(pickHostNameFromBackendAddress),
                Port: utils.Int32(int32(port)),
                Probe: expandArmApplicationGatewaySubResource(probe),
                ProbeEnabled: utils.Bool(probeEnabled),
                Protocol: network.ApplicationGatewayProtocol(protocol),
                RequestTimeout: utils.Int32(int32(requestTimeout)),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayFrontendIPConfiguration(input []interface{}) *[]network.ApplicationGatewayFrontendIPConfiguration {
    results := make([]network.ApplicationGatewayFrontendIPConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        privateIpAddress := v["private_ip_address"].(string)
        privateIpallocationMethod := v["private_ipallocation_method"].(string)
        subnet := v["subnet"].([]interface{})
        publicIpAddress := v["public_ip_address"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayFrontendIPConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayFrontendIPConfigurationPropertiesFormat: &network.ApplicationGatewayFrontendIPConfigurationPropertiesFormat{
                PrivateIpAddress: utils.String(privateIpAddress),
                PrivateIpallocationMethod: network.IPAllocationMethod(privateIpallocationMethod),
                PublicIpAddress: expandArmApplicationGatewaySubResource(publicIpAddress),
                Subnet: expandArmApplicationGatewaySubResource(subnet),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayFrontendPort(input []interface{}) *[]network.ApplicationGatewayFrontendPort {
    results := make([]network.ApplicationGatewayFrontendPort, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        port := v["port"].(int)
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayFrontendPort{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayFrontendPortPropertiesFormat: &network.ApplicationGatewayFrontendPortPropertiesFormat{
                Port: utils.Int32(int32(port)),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayIPConfiguration(input []interface{}) *[]network.ApplicationGatewayIPConfiguration {
    results := make([]network.ApplicationGatewayIPConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        subnet := v["subnet"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayIPConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayIPConfigurationPropertiesFormat: &network.ApplicationGatewayIPConfigurationPropertiesFormat{
                Subnet: expandArmApplicationGatewaySubResource(subnet),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayHttpListener(input []interface{}) *[]network.ApplicationGatewayHttpListener {
    results := make([]network.ApplicationGatewayHttpListener, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        frontendIpconfiguration := v["frontend_ipconfiguration"].([]interface{})
        frontendPort := v["frontend_port"].([]interface{})
        protocol := v["protocol"].(string)
        hostName := v["host_name"].(string)
        sslCertificate := v["ssl_certificate"].([]interface{})
        requireServerNameIndication := v["require_server_name_indication"].(bool)
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayHttpListener{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayHttpListenerPropertiesFormat: &network.ApplicationGatewayHttpListenerPropertiesFormat{
                FrontendIpconfiguration: expandArmApplicationGatewaySubResource(frontendIpconfiguration),
                FrontendPort: expandArmApplicationGatewaySubResource(frontendPort),
                HostName: utils.String(hostName),
                Protocol: network.ApplicationGatewayProtocol(protocol),
                RequireServerNameIndication: utils.Bool(requireServerNameIndication),
                SslCertificate: expandArmApplicationGatewaySubResource(sslCertificate),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayProbe(input []interface{}) *[]network.ApplicationGatewayProbe {
    results := make([]network.ApplicationGatewayProbe, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        protocol := v["protocol"].(string)
        host := v["host"].(string)
        path := v["path"].(string)
        interval := v["interval"].(int)
        timeout := v["timeout"].(int)
        unhealthyThreshold := v["unhealthy_threshold"].(int)
        pickHostNameFromBackendHttpSettings := v["pick_host_name_from_backend_http_settings"].(bool)
        minServers := v["min_servers"].(int)
        match := v["match"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayProbe{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayProbePropertiesFormat: &network.ApplicationGatewayProbePropertiesFormat{
                Host: utils.String(host),
                Interval: utils.Int32(int32(interval)),
                Match: expandArmApplicationGatewayApplicationGatewayProbeHealthResponseMatch(match),
                MinServers: utils.Int32(int32(minServers)),
                Path: utils.String(path),
                PickHostNameFromBackendHttpSettings: utils.Bool(pickHostNameFromBackendHttpSettings),
                Protocol: network.ApplicationGatewayProtocol(protocol),
                Timeout: utils.Int32(int32(timeout)),
                UnhealthyThreshold: utils.Int32(int32(unhealthyThreshold)),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayRedirectConfiguration(input []interface{}) *[]network.ApplicationGatewayRedirectConfiguration {
    results := make([]network.ApplicationGatewayRedirectConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        redirectType := v["redirect_type"].(string)
        targetListener := v["target_listener"].([]interface{})
        targetUrl := v["target_url"].(string)
        includePath := v["include_path"].(bool)
        includeQueryString := v["include_query_string"].(bool)
        requestRoutingRules := v["request_routing_rules"].([]interface{})
        urlPathMaps := v["url_path_maps"].([]interface{})
        pathRules := v["path_rules"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayRedirectConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayRedirectConfigurationPropertiesFormat: &network.ApplicationGatewayRedirectConfigurationPropertiesFormat{
                IncludePath: utils.Bool(includePath),
                IncludeQueryString: utils.Bool(includeQueryString),
                PathRules: expandArmApplicationGatewaySubResource(pathRules),
                RedirectType: network.ApplicationGatewayRedirectType(redirectType),
                RequestRoutingRules: expandArmApplicationGatewaySubResource(requestRoutingRules),
                TargetListener: expandArmApplicationGatewaySubResource(targetListener),
                TargetURL: utils.String(targetUrl),
                URLPathMaps: expandArmApplicationGatewaySubResource(urlPathMaps),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayRequestRoutingRule(input []interface{}) *[]network.ApplicationGatewayRequestRoutingRule {
    results := make([]network.ApplicationGatewayRequestRoutingRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        ruleType := v["rule_type"].(string)
        backendAddressPool := v["backend_address_pool"].([]interface{})
        backendHttpSettings := v["backend_http_settings"].([]interface{})
        httpListener := v["http_listener"].([]interface{})
        urlPathMap := v["url_path_map"].([]interface{})
        redirectConfiguration := v["redirect_configuration"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayRequestRoutingRule{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayRequestRoutingRulePropertiesFormat: &network.ApplicationGatewayRequestRoutingRulePropertiesFormat{
                BackendAddressPool: expandArmApplicationGatewaySubResource(backendAddressPool),
                BackendHttpSettings: expandArmApplicationGatewaySubResource(backendHttpSettings),
                HttpListener: expandArmApplicationGatewaySubResource(httpListener),
                RedirectConfiguration: expandArmApplicationGatewaySubResource(redirectConfiguration),
                RuleType: network.ApplicationGatewayRequestRoutingRuleType(ruleType),
                URLPathMap: expandArmApplicationGatewaySubResource(urlPathMap),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewaySku(input []interface{}) *network.ApplicationGatewaySku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    tier := v["tier"].(string)
    capacity := v["capacity"].(int)

    result := network.ApplicationGatewaySku{
        Capacity: utils.Int32(int32(capacity)),
        Name: network.ApplicationGatewaySkuName(name),
        Tier: network.ApplicationGatewayTier(tier),
    }
    return &result
}

func expandArmApplicationGatewayApplicationGatewaySslCertificate(input []interface{}) *[]network.ApplicationGatewaySslCertificate {
    results := make([]network.ApplicationGatewaySslCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        data := v["data"].(string)
        password := v["password"].(string)
        publicCertData := v["public_cert_data"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewaySslCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewaySslCertificatePropertiesFormat: &network.ApplicationGatewaySslCertificatePropertiesFormat{
                Data: utils.String(data),
                Password: utils.String(password),
                PublicCertData: utils.String(publicCertData),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewaySslPolicy(input []interface{}) *network.ApplicationGatewaySslPolicy {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    disabledSslProtocols := v["disabled_ssl_protocols"].([]interface{})
    policyType := v["policy_type"].(string)
    policyName := v["policy_name"].(string)
    cipherSuites := v["cipher_suites"].([]interface{})
    minProtocolVersion := v["min_protocol_version"].(string)

    result := network.ApplicationGatewaySslPolicy{
        CipherSuites: expandArmApplicationGateway(cipherSuites),
        DisabledSslProtocols: expandArmApplicationGateway(disabledSslProtocols),
        MinProtocolVersion: network.ApplicationGatewaySslProtocol(minProtocolVersion),
        PolicyName: network.ApplicationGatewaySslPolicyName(policyName),
        PolicyType: network.ApplicationGatewaySslPolicyType(policyType),
    }
    return &result
}

func expandArmApplicationGatewayApplicationGatewayUrlPathMap(input []interface{}) *[]network.ApplicationGatewayUrlPathMap {
    results := make([]network.ApplicationGatewayUrlPathMap, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        defaultBackendAddressPool := v["default_backend_address_pool"].([]interface{})
        defaultBackendHttpSettings := v["default_backend_http_settings"].([]interface{})
        defaultRedirectConfiguration := v["default_redirect_configuration"].([]interface{})
        pathRules := v["path_rules"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayUrlPathMap{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayUrlPathMapPropertiesFormat: &network.ApplicationGatewayUrlPathMapPropertiesFormat{
                DefaultBackendAddressPool: expandArmApplicationGatewaySubResource(defaultBackendAddressPool),
                DefaultBackendHttpSettings: expandArmApplicationGatewaySubResource(defaultBackendHttpSettings),
                DefaultRedirectConfiguration: expandArmApplicationGatewaySubResource(defaultRedirectConfiguration),
                PathRules: expandArmApplicationGatewayApplicationGatewayPathRule(pathRules),
            },
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayWebApplicationFirewallConfiguration(input []interface{}) *network.ApplicationGatewayWebApplicationFirewallConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    enabled := v["enabled"].(bool)
    firewallMode := v["firewall_mode"].(string)
    ruleSetType := v["rule_set_type"].(string)
    ruleSetVersion := v["rule_set_version"].(string)
    disabledRuleGroups := v["disabled_rule_groups"].([]interface{})
    requestBodyCheck := v["request_body_check"].(bool)
    maxRequestBodySize := v["max_request_body_size"].(int)

    result := network.ApplicationGatewayWebApplicationFirewallConfiguration{
        DisabledRuleGroups: expandArmApplicationGatewayApplicationGatewayFirewallDisabledRuleGroup(disabledRuleGroups),
        Enabled: utils.Bool(enabled),
        FirewallMode: network.ApplicationGatewayFirewallMode(firewallMode),
        MaxRequestBodySize: utils.Int32(int32(maxRequestBodySize)),
        RequestBodyCheck: utils.Bool(requestBodyCheck),
        RuleSetType: utils.String(ruleSetType),
        RuleSetVersion: utils.String(ruleSetVersion),
    }
    return &result
}

func expandArmApplicationGatewayApplicationGatewayAutoscaleBounds(input []interface{}) *network.ApplicationGatewayAutoscaleBounds {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    min := v["min"].(int)
    max := v["max"].(int)

    result := network.ApplicationGatewayAutoscaleBounds{
        Max: utils.Int32(int32(max)),
        Min: utils.Int32(int32(min)),
    }
    return &result
}

func expandArmApplicationGatewayApplicationGatewayBackendAddress(input []interface{}) *[]network.ApplicationGatewayBackendAddress {
    results := make([]network.ApplicationGatewayBackendAddress, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        fqdn := v["fqdn"].(string)
        ipAddress := v["ip_address"].(string)

        result := network.ApplicationGatewayBackendAddress{
            Fqdn: utils.String(fqdn),
            IpAddress: utils.String(ipAddress),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayInterfaceIPConfiguration(input []interface{}) *[]network.InterfaceIPConfiguration {
    results := make([]network.InterfaceIPConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.InterfaceIPConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewaySubResource(input []interface{}) *[]network.SubResource {
    results := make([]network.SubResource, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)

        result := network.SubResource{
            ID: utils.String(id),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayConnectionDraining(input []interface{}) *network.ApplicationGatewayConnectionDraining {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    enabled := v["enabled"].(bool)
    drainTimeoutInSec := v["drain_timeout_in_sec"].(int)

    result := network.ApplicationGatewayConnectionDraining{
        DrainTimeoutInSec: utils.Int32(int32(drainTimeoutInSec)),
        Enabled: utils.Bool(enabled),
    }
    return &result
}

func expandArmApplicationGatewaySubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(id),
    }
    return &result
}

func expandArmApplicationGatewayApplicationGatewayProbeHealthResponseMatch(input []interface{}) *network.ApplicationGatewayProbeHealthResponseMatch {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    body := v["body"].(string)
    statusCodes := v["status_codes"].([]interface{})

    result := network.ApplicationGatewayProbeHealthResponseMatch{
        Body: utils.String(body),
        StatusCodes: utils.ExpandStringSlice(statusCodes),
    }
    return &result
}

func expandArmApplicationGateway(input []interface{}) *[]network. {
    results := make([]network., 0)
    for _, item := range input {
        v := item.(string)
        result := network.(v)
        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayPathRule(input []interface{}) *[]network.ApplicationGatewayPathRule {
    results := make([]network.ApplicationGatewayPathRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayPathRule{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayFirewallDisabledRuleGroup(input []interface{}) *[]network.ApplicationGatewayFirewallDisabledRuleGroup {
    results := make([]network.ApplicationGatewayFirewallDisabledRuleGroup, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        ruleGroupName := v["rule_group_name"].(string)
        rules := v["rules"].([]interface{})

        result := network.ApplicationGatewayFirewallDisabledRuleGroup{
            RuleGroupName: utils.String(ruleGroupName),
            Rules: utils.ExpandInteger32Slice(rules),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmApplicationGatewayApplicationGatewayAuthenticationCertificate(input *[]network.ApplicationGatewayAuthenticationCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if applicationGatewayAuthenticationCertificatePropertiesFormat := item.ApplicationGatewayAuthenticationCertificatePropertiesFormat; applicationGatewayAuthenticationCertificatePropertiesFormat != nil {
            if data := applicationGatewayAuthenticationCertificatePropertiesFormat.Data; data != nil {
                v["data"] = *data
            }
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayAutoscaleConfiguration(input *network.ApplicationGatewayAutoscaleConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["bounds"] = flattenArmApplicationGatewayApplicationGatewayAutoscaleBounds(input.Bounds)

    return []interface{}{result}
}

func flattenArmApplicationGatewayApplicationGatewayBackendAddressPool(input *[]network.ApplicationGatewayBackendAddressPool) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if applicationGatewayBackendAddressPoolPropertiesFormat := item.ApplicationGatewayBackendAddressPoolPropertiesFormat; applicationGatewayBackendAddressPoolPropertiesFormat != nil {
            v["backend_addresses"] = flattenArmApplicationGatewayApplicationGatewayBackendAddress(applicationGatewayBackendAddressPoolPropertiesFormat.BackendAddresses)
            v["backend_ipconfigurations"] = flattenArmApplicationGatewayInterfaceIPConfiguration(applicationGatewayBackendAddressPoolPropertiesFormat.BackendIpconfigurations)
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayBackendHttpSettings(input *[]network.ApplicationGatewayBackendHttpSettings) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if applicationGatewayBackendHttpSettingsPropertiesFormat := item.ApplicationGatewayBackendHttpSettingsPropertiesFormat; applicationGatewayBackendHttpSettingsPropertiesFormat != nil {
            if affinityCookieName := applicationGatewayBackendHttpSettingsPropertiesFormat.AffinityCookieName; affinityCookieName != nil {
                v["affinity_cookie_name"] = *affinityCookieName
            }
            v["authentication_certificates"] = flattenArmApplicationGatewaySubResource(applicationGatewayBackendHttpSettingsPropertiesFormat.AuthenticationCertificates)
            v["connection_draining"] = flattenArmApplicationGatewayApplicationGatewayConnectionDraining(applicationGatewayBackendHttpSettingsPropertiesFormat.ConnectionDraining)
            v["cookie_based_affinity"] = string(applicationGatewayBackendHttpSettingsPropertiesFormat.CookieBasedAffinity)
            if hostName := applicationGatewayBackendHttpSettingsPropertiesFormat.HostName; hostName != nil {
                v["host_name"] = *hostName
            }
            if path := applicationGatewayBackendHttpSettingsPropertiesFormat.Path; path != nil {
                v["path"] = *path
            }
            if pickHostNameFromBackendAddress := applicationGatewayBackendHttpSettingsPropertiesFormat.PickHostNameFromBackendAddress; pickHostNameFromBackendAddress != nil {
                v["pick_host_name_from_backend_address"] = *pickHostNameFromBackendAddress
            }
            if port := applicationGatewayBackendHttpSettingsPropertiesFormat.Port; port != nil {
                v["port"] = int(*port)
            }
            v["probe"] = flattenArmApplicationGatewaySubResource(applicationGatewayBackendHttpSettingsPropertiesFormat.Probe)
            if probeEnabled := applicationGatewayBackendHttpSettingsPropertiesFormat.ProbeEnabled; probeEnabled != nil {
                v["probe_enabled"] = *probeEnabled
            }
            v["protocol"] = string(applicationGatewayBackendHttpSettingsPropertiesFormat.Protocol)
            if requestTimeout := applicationGatewayBackendHttpSettingsPropertiesFormat.RequestTimeout; requestTimeout != nil {
                v["request_timeout"] = int(*requestTimeout)
            }
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayFrontendIPConfiguration(input *[]network.ApplicationGatewayFrontendIPConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if applicationGatewayFrontendIPConfigurationPropertiesFormat := item.ApplicationGatewayFrontendIPConfigurationPropertiesFormat; applicationGatewayFrontendIPConfigurationPropertiesFormat != nil {
            if privateIpAddress := applicationGatewayFrontendIPConfigurationPropertiesFormat.PrivateIpAddress; privateIpAddress != nil {
                v["private_ip_address"] = *privateIpAddress
            }
            v["private_ipallocation_method"] = string(applicationGatewayFrontendIPConfigurationPropertiesFormat.PrivateIpallocationMethod)
            v["public_ip_address"] = flattenArmApplicationGatewaySubResource(applicationGatewayFrontendIPConfigurationPropertiesFormat.PublicIpAddress)
            v["subnet"] = flattenArmApplicationGatewaySubResource(applicationGatewayFrontendIPConfigurationPropertiesFormat.Subnet)
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayFrontendPort(input *[]network.ApplicationGatewayFrontendPort) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if applicationGatewayFrontendPortPropertiesFormat := item.ApplicationGatewayFrontendPortPropertiesFormat; applicationGatewayFrontendPortPropertiesFormat != nil {
            if port := applicationGatewayFrontendPortPropertiesFormat.Port; port != nil {
                v["port"] = int(*port)
            }
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayIPConfiguration(input *[]network.ApplicationGatewayIPConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if applicationGatewayIPConfigurationPropertiesFormat := item.ApplicationGatewayIPConfigurationPropertiesFormat; applicationGatewayIPConfigurationPropertiesFormat != nil {
            v["subnet"] = flattenArmApplicationGatewaySubResource(applicationGatewayIPConfigurationPropertiesFormat.Subnet)
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayHttpListener(input *[]network.ApplicationGatewayHttpListener) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if applicationGatewayHttpListenerPropertiesFormat := item.ApplicationGatewayHttpListenerPropertiesFormat; applicationGatewayHttpListenerPropertiesFormat != nil {
            v["frontend_ipconfiguration"] = flattenArmApplicationGatewaySubResource(applicationGatewayHttpListenerPropertiesFormat.FrontendIpconfiguration)
            v["frontend_port"] = flattenArmApplicationGatewaySubResource(applicationGatewayHttpListenerPropertiesFormat.FrontendPort)
            if hostName := applicationGatewayHttpListenerPropertiesFormat.HostName; hostName != nil {
                v["host_name"] = *hostName
            }
            v["protocol"] = string(applicationGatewayHttpListenerPropertiesFormat.Protocol)
            if requireServerNameIndication := applicationGatewayHttpListenerPropertiesFormat.RequireServerNameIndication; requireServerNameIndication != nil {
                v["require_server_name_indication"] = *requireServerNameIndication
            }
            v["ssl_certificate"] = flattenArmApplicationGatewaySubResource(applicationGatewayHttpListenerPropertiesFormat.SslCertificate)
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayProbe(input *[]network.ApplicationGatewayProbe) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if applicationGatewayProbePropertiesFormat := item.ApplicationGatewayProbePropertiesFormat; applicationGatewayProbePropertiesFormat != nil {
            if host := applicationGatewayProbePropertiesFormat.Host; host != nil {
                v["host"] = *host
            }
            if interval := applicationGatewayProbePropertiesFormat.Interval; interval != nil {
                v["interval"] = int(*interval)
            }
            v["match"] = flattenArmApplicationGatewayApplicationGatewayProbeHealthResponseMatch(applicationGatewayProbePropertiesFormat.Match)
            if minServers := applicationGatewayProbePropertiesFormat.MinServers; minServers != nil {
                v["min_servers"] = int(*minServers)
            }
            if path := applicationGatewayProbePropertiesFormat.Path; path != nil {
                v["path"] = *path
            }
            if pickHostNameFromBackendHttpSettings := applicationGatewayProbePropertiesFormat.PickHostNameFromBackendHttpSettings; pickHostNameFromBackendHttpSettings != nil {
                v["pick_host_name_from_backend_http_settings"] = *pickHostNameFromBackendHttpSettings
            }
            v["protocol"] = string(applicationGatewayProbePropertiesFormat.Protocol)
            if timeout := applicationGatewayProbePropertiesFormat.Timeout; timeout != nil {
                v["timeout"] = int(*timeout)
            }
            if unhealthyThreshold := applicationGatewayProbePropertiesFormat.UnhealthyThreshold; unhealthyThreshold != nil {
                v["unhealthy_threshold"] = int(*unhealthyThreshold)
            }
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayRedirectConfiguration(input *[]network.ApplicationGatewayRedirectConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if applicationGatewayRedirectConfigurationPropertiesFormat := item.ApplicationGatewayRedirectConfigurationPropertiesFormat; applicationGatewayRedirectConfigurationPropertiesFormat != nil {
            if includePath := applicationGatewayRedirectConfigurationPropertiesFormat.IncludePath; includePath != nil {
                v["include_path"] = *includePath
            }
            if includeQueryString := applicationGatewayRedirectConfigurationPropertiesFormat.IncludeQueryString; includeQueryString != nil {
                v["include_query_string"] = *includeQueryString
            }
            v["path_rules"] = flattenArmApplicationGatewaySubResource(applicationGatewayRedirectConfigurationPropertiesFormat.PathRules)
            v["redirect_type"] = string(applicationGatewayRedirectConfigurationPropertiesFormat.RedirectType)
            v["request_routing_rules"] = flattenArmApplicationGatewaySubResource(applicationGatewayRedirectConfigurationPropertiesFormat.RequestRoutingRules)
            v["target_listener"] = flattenArmApplicationGatewaySubResource(applicationGatewayRedirectConfigurationPropertiesFormat.TargetListener)
            if targetUrl := applicationGatewayRedirectConfigurationPropertiesFormat.TargetURL; targetUrl != nil {
                v["target_url"] = *targetUrl
            }
            v["url_path_maps"] = flattenArmApplicationGatewaySubResource(applicationGatewayRedirectConfigurationPropertiesFormat.URLPathMaps)
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayRequestRoutingRule(input *[]network.ApplicationGatewayRequestRoutingRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if applicationGatewayRequestRoutingRulePropertiesFormat := item.ApplicationGatewayRequestRoutingRulePropertiesFormat; applicationGatewayRequestRoutingRulePropertiesFormat != nil {
            v["backend_address_pool"] = flattenArmApplicationGatewaySubResource(applicationGatewayRequestRoutingRulePropertiesFormat.BackendAddressPool)
            v["backend_http_settings"] = flattenArmApplicationGatewaySubResource(applicationGatewayRequestRoutingRulePropertiesFormat.BackendHttpSettings)
            v["http_listener"] = flattenArmApplicationGatewaySubResource(applicationGatewayRequestRoutingRulePropertiesFormat.HttpListener)
            v["redirect_configuration"] = flattenArmApplicationGatewaySubResource(applicationGatewayRequestRoutingRulePropertiesFormat.RedirectConfiguration)
            v["rule_type"] = string(applicationGatewayRequestRoutingRulePropertiesFormat.RuleType)
            v["url_path_map"] = flattenArmApplicationGatewaySubResource(applicationGatewayRequestRoutingRulePropertiesFormat.URLPathMap)
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewaySku(input *network.ApplicationGatewaySku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["name"] = string(input.Name)
    if capacity := input.Capacity; capacity != nil {
        result["capacity"] = int(*capacity)
    }
    result["tier"] = string(input.Tier)

    return []interface{}{result}
}

func flattenArmApplicationGatewayApplicationGatewaySslCertificate(input *[]network.ApplicationGatewaySslCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if applicationGatewaySslCertificatePropertiesFormat := item.ApplicationGatewaySslCertificatePropertiesFormat; applicationGatewaySslCertificatePropertiesFormat != nil {
            if data := applicationGatewaySslCertificatePropertiesFormat.Data; data != nil {
                v["data"] = *data
            }
            if password := applicationGatewaySslCertificatePropertiesFormat.Password; password != nil {
                v["password"] = *password
            }
            if publicCertData := applicationGatewaySslCertificatePropertiesFormat.PublicCertData; publicCertData != nil {
                v["public_cert_data"] = *publicCertData
            }
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewaySslPolicy(input *network.ApplicationGatewaySslPolicy) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["cipher_suites"] = flattenArmApplicationGateway(string(input.CipherSuites))
    result["disabled_ssl_protocols"] = flattenArmApplicationGateway(string(input.DisabledSslProtocols))
    result["min_protocol_version"] = string(input.MinProtocolVersion)
    result["policy_name"] = string(input.PolicyName)
    result["policy_type"] = string(input.PolicyType)

    return []interface{}{result}
}

func flattenArmApplicationGatewayApplicationGatewayUrlPathMap(input *[]network.ApplicationGatewayUrlPathMap) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if applicationGatewayUrlPathMapPropertiesFormat := item.ApplicationGatewayUrlPathMapPropertiesFormat; applicationGatewayUrlPathMapPropertiesFormat != nil {
            v["default_backend_address_pool"] = flattenArmApplicationGatewaySubResource(applicationGatewayUrlPathMapPropertiesFormat.DefaultBackendAddressPool)
            v["default_backend_http_settings"] = flattenArmApplicationGatewaySubResource(applicationGatewayUrlPathMapPropertiesFormat.DefaultBackendHttpSettings)
            v["default_redirect_configuration"] = flattenArmApplicationGatewaySubResource(applicationGatewayUrlPathMapPropertiesFormat.DefaultRedirectConfiguration)
            v["path_rules"] = flattenArmApplicationGatewayApplicationGatewayPathRule(applicationGatewayUrlPathMapPropertiesFormat.PathRules)
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayWebApplicationFirewallConfiguration(input *network.ApplicationGatewayWebApplicationFirewallConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["disabled_rule_groups"] = flattenArmApplicationGatewayApplicationGatewayFirewallDisabledRuleGroup(input.DisabledRuleGroups)
    if enabled := input.Enabled; enabled != nil {
        result["enabled"] = *enabled
    }
    result["firewall_mode"] = string(input.FirewallMode)
    if maxRequestBodySize := input.MaxRequestBodySize; maxRequestBodySize != nil {
        result["max_request_body_size"] = int(*maxRequestBodySize)
    }
    if requestBodyCheck := input.RequestBodyCheck; requestBodyCheck != nil {
        result["request_body_check"] = *requestBodyCheck
    }
    if ruleSetType := input.RuleSetType; ruleSetType != nil {
        result["rule_set_type"] = *ruleSetType
    }
    if ruleSetVersion := input.RuleSetVersion; ruleSetVersion != nil {
        result["rule_set_version"] = *ruleSetVersion
    }

    return []interface{}{result}
}

func flattenArmApplicationGatewayApplicationGatewayAutoscaleBounds(input *network.ApplicationGatewayAutoscaleBounds) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if max := input.Max; max != nil {
        result["max"] = int(*max)
    }
    if min := input.Min; min != nil {
        result["min"] = int(*min)
    }

    return []interface{}{result}
}

func flattenArmApplicationGatewayApplicationGatewayBackendAddress(input *[]network.ApplicationGatewayBackendAddress) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if fqdn := item.Fqdn; fqdn != nil {
            v["fqdn"] = *fqdn
        }
        if ipAddress := item.IpAddress; ipAddress != nil {
            v["ip_address"] = *ipAddress
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayInterfaceIPConfiguration(input *[]network.InterfaceIPConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewaySubResource(input *[]network.SubResource) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayConnectionDraining(input *network.ApplicationGatewayConnectionDraining) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if drainTimeoutInSec := input.DrainTimeoutInSec; drainTimeoutInSec != nil {
        result["drain_timeout_in_sec"] = int(*drainTimeoutInSec)
    }
    if enabled := input.Enabled; enabled != nil {
        result["enabled"] = *enabled
    }

    return []interface{}{result}
}

func flattenArmApplicationGatewaySubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}

func flattenArmApplicationGatewayApplicationGatewayProbeHealthResponseMatch(input *network.ApplicationGatewayProbeHealthResponseMatch) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if body := input.Body; body != nil {
        result["body"] = *body
    }
    result["status_codes"] = utils.FlattenStringSlice(input.StatusCodes)

    return []interface{}{result}
}

func flattenArmApplicationGateway(input *[]network.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayPathRule(input *[]network.ApplicationGatewayPathRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmApplicationGatewayApplicationGatewayFirewallDisabledRuleGroup(input *[]network.ApplicationGatewayFirewallDisabledRuleGroup) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if ruleGroupName := item.RuleGroupName; ruleGroupName != nil {
            v["rule_group_name"] = *ruleGroupName
        }
        v["rules"] = utils.FlattenInteger32Slice(item.Rules)

        results = append(results, v)
    }

    return results
}
