// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmJob() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmJobCreate,
        Read: resourceArmJobRead,
        Update: resourceArmJobUpdate,
        Delete: resourceArmJobDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "backup_drive_manifest": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "cancel_requested": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "delivery_package": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "carrier_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "drive_count": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "ship_date": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "tracking_number": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "diagnostics_path": {
                Type: schema.TypeString,
                Optional: true,
            },

            "drive_list": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "bit_locker_key": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "bytes_succeeded": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "copy_status": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "drive_header_hash": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "drive_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "error_log_uri": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "manifest_file": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "manifest_hash": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "manifest_uri": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "percent_complete": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(storageimportexport.Specified),
                                string(storageimportexport.Received),
                                string(storageimportexport.NeverReceived),
                                string(storageimportexport.Transferring),
                                string(storageimportexport.Completed),
                                string(storageimportexport.CompletedMoreInfo),
                                string(storageimportexport.ShippedBack),
                            }, false),
                            Default: string(storageimportexport.Specified),
                        },
                        "verbose_log_uri": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "export": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "blob_list": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "blob_path": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                    "blob_path_prefix": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                },
                            },
                        },
                        "blob_listblob_path": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "incomplete_blob_list_uri": {
                Type: schema.TypeString,
                Optional: true,
            },

            "job_type": {
                Type: schema.TypeString,
                Optional: true,
            },

            "log_level": {
                Type: schema.TypeString,
                Optional: true,
            },

            "percent_complete": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "return_address": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "city": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "country_or_region": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "email": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "phone": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "postal_code": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "recipient_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "street_address1": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "state_or_province": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "street_address2": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "return_package": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "carrier_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "drive_count": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "ship_date": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "tracking_number": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "return_shipping": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "carrier_account_number": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "carrier_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "shipping_information": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "city": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "country_or_region": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "postal_code": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "recipient_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "state_or_province": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "street_address1": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "phone": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "street_address2": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "state": {
                Type: schema.TypeString,
                Optional: true,
            },

            "storage_account_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmJobCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jobsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Job %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_job", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    backupDriveManifest := d.Get("backup_drive_manifest").(bool)
    cancelRequested := d.Get("cancel_requested").(bool)
    deliveryPackage := d.Get("delivery_package").([]interface{})
    diagnosticsPath := d.Get("diagnostics_path").(string)
    driveList := d.Get("drive_list").([]interface{})
    export := d.Get("export").([]interface{})
    incompleteBlobListUri := d.Get("incomplete_blob_list_uri").(string)
    jobType := d.Get("job_type").(string)
    logLevel := d.Get("log_level").(string)
    percentComplete := d.Get("percent_complete").(int)
    returnAddress := d.Get("return_address").([]interface{})
    returnPackage := d.Get("return_package").([]interface{})
    returnShipping := d.Get("return_shipping").([]interface{})
    shippingInformation := d.Get("shipping_information").([]interface{})
    state := d.Get("state").(string)
    storageAccountId := d.Get("storage_account_id").(string)
    t := d.Get("tags").(map[string]interface{})

    body := storageimportexport.PutJobParameters{
        Location: utils.String(location),
        JobDetails: &storageimportexport.JobDetails{
            BackupDriveManifest: utils.Bool(backupDriveManifest),
            CancelRequested: utils.Bool(cancelRequested),
            DeliveryPackage: expandArmJobPackageInfomation(deliveryPackage),
            DiagnosticsPath: utils.String(diagnosticsPath),
            DriveList: expandArmJobDriveStatus(driveList),
            Export: expandArmJobExport(export),
            IncompleteBlobListURI: utils.String(incompleteBlobListUri),
            JobType: utils.String(jobType),
            LogLevel: utils.String(logLevel),
            PercentComplete: utils.Int(percentComplete),
            ReturnAddress: expandArmJobReturnAddress(returnAddress),
            ReturnPackage: expandArmJobPackageInfomation(returnPackage),
            ReturnShipping: expandArmJobReturnShipping(returnShipping),
            ShippingInformation: expandArmJobShippingInformation(shippingInformation),
            State: utils.String(state),
            StorageAccountID: utils.String(storageAccountId),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Create(ctx, resourceGroup, name, body); err != nil {
        return fmt.Errorf("Error creating Job %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Job %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Job %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmJobRead(d, meta)
}

func resourceArmJobRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jobsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["jobs"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Job %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Job %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmJobUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jobsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    backupDriveManifest := d.Get("backup_drive_manifest").(bool)
    cancelRequested := d.Get("cancel_requested").(bool)
    deliveryPackage := d.Get("delivery_package").([]interface{})
    diagnosticsPath := d.Get("diagnostics_path").(string)
    driveList := d.Get("drive_list").([]interface{})
    export := d.Get("export").([]interface{})
    incompleteBlobListUri := d.Get("incomplete_blob_list_uri").(string)
    jobType := d.Get("job_type").(string)
    logLevel := d.Get("log_level").(string)
    percentComplete := d.Get("percent_complete").(int)
    returnAddress := d.Get("return_address").([]interface{})
    returnPackage := d.Get("return_package").([]interface{})
    returnShipping := d.Get("return_shipping").([]interface{})
    shippingInformation := d.Get("shipping_information").([]interface{})
    state := d.Get("state").(string)
    storageAccountId := d.Get("storage_account_id").(string)
    t := d.Get("tags").(map[string]interface{})

    body := storageimportexport.PutJobParameters{
        JobDetails: &storageimportexport.JobDetails{
            BackupDriveManifest: utils.Bool(backupDriveManifest),
            CancelRequested: utils.Bool(cancelRequested),
            DeliveryPackage: expandArmJobPackageInfomation(deliveryPackage),
            DiagnosticsPath: utils.String(diagnosticsPath),
            DriveList: expandArmJobDriveStatus(driveList),
            Export: expandArmJobExport(export),
            IncompleteBlobListURI: utils.String(incompleteBlobListUri),
            JobType: utils.String(jobType),
            LogLevel: utils.String(logLevel),
            PercentComplete: utils.Int(percentComplete),
            ReturnAddress: expandArmJobReturnAddress(returnAddress),
            ReturnPackage: expandArmJobPackageInfomation(returnPackage),
            ReturnShipping: expandArmJobReturnShipping(returnShipping),
            ShippingInformation: expandArmJobShippingInformation(shippingInformation),
            State: utils.String(state),
            StorageAccountID: utils.String(storageAccountId),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, body); err != nil {
        return fmt.Errorf("Error updating Job %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmJobRead(d, meta)
}

func resourceArmJobDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jobsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["jobs"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Job %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}

func expandArmJobPackageInfomation(input []interface{}) *storageimportexport.PackageInfomation {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    carrierName := v["carrier_name"].(string)
    trackingNumber := v["tracking_number"].(string)
    driveCount := v["drive_count"].(int)
    shipDate := v["ship_date"].(string)

    result := storageimportexport.PackageInfomation{
        CarrierName: utils.String(carrierName),
        DriveCount: utils.Int(driveCount),
        ShipDate: utils.String(shipDate),
        TrackingNumber: utils.String(trackingNumber),
    }
    return &result
}

func expandArmJobDriveStatus(input []interface{}) *[]storageimportexport.DriveStatus {
    results := make([]storageimportexport.DriveStatus, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        driveId := v["drive_id"].(string)
        bitLockerKey := v["bit_locker_key"].(string)
        manifestFile := v["manifest_file"].(string)
        manifestHash := v["manifest_hash"].(string)
        driveHeaderHash := v["drive_header_hash"].(string)
        state := v["state"].(string)
        copyStatus := v["copy_status"].(string)
        percentComplete := v["percent_complete"].(int)
        verboseLogUri := v["verbose_log_uri"].(string)
        errorLogUri := v["error_log_uri"].(string)
        manifestUri := v["manifest_uri"].(string)
        bytesSucceeded := v["bytes_succeeded"].(int)

        result := storageimportexport.DriveStatus{
            BitLockerKey: utils.String(bitLockerKey),
            BytesSucceeded: utils.Int64(int64(bytesSucceeded)),
            CopyStatus: utils.String(copyStatus),
            DriveHeaderHash: utils.String(driveHeaderHash),
            DriveID: utils.String(driveId),
            ErrorLogURI: utils.String(errorLogUri),
            ManifestFile: utils.String(manifestFile),
            ManifestHash: utils.String(manifestHash),
            ManifestURI: utils.String(manifestUri),
            PercentComplete: utils.Int(percentComplete),
            State: storageimportexport.DriveState(state),
            VerboseLogURI: utils.String(verboseLogUri),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmJobExport(input []interface{}) *storageimportexport.Export {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    blobList := v["blob_list"].([]interface{})
    blobListblobPath := v["blob_listblob_path"].(string)

    result := storageimportexport.Export{
        BlobList: expandArmJobExport_blobList(blobList),
        BlobListblobPath: utils.String(blobListblobPath),
    }
    return &result
}

func expandArmJobReturnAddress(input []interface{}) *storageimportexport.ReturnAddress {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    recipientName := v["recipient_name"].(string)
    streetAddress1 := v["street_address1"].(string)
    streetAddress2 := v["street_address2"].(string)
    city := v["city"].(string)
    stateOrProvince := v["state_or_province"].(string)
    postalCode := v["postal_code"].(string)
    countryOrRegion := v["country_or_region"].(string)
    phone := v["phone"].(string)
    email := v["email"].(string)

    result := storageimportexport.ReturnAddress{
        City: utils.String(city),
        CountryOrRegion: utils.String(countryOrRegion),
        Email: utils.String(email),
        Phone: utils.String(phone),
        PostalCode: utils.String(postalCode),
        RecipientName: utils.String(recipientName),
        StateOrProvince: utils.String(stateOrProvince),
        StreetAddress1: utils.String(streetAddress1),
        StreetAddress2: utils.String(streetAddress2),
    }
    return &result
}

func expandArmJobReturnShipping(input []interface{}) *storageimportexport.ReturnShipping {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    carrierName := v["carrier_name"].(string)
    carrierAccountNumber := v["carrier_account_number"].(string)

    result := storageimportexport.ReturnShipping{
        CarrierAccountNumber: utils.String(carrierAccountNumber),
        CarrierName: utils.String(carrierName),
    }
    return &result
}

func expandArmJobShippingInformation(input []interface{}) *storageimportexport.ShippingInformation {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    recipientName := v["recipient_name"].(string)
    streetAddress1 := v["street_address1"].(string)
    streetAddress2 := v["street_address2"].(string)
    city := v["city"].(string)
    stateOrProvince := v["state_or_province"].(string)
    postalCode := v["postal_code"].(string)
    countryOrRegion := v["country_or_region"].(string)
    phone := v["phone"].(string)

    result := storageimportexport.ShippingInformation{
        City: utils.String(city),
        CountryOrRegion: utils.String(countryOrRegion),
        Phone: utils.String(phone),
        PostalCode: utils.String(postalCode),
        RecipientName: utils.String(recipientName),
        StateOrProvince: utils.String(stateOrProvince),
        StreetAddress1: utils.String(streetAddress1),
        StreetAddress2: utils.String(streetAddress2),
    }
    return &result
}

func expandArmJobExport_blobList(input []interface{}) *storageimportexport.Export_blobList {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    blobPath := v["blob_path"].([]interface{})
    blobPathPrefix := v["blob_path_prefix"].([]interface{})

    result := storageimportexport.Export_blobList{
        BlobPath: utils.ExpandStringSlice(blobPath),
        BlobPathPrefix: utils.ExpandStringSlice(blobPathPrefix),
    }
    return &result
}
