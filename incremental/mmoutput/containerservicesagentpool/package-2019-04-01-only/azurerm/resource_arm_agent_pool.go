// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAgentPool() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAgentPoolCreateUpdate,
        Read: resourceArmAgentPoolRead,
        Update: resourceArmAgentPoolCreateUpdate,
        Delete: resourceArmAgentPoolDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "count": {
                Type: schema.TypeInt,
                Required: true,
            },

            "resource_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "vm_size": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(containerservices.Standard_A1),
                    string(containerservices.Standard_A10),
                    string(containerservices.Standard_A11),
                    string(containerservices.Standard_A1_v2),
                    string(containerservices.Standard_A2),
                    string(containerservices.Standard_A2_v2),
                    string(containerservices.Standard_A2m_v2),
                    string(containerservices.Standard_A3),
                    string(containerservices.Standard_A4),
                    string(containerservices.Standard_A4_v2),
                    string(containerservices.Standard_A4m_v2),
                    string(containerservices.Standard_A5),
                    string(containerservices.Standard_A6),
                    string(containerservices.Standard_A7),
                    string(containerservices.Standard_A8),
                    string(containerservices.Standard_A8_v2),
                    string(containerservices.Standard_A8m_v2),
                    string(containerservices.Standard_A9),
                    string(containerservices.Standard_B2ms),
                    string(containerservices.Standard_B2s),
                    string(containerservices.Standard_B4ms),
                    string(containerservices.Standard_B8ms),
                    string(containerservices.Standard_D1),
                    string(containerservices.Standard_D11),
                    string(containerservices.Standard_D11_v2),
                    string(containerservices.Standard_D11_v2_Promo),
                    string(containerservices.Standard_D12),
                    string(containerservices.Standard_D12_v2),
                    string(containerservices.Standard_D12_v2_Promo),
                    string(containerservices.Standard_D13),
                    string(containerservices.Standard_D13_v2),
                    string(containerservices.Standard_D13_v2_Promo),
                    string(containerservices.Standard_D14),
                    string(containerservices.Standard_D14_v2),
                    string(containerservices.Standard_D14_v2_Promo),
                    string(containerservices.Standard_D15_v2),
                    string(containerservices.Standard_D16_v3),
                    string(containerservices.Standard_D16s_v3),
                    string(containerservices.Standard_D1_v2),
                    string(containerservices.Standard_D2),
                    string(containerservices.Standard_D2_v2),
                    string(containerservices.Standard_D2_v2_Promo),
                    string(containerservices.Standard_D2_v3),
                    string(containerservices.Standard_D2s_v3),
                    string(containerservices.Standard_D3),
                    string(containerservices.Standard_D32_v3),
                    string(containerservices.Standard_D32s_v3),
                    string(containerservices.Standard_D3_v2),
                    string(containerservices.Standard_D3_v2_Promo),
                    string(containerservices.Standard_D4),
                    string(containerservices.Standard_D4_v2),
                    string(containerservices.Standard_D4_v2_Promo),
                    string(containerservices.Standard_D4_v3),
                    string(containerservices.Standard_D4s_v3),
                    string(containerservices.Standard_D5_v2),
                    string(containerservices.Standard_D5_v2_Promo),
                    string(containerservices.Standard_D64_v3),
                    string(containerservices.Standard_D64s_v3),
                    string(containerservices.Standard_D8_v3),
                    string(containerservices.Standard_D8s_v3),
                    string(containerservices.Standard_DS1),
                    string(containerservices.Standard_DS11),
                    string(containerservices.Standard_DS11_v2),
                    string(containerservices.Standard_DS11_v2_Promo),
                    string(containerservices.Standard_DS12),
                    string(containerservices.Standard_DS12_v2),
                    string(containerservices.Standard_DS12_v2_Promo),
                    string(containerservices.Standard_DS13),
                    string(containerservices.Standard_DS13-2_v2),
                    string(containerservices.Standard_DS13-4_v2),
                    string(containerservices.Standard_DS13_v2),
                    string(containerservices.Standard_DS13_v2_Promo),
                    string(containerservices.Standard_DS14),
                    string(containerservices.Standard_DS14-4_v2),
                    string(containerservices.Standard_DS14-8_v2),
                    string(containerservices.Standard_DS14_v2),
                    string(containerservices.Standard_DS14_v2_Promo),
                    string(containerservices.Standard_DS15_v2),
                    string(containerservices.Standard_DS1_v2),
                    string(containerservices.Standard_DS2),
                    string(containerservices.Standard_DS2_v2),
                    string(containerservices.Standard_DS2_v2_Promo),
                    string(containerservices.Standard_DS3),
                    string(containerservices.Standard_DS3_v2),
                    string(containerservices.Standard_DS3_v2_Promo),
                    string(containerservices.Standard_DS4),
                    string(containerservices.Standard_DS4_v2),
                    string(containerservices.Standard_DS4_v2_Promo),
                    string(containerservices.Standard_DS5_v2),
                    string(containerservices.Standard_DS5_v2_Promo),
                    string(containerservices.Standard_E16_v3),
                    string(containerservices.Standard_E16s_v3),
                    string(containerservices.Standard_E2_v3),
                    string(containerservices.Standard_E2s_v3),
                    string(containerservices.Standard_E32-16s_v3),
                    string(containerservices.Standard_E32-8s_v3),
                    string(containerservices.Standard_E32_v3),
                    string(containerservices.Standard_E32s_v3),
                    string(containerservices.Standard_E4_v3),
                    string(containerservices.Standard_E4s_v3),
                    string(containerservices.Standard_E64-16s_v3),
                    string(containerservices.Standard_E64-32s_v3),
                    string(containerservices.Standard_E64_v3),
                    string(containerservices.Standard_E64s_v3),
                    string(containerservices.Standard_E8_v3),
                    string(containerservices.Standard_E8s_v3),
                    string(containerservices.Standard_F1),
                    string(containerservices.Standard_F16),
                    string(containerservices.Standard_F16s),
                    string(containerservices.Standard_F16s_v2),
                    string(containerservices.Standard_F1s),
                    string(containerservices.Standard_F2),
                    string(containerservices.Standard_F2s),
                    string(containerservices.Standard_F2s_v2),
                    string(containerservices.Standard_F32s_v2),
                    string(containerservices.Standard_F4),
                    string(containerservices.Standard_F4s),
                    string(containerservices.Standard_F4s_v2),
                    string(containerservices.Standard_F64s_v2),
                    string(containerservices.Standard_F72s_v2),
                    string(containerservices.Standard_F8),
                    string(containerservices.Standard_F8s),
                    string(containerservices.Standard_F8s_v2),
                    string(containerservices.Standard_G1),
                    string(containerservices.Standard_G2),
                    string(containerservices.Standard_G3),
                    string(containerservices.Standard_G4),
                    string(containerservices.Standard_G5),
                    string(containerservices.Standard_GS1),
                    string(containerservices.Standard_GS2),
                    string(containerservices.Standard_GS3),
                    string(containerservices.Standard_GS4),
                    string(containerservices.Standard_GS4-4),
                    string(containerservices.Standard_GS4-8),
                    string(containerservices.Standard_GS5),
                    string(containerservices.Standard_GS5-16),
                    string(containerservices.Standard_GS5-8),
                    string(containerservices.Standard_H16),
                    string(containerservices.Standard_H16m),
                    string(containerservices.Standard_H16mr),
                    string(containerservices.Standard_H16r),
                    string(containerservices.Standard_H8),
                    string(containerservices.Standard_H8m),
                    string(containerservices.Standard_L16s),
                    string(containerservices.Standard_L32s),
                    string(containerservices.Standard_L4s),
                    string(containerservices.Standard_L8s),
                    string(containerservices.Standard_M128-32ms),
                    string(containerservices.Standard_M128-64ms),
                    string(containerservices.Standard_M128ms),
                    string(containerservices.Standard_M128s),
                    string(containerservices.Standard_M64-16ms),
                    string(containerservices.Standard_M64-32ms),
                    string(containerservices.Standard_M64ms),
                    string(containerservices.Standard_M64s),
                    string(containerservices.Standard_NC12),
                    string(containerservices.Standard_NC12s_v2),
                    string(containerservices.Standard_NC12s_v3),
                    string(containerservices.Standard_NC24),
                    string(containerservices.Standard_NC24r),
                    string(containerservices.Standard_NC24rs_v2),
                    string(containerservices.Standard_NC24rs_v3),
                    string(containerservices.Standard_NC24s_v2),
                    string(containerservices.Standard_NC24s_v3),
                    string(containerservices.Standard_NC6),
                    string(containerservices.Standard_NC6s_v2),
                    string(containerservices.Standard_NC6s_v3),
                    string(containerservices.Standard_ND12s),
                    string(containerservices.Standard_ND24rs),
                    string(containerservices.Standard_ND24s),
                    string(containerservices.Standard_ND6s),
                    string(containerservices.Standard_NV12),
                    string(containerservices.Standard_NV24),
                    string(containerservices.Standard_NV6),
                }, false),
            },

            "availability_zones": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "enable_auto_scaling": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "max_count": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "max_pods": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "min_count": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "orchestrator_version": {
                Type: schema.TypeString,
                Optional: true,
            },

            "os_disk_size_gb": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "os_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(containerservices.Linux),
                    string(containerservices.Windows),
                }, false),
                Default: string(containerservices.Linux),
            },

            "type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(containerservices.VirtualMachineScaleSets),
                    string(containerservices.AvailabilitySet),
                }, false),
                Default: string(containerservices.VirtualMachineScaleSets),
            },

            "vnet_subnet_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmAgentPoolCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).agentPoolsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    resourceName := d.Get("resource_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, resourceName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Agent Pool %q (Resource Name %q / Resource Group %q): %+v", name, resourceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_agent_pool", *existing.ID)
        }
    }

    availabilityZones := d.Get("availability_zones").([]interface{})
    count := d.Get("count").(int)
    enableAutoScaling := d.Get("enable_auto_scaling").(bool)
    maxCount := d.Get("max_count").(int)
    maxPods := d.Get("max_pods").(int)
    minCount := d.Get("min_count").(int)
    orchestratorVersion := d.Get("orchestrator_version").(string)
    osDiskSizeGb := d.Get("os_disk_size_gb").(int)
    osType := d.Get("os_type").(string)
    type := d.Get("type").(string)
    vmSize := d.Get("vm_size").(string)
    vnetSubnetId := d.Get("vnet_subnet_id").(string)

    parameters := containerservices.AgentPool{
        ManagedClusterAgentPoolProfileProperties: &containerservices.ManagedClusterAgentPoolProfileProperties{
            AvailabilityZones: utils.ExpandStringSlice(availabilityZones),
            Count: utils.Int32(int32(count)),
            EnableAutoScaling: utils.Bool(enableAutoScaling),
            MaxCount: utils.Int32(int32(maxCount)),
            MaxPods: utils.Int32(int32(maxPods)),
            MinCount: utils.Int32(int32(minCount)),
            OrchestratorVersion: utils.String(orchestratorVersion),
            OsDiskSizeGB: utils.Int32(int32(osDiskSizeGb)),
            OsType: containerservices.OSType(osType),
            Type: containerservices.AgentPoolType(type),
            VMSize: containerservices.ContainerServiceVMSizeTypes(vmSize),
            VnetSubnetID: utils.String(vnetSubnetId),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, resourceName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Agent Pool %q (Resource Name %q / Resource Group %q): %+v", name, resourceName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Agent Pool %q (Resource Name %q / Resource Group %q): %+v", name, resourceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, resourceName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Agent Pool %q (Resource Name %q / Resource Group %q): %+v", name, resourceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Agent Pool %q (Resource Name %q / Resource Group %q) ID", name, resourceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAgentPoolRead(d, meta)
}

func resourceArmAgentPoolRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).agentPoolsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    resourceName := id.Path["managedClusters"]
    name := id.Path["agentPools"]

    resp, err := client.Get(ctx, resourceGroup, resourceName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Agent Pool %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Agent Pool %q (Resource Name %q / Resource Group %q): %+v", name, resourceName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("resource_name", resourceName)
    d.Set("type", resp.Type)
    d.Set("type", resp.Type)
    d.Set("type", resp.Type)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmAgentPoolDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).agentPoolsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    resourceName := id.Path["managedClusters"]
    name := id.Path["agentPools"]

    future, err := client.Delete(ctx, resourceGroup, resourceName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Agent Pool %q (Resource Name %q / Resource Group %q): %+v", name, resourceName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Agent Pool %q (Resource Name %q / Resource Group %q): %+v", name, resourceName, resourceGroup, err)
        }
    }

    return nil
}
