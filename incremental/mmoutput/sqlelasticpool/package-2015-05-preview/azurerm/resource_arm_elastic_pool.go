// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmElasticPool() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmElasticPoolCreate,
        Read: resourceArmElasticPoolRead,
        Update: resourceArmElasticPoolUpdate,
        Delete: resourceArmElasticPoolDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "server_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "database_dtu_max": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "database_dtu_min": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "dtu": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "edition": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(sql.Basic),
                    string(sql.Standard),
                    string(sql.Premium),
                    string(sql.GeneralPurpose),
                    string(sql.BusinessCritical),
                }, false),
                Default: string(sql.Basic),
            },

            "storage_mb": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "zone_redundant": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "kind": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmElasticPoolCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).elasticPoolsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    serverName := d.Get("server_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serverName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Elastic Pool %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_elastic_pool", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    databaseDtuMax := d.Get("database_dtu_max").(int)
    databaseDtuMin := d.Get("database_dtu_min").(int)
    dtu := d.Get("dtu").(int)
    edition := d.Get("edition").(string)
    storageMb := d.Get("storage_mb").(int)
    zoneRedundant := d.Get("zone_redundant").(bool)
    t := d.Get("tags").(map[string]interface{})

    parameters := sql.ElasticPoolUpdate{
        Location: utils.String(location),
        ElasticPoolProperties: &sql.ElasticPoolProperties{
            DatabaseDtuMax: utils.Int32(int32(databaseDtuMax)),
            DatabaseDtuMin: utils.Int32(int32(databaseDtuMin)),
            Dtu: utils.Int32(int32(dtu)),
            Edition: sql.ElasticPoolEdition(edition),
            StorageMB: utils.Int32(int32(storageMb)),
            ZoneRedundant: utils.Bool(zoneRedundant),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, serverName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Elastic Pool %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Elastic Pool %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serverName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Elastic Pool %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Elastic Pool %q (Server Name %q / Resource Group %q) ID", name, serverName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmElasticPoolRead(d, meta)
}

func resourceArmElasticPoolRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).elasticPoolsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    name := id.Path["elasticPools"]

    resp, err := client.Get(ctx, resourceGroup, serverName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Elastic Pool %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Elastic Pool %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("kind", resp.Kind)
    d.Set("server_name", serverName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmElasticPoolUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).elasticPoolsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    databaseDtuMax := d.Get("database_dtu_max").(int)
    databaseDtuMin := d.Get("database_dtu_min").(int)
    dtu := d.Get("dtu").(int)
    edition := d.Get("edition").(string)
    serverName := d.Get("server_name").(string)
    storageMb := d.Get("storage_mb").(int)
    zoneRedundant := d.Get("zone_redundant").(bool)
    t := d.Get("tags").(map[string]interface{})

    parameters := sql.ElasticPoolUpdate{
        ElasticPoolProperties: &sql.ElasticPoolProperties{
            DatabaseDtuMax: utils.Int32(int32(databaseDtuMax)),
            DatabaseDtuMin: utils.Int32(int32(databaseDtuMin)),
            Dtu: utils.Int32(int32(dtu)),
            Edition: sql.ElasticPoolEdition(edition),
            StorageMB: utils.Int32(int32(storageMb)),
            ZoneRedundant: utils.Bool(zoneRedundant),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, serverName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Elastic Pool %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Elastic Pool %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }

    return resourceArmElasticPoolRead(d, meta)
}

func resourceArmElasticPoolDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).elasticPoolsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    name := id.Path["elasticPools"]

    if _, err := client.Delete(ctx, resourceGroup, serverName, name); err != nil {
        return fmt.Errorf("Error deleting Elastic Pool %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }

    return nil
}
