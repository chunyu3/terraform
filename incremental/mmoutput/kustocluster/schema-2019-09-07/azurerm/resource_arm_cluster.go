// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmCluster() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmClusterCreate,
        Read: resourceArmClusterRead,
        Update: resourceArmClusterUpdate,
        Delete: resourceArmClusterDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "sku": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(kusto.Standard_DS13_v2+1TB_PS),
                                string(kusto.Standard_DS13_v2+2TB_PS),
                                string(kusto.Standard_DS14_v2+3TB_PS),
                                string(kusto.Standard_DS14_v2+4TB_PS),
                                string(kusto.Standard_D13_v2),
                                string(kusto.Standard_D14_v2),
                                string(kusto.Standard_L8s),
                                string(kusto.Standard_L16s),
                                string(kusto.Standard_D11_v2),
                                string(kusto.Standard_D12_v2),
                                string(kusto.Standard_L4s),
                                string(kusto.Dev(No SLA)_Standard_D11_v2),
                            }, false),
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(kusto.Basic),
                                string(kusto.Standard),
                            }, false),
                        },
                        "capacity": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "enable_disk_encryption": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enable_streaming_ingest": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "identity": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(kusto.None),
                                string(kusto.SystemAssigned),
                            }, false),
                        },
                        "user_assigned_identities": {
                            Type: schema.TypeMap,
                            Optional: true,
                            Elem: &schema.Schema{Type: schema.TypeString},
                        },
                    },
                },
            },

            "key_vault_properties": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "key_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "key_vault_uri": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "key_version": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "optimized_autoscale": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "is_enabled": {
                            Type: schema.TypeBool,
                            Required: true,
                        },
                        "maximum": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "minimum": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "version": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                    },
                },
            },

            "trusted_external_tenants": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "value": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "virtual_network_configuration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "data_management_public_ip_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "engine_public_ip_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "subnet_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "zones": {
                Type: schema.TypeList,
                Optional: true,
                ForceNew: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "data_ingestion_uri": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "uri": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmClusterCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).clustersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_cluster", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    enableDiskEncryption := d.Get("enable_disk_encryption").(bool)
    enableStreamingIngest := d.Get("enable_streaming_ingest").(bool)
    identity := d.Get("identity").([]interface{})
    keyVaultProperties := d.Get("key_vault_properties").([]interface{})
    optimizedAutoscale := d.Get("optimized_autoscale").([]interface{})
    sku := d.Get("sku").([]interface{})
    trustedExternalTenants := d.Get("trusted_external_tenants").([]interface{})
    virtualNetworkConfiguration := d.Get("virtual_network_configuration").([]interface{})
    zones := d.Get("zones").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := kusto.Cluster{
        Identity: expandArmClusterIdentity(identity),
        Location: utils.String(location),
        ClusterProperties: &kusto.ClusterProperties{
            EnableDiskEncryption: utils.Bool(enableDiskEncryption),
            EnableStreamingIngest: utils.Bool(enableStreamingIngest),
            KeyVaultProperties: expandArmClusterKeyVaultProperties(keyVaultProperties),
            OptimizedAutoscale: expandArmClusterOptimizedAutoscale(optimizedAutoscale),
            TrustedExternalTenants: expandArmClusterTrustedExternalTenant(trustedExternalTenants),
            VirtualNetworkConfiguration: expandArmClusterVirtualNetworkConfiguration(virtualNetworkConfiguration),
        },
        Sku: expandArmClusterAzureSku(sku),
        Tags: tags.Expand(t),
        Zones: utils.ExpandStringSlice(zones),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Cluster %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmClusterRead(d, meta)
}

func resourceArmClusterRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).clustersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["clusters"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Cluster %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if clusterProperties := resp.ClusterProperties; clusterProperties != nil {
        d.Set("data_ingestion_uri", clusterProperties.DataIngestionUri)
        d.Set("enable_disk_encryption", clusterProperties.EnableDiskEncryption)
        d.Set("enable_streaming_ingest", clusterProperties.EnableStreamingIngest)
        if err := d.Set("key_vault_properties", flattenArmClusterKeyVaultProperties(clusterProperties.KeyVaultProperties)); err != nil {
            return fmt.Errorf("Error setting `key_vault_properties`: %+v", err)
        }
        if err := d.Set("optimized_autoscale", flattenArmClusterOptimizedAutoscale(clusterProperties.OptimizedAutoscale)); err != nil {
            return fmt.Errorf("Error setting `optimized_autoscale`: %+v", err)
        }
        d.Set("provisioning_state", string(clusterProperties.ProvisioningState))
        d.Set("state", string(clusterProperties.State))
        if err := d.Set("trusted_external_tenants", flattenArmClusterTrustedExternalTenant(clusterProperties.TrustedExternalTenants)); err != nil {
            return fmt.Errorf("Error setting `trusted_external_tenants`: %+v", err)
        }
        d.Set("uri", clusterProperties.Uri)
        if err := d.Set("virtual_network_configuration", flattenArmClusterVirtualNetworkConfiguration(clusterProperties.VirtualNetworkConfiguration)); err != nil {
            return fmt.Errorf("Error setting `virtual_network_configuration`: %+v", err)
        }
    }
    if err := d.Set("identity", flattenArmClusterIdentity(resp.Identity)); err != nil {
        return fmt.Errorf("Error setting `identity`: %+v", err)
    }
    if err := d.Set("sku", flattenArmClusterAzureSku(resp.Sku)); err != nil {
        return fmt.Errorf("Error setting `sku`: %+v", err)
    }
    d.Set("type", resp.Type)
    d.Set("zones", utils.FlattenStringSlice(resp.Zones))

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmClusterUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).clustersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    enableDiskEncryption := d.Get("enable_disk_encryption").(bool)
    enableStreamingIngest := d.Get("enable_streaming_ingest").(bool)
    identity := d.Get("identity").([]interface{})
    keyVaultProperties := d.Get("key_vault_properties").([]interface{})
    optimizedAutoscale := d.Get("optimized_autoscale").([]interface{})
    sku := d.Get("sku").([]interface{})
    trustedExternalTenants := d.Get("trusted_external_tenants").([]interface{})
    virtualNetworkConfiguration := d.Get("virtual_network_configuration").([]interface{})
    zones := d.Get("zones").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := kusto.Cluster{
        Identity: expandArmClusterIdentity(identity),
        Location: utils.String(location),
        ClusterProperties: &kusto.ClusterProperties{
            EnableDiskEncryption: utils.Bool(enableDiskEncryption),
            EnableStreamingIngest: utils.Bool(enableStreamingIngest),
            KeyVaultProperties: expandArmClusterKeyVaultProperties(keyVaultProperties),
            OptimizedAutoscale: expandArmClusterOptimizedAutoscale(optimizedAutoscale),
            TrustedExternalTenants: expandArmClusterTrustedExternalTenant(trustedExternalTenants),
            VirtualNetworkConfiguration: expandArmClusterVirtualNetworkConfiguration(virtualNetworkConfiguration),
        },
        Sku: expandArmClusterAzureSku(sku),
        Tags: tags.Expand(t),
        Zones: utils.ExpandStringSlice(zones),
    }


    future, err := client.Update(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmClusterRead(d, meta)
}

func resourceArmClusterDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).clustersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["clusters"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmClusterIdentity(input []interface{}) *kusto.Identity {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)
    userAssignedIdentities := v["user_assigned_identities"].(map[string]interface{})

    result := kusto.Identity{
        Type: kusto.IdentityType(type),
        UserAssignedIdentities: utils.ExpandKeyValuePairs(userAssignedIdentities),
    }
    return &result
}

func expandArmClusterKeyVaultProperties(input []interface{}) *kusto.KeyVaultProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    keyName := v["key_name"].(string)
    keyVersion := v["key_version"].(string)
    keyVaultUri := v["key_vault_uri"].(string)

    result := kusto.KeyVaultProperties{
        KeyName: utils.String(keyName),
        KeyVaultUri: utils.String(keyVaultUri),
        KeyVersion: utils.String(keyVersion),
    }
    return &result
}

func expandArmClusterOptimizedAutoscale(input []interface{}) *kusto.OptimizedAutoscale {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    version := v["version"].(int)
    isEnabled := v["is_enabled"].(bool)
    minimum := v["minimum"].(int)
    maximum := v["maximum"].(int)

    result := kusto.OptimizedAutoscale{
        IsEnabled: utils.Bool(isEnabled),
        Maximum: utils.Int(maximum),
        Minimum: utils.Int(minimum),
        Version: utils.Int(version),
    }
    return &result
}

func expandArmClusterTrustedExternalTenant(input []interface{}) *[]kusto.TrustedExternalTenant {
    results := make([]kusto.TrustedExternalTenant, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        value := v["value"].(string)

        result := kusto.TrustedExternalTenant{
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmClusterVirtualNetworkConfiguration(input []interface{}) *kusto.VirtualNetworkConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    subnetId := v["subnet_id"].(string)
    enginePublicIpId := v["engine_public_ip_id"].(string)
    dataManagementPublicIpId := v["data_management_public_ip_id"].(string)

    result := kusto.VirtualNetworkConfiguration{
        DataManagementPublicIpID: utils.String(dataManagementPublicIpId),
        EnginePublicIpID: utils.String(enginePublicIpId),
        SubnetID: utils.String(subnetId),
    }
    return &result
}

func expandArmClusterAzureSku(input []interface{}) *kusto.AzureSku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    capacity := v["capacity"].(int)
    tier := v["tier"].(string)

    result := kusto.AzureSku{
        Capacity: utils.Int(capacity),
        Name: kusto.AzureSkuName(name),
        Tier: kusto.AzureSkuTier(tier),
    }
    return &result
}


func flattenArmClusterKeyVaultProperties(input *kusto.KeyVaultProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if keyName := input.KeyName; keyName != nil {
        result["key_name"] = *keyName
    }
    if keyVaultUri := input.KeyVaultUri; keyVaultUri != nil {
        result["key_vault_uri"] = *keyVaultUri
    }
    if keyVersion := input.KeyVersion; keyVersion != nil {
        result["key_version"] = *keyVersion
    }

    return []interface{}{result}
}

func flattenArmClusterOptimizedAutoscale(input *kusto.OptimizedAutoscale) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if isEnabled := input.IsEnabled; isEnabled != nil {
        result["is_enabled"] = *isEnabled
    }
    if maximum := input.Maximum; maximum != nil {
        result["maximum"] = *maximum
    }
    if minimum := input.Minimum; minimum != nil {
        result["minimum"] = *minimum
    }
    if version := input.Version; version != nil {
        result["version"] = *version
    }

    return []interface{}{result}
}

func flattenArmClusterTrustedExternalTenant(input *[]kusto.TrustedExternalTenant) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if value := item.Value; value != nil {
            v["value"] = *value
        }

        results = append(results, v)
    }

    return results
}

func flattenArmClusterVirtualNetworkConfiguration(input *kusto.VirtualNetworkConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if dataManagementPublicIpId := input.DataManagementPublicIpID; dataManagementPublicIpId != nil {
        result["data_management_public_ip_id"] = *dataManagementPublicIpId
    }
    if enginePublicIpId := input.EnginePublicIpID; enginePublicIpId != nil {
        result["engine_public_ip_id"] = *enginePublicIpId
    }
    if subnetId := input.SubnetID; subnetId != nil {
        result["subnet_id"] = *subnetId
    }

    return []interface{}{result}
}

func flattenArmClusterIdentity(input *kusto.Identity) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["type"] = string(input.Type)
    result["user_assigned_identities"] = utils.FlattenKeyValuePairs(input.UserAssignedIdentities)

    return []interface{}{result}
}

func flattenArmClusterAzureSku(input *kusto.AzureSku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["name"] = string(input.Name)
    if capacity := input.Capacity; capacity != nil {
        result["capacity"] = *capacity
    }
    result["tier"] = string(input.Tier)

    return []interface{}{result}
}
