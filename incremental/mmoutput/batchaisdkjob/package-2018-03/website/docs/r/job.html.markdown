---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_job"
sidebar_current: "docs-azurerm-resource-job"
description: |-
  Manage Azure Job instance.
---

# azurerm_job

Manage Azure Job instance.


## Argument Reference

The following arguments are supported:

* `name` - (Required) The name of the job within the specified resource group. Job names can only contain a combination of alphanumeric characters along with dash (-) and underscore (_). The name must be from 1 through 64 characters long. Changing this forces a new resource to be created.

* `resource_group` - (Required) Name of the resource group to which the resource belongs. Changing this forces a new resource to be created.

* `location` - (Required) The region in which to create the job. Changing this forces a new resource to be created.

* `cluster` - (Required) One `cluster` block defined below.

* `node_count` - (Required) The job will be gang scheduled on that many compute nodes

* `std_out_err_path_prefix` - (Required) The path where the Batch AI service will upload stdout and stderror of the job.

---

The `cluster` block supports the following:

* `id` - (Required) The ID of the resource

* `caffe2settings` - (Optional) One `caffe2setting` block defined below.

* `caffe_settings` - (Optional) One `caffe_setting` block defined below.

* `chainer_settings` - (Optional) One `chainer_setting` block defined below.

* `cntk_settings` - (Optional) One `cntk_setting` block defined below.

* `constraints` - (Optional) One `constraint` block defined below.

* `container_settings` - (Optional) One `container_setting` block defined below.

* `custom_toolkit_settings` - (Optional) One `custom_toolkit_setting` block defined below.

* `environment_variables` - (Optional) One or more `environment_variable` block defined below.

* `experiment_name` - (Optional) Describe the experiment information of the job

* `input_directories` - (Optional) One or more `input_directory` block defined below.

* `job_preparation` - (Optional) One `job_preparation` block defined below.

* `mount_volumes` - (Optional) One `mount_volume` block defined below.

* `output_directories` - (Optional) One or more `output_directory` block defined below.

* `priority` - (Optional) Priority associated with the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.

* `py_torch_settings` - (Optional) One `py_torch_setting` block defined below.

* `secrets` - (Optional) One or more `secret` block defined below.

* `tensor_flow_settings` - (Optional) One `tensor_flow_setting` block defined below.

* `tags` - (Optional) The user specified tags associated with the job. Changing this forces a new resource to be created.

---

The `caffe2setting` block supports the following:

* `python_script_file_path` - (Required) 

* `python_interpreter_path` - (Optional) 

* `command_line_args` - (Optional) 

---

The `caffe_setting` block supports the following:

* `config_file_path` - (Optional) This property cannot be specified if pythonScriptFilePath is specified.

* `python_script_file_path` - (Optional) This property cannot be specified if configFilePath is specified.

* `python_interpreter_path` - (Optional) This property can be specified only if the pythonScriptFilePath is specified.

* `command_line_args` - (Optional) 

* `process_count` - (Optional) The default value for this property is equal to nodeCount property

---

The `chainer_setting` block supports the following:

* `python_script_file_path` - (Required) 

* `python_interpreter_path` - (Optional) 

* `command_line_args` - (Optional) 

* `process_count` - (Optional) The default value for this property is equal to nodeCount property

---

The `cntk_setting` block supports the following:

* `language_type` - (Optional) Valid values are 'BrainScript' or 'Python'.

* `config_file_path` - (Optional) This property can be specified only if the languageType is 'BrainScript'.

* `python_script_file_path` - (Optional) This property can be specified only if the languageType is 'Python'.

* `python_interpreter_path` - (Optional) This property can be specified only if the languageType is 'Python'.

* `command_line_args` - (Optional) 

* `process_count` - (Optional) The default value for this property is equal to nodeCount property

---

The `constraint` block supports the following:

* `max_wall_clock_time` - (Optional) Default Value = 1 week.

---

The `container_setting` block supports the following:

* `image_source_registry` - (Required) One `image_source_registry` block defined below.


---

The `image_source_registry` block supports the following:

* `server_url` - (Optional) 

* `image` - (Required) 

* `credentials` - (Optional) One `credential` block defined below.


---

The `credential` block supports the following:

* `username` - (Required) 

* `password` - (Optional) One of password or passwordSecretReference must be specified.

---

The `custom_toolkit_setting` block supports the following:

* `command_line` - (Optional) 

---

The `environment_variable` block supports the following:

* `name` - (Required) 

* `value` - (Required) 

---

The `input_directory` block supports the following:

* `id` - (Required) The path of the input directory will be available as a value of an environment variable with AZ_BATCHAI_INPUT_<id> name, where <id> is the value of id attribute.

* `path` - (Required) 

---

The `job_preparation` block supports the following:

* `command_line` - (Required) If containerSettings is specified on the job, this commandLine will be executed in the same container as job. Otherwise it will be executed on the node.

---

The `mount_volume` block supports the following:

* `azure_file_shares` - (Optional) One or more `azure_file_share` block defined below.

* `azure_blob_file_systems` - (Optional) One or more `azure_blob_file_system` block defined below.

* `file_servers` - (Optional) One or more `file_server` block defined below.

* `unmanaged_file_systems` - (Optional) One or more `unmanaged_file_system` block defined below.


---

The `azure_file_share` block supports the following:

* `account_name` - (Required) 

* `azure_file_url` - (Required) 

* `credentials` - (Required) One `credential` block defined below.

* `relative_mount_path` - (Required) Note that all cluster level file shares will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level file shares will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.

* `file_mode` - (Optional) Default value is 0777. Valid only if OS is linux.

* `directory_mode` - (Optional) Default value is 0777. Valid only if OS is linux.


---

The `credential` block supports the following:

* `account_key` - (Optional) One of accountKey or accountKeySecretReference must be specified.

---

The `azure_blob_file_system` block supports the following:

* `account_name` - (Required) 

* `container_name` - (Required) 

* `credentials` - (Required) One `credential` block defined below.

* `relative_mount_path` - (Required) Note that all cluster level blob file systems will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and all job level blob file systems will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.

* `mount_options` - (Optional) 


---

The `credential` block supports the following:

* `account_key` - (Optional) One of accountKey or accountKeySecretReference must be specified.

---

The `file_server` block supports the following:

* `file_server` - (Required) One `file_server` block defined below.

* `source_directory` - (Optional) If this property is not specified, the entire File Server will be mounted.

* `relative_mount_path` - (Required) Note that all cluster level file servers will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and job level file servers will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.

* `mount_options` - (Optional) 


---

The `file_server` block supports the following:

* `id` - (Required) The ID of the resource

---

The `unmanaged_file_system` block supports the following:

* `mount_command` - (Required) 

* `relative_mount_path` - (Required) Note that all cluster level unmanaged file system will be mounted under $AZ_BATCHAI_MOUNT_ROOT location and job level unmanaged file system will be mounted under $AZ_BATCHAI_JOB_MOUNT_ROOT.

---

The `output_directory` block supports the following:

* `id` - (Required) The path of the output directory will be available as a value of an environment variable with AZ_BATCHAI_OUTPUT_<id> name, where <id> is the value of id attribute.

* `path_prefix` - (Required) NOTE: This is an absolute path to prefix. E.g. $AZ_BATCHAI_MOUNT_ROOT/MyNFS/MyLogs. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.

* `path_suffix` - (Optional) The suffix path where the output directory will be created. E.g. models. You can find the full path to the output directory by combining pathPrefix, jobOutputDirectoryPathSegment (reported by get job) and pathSuffix.

* `type` - (Optional) Default value is Custom. The possible values are Model, Logs, Summary, and Custom. Users can use multiple enums for a single directory. Eg. outPutType='Model,Logs, Summary' Defaults to `model`.

* `create_new` - (Optional) Default is true. If false, then the directory is not created and can be any directory path that the user specifies.

---

The `py_torch_setting` block supports the following:

* `python_script_file_path` - (Required) 

* `python_interpreter_path` - (Optional) 

* `command_line_args` - (Optional) 

* `process_count` - (Optional) The default value for this property is equal to nodeCount property.

* `communication_backend` - (Optional) Valid values are 'TCP', 'Gloo' or 'MPI'. Not required for non-distributed jobs.

---

The `secret` block supports the following:

* `name` - (Required) 

* `value` - (Optional) 

* `value_secret_reference` - (Optional) One `value_secret_reference` block defined below.


---

The `value_secret_reference` block supports the following:

* `source_vault` - (Required) One `source_vault` block defined below.

* `secret_url` - (Required) 


---

The `source_vault` block supports the following:

* `id` - (Required) The ID of the resource

---

The `tensor_flow_setting` block supports the following:

* `python_script_file_path` - (Required) 

* `python_interpreter_path` - (Optional) 

* `master_command_line_args` - (Optional) 

* `worker_command_line_args` - (Optional) This property is optional for single machine training.

* `parameter_server_command_line_args` - (Optional) This property is optional for single machine training.

* `worker_count` - (Optional) If specified, the value must be less than or equal to (nodeCount * numberOfGPUs per VM). If not specified, the default value is equal to nodeCount. This property can be specified only for distributed TensorFlow training

* `parameter_server_count` - (Optional) If specified, the value must be less than or equal to nodeCount. If not specified, the default value is equal to 1 for distributed TensorFlow training (This property is not applicable for single machine training). This property can be specified only for distributed TensorFlow training.

## Attributes Reference

The following attributes are exported:

* `job_output_directory_path_segment` - Batch AI creates job's output directories under an unique path to avoid conflicts between jobs. This value contains a path segment generated by Batch AI to make the path unique and can be used to find the output directory on the node or mounted filesystem.

* `tool_type` - Possible values are: cntk, tensorflow, caffe, caffe2, chainer, pytorch, custom.

* `creation_time` - The creation time of the job.

* `provisioning_state` - The provisioned state of the Batch AI job

* `provisioning_state_transition_time` - The time at which the job entered its current provisioning state.

* `execution_state` - The current state of the job. Possible values are: queued - The job is queued and able to run. A job enters this state when it is created, or when it is awaiting a retry after a failed run. running - The job is running on a compute cluster. This includes job-level preparation such as downloading resource files or set up container specified on the job - it does not necessarily mean that the job command line has started executing. terminating - The job is terminated by the user, the terminate operation is in progress. succeeded - The job has completed running successfully and exited with exit code 0. failed - The job has finished unsuccessfully (failed with a non-zero exit code) and has exhausted its retry limit. A job is also marked as failed if an error occurred launching the job.

* `execution_state_transition_time` - The time at which the job entered its current execution state.

* `execution_info` - One `execution_info` block defined below.

* `id` - The ID of the resource

* `name` - The name of the resource

* `type` - The type of the resource


---

The `execution_info` block contains the following:

* `start_time` - (Required) 'Running' corresponds to the running state. If the job has been restarted or retried, this is the most recent time at which the job started running. This property is present only for job that are in the running or completed state.

* `end_time` - (Optional) This property is only returned if the job is in completed state.

* `exit_code` - (Optional) This property is only returned if the job is in completed state.

* `errors` - (Optional) One or more `error` block defined below.


---

The `error` block supports the following:

* `code` - (Optional) An identifier for the error. Codes are invariant and are intended to be consumed programmatically.

* `message` - (Optional) A message describing the error, intended to be suitable for display in a user interface.

* `details` - (Optional) One or more `detail` block defined below.


---

The `detail` block supports the following:

* `name` - (Optional) 

* `value` - (Optional) 
