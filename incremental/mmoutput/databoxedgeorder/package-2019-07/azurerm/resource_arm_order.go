// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmOrder() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmOrderCreateUpdate,
        Read: resourceArmOrderRead,
        Update: resourceArmOrderCreateUpdate,
        Delete: resourceArmOrderDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "contact_information": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "company_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "contact_person": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "email_list": {
                            Type: schema.TypeList,
                            Required: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "phone": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "shipping_address": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "address_line1": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "city": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "country": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "postal_code": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "state": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "address_line2": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "address_line3": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "current_status": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "status": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(databoxedge.Untracked),
                                string(databoxedge.AwaitingFulfilment),
                                string(databoxedge.AwaitingPreparation),
                                string(databoxedge.AwaitingShipment),
                                string(databoxedge.Shipped),
                                string(databoxedge.Arriving),
                                string(databoxedge.Delivered),
                                string(databoxedge.ReplacementRequested),
                                string(databoxedge.LostDevice),
                                string(databoxedge.Declined),
                                string(databoxedge.ReturnInitiated),
                                string(databoxedge.AwaitingReturnShipment),
                                string(databoxedge.ShippedBack),
                                string(databoxedge.CollectedAtMicrosoft),
                            }, false),
                        },
                        "comments": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmOrderCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).ordersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Order %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_order", *existing.ID)
        }
    }

    contactInformation := d.Get("contact_information").([]interface{})
    currentStatus := d.Get("current_status").([]interface{})
    shippingAddress := d.Get("shipping_address").([]interface{})

    order := databoxedge.Order{
        OrderProperties: &databoxedge.OrderProperties{
            ContactInformation: expandArmOrderContactDetails(contactInformation),
            CurrentStatus: expandArmOrderOrderStatus(currentStatus),
            ShippingAddress: expandArmOrderAddress(shippingAddress),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, order)
    if err != nil {
        return fmt.Errorf("Error creating Order %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Order %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Order %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Order %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmOrderRead(d, meta)
}

func resourceArmOrderRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).ordersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["dataBoxEdgeDevices"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Order %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Order %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmOrderDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).ordersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["dataBoxEdgeDevices"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Order %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Order %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmOrderContactDetails(input []interface{}) *databoxedge.ContactDetails {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    contactPerson := v["contact_person"].(string)
    companyName := v["company_name"].(string)
    phone := v["phone"].(string)
    emailList := v["email_list"].([]interface{})

    result := databoxedge.ContactDetails{
        CompanyName: utils.String(companyName),
        ContactPerson: utils.String(contactPerson),
        EmailList: utils.ExpandStringSlice(emailList),
        Phone: utils.String(phone),
    }
    return &result
}

func expandArmOrderOrderStatus(input []interface{}) *databoxedge.OrderStatus {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    status := v["status"].(string)
    comments := v["comments"].(string)

    result := databoxedge.OrderStatus{
        Comments: utils.String(comments),
        Status: databoxedge.OrderState(status),
    }
    return &result
}

func expandArmOrderAddress(input []interface{}) *databoxedge.Address {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    addressLine1 := v["address_line1"].(string)
    addressLine2 := v["address_line2"].(string)
    addressLine3 := v["address_line3"].(string)
    postalCode := v["postal_code"].(string)
    city := v["city"].(string)
    state := v["state"].(string)
    country := v["country"].(string)

    result := databoxedge.Address{
        AddressLine1: utils.String(addressLine1),
        AddressLine2: utils.String(addressLine2),
        AddressLine3: utils.String(addressLine3),
        City: utils.String(city),
        Country: utils.String(country),
        PostalCode: utils.String(postalCode),
        State: utils.String(state),
    }
    return &result
}
