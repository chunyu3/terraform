// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmLogger() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmLoggerCreate,
        Read: resourceArmLoggerRead,
        Update: resourceArmLoggerUpdate,
        Delete: resourceArmLoggerDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "credentials": {
                Type: schema.TypeMap,
                Required: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "logger_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "logger_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.azureEventHub),
                    string(apimanagement.applicationInsights),
                }, false),
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "is_buffered": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "resource_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmLoggerCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).loggerClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    loggerID := d.Get("logger_id").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, loggerID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Logger %q (Logger %q / Resource Group %q): %+v", name, loggerID, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_logger", *existing.ID)
        }
    }

    credentials := d.Get("credentials").(map[string]interface{})
    description := d.Get("description").(string)
    isBuffered := d.Get("is_buffered").(bool)
    loggerType := d.Get("logger_type").(string)
    resourceId := d.Get("resource_id").(string)

    parameters := apimanagement.LoggerContract{
        LoggerContractProperties: &apimanagement.LoggerContractProperties{
            Credentials: utils.ExpandKeyValuePairs(credentials),
            Description: utils.String(description),
            IsBuffered: utils.Bool(isBuffered),
            LoggerType: apimanagement.LoggerType(loggerType),
            ResourceID: utils.String(resourceId),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, loggerID, parameters); err != nil {
        return fmt.Errorf("Error creating Logger %q (Logger %q / Resource Group %q): %+v", name, loggerID, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, loggerID)
    if err != nil {
        return fmt.Errorf("Error retrieving Logger %q (Logger %q / Resource Group %q): %+v", name, loggerID, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Logger %q (Logger %q / Resource Group %q) ID", name, loggerID, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmLoggerRead(d, meta)
}

func resourceArmLoggerRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).loggerClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    loggerID := id.Path["loggers"]

    resp, err := client.Get(ctx, resourceGroup, name, loggerID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Logger %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Logger %q (Logger %q / Resource Group %q): %+v", name, loggerID, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if loggerContractProperties := resp.LoggerContractProperties; loggerContractProperties != nil {
        d.Set("credentials", utils.FlattenKeyValuePairs(loggerContractProperties.Credentials))
        d.Set("description", loggerContractProperties.Description)
        d.Set("is_buffered", loggerContractProperties.IsBuffered)
        d.Set("logger_type", string(loggerContractProperties.LoggerType))
        d.Set("resource_id", loggerContractProperties.ResourceID)
    }
    d.Set("logger_id", loggerID)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmLoggerUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).loggerClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    credentials := d.Get("credentials").(map[string]interface{})
    description := d.Get("description").(string)
    isBuffered := d.Get("is_buffered").(bool)
    loggerID := d.Get("logger_id").(string)
    loggerType := d.Get("logger_type").(string)
    resourceId := d.Get("resource_id").(string)

    parameters := apimanagement.LoggerContract{
        LoggerContractProperties: &apimanagement.LoggerContractProperties{
            Credentials: utils.ExpandKeyValuePairs(credentials),
            Description: utils.String(description),
            IsBuffered: utils.Bool(isBuffered),
            LoggerType: apimanagement.LoggerType(loggerType),
            ResourceID: utils.String(resourceId),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, name, loggerID, parameters); err != nil {
        return fmt.Errorf("Error updating Logger %q (Logger %q / Resource Group %q): %+v", name, loggerID, resourceGroup, err)
    }

    return resourceArmLoggerRead(d, meta)
}

func resourceArmLoggerDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).loggerClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    loggerID := id.Path["loggers"]

    if _, err := client.Delete(ctx, resourceGroup, name, loggerID); err != nil {
        return fmt.Errorf("Error deleting Logger %q (Logger %q / Resource Group %q): %+v", name, loggerID, resourceGroup, err)
    }

    return nil
}
