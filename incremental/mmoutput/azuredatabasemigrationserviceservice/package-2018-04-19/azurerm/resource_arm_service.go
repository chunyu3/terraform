// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmService() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmServiceCreate,
        Read: resourceArmServiceRead,
        Update: resourceArmServiceUpdate,
        Delete: resourceArmServiceDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "virtual_subnet_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "public_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "capacity": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "family": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "size": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmServiceCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).servicesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    groupName := d.Get("group_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, groupName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Service %q (Group Name %q): %+v", name, groupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_service", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    etag := d.Get("etag").(string)
    kind := d.Get("kind").(string)
    publicKey := d.Get("public_key").(string)
    sku := d.Get("sku").([]interface{})
    virtualSubnetId := d.Get("virtual_subnet_id").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := azuredatabasemigrationservice.DataMigrationService{
        Etag: utils.String(etag),
        Kind: utils.String(kind),
        Location: utils.String(location),
        DataMigrationServiceProperties: &azuredatabasemigrationservice.DataMigrationServiceProperties{
            PublicKey: utils.String(publicKey),
            VirtualSubnetID: utils.String(virtualSubnetId),
        },
        Sku: expandArmServiceServiceSku(sku),
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, groupName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Service %q (Group Name %q): %+v", name, groupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Service %q (Group Name %q): %+v", name, groupName, err)
    }


    resp, err := client.Get(ctx, groupName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Service %q (Group Name %q): %+v", name, groupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Service %q (Group Name %q) ID", name, groupName)
    }
    d.SetId(*resp.ID)

    return resourceArmServiceRead(d, meta)
}

func resourceArmServiceRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).servicesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    groupName := id.ResourceGroup
    name := id.Path["services"]

    resp, err := client.Get(ctx, groupName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Service %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Service %q (Group Name %q): %+v", name, groupName, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("etag", resp.Etag)
    d.Set("group_name", groupName)
    d.Set("kind", resp.Kind)
    if dataMigrationServiceProperties := resp.DataMigrationServiceProperties; dataMigrationServiceProperties != nil {
        d.Set("provisioning_state", string(dataMigrationServiceProperties.ProvisioningState))
        d.Set("public_key", dataMigrationServiceProperties.PublicKey)
        d.Set("virtual_subnet_id", dataMigrationServiceProperties.VirtualSubnetID)
    }
    if err := d.Set("sku", flattenArmServiceServiceSku(resp.Sku)); err != nil {
        return fmt.Errorf("Error setting `sku`: %+v", err)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmServiceUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).servicesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    etag := d.Get("etag").(string)
    groupName := d.Get("group_name").(string)
    kind := d.Get("kind").(string)
    publicKey := d.Get("public_key").(string)
    sku := d.Get("sku").([]interface{})
    virtualSubnetId := d.Get("virtual_subnet_id").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := azuredatabasemigrationservice.DataMigrationService{
        Etag: utils.String(etag),
        Kind: utils.String(kind),
        Location: utils.String(location),
        DataMigrationServiceProperties: &azuredatabasemigrationservice.DataMigrationServiceProperties{
            PublicKey: utils.String(publicKey),
            VirtualSubnetID: utils.String(virtualSubnetId),
        },
        Sku: expandArmServiceServiceSku(sku),
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, groupName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Service %q (Group Name %q): %+v", name, groupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Service %q (Group Name %q): %+v", name, groupName, err)
    }

    return resourceArmServiceRead(d, meta)
}

func resourceArmServiceDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).servicesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    groupName := id.ResourceGroup
    name := id.Path["services"]

    future, err := client.Delete(ctx, groupName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Service %q (Group Name %q): %+v", name, groupName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Service %q (Group Name %q): %+v", name, groupName, err)
        }
    }

    return nil
}

func expandArmServiceServiceSku(input []interface{}) *azuredatabasemigrationservice.ServiceSku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    tier := v["tier"].(string)
    family := v["family"].(string)
    size := v["size"].(string)
    capacity := v["capacity"].(int)

    result := azuredatabasemigrationservice.ServiceSku{
        Capacity: utils.Int(capacity),
        Family: utils.String(family),
        Name: utils.String(name),
        Size: utils.String(size),
        Tier: utils.String(tier),
    }
    return &result
}


func flattenArmServiceServiceSku(input *azuredatabasemigrationservice.ServiceSku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if capacity := input.Capacity; capacity != nil {
        result["capacity"] = *capacity
    }
    if family := input.Family; family != nil {
        result["family"] = *family
    }
    if size := input.Size; size != nil {
        result["size"] = *size
    }
    if tier := input.Tier; tier != nil {
        result["tier"] = *tier
    }

    return []interface{}{result}
}
