// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmCloudConnector() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmCloudConnectorCreate,
        Read: resourceArmCloudConnectorRead,
        Update: resourceArmCloudConnectorUpdate,
        Delete: resourceArmCloudConnectorDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "billing_model": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(costmanagement.trial),
                    string(costmanagement.autoUpgrade),
                    string(costmanagement.premium),
                    string(costmanagement.expired),
                }, false),
                Default: string(costmanagement.trial),
            },

            "credentials_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "credentials_secret": {
                Type: schema.TypeString,
                Optional: true,
            },

            "default_management_group_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "display_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "report_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "subscription_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "collection_info": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "error": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "error_code": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "error_inner_message": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "error_message": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "error_start_time": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validateRFC3339Date,
                                    },
                                },
                            },
                        },
                        "last_checked": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "last_updated": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "source_last_updated": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                    },
                },
            },

            "created_on": {
                Type: schema.TypeString,
                Computed: true,
            },

            "days_trial_remaining": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "external_billing_account_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "modified_on": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provider_billing_account_display_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provider_billing_account_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmCloudConnectorCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).cloudConnectorClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Cloud Connector %q: %+v", name, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_cloud_connector", *existing.ID)
        }
    }

    billingModel := d.Get("billing_model").(string)
    credentialsKey := d.Get("credentials_key").(string)
    credentialsSecret := d.Get("credentials_secret").(string)
    defaultManagementGroupId := d.Get("default_management_group_id").(string)
    displayName := d.Get("display_name").(string)
    kind := d.Get("kind").(string)
    reportId := d.Get("report_id").(string)
    subscriptionId := d.Get("subscription_id").(string)

    connector := costmanagement.ConnectorDefinition{
        Kind: utils.String(kind),
        ConnectorProperties: &costmanagement.ConnectorProperties{
            BillingModel: costmanagement.ConnectorBillingModel(billingModel),
            CredentialsKey: utils.String(credentialsKey),
            CredentialsSecret: utils.String(credentialsSecret),
            DefaultManagementGroupID: utils.String(defaultManagementGroupId),
            DisplayName: utils.String(displayName),
            ReportID: utils.String(reportId),
            SubscriptionID: utils.String(subscriptionId),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, name, connector); err != nil {
        return fmt.Errorf("Error creating Cloud Connector %q: %+v", name, err)
    }


    resp, err := client.Get(ctx, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Cloud Connector %q: %+v", name, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Cloud Connector %q ID", name)
    }
    d.SetId(*resp.ID)

    return resourceArmCloudConnectorRead(d, meta)
}

func resourceArmCloudConnectorRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).cloudConnectorClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["cloudConnectors"]

    resp, err := client.Get(ctx, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Cloud Connector %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Cloud Connector %q: %+v", name, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    if connectorProperties := resp.ConnectorProperties; connectorProperties != nil {
        d.Set("billing_model", string(connectorProperties.BillingModel))
        if err := d.Set("collection_info", flattenArmCloudConnectorConnectorCollectionInfo(connectorProperties.CollectionInfo)); err != nil {
            return fmt.Errorf("Error setting `collection_info`: %+v", err)
        }
        d.Set("created_on", (connectorProperties.CreatedOn).String())
        d.Set("credentials_key", connectorProperties.CredentialsKey)
        d.Set("credentials_secret", connectorProperties.CredentialsSecret)
        d.Set("days_trial_remaining", connectorProperties.DaysTrialRemaining)
        d.Set("default_management_group_id", connectorProperties.DefaultManagementGroupID)
        d.Set("display_name", connectorProperties.DisplayName)
        d.Set("external_billing_account_id", connectorProperties.ExternalBillingAccountID)
        d.Set("modified_on", (connectorProperties.ModifiedOn).String())
        d.Set("provider_billing_account_display_name", connectorProperties.ProviderBillingAccountDisplayName)
        d.Set("provider_billing_account_id", connectorProperties.ProviderBillingAccountID)
        d.Set("report_id", connectorProperties.ReportID)
        d.Set("status", string(connectorProperties.Status))
        d.Set("subscription_id", connectorProperties.SubscriptionID)
    }
    d.Set("kind", resp.Kind)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmCloudConnectorUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).cloudConnectorClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    billingModel := d.Get("billing_model").(string)
    credentialsKey := d.Get("credentials_key").(string)
    credentialsSecret := d.Get("credentials_secret").(string)
    defaultManagementGroupId := d.Get("default_management_group_id").(string)
    displayName := d.Get("display_name").(string)
    kind := d.Get("kind").(string)
    reportId := d.Get("report_id").(string)
    subscriptionId := d.Get("subscription_id").(string)

    connector := costmanagement.ConnectorDefinition{
        Kind: utils.String(kind),
        ConnectorProperties: &costmanagement.ConnectorProperties{
            BillingModel: costmanagement.ConnectorBillingModel(billingModel),
            CredentialsKey: utils.String(credentialsKey),
            CredentialsSecret: utils.String(credentialsSecret),
            DefaultManagementGroupID: utils.String(defaultManagementGroupId),
            DisplayName: utils.String(displayName),
            ReportID: utils.String(reportId),
            SubscriptionID: utils.String(subscriptionId),
        },
    }


    if _, err := client.Update(ctx, name, connector); err != nil {
        return fmt.Errorf("Error updating Cloud Connector %q: %+v", name, err)
    }

    return resourceArmCloudConnectorRead(d, meta)
}

func resourceArmCloudConnectorDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).cloudConnectorClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["cloudConnectors"]

    if _, err := client.Delete(ctx, name); err != nil {
        return fmt.Errorf("Error deleting Cloud Connector %q: %+v", name, err)
    }

    return nil
}


func flattenArmCloudConnectorConnectorCollectionInfo(input *costmanagement.ConnectorCollectionInfo) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})


    return []interface{}{result}
}
