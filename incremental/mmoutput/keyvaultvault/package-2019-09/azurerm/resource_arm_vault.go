// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmVault() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmVaultCreate,
        Read: resourceArmVaultRead,
        Update: resourceArmVaultUpdate,
        Delete: resourceArmVaultDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "sku": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "family": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(keyvault.standard),
                                string(keyvault.premium),
                            }, false),
                        },
                    },
                },
            },

            "tenant_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "access_policies": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "object_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "permissions": {
                            Type: schema.TypeList,
                            Required: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "certificates": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                            ValidateFunc: validation.StringInSlice([]string{
                                                string(keyvault.get),
                                                string(keyvault.list),
                                                string(keyvault.delete),
                                                string(keyvault.create),
                                                string(keyvault.import),
                                                string(keyvault.update),
                                                string(keyvault.managecontacts),
                                                string(keyvault.getissuers),
                                                string(keyvault.listissuers),
                                                string(keyvault.setissuers),
                                                string(keyvault.deleteissuers),
                                                string(keyvault.manageissuers),
                                                string(keyvault.recover),
                                                string(keyvault.purge),
                                                string(keyvault.backup),
                                                string(keyvault.restore),
                                           }, false),
                                        },
                                    },
                                    "keys": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                            ValidateFunc: validation.StringInSlice([]string{
                                                string(keyvault.encrypt),
                                                string(keyvault.decrypt),
                                                string(keyvault.wrapKey),
                                                string(keyvault.unwrapKey),
                                                string(keyvault.sign),
                                                string(keyvault.verify),
                                                string(keyvault.get),
                                                string(keyvault.list),
                                                string(keyvault.create),
                                                string(keyvault.update),
                                                string(keyvault.import),
                                                string(keyvault.delete),
                                                string(keyvault.backup),
                                                string(keyvault.restore),
                                                string(keyvault.recover),
                                                string(keyvault.purge),
                                           }, false),
                                        },
                                    },
                                    "secrets": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                            ValidateFunc: validation.StringInSlice([]string{
                                                string(keyvault.get),
                                                string(keyvault.list),
                                                string(keyvault.set),
                                                string(keyvault.delete),
                                                string(keyvault.backup),
                                                string(keyvault.restore),
                                                string(keyvault.recover),
                                                string(keyvault.purge),
                                           }, false),
                                        },
                                    },
                                    "storage": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                            ValidateFunc: validation.StringInSlice([]string{
                                                string(keyvault.get),
                                                string(keyvault.list),
                                                string(keyvault.delete),
                                                string(keyvault.set),
                                                string(keyvault.update),
                                                string(keyvault.regeneratekey),
                                                string(keyvault.recover),
                                                string(keyvault.purge),
                                                string(keyvault.backup),
                                                string(keyvault.restore),
                                                string(keyvault.setsas),
                                                string(keyvault.listsas),
                                                string(keyvault.getsas),
                                                string(keyvault.deletesas),
                                           }, false),
                                        },
                                    },
                                },
                            },
                        },
                        "tenant_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "application_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "create_mode": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(keyvault.recover),
                    string(keyvault.default),
                }, false),
                Default: string(keyvault.recover),
            },

            "enable_purge_protection": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enable_soft_delete": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enabled_for_deployment": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enabled_for_disk_encryption": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enabled_for_template_deployment": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "network_acls": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "bypass": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(keyvault.AzureServices),
                                string(keyvault.None),
                            }, false),
                            Default: string(keyvault.AzureServices),
                        },
                        "default_action": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(keyvault.Allow),
                                string(keyvault.Deny),
                            }, false),
                            Default: string(keyvault.Allow),
                        },
                        "ip_rules": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "value": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                },
                            },
                        },
                        "virtual_network_rules": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "vault_uri": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmVaultCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).vaultsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Vault %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_vault", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    accessPolicies := d.Get("access_policies").([]interface{})
    createMode := d.Get("create_mode").(string)
    enablePurgeProtection := d.Get("enable_purge_protection").(bool)
    enableSoftDelete := d.Get("enable_soft_delete").(bool)
    enabledForDeployment := d.Get("enabled_for_deployment").(bool)
    enabledForDiskEncryption := d.Get("enabled_for_disk_encryption").(bool)
    enabledForTemplateDeployment := d.Get("enabled_for_template_deployment").(bool)
    networkAcls := d.Get("network_acls").([]interface{})
    sku := d.Get("sku").([]interface{})
    tenantId := d.Get("tenant_id").(string)
    vaultUri := d.Get("vault_uri").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := keyvault.VaultCreateOrUpdateParameters{
        Location: utils.String(location),
        VaultProperties: &keyvault.VaultProperties{
            AccessPolicies: expandArmVaultAccessPolicyEntry(accessPolicies),
            CreateMode: keyvault.CreateMode(createMode),
            EnablePurgeProtection: utils.Bool(enablePurgeProtection),
            EnableSoftDelete: utils.Bool(enableSoftDelete),
            EnabledForDeployment: utils.Bool(enabledForDeployment),
            EnabledForDiskEncryption: utils.Bool(enabledForDiskEncryption),
            EnabledForTemplateDeployment: utils.Bool(enabledForTemplateDeployment),
            NetworkAcls: expandArmVaultNetworkRuleSet(networkAcls),
            Sku: expandArmVaultSku(sku),
            TenantID: utils.String(tenantId),
            VaultUri: utils.String(vaultUri),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Vault %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Vault %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Vault %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Vault %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmVaultRead(d, meta)
}

func resourceArmVaultRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).vaultsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["vaults"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Vault %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Vault %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if vaultProperties := resp.VaultProperties; vaultProperties != nil {
        if err := d.Set("access_policies", flattenArmVaultAccessPolicyEntry(vaultProperties.AccessPolicies)); err != nil {
            return fmt.Errorf("Error setting `access_policies`: %+v", err)
        }
        d.Set("create_mode", string(vaultProperties.CreateMode))
        d.Set("enable_purge_protection", vaultProperties.EnablePurgeProtection)
        d.Set("enable_soft_delete", vaultProperties.EnableSoftDelete)
        d.Set("enabled_for_deployment", vaultProperties.EnabledForDeployment)
        d.Set("enabled_for_disk_encryption", vaultProperties.EnabledForDiskEncryption)
        d.Set("enabled_for_template_deployment", vaultProperties.EnabledForTemplateDeployment)
        if err := d.Set("network_acls", flattenArmVaultNetworkRuleSet(vaultProperties.NetworkAcls)); err != nil {
            return fmt.Errorf("Error setting `network_acls`: %+v", err)
        }
        if err := d.Set("sku", flattenArmVaultSku(vaultProperties.Sku)); err != nil {
            return fmt.Errorf("Error setting `sku`: %+v", err)
        }
        d.Set("tenant_id", vaultProperties.TenantID)
        d.Set("vault_uri", vaultProperties.VaultUri)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmVaultUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).vaultsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accessPolicies := d.Get("access_policies").([]interface{})
    createMode := d.Get("create_mode").(string)
    enablePurgeProtection := d.Get("enable_purge_protection").(bool)
    enableSoftDelete := d.Get("enable_soft_delete").(bool)
    enabledForDeployment := d.Get("enabled_for_deployment").(bool)
    enabledForDiskEncryption := d.Get("enabled_for_disk_encryption").(bool)
    enabledForTemplateDeployment := d.Get("enabled_for_template_deployment").(bool)
    networkAcls := d.Get("network_acls").([]interface{})
    sku := d.Get("sku").([]interface{})
    tenantId := d.Get("tenant_id").(string)
    vaultUri := d.Get("vault_uri").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := keyvault.VaultCreateOrUpdateParameters{
        Location: utils.String(location),
        VaultProperties: &keyvault.VaultProperties{
            AccessPolicies: expandArmVaultAccessPolicyEntry(accessPolicies),
            CreateMode: keyvault.CreateMode(createMode),
            EnablePurgeProtection: utils.Bool(enablePurgeProtection),
            EnableSoftDelete: utils.Bool(enableSoftDelete),
            EnabledForDeployment: utils.Bool(enabledForDeployment),
            EnabledForDiskEncryption: utils.Bool(enabledForDiskEncryption),
            EnabledForTemplateDeployment: utils.Bool(enabledForTemplateDeployment),
            NetworkAcls: expandArmVaultNetworkRuleSet(networkAcls),
            Sku: expandArmVaultSku(sku),
            TenantID: utils.String(tenantId),
            VaultUri: utils.String(vaultUri),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error updating Vault %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmVaultRead(d, meta)
}

func resourceArmVaultDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).vaultsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["vaults"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Vault %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}

func expandArmVaultAccessPolicyEntry(input []interface{}) *[]keyvault.AccessPolicyEntry {
    results := make([]keyvault.AccessPolicyEntry, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        tenantId := v["tenant_id"].(string)
        objectId := v["object_id"].(string)
        applicationId := v["application_id"].(string)
        permissions := v["permissions"].([]interface{})

        result := keyvault.AccessPolicyEntry{
            ApplicationID: utils.String(applicationId),
            ObjectID: utils.String(objectId),
            Permissions: expandArmVaultPermissions(permissions),
            TenantID: utils.String(tenantId),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVaultNetworkRuleSet(input []interface{}) *keyvault.NetworkRuleSet {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    bypass := v["bypass"].(string)
    defaultAction := v["default_action"].(string)
    ipRules := v["ip_rules"].([]interface{})
    virtualNetworkRules := v["virtual_network_rules"].([]interface{})

    result := keyvault.NetworkRuleSet{
        Bypass: keyvault.NetworkRuleBypassOptions(bypass),
        DefaultAction: keyvault.NetworkRuleAction(defaultAction),
        IpRules: expandArmVaultIPRule(ipRules),
        VirtualNetworkRules: expandArmVaultVirtualNetworkRule(virtualNetworkRules),
    }
    return &result
}

func expandArmVaultSku(input []interface{}) *keyvault.Sku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    family := v["family"].(string)
    name := v["name"].(string)

    result := keyvault.Sku{
        Family: utils.String(family),
        Name: keyvault.SkuName(name),
    }
    return &result
}

func expandArmVaultPermissions(input []interface{}) *keyvault.Permissions {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    keys := v["keys"].([]interface{})
    secrets := v["secrets"].([]interface{})
    certificates := v["certificates"].([]interface{})
    storage := v["storage"].([]interface{})

    result := keyvault.Permissions{
        Certificates: expandArmVault(certificates),
        Keys: expandArmVault(keys),
        Secrets: expandArmVault(secrets),
        Storage: expandArmVault(storage),
    }
    return &result
}

func expandArmVaultIPRule(input []interface{}) *[]keyvault.IPRule {
    results := make([]keyvault.IPRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        value := v["value"].(string)

        result := keyvault.IPRule{
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVaultVirtualNetworkRule(input []interface{}) *[]keyvault.VirtualNetworkRule {
    results := make([]keyvault.VirtualNetworkRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)

        result := keyvault.VirtualNetworkRule{
            ID: utils.String(id),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVault(input []interface{}) *[]keyvault. {
    results := make([]keyvault., 0)
    for _, item := range input {
        v := item.(string)
        result := keyvault.(v)
        results = append(results, result)
    }
    return &results
}


func flattenArmVaultAccessPolicyEntry(input *[]keyvault.AccessPolicyEntry) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if applicationId := item.ApplicationID; applicationId != nil {
            v["application_id"] = *applicationId
        }
        if objectId := item.ObjectID; objectId != nil {
            v["object_id"] = *objectId
        }
        v["permissions"] = flattenArmVaultPermissions(item.Permissions)
        if tenantId := item.TenantID; tenantId != nil {
            v["tenant_id"] = *tenantId
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVaultNetworkRuleSet(input *keyvault.NetworkRuleSet) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["bypass"] = string(input.Bypass)
    result["default_action"] = string(input.DefaultAction)
    result["ip_rules"] = flattenArmVaultIPRule(input.IpRules)
    result["virtual_network_rules"] = flattenArmVaultVirtualNetworkRule(input.VirtualNetworkRules)

    return []interface{}{result}
}

func flattenArmVaultSku(input *keyvault.Sku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["name"] = string(input.Name)
    if family := input.Family; family != nil {
        result["family"] = *family
    }

    return []interface{}{result}
}

func flattenArmVaultPermissions(input *keyvault.Permissions) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["certificates"] = flattenArmVault(string(input.Certificates))
    result["keys"] = flattenArmVault(string(input.Keys))
    result["secrets"] = flattenArmVault(string(input.Secrets))
    result["storage"] = flattenArmVault(string(input.Storage))

    return []interface{}{result}
}

func flattenArmVaultIPRule(input *[]keyvault.IPRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if value := item.Value; value != nil {
            v["value"] = *value
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVaultVirtualNetworkRule(input *[]keyvault.VirtualNetworkRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVault(input *[]keyvault.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}
