// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmWCFRelay() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmWCFRelayCreateUpdate,
        Read: resourceArmWCFRelayRead,
        Update: resourceArmWCFRelayCreateUpdate,
        Delete: resourceArmWCFRelayDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "namespace_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "relay_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(relay.NetTcp),
                    string(relay.Http),
                }, false),
                Default: string(relay.NetTcp),
            },

            "requires_client_authorization": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "requires_transport_security": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "user_metadata": {
                Type: schema.TypeString,
                Optional: true,
            },

            "created_at": {
                Type: schema.TypeString,
                Computed: true,
            },

            "is_dynamic": {
                Type: schema.TypeBool,
                Computed: true,
            },

            "listener_count": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "updated_at": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmWCFRelayCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).wCFRelaysClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    namespaceName := d.Get("namespace_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, namespaceName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Wcf Relay %q (Namespace Name %q / Resource Group %q): %+v", name, namespaceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_wcf_relay", *existing.ID)
        }
    }

    relayType := d.Get("relay_type").(string)
    requiresClientAuthorization := d.Get("requires_client_authorization").(bool)
    requiresTransportSecurity := d.Get("requires_transport_security").(bool)
    userMetadata := d.Get("user_metadata").(string)

    parameters := relay.WcfRelay{
        WcfRelay_properties: &relay.WcfRelay_properties{
            RelayType: relay.Relaytype(relayType),
            RequiresClientAuthorization: utils.Bool(requiresClientAuthorization),
            RequiresTransportSecurity: utils.Bool(requiresTransportSecurity),
            UserMetadata: utils.String(userMetadata),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, namespaceName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Wcf Relay %q (Namespace Name %q / Resource Group %q): %+v", name, namespaceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, namespaceName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Wcf Relay %q (Namespace Name %q / Resource Group %q): %+v", name, namespaceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Wcf Relay %q (Namespace Name %q / Resource Group %q) ID", name, namespaceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmWCFRelayRead(d, meta)
}

func resourceArmWCFRelayRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).wCFRelaysClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    namespaceName := id.Path["namespaces"]
    name := id.Path["wcfRelays"]

    resp, err := client.Get(ctx, resourceGroup, namespaceName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Wcf Relay %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Wcf Relay %q (Namespace Name %q / Resource Group %q): %+v", name, namespaceName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if wcfRelayProperties := resp.WcfRelay_properties; wcfRelayProperties != nil {
        d.Set("created_at", (wcfRelayProperties.CreatedAt).String())
        d.Set("is_dynamic", wcfRelayProperties.IsDynamic)
        d.Set("listener_count", int(*wcfRelayProperties.ListenerCount))
        d.Set("relay_type", string(wcfRelayProperties.RelayType))
        d.Set("requires_client_authorization", wcfRelayProperties.RequiresClientAuthorization)
        d.Set("requires_transport_security", wcfRelayProperties.RequiresTransportSecurity)
        d.Set("updated_at", (wcfRelayProperties.UpdatedAt).String())
        d.Set("user_metadata", wcfRelayProperties.UserMetadata)
    }
    d.Set("namespace_name", namespaceName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmWCFRelayDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).wCFRelaysClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    namespaceName := id.Path["namespaces"]
    name := id.Path["wcfRelays"]

    if _, err := client.Delete(ctx, resourceGroup, namespaceName, name); err != nil {
        return fmt.Errorf("Error deleting Wcf Relay %q (Namespace Name %q / Resource Group %q): %+v", name, namespaceName, resourceGroup, err)
    }

    return nil
}
