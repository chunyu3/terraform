// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmCustomImage() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmCustomImageCreateUpdate,
        Read: resourceArmCustomImageRead,
        Update: resourceArmCustomImageCreateUpdate,
        Delete: resourceArmCustomImageDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "lab_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "author": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "location": azure.SchemaLocation(),

            "managed_image_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "tags": tags.Schema(),

            "unique_identifier": {
                Type: schema.TypeString,
                Optional: true,
            },

            "vm": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "linux_os_info": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "linux_os_state": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(devtestlab.NonDeprovisioned),
                                            string(devtestlab.DeprovisionRequested),
                                            string(devtestlab.DeprovisionApplied),
                                        }, false),
                                        Default: string(devtestlab.NonDeprovisioned),
                                    },
                                },
                            },
                        },
                        "source_vmid": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "windows_os_info": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "windows_os_state": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(devtestlab.NonSysprepped),
                                            string(devtestlab.SysprepRequested),
                                            string(devtestlab.SysprepApplied),
                                        }, false),
                                        Default: string(devtestlab.NonSysprepped),
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "vhd": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "os_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(devtestlab.Windows),
                                string(devtestlab.Linux),
                                string(devtestlab.None),
                            }, false),
                        },
                        "image_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "sys_prep": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                    },
                },
            },

            "creation_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmCustomImageCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).customImagesClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("lab_name").(string)
    name := d.Get("name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, name, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Custom Image (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_custom_image", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    author := d.Get("author").(string)
    description := d.Get("description").(string)
    managedImageID := d.Get("managed_image_id").(string)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    vM := d.Get("vm").([]interface{})
    vhd := d.Get("vhd").([]interface{})
    tags := d.Get("tags").(map[string]interface{})

    customImage := devtestlab.CustomImage{
        Location: utils.String(location),
        CustomImageProperties: &devtestlab.CustomImageProperties{
            Author: utils.String(author),
            Description: utils.String(description),
            ManagedImageID: utils.String(managedImageID),
            UniqueIdentifier: utils.String(uniqueIdentifier),
            Vhd: expandArmCustomImageCustomImagePropertiesCustom(vhd),
            VM: expandArmCustomImageCustomImagePropertiesFromVm(vM),
        },
        Tags: tags.Expand(tags),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroupName, name, name, customImage)
    if err != nil {
        return fmt.Errorf("Error creating Custom Image (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Custom Image (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, name, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Custom Image (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Custom Image (Name %q / Lab Name %q / Resource Group %q) ID", name, name, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmCustomImageRead(d, meta)
}

func resourceArmCustomImageRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).customImagesClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["labs"]
    name := id.Path["customimages"]

    resp, err := client.Get(ctx, resourceGroupName, name, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Custom Image %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Custom Image (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if customImageProperties := resp.CustomImageProperties; customImageProperties != nil {
        d.Set("author", customImageProperties.Author)
        d.Set("creation_date", (customImageProperties.CreationDate).String())
        d.Set("description", customImageProperties.Description)
        d.Set("managed_image_id", customImageProperties.ManagedImageID)
        d.Set("provisioning_state", customImageProperties.ProvisioningState)
        d.Set("unique_identifier", customImageProperties.UniqueIdentifier)
        if err := d.Set("vm", flattenArmCustomImageCustomImagePropertiesFromVm(customImageProperties.VM)); err != nil {
            return fmt.Errorf("Error setting `vm`: %+v", err)
        }
        if err := d.Set("vhd", flattenArmCustomImageCustomImagePropertiesCustom(customImageProperties.Vhd)); err != nil {
            return fmt.Errorf("Error setting `vhd`: %+v", err)
        }
    }
    d.Set("id", resp.ID)
    d.Set("lab_name", name)
    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmCustomImageDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).customImagesClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["labs"]
    name := id.Path["customimages"]

    future, err := client.Delete(ctx, resourceGroupName, name, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Custom Image (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Custom Image (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
        }
    }

    return nil
}

func expandArmCustomImageCustomImagePropertiesCustom(input []interface{}) *devtestlab.CustomImagePropertiesCustom {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    imageName := v["image_name"].(string)
    sysPrep := v["sys_prep"].(bool)
    osType := v["os_type"].(string)

    result := devtestlab.CustomImagePropertiesCustom{
        ImageName: utils.String(imageName),
        OsType: devtestlab.CustomImageOsType(osType),
        SysPrep: utils.Bool(sysPrep),
    }
    return &result
}

func expandArmCustomImageCustomImagePropertiesFromVm(input []interface{}) *devtestlab.CustomImagePropertiesFromVm {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    sourceVMID := v["source_vmid"].(string)
    windowsOsInfo := v["windows_os_info"].([]interface{})
    linuxOsInfo := v["linux_os_info"].([]interface{})

    result := devtestlab.CustomImagePropertiesFromVm{
        LinuxOsInfo: expandArmCustomImageLinuxOsInfo(linuxOsInfo),
        SourceVMID: utils.String(sourceVMID),
        WindowsOsInfo: expandArmCustomImageWindowsOsInfo(windowsOsInfo),
    }
    return &result
}

func expandArmCustomImageLinuxOsInfo(input []interface{}) *devtestlab.LinuxOsInfo {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    linuxOsState := v["linux_os_state"].(string)

    result := devtestlab.LinuxOsInfo{
        LinuxOsState: devtestlab.LinuxOsState(linuxOsState),
    }
    return &result
}

func expandArmCustomImageWindowsOsInfo(input []interface{}) *devtestlab.WindowsOsInfo {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    windowsOsState := v["windows_os_state"].(string)

    result := devtestlab.WindowsOsInfo{
        WindowsOsState: devtestlab.WindowsOsState(windowsOsState),
    }
    return &result
}


func flattenArmCustomImageCustomImagePropertiesFromVm(input *devtestlab.CustomImagePropertiesFromVm) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["linux_os_info"] = flattenArmCustomImageLinuxOsInfo(input.LinuxOsInfo)
    if sourceVmid := input.SourceVMID; sourceVmid != nil {
        result["source_vmid"] = *sourceVmid
    }
    result["windows_os_info"] = flattenArmCustomImageWindowsOsInfo(input.WindowsOsInfo)

    return []interface{}{result}
}

func flattenArmCustomImageCustomImagePropertiesCustom(input *devtestlab.CustomImagePropertiesCustom) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if imageName := input.ImageName; imageName != nil {
        result["image_name"] = *imageName
    }
    result["os_type"] = string(input.OsType)
    if sysPrep := input.SysPrep; sysPrep != nil {
        result["sys_prep"] = *sysPrep
    }

    return []interface{}{result}
}

func flattenArmCustomImageLinuxOsInfo(input *devtestlab.LinuxOsInfo) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["linux_os_state"] = string(input.LinuxOsState)

    return []interface{}{result}
}

func flattenArmCustomImageWindowsOsInfo(input *devtestlab.WindowsOsInfo) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["windows_os_state"] = string(input.WindowsOsState)

    return []interface{}{result}
}
