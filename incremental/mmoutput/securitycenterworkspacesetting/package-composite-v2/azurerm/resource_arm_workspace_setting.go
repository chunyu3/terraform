// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmWorkspaceSetting() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmWorkspaceSettingCreate,
        Read: resourceArmWorkspaceSettingRead,
        Update: resourceArmWorkspaceSettingUpdate,
        Delete: resourceArmWorkspaceSettingDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "scope": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "workspace_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmWorkspaceSettingCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workspaceSettingsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Workspace Setting %q: %+v", name, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_workspace_setting", *existing.ID)
        }
    }

    scope := d.Get("scope").(string)
    workspaceId := d.Get("workspace_id").(string)

    workspaceSetting := securitycenter.WorkspaceSetting{
        WorkspaceSettingProperties: &securitycenter.WorkspaceSettingProperties{
            Scope: utils.String(scope),
            WorkspaceID: utils.String(workspaceId),
        },
    }


    if _, err := client.Create(ctx, name, workspaceSetting); err != nil {
        return fmt.Errorf("Error creating Workspace Setting %q: %+v", name, err)
    }


    resp, err := client.Get(ctx, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Workspace Setting %q: %+v", name, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Workspace Setting %q ID", name)
    }
    d.SetId(*resp.ID)

    return resourceArmWorkspaceSettingRead(d, meta)
}

func resourceArmWorkspaceSettingRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workspaceSettingsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["workspaceSettings"]

    resp, err := client.Get(ctx, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Workspace Setting %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Workspace Setting %q: %+v", name, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    if workspaceSettingProperties := resp.WorkspaceSettingProperties; workspaceSettingProperties != nil {
        d.Set("scope", workspaceSettingProperties.Scope)
        d.Set("workspace_id", workspaceSettingProperties.WorkspaceID)
    }
    d.Set("type", resp.Type)

    return nil
}

func resourceArmWorkspaceSettingUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workspaceSettingsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    scope := d.Get("scope").(string)
    workspaceId := d.Get("workspace_id").(string)

    workspaceSetting := securitycenter.WorkspaceSetting{
        WorkspaceSettingProperties: &securitycenter.WorkspaceSettingProperties{
            Scope: utils.String(scope),
            WorkspaceID: utils.String(workspaceId),
        },
    }


    if _, err := client.Update(ctx, name, workspaceSetting); err != nil {
        return fmt.Errorf("Error updating Workspace Setting %q: %+v", name, err)
    }

    return resourceArmWorkspaceSettingRead(d, meta)
}

func resourceArmWorkspaceSettingDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workspaceSettingsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["workspaceSettings"]

    if _, err := client.Delete(ctx, name); err != nil {
        return fmt.Errorf("Error deleting Workspace Setting %q: %+v", name, err)
    }

    return nil
}
