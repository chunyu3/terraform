// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmVpnGateway() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmVpnGatewayCreateUpdate,
        Read: resourceArmVpnGatewayRead,
        Update: resourceArmVpnGatewayCreateUpdate,
        Delete: resourceArmVpnGatewayDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "bgp_settings": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "asn": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "bgp_peering_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "peer_weight": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "connections": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "connection_bandwidth": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "connection_status": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Unknown),
                                string(network.Connecting),
                                string(network.Connected),
                                string(network.NotConnected),
                            }, false),
                            Default: string(network.Unknown),
                        },
                        "enable_bgp": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "enable_internet_security": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "enable_rate_limiting": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "ipsec_policies": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "dh_group": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.None),
                                            string(network.DHGroup1),
                                            string(network.DHGroup2),
                                            string(network.DHGroup14),
                                            string(network.DHGroup2048),
                                            string(network.ECP256),
                                            string(network.ECP384),
                                            string(network.DHGroup24),
                                        }, false),
                                    },
                                    "ike_encryption": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.DES),
                                            string(network.DES3),
                                            string(network.AES128),
                                            string(network.AES192),
                                            string(network.AES256),
                                            string(network.GCMAES256),
                                            string(network.GCMAES128),
                                        }, false),
                                    },
                                    "ike_integrity": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.MD5),
                                            string(network.SHA1),
                                            string(network.SHA256),
                                            string(network.SHA384),
                                            string(network.GCMAES256),
                                            string(network.GCMAES128),
                                        }, false),
                                    },
                                    "ipsec_encryption": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.None),
                                            string(network.DES),
                                            string(network.DES3),
                                            string(network.AES128),
                                            string(network.AES192),
                                            string(network.AES256),
                                            string(network.GCMAES128),
                                            string(network.GCMAES192),
                                            string(network.GCMAES256),
                                        }, false),
                                    },
                                    "ipsec_integrity": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.MD5),
                                            string(network.SHA1),
                                            string(network.SHA256),
                                            string(network.GCMAES128),
                                            string(network.GCMAES192),
                                            string(network.GCMAES256),
                                        }, false),
                                    },
                                    "pfs_group": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.None),
                                            string(network.PFS1),
                                            string(network.PFS2),
                                            string(network.PFS2048),
                                            string(network.ECP256),
                                            string(network.ECP384),
                                            string(network.PFS24),
                                            string(network.PFS14),
                                            string(network.PFSMM),
                                        }, false),
                                    },
                                    "sa_data_size_kilobytes": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "sa_life_time_seconds": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                },
                            },
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "remote_vpn_site": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "routing_weight": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "shared_key": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "vpn_connection_protocol_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.IKEv2),
                                string(network.IKEv1),
                            }, false),
                            Default: string(network.IKEv2),
                        },
                    },
                },
            },

            "virtual_hub": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "vpn_gateway_scale_unit": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmVpnGatewayCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).vpnGatewaysClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_vpn_gateway", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    bgpSettings := d.Get("bgp_settings").([]interface{})
    connections := d.Get("connections").([]interface{})
    virtualHub := d.Get("virtual_hub").([]interface{})
    vpnGatewayScaleUnit := d.Get("vpn_gateway_scale_unit").(int)
    t := d.Get("tags").(map[string]interface{})

    vpnGatewayParameters := network.VpnGateway{
        ID: utils.String(id),
        Location: utils.String(location),
        VpnGatewayProperties: &network.VpnGatewayProperties{
            BgpSettings: expandArmVpnGatewayBgpSettings(bgpSettings),
            Connections: expandArmVpnGatewayVpnConnection(connections),
            VirtualHub: expandArmVpnGatewaySubResource(virtualHub),
            VpnGatewayScaleUnit: utils.Int32(int32(vpnGatewayScaleUnit)),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, vpnGatewayParameters)
    if err != nil {
        return fmt.Errorf("Error creating Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Vpn Gateway %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmVpnGatewayRead(d, meta)
}

func resourceArmVpnGatewayRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).vpnGatewaysClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["vpnGateways"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Vpn Gateway %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if vpnGatewayProperties := resp.VpnGatewayProperties; vpnGatewayProperties != nil {
        if err := d.Set("bgp_settings", flattenArmVpnGatewayBgpSettings(vpnGatewayProperties.BgpSettings)); err != nil {
            return fmt.Errorf("Error setting `bgp_settings`: %+v", err)
        }
        if err := d.Set("connections", flattenArmVpnGatewayVpnConnection(vpnGatewayProperties.Connections)); err != nil {
            return fmt.Errorf("Error setting `connections`: %+v", err)
        }
        d.Set("provisioning_state", string(vpnGatewayProperties.ProvisioningState))
        if err := d.Set("virtual_hub", flattenArmVpnGatewaySubResource(vpnGatewayProperties.VirtualHub)); err != nil {
            return fmt.Errorf("Error setting `virtual_hub`: %+v", err)
        }
        d.Set("vpn_gateway_scale_unit", int(*vpnGatewayProperties.VpnGatewayScaleUnit))
    }
    d.Set("etag", resp.Etag)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmVpnGatewayDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).vpnGatewaysClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["vpnGateways"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmVpnGatewayBgpSettings(input []interface{}) *network.BgpSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    asn := v["asn"].(int)
    bgpPeeringAddress := v["bgp_peering_address"].(string)
    peerWeight := v["peer_weight"].(int)

    result := network.BgpSettings{
        Asn: utils.Int64(int64(asn)),
        BgpPeeringAddress: utils.String(bgpPeeringAddress),
        PeerWeight: utils.Int32(int32(peerWeight)),
    }
    return &result
}

func expandArmVpnGatewayVpnConnection(input []interface{}) *[]network.VpnConnection {
    results := make([]network.VpnConnection, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        remoteVpnSite := v["remote_vpn_site"].([]interface{})
        routingWeight := v["routing_weight"].(int)
        connectionStatus := v["connection_status"].(string)
        vpnConnectionProtocolType := v["vpn_connection_protocol_type"].(string)
        connectionBandwidth := v["connection_bandwidth"].(int)
        sharedKey := v["shared_key"].(string)
        enableBgp := v["enable_bgp"].(bool)
        ipsecPolicies := v["ipsec_policies"].([]interface{})
        enableRateLimiting := v["enable_rate_limiting"].(bool)
        enableInternetSecurity := v["enable_internet_security"].(bool)
        name := v["name"].(string)

        result := network.VpnConnection{
            ID: utils.String(id),
            Name: utils.String(name),
            VpnConnectionProperties: &network.VpnConnectionProperties{
                ConnectionBandwidth: utils.Int32(int32(connectionBandwidth)),
                ConnectionStatus: network.VpnConnectionStatus(connectionStatus),
                EnableBgp: utils.Bool(enableBgp),
                EnableInternetSecurity: utils.Bool(enableInternetSecurity),
                EnableRateLimiting: utils.Bool(enableRateLimiting),
                IpsecPolicies: expandArmVpnGatewayIpsecPolicy(ipsecPolicies),
                RemoteVpnSite: expandArmVpnGatewaySubResource(remoteVpnSite),
                RoutingWeight: utils.Int32(int32(routingWeight)),
                SharedKey: utils.String(sharedKey),
                VpnConnectionProtocolType: network.VirtualNetworkGatewayConnectionProtocol(vpnConnectionProtocolType),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVpnGatewaySubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(id),
    }
    return &result
}

func expandArmVpnGatewayIpsecPolicy(input []interface{}) *[]network.IpsecPolicy {
    results := make([]network.IpsecPolicy, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        saLifeTimeSeconds := v["sa_life_time_seconds"].(int)
        saDataSizeKilobytes := v["sa_data_size_kilobytes"].(int)
        ipsecEncryption := v["ipsec_encryption"].(string)
        ipsecIntegrity := v["ipsec_integrity"].(string)
        ikeEncryption := v["ike_encryption"].(string)
        ikeIntegrity := v["ike_integrity"].(string)
        dhGroup := v["dh_group"].(string)
        pfsGroup := v["pfs_group"].(string)

        result := network.IpsecPolicy{
            DhGroup: network.DhGroup(dhGroup),
            IkeEncryption: network.IkeEncryption(ikeEncryption),
            IkeIntegrity: network.IkeIntegrity(ikeIntegrity),
            IpsecEncryption: network.IpsecEncryption(ipsecEncryption),
            IpsecIntegrity: network.IpsecIntegrity(ipsecIntegrity),
            PfsGroup: network.PfsGroup(pfsGroup),
            SaDataSizeKilobytes: utils.Int32(int32(saDataSizeKilobytes)),
            SaLifeTimeSeconds: utils.Int32(int32(saLifeTimeSeconds)),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmVpnGatewayBgpSettings(input *network.BgpSettings) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if asn := input.Asn; asn != nil {
        result["asn"] = int(*asn)
    }
    if bgpPeeringAddress := input.BgpPeeringAddress; bgpPeeringAddress != nil {
        result["bgp_peering_address"] = *bgpPeeringAddress
    }
    if peerWeight := input.PeerWeight; peerWeight != nil {
        result["peer_weight"] = int(*peerWeight)
    }

    return []interface{}{result}
}

func flattenArmVpnGatewayVpnConnection(input *[]network.VpnConnection) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if vpnConnectionProperties := item.VpnConnectionProperties; vpnConnectionProperties != nil {
            if connectionBandwidth := vpnConnectionProperties.ConnectionBandwidth; connectionBandwidth != nil {
                v["connection_bandwidth"] = int(*connectionBandwidth)
            }
            v["connection_status"] = string(vpnConnectionProperties.ConnectionStatus)
            if enableBgp := vpnConnectionProperties.EnableBgp; enableBgp != nil {
                v["enable_bgp"] = *enableBgp
            }
            if enableInternetSecurity := vpnConnectionProperties.EnableInternetSecurity; enableInternetSecurity != nil {
                v["enable_internet_security"] = *enableInternetSecurity
            }
            if enableRateLimiting := vpnConnectionProperties.EnableRateLimiting; enableRateLimiting != nil {
                v["enable_rate_limiting"] = *enableRateLimiting
            }
            v["ipsec_policies"] = flattenArmVpnGatewayIpsecPolicy(vpnConnectionProperties.IpsecPolicies)
            v["remote_vpn_site"] = flattenArmVpnGatewaySubResource(vpnConnectionProperties.RemoteVpnSite)
            if routingWeight := vpnConnectionProperties.RoutingWeight; routingWeight != nil {
                v["routing_weight"] = int(*routingWeight)
            }
            if sharedKey := vpnConnectionProperties.SharedKey; sharedKey != nil {
                v["shared_key"] = *sharedKey
            }
            v["vpn_connection_protocol_type"] = string(vpnConnectionProperties.VpnConnectionProtocolType)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVpnGatewaySubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}

func flattenArmVpnGatewayIpsecPolicy(input *[]network.IpsecPolicy) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["dh_group"] = string(item.DhGroup)
        v["ike_encryption"] = string(item.IkeEncryption)
        v["ike_integrity"] = string(item.IkeIntegrity)
        v["ipsec_encryption"] = string(item.IpsecEncryption)
        v["ipsec_integrity"] = string(item.IpsecIntegrity)
        v["pfs_group"] = string(item.PfsGroup)
        if saDataSizeKilobytes := item.SaDataSizeKilobytes; saDataSizeKilobytes != nil {
            v["sa_data_size_kilobytes"] = int(*saDataSizeKilobytes)
        }
        if saLifeTimeSeconds := item.SaLifeTimeSeconds; saLifeTimeSeconds != nil {
            v["sa_life_time_seconds"] = int(*saLifeTimeSeconds)
        }

        results = append(results, v)
    }

    return results
}
