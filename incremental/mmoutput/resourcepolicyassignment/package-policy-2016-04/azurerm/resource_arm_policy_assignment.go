// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPolicyAssignment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPolicyAssignmentCreateUpdate,
        Read: resourceArmPolicyAssignmentRead,
        Update: resourceArmPolicyAssignmentCreateUpdate,
        Delete: resourceArmPolicyAssignmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "scope": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "display_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "policy_definition_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "scope": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },
        },
    }
}

func resourceArmPolicyAssignmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).policyAssignmentsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    scope := d.Get("scope").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, scope, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Policy Assignment %q (Scope %q): %+v", name, scope, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_policy_assignment", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    name := d.Get("name").(string)
    displayName := d.Get("display_name").(string)
    policyDefinitionId := d.Get("policy_definition_id").(string)
    scope := d.Get("scope").(string)
    type := d.Get("type").(string)

    parameters := resource.PolicyAssignment{
        ID: utils.String(id),
        Name: utils.String(name),
        PolicyAssignmentProperties: &resource.PolicyAssignmentProperties{
            DisplayName: utils.String(displayName),
            PolicyDefinitionID: utils.String(policyDefinitionId),
            Scope: utils.String(scope),
        },
        Type: utils.String(type),
    }


    if _, err := client.Create(ctx, scope, name, parameters); err != nil {
        return fmt.Errorf("Error creating Policy Assignment %q (Scope %q): %+v", name, scope, err)
    }


    resp, err := client.Get(ctx, scope, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Policy Assignment %q (Scope %q): %+v", name, scope, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Policy Assignment %q (Scope %q) ID", name, scope)
    }
    d.SetId(*resp.ID)

    return resourceArmPolicyAssignmentRead(d, meta)
}

func resourceArmPolicyAssignmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).policyAssignmentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["policyassignments"]

    resp, err := client.Get(ctx, scope, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Policy Assignment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Policy Assignment %q (Scope %q): %+v", name, scope, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    if policyAssignmentProperties := resp.PolicyAssignmentProperties; policyAssignmentProperties != nil {
        d.Set("display_name", policyAssignmentProperties.DisplayName)
        d.Set("policy_definition_id", policyAssignmentProperties.PolicyDefinitionID)
        d.Set("scope", policyAssignmentProperties.Scope)
    }
    d.Set("scope", scope)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmPolicyAssignmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).policyAssignmentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["policyassignments"]

    if _, err := client.Delete(ctx, scope, name); err != nil {
        return fmt.Errorf("Error deleting Policy Assignment %q (Scope %q): %+v", name, scope, err)
    }

    return nil
}
