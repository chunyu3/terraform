// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmBandwidthSetting() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmBandwidthSettingCreateUpdate,
        Read: resourceArmBandwidthSettingRead,
        Update: resourceArmBandwidthSettingCreateUpdate,
        Delete: resourceArmBandwidthSettingDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "bandwidth_setting_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "schedules": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "days": {
                            Type: schema.TypeList,
                            Required: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                                ValidateFunc: validation.StringInSlice([]string{
                                    string(storsimple.Sunday),
                                    string(storsimple.Monday),
                                    string(storsimple.Tuesday),
                                    string(storsimple.Wednesday),
                                    string(storsimple.Thursday),
                                    string(storsimple.Friday),
                                    string(storsimple.Saturday),
                               }, false),
                            },
                        },
                        "rate_in_mbps": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "start": {
                            Type: schema.TypeList,
                            Required: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "hours": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "minutes": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "seconds": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                },
                            },
                        },
                        "stop": {
                            Type: schema.TypeList,
                            Required: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "hours": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "minutes": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "seconds": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(storsimple.Series8000),
                }, false),
                Default: string(storsimple.Series8000),
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "volume_count": {
                Type: schema.TypeInt,
                Computed: true,
            },
        },
    }
}

func resourceArmBandwidthSettingCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).bandwidthSettingsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    bandwidthSettingName := d.Get("bandwidth_setting_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, bandwidthSettingName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Bandwidth Setting %q (Resource Group %q / Bandwidth Setting Name %q): %+v", name, resourceGroup, bandwidthSettingName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_bandwidth_setting", *existing.ID)
        }
    }

    kind := d.Get("kind").(string)
    schedules := d.Get("schedules").([]interface{})

    parameters := storsimple.BandwidthSetting{
        Kind: storsimple.Kind(kind),
        BandwidthRateSettingProperties: &storsimple.BandwidthRateSettingProperties{
            Schedules: expandArmBandwidthSettingBandwidthSchedule(schedules),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, bandwidthSettingName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Bandwidth Setting %q (Resource Group %q / Bandwidth Setting Name %q): %+v", name, resourceGroup, bandwidthSettingName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Bandwidth Setting %q (Resource Group %q / Bandwidth Setting Name %q): %+v", name, resourceGroup, bandwidthSettingName, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, bandwidthSettingName)
    if err != nil {
        return fmt.Errorf("Error retrieving Bandwidth Setting %q (Resource Group %q / Bandwidth Setting Name %q): %+v", name, resourceGroup, bandwidthSettingName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Bandwidth Setting %q (Resource Group %q / Bandwidth Setting Name %q) ID", name, resourceGroup, bandwidthSettingName)
    }
    d.SetId(*resp.ID)

    return resourceArmBandwidthSettingRead(d, meta)
}

func resourceArmBandwidthSettingRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).bandwidthSettingsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["managers"]
    bandwidthSettingName := id.Path["bandwidthSettings"]

    resp, err := client.Get(ctx, resourceGroup, name, bandwidthSettingName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Bandwidth Setting %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Bandwidth Setting %q (Resource Group %q / Bandwidth Setting Name %q): %+v", name, resourceGroup, bandwidthSettingName, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("bandwidth_setting_name", bandwidthSettingName)
    d.Set("kind", string(resp.Kind))
    if bandwidthRateSettingProperties := resp.BandwidthRateSettingProperties; bandwidthRateSettingProperties != nil {
        if err := d.Set("schedules", flattenArmBandwidthSettingBandwidthSchedule(bandwidthRateSettingProperties.Schedules)); err != nil {
            return fmt.Errorf("Error setting `schedules`: %+v", err)
        }
        d.Set("volume_count", int(*bandwidthRateSettingProperties.VolumeCount))
    }
    d.Set("type", resp.Type)

    return nil
}


func resourceArmBandwidthSettingDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).bandwidthSettingsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["managers"]
    bandwidthSettingName := id.Path["bandwidthSettings"]

    future, err := client.Delete(ctx, resourceGroup, name, bandwidthSettingName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Bandwidth Setting %q (Resource Group %q / Bandwidth Setting Name %q): %+v", name, resourceGroup, bandwidthSettingName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Bandwidth Setting %q (Resource Group %q / Bandwidth Setting Name %q): %+v", name, resourceGroup, bandwidthSettingName, err)
        }
    }

    return nil
}

func expandArmBandwidthSettingBandwidthSchedule(input []interface{}) *[]storsimple.BandwidthSchedule {
    results := make([]storsimple.BandwidthSchedule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        start := v["start"].([]interface{})
        stop := v["stop"].([]interface{})
        rateInMbps := v["rate_in_mbps"].(int)
        days := v["days"].([]interface{})

        result := storsimple.BandwidthSchedule{
            Days: expandArmBandwidthSetting(days),
            RateInMbps: utils.Int32(int32(rateInMbps)),
            Start: expandArmBandwidthSettingTime(start),
            Stop: expandArmBandwidthSettingTime(stop),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmBandwidthSetting(input []interface{}) *[]storsimple. {
    results := make([]storsimple., 0)
    for _, item := range input {
        v := item.(string)
        result := storsimple.(v)
        results = append(results, result)
    }
    return &results
}

func expandArmBandwidthSettingTime(input []interface{}) *storsimple.Time {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    hours := v["hours"].(int)
    minutes := v["minutes"].(int)
    seconds := v["seconds"].(int)

    result := storsimple.Time{
        Hours: utils.Int32(int32(hours)),
        Minutes: utils.Int32(int32(minutes)),
        Seconds: utils.Int32(int32(seconds)),
    }
    return &result
}


func flattenArmBandwidthSettingBandwidthSchedule(input *[]storsimple.BandwidthSchedule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["days"] = flattenArmBandwidthSetting(string(item.Days))
        if rateInMbps := item.RateInMbps; rateInMbps != nil {
            v["rate_in_mbps"] = int(*rateInMbps)
        }
        v["start"] = flattenArmBandwidthSettingTime(item.Start)
        v["stop"] = flattenArmBandwidthSettingTime(item.Stop)

        results = append(results, v)
    }

    return results
}

func flattenArmBandwidthSetting(input *[]storsimple.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}

func flattenArmBandwidthSettingTime(input *storsimple.Time) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if hours := input.Hours; hours != nil {
        result["hours"] = int(*hours)
    }
    if minutes := input.Minutes; minutes != nil {
        result["minutes"] = int(*minutes)
    }
    if seconds := input.Seconds; seconds != nil {
        result["seconds"] = int(*seconds)
    }

    return []interface{}{result}
}
