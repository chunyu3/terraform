// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmExportConfiguration() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmExportConfigurationCreate,
        Read: resourceArmExportConfigurationRead,
        Update: resourceArmExportConfigurationUpdate,
        Delete: resourceArmExportConfigurationDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "resource_group": {
                Type: schema.TypeString,
                Computed: true,
            },

            "destination_account_id": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "destination_address": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "destination_storage_location_id": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "destination_storage_subscription_id": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "destination_type": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "is_enabled": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "notification_queue_enabled": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "notification_queue_uri": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "record_types": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "application_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "container_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "export_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "export_status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "instrumentation_key": {
                Type: schema.TypeString,
                Computed: true,
            },

            "is_user_enabled": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_gap_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_success_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_user_update": {
                Type: schema.TypeString,
                Computed: true,
            },

            "permanent_error_reason": {
                Type: schema.TypeString,
                Computed: true,
            },

            "storage_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "subscription_id": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmExportConfigurationCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).exportConfigurationsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Export Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_export_configuration", *existing.ID)
        }
    }

    destinationAccountId := d.Get("destination_account_id").(string)
    destinationAddress := d.Get("destination_address").(string)
    destinationStorageLocationId := d.Get("destination_storage_location_id").(string)
    destinationStorageSubscriptionId := d.Get("destination_storage_subscription_id").(string)
    destinationType := d.Get("destination_type").(string)
    isEnabled := d.Get("is_enabled").(string)
    notificationQueueEnabled := d.Get("notification_queue_enabled").(string)
    notificationQueueUri := d.Get("notification_queue_uri").(string)
    recordTypes := d.Get("record_types").(string)

    exportProperties := applicationinsights.ComponentExportRequest{
        DestinationAccountID: utils.String(destinationAccountId),
        DestinationAddress: utils.String(destinationAddress),
        DestinationStorageLocationID: utils.String(destinationStorageLocationId),
        DestinationStorageSubscriptionID: utils.String(destinationStorageSubscriptionId),
        DestinationType: utils.String(destinationType),
        IsEnabled: utils.String(isEnabled),
        NotificationQueueEnabled: utils.String(notificationQueueEnabled),
        NotificationQueueUri: utils.String(notificationQueueUri),
        RecordTypes: utils.String(recordTypes),
    }


    if _, err := client.Create(ctx, resourceGroup, name, exportProperties); err != nil {
        return fmt.Errorf("Error creating Export Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Export Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Export Configuration %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmExportConfigurationRead(d, meta)
}

func resourceArmExportConfigurationRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).exportConfigurationsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["components"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Export Configuration %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Export Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    d.Set("application_name", resp.ApplicationName)
    d.Set("container_name", resp.ContainerName)
    d.Set("destination_account_id", resp.DestinationAccountID)
    d.Set("destination_storage_location_id", resp.DestinationStorageLocationID)
    d.Set("destination_storage_subscription_id", resp.DestinationStorageSubscriptionID)
    d.Set("destination_type", resp.DestinationType)
    d.Set("export_id", resp.ExportID)
    d.Set("export_status", resp.ExportStatus)
    d.Set("instrumentation_key", resp.InstrumentationKey)
    d.Set("is_user_enabled", resp.IsUserEnabled)
    d.Set("last_gap_time", resp.LastGapTime)
    d.Set("last_success_time", resp.LastSuccessTime)
    d.Set("last_user_update", resp.LastUserUpdate)
    d.Set("notification_queue_enabled", resp.NotificationQueueEnabled)
    d.Set("permanent_error_reason", resp.PermanentErrorReason)
    d.Set("record_types", resp.RecordTypes)
    d.Set("resource_group", resp.ResourceGroup)
    d.Set("storage_name", resp.StorageName)
    d.Set("subscription_id", resp.SubscriptionID)

    return nil
}

func resourceArmExportConfigurationUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).exportConfigurationsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    destinationAccountId := d.Get("destination_account_id").(string)
    destinationAddress := d.Get("destination_address").(string)
    destinationStorageLocationId := d.Get("destination_storage_location_id").(string)
    destinationStorageSubscriptionId := d.Get("destination_storage_subscription_id").(string)
    destinationType := d.Get("destination_type").(string)
    isEnabled := d.Get("is_enabled").(string)
    notificationQueueEnabled := d.Get("notification_queue_enabled").(string)
    notificationQueueUri := d.Get("notification_queue_uri").(string)
    recordTypes := d.Get("record_types").(string)

    exportProperties := applicationinsights.ComponentExportRequest{
        DestinationAccountID: utils.String(destinationAccountId),
        DestinationAddress: utils.String(destinationAddress),
        DestinationStorageLocationID: utils.String(destinationStorageLocationId),
        DestinationStorageSubscriptionID: utils.String(destinationStorageSubscriptionId),
        DestinationType: utils.String(destinationType),
        IsEnabled: utils.String(isEnabled),
        NotificationQueueEnabled: utils.String(notificationQueueEnabled),
        NotificationQueueUri: utils.String(notificationQueueUri),
        RecordTypes: utils.String(recordTypes),
    }


    if _, err := client.Update(ctx, resourceGroup, name, exportProperties); err != nil {
        return fmt.Errorf("Error updating Export Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmExportConfigurationRead(d, meta)
}

func resourceArmExportConfigurationDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).exportConfigurationsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["components"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Export Configuration %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}
