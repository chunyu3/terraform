// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmBackupSchedule() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmBackupScheduleCreateUpdate,
        Read: resourceArmBackupScheduleRead,
        Update: resourceArmBackupScheduleCreateUpdate,
        Delete: resourceArmBackupScheduleDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "backup_policy_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "backup_schedule_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "backup_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(storsimple.LocalSnapshot),
                    string(storsimple.CloudSnapshot),
                }, false),
            },

            "device_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "retention_count": {
                Type: schema.TypeInt,
                Required: true,
            },

            "schedule_recurrence": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "recurrence_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(storsimple.Minutes),
                                string(storsimple.Hourly),
                                string(storsimple.Daily),
                                string(storsimple.Weekly),
                            }, false),
                        },
                        "recurrence_value": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "weekly_days_list": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                                ValidateFunc: validation.StringInSlice([]string{
                                    string(storsimple.Sunday),
                                    string(storsimple.Monday),
                                    string(storsimple.Tuesday),
                                    string(storsimple.Wednesday),
                                    string(storsimple.Thursday),
                                    string(storsimple.Friday),
                                    string(storsimple.Saturday),
                               }, false),
                            },
                        },
                    },
                },
            },

            "schedule_status": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(storsimple.Enabled),
                    string(storsimple.Disabled),
                }, false),
            },

            "start_time": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
                ValidateFunc: validateRFC3339Date,
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(storsimple.Series8000),
                }, false),
                Default: string(storsimple.Series8000),
            },

            "last_successful_run": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmBackupScheduleCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backupSchedulesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    backupPolicyName := d.Get("backup_policy_name").(string)
    backupScheduleName := d.Get("backup_schedule_name").(string)
    deviceName := d.Get("device_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, deviceName, backupPolicyName, backupScheduleName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Backup Schedule %q (Resource Group %q / Backup Schedule Name %q / Backup Policy Name %q / Device Name %q): %+v", name, resourceGroup, backupScheduleName, backupPolicyName, deviceName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_backup_schedule", *existing.ID)
        }
    }

    backupType := d.Get("backup_type").(string)
    kind := d.Get("kind").(string)
    retentionCount := d.Get("retention_count").(int)
    scheduleRecurrence := d.Get("schedule_recurrence").([]interface{})
    scheduleStatus := d.Get("schedule_status").(string)
    startTime := d.Get("start_time").(string)

    parameters := storsimple.BackupSchedule{
        Kind: storsimple.Kind(kind),
        BackupScheduleProperties: &storsimple.BackupScheduleProperties{
            BackupType: storsimple.BackupType(backupType),
            RetentionCount: utils.Int64(int64(retentionCount)),
            ScheduleRecurrence: expandArmBackupScheduleScheduleRecurrence(scheduleRecurrence),
            ScheduleStatus: storsimple.ScheduleStatus(scheduleStatus),
            StartTime: convertStringToDate(startTime),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, deviceName, backupPolicyName, backupScheduleName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Backup Schedule %q (Resource Group %q / Backup Schedule Name %q / Backup Policy Name %q / Device Name %q): %+v", name, resourceGroup, backupScheduleName, backupPolicyName, deviceName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Backup Schedule %q (Resource Group %q / Backup Schedule Name %q / Backup Policy Name %q / Device Name %q): %+v", name, resourceGroup, backupScheduleName, backupPolicyName, deviceName, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, deviceName, backupPolicyName, backupScheduleName)
    if err != nil {
        return fmt.Errorf("Error retrieving Backup Schedule %q (Resource Group %q / Backup Schedule Name %q / Backup Policy Name %q / Device Name %q): %+v", name, resourceGroup, backupScheduleName, backupPolicyName, deviceName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Backup Schedule %q (Resource Group %q / Backup Schedule Name %q / Backup Policy Name %q / Device Name %q) ID", name, resourceGroup, backupScheduleName, backupPolicyName, deviceName)
    }
    d.SetId(*resp.ID)

    return resourceArmBackupScheduleRead(d, meta)
}

func resourceArmBackupScheduleRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backupSchedulesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["managers"]
    deviceName := id.Path["devices"]
    backupPolicyName := id.Path["backupPolicies"]
    backupScheduleName := id.Path["schedules"]

    resp, err := client.Get(ctx, resourceGroup, name, deviceName, backupPolicyName, backupScheduleName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Backup Schedule %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Backup Schedule %q (Resource Group %q / Backup Schedule Name %q / Backup Policy Name %q / Device Name %q): %+v", name, resourceGroup, backupScheduleName, backupPolicyName, deviceName, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("backup_policy_name", backupPolicyName)
    d.Set("backup_schedule_name", backupScheduleName)
    if backupScheduleProperties := resp.BackupScheduleProperties; backupScheduleProperties != nil {
        d.Set("backup_type", string(backupScheduleProperties.BackupType))
        d.Set("last_successful_run", (backupScheduleProperties.LastSuccessfulRun).String())
        d.Set("retention_count", int(*backupScheduleProperties.RetentionCount))
        if err := d.Set("schedule_recurrence", flattenArmBackupScheduleScheduleRecurrence(backupScheduleProperties.ScheduleRecurrence)); err != nil {
            return fmt.Errorf("Error setting `schedule_recurrence`: %+v", err)
        }
        d.Set("schedule_status", string(backupScheduleProperties.ScheduleStatus))
        d.Set("start_time", (backupScheduleProperties.StartTime).String())
    }
    d.Set("device_name", deviceName)
    d.Set("kind", string(resp.Kind))
    d.Set("type", resp.Type)

    return nil
}


func resourceArmBackupScheduleDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backupSchedulesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["managers"]
    deviceName := id.Path["devices"]
    backupPolicyName := id.Path["backupPolicies"]
    backupScheduleName := id.Path["schedules"]

    future, err := client.Delete(ctx, resourceGroup, name, deviceName, backupPolicyName, backupScheduleName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Backup Schedule %q (Resource Group %q / Backup Schedule Name %q / Backup Policy Name %q / Device Name %q): %+v", name, resourceGroup, backupScheduleName, backupPolicyName, deviceName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Backup Schedule %q (Resource Group %q / Backup Schedule Name %q / Backup Policy Name %q / Device Name %q): %+v", name, resourceGroup, backupScheduleName, backupPolicyName, deviceName, err)
        }
    }

    return nil
}

func expandArmBackupScheduleScheduleRecurrence(input []interface{}) *storsimple.ScheduleRecurrence {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    recurrenceType := v["recurrence_type"].(string)
    recurrenceValue := v["recurrence_value"].(int)
    weeklyDaysList := v["weekly_days_list"].([]interface{})

    result := storsimple.ScheduleRecurrence{
        RecurrenceType: storsimple.RecurrenceType(recurrenceType),
        RecurrenceValue: utils.Int32(int32(recurrenceValue)),
        WeeklyDaysList: expandArmBackupSchedule(weeklyDaysList),
    }
    return &result
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}

func expandArmBackupSchedule(input []interface{}) *[]storsimple. {
    results := make([]storsimple., 0)
    for _, item := range input {
        v := item.(string)
        result := storsimple.(v)
        results = append(results, result)
    }
    return &results
}


func flattenArmBackupScheduleScheduleRecurrence(input *storsimple.ScheduleRecurrence) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["recurrence_type"] = string(input.RecurrenceType)
    if recurrenceValue := input.RecurrenceValue; recurrenceValue != nil {
        result["recurrence_value"] = int(*recurrenceValue)
    }
    result["weekly_days_list"] = flattenArmBackupSchedule(string(input.WeeklyDaysList))

    return []interface{}{result}
}

func flattenArmBackupSchedule(input *[]storsimple.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}
