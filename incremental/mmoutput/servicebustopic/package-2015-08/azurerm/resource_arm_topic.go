// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmTopic() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmTopicCreateUpdate,
        Read: resourceArmTopicRead,
        Update: resourceArmTopicCreateUpdate,
        Delete: resourceArmTopicDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "namespace_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "auto_delete_on_idle": {
                Type: schema.TypeString,
                Optional: true,
            },

            "default_message_time_to_live": {
                Type: schema.TypeString,
                Optional: true,
            },

            "duplicate_detection_history_time_window": {
                Type: schema.TypeString,
                Optional: true,
            },

            "enable_batched_operations": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enable_express": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enable_partitioning": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "entity_availability_status": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(servicebus.Available),
                    string(servicebus.Limited),
                    string(servicebus.Renaming),
                    string(servicebus.Restoring),
                    string(servicebus.Unknown),
                }, false),
                Default: string(servicebus.Available),
            },

            "filtering_messages_before_publishing": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "is_anonymous_accessible": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "is_express": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "max_size_in_megabytes": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "requires_duplicate_detection": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "status": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(servicebus.Active),
                    string(servicebus.Creating),
                    string(servicebus.Deleting),
                    string(servicebus.Disabled),
                    string(servicebus.ReceiveDisabled),
                    string(servicebus.Renaming),
                    string(servicebus.Restoring),
                    string(servicebus.SendDisabled),
                    string(servicebus.Unknown),
                }, false),
                Default: string(servicebus.Active),
            },

            "support_ordering": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "accessed_at": {
                Type: schema.TypeString,
                Computed: true,
            },

            "count_details": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "active_message_count": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "dead_letter_message_count": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "scheduled_message_count": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "transfer_dead_letter_message_count": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "transfer_message_count": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "created_at": {
                Type: schema.TypeString,
                Computed: true,
            },

            "size_in_bytes": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "subscription_count": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "updated_at": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmTopicCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).topicsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    namespaceName := d.Get("namespace_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, namespaceName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Topic %q (Namespace Name %q / Resource Group %q): %+v", name, namespaceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_topic", *existing.ID)
        }
    }

    name := d.Get("name").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    autoDeleteOnIdle := d.Get("auto_delete_on_idle").(string)
    defaultMessageTimeToLive := d.Get("default_message_time_to_live").(string)
    duplicateDetectionHistoryTimeWindow := d.Get("duplicate_detection_history_time_window").(string)
    enableBatchedOperations := d.Get("enable_batched_operations").(bool)
    enableExpress := d.Get("enable_express").(bool)
    enablePartitioning := d.Get("enable_partitioning").(bool)
    entityAvailabilityStatus := d.Get("entity_availability_status").(string)
    filteringMessagesBeforePublishing := d.Get("filtering_messages_before_publishing").(bool)
    isAnonymousAccessible := d.Get("is_anonymous_accessible").(bool)
    isExpress := d.Get("is_express").(bool)
    maxSizeInMegabytes := d.Get("max_size_in_megabytes").(int)
    requiresDuplicateDetection := d.Get("requires_duplicate_detection").(bool)
    status := d.Get("status").(string)
    supportOrdering := d.Get("support_ordering").(bool)

    parameters := servicebus.TopicCreateOrUpdateParameters{
        Location: utils.String(location),
        Name: utils.String(name),
        TopicProperties: &servicebus.TopicProperties{
            AutoDeleteOnIdle: utils.String(autoDeleteOnIdle),
            DefaultMessageTimeToLive: utils.String(defaultMessageTimeToLive),
            DuplicateDetectionHistoryTimeWindow: utils.String(duplicateDetectionHistoryTimeWindow),
            EnableBatchedOperations: utils.Bool(enableBatchedOperations),
            EnableExpress: utils.Bool(enableExpress),
            EnablePartitioning: utils.Bool(enablePartitioning),
            EntityAvailabilityStatus: servicebus.EntityAvailabilityStatus(entityAvailabilityStatus),
            FilteringMessagesBeforePublishing: utils.Bool(filteringMessagesBeforePublishing),
            IsAnonymousAccessible: utils.Bool(isAnonymousAccessible),
            IsExpress: utils.Bool(isExpress),
            MaxSizeInMegabytes: utils.Int64(int64(maxSizeInMegabytes)),
            RequiresDuplicateDetection: utils.Bool(requiresDuplicateDetection),
            Status: servicebus.EntityStatus(status),
            SupportOrdering: utils.Bool(supportOrdering),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, namespaceName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Topic %q (Namespace Name %q / Resource Group %q): %+v", name, namespaceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, namespaceName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Topic %q (Namespace Name %q / Resource Group %q): %+v", name, namespaceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Topic %q (Namespace Name %q / Resource Group %q) ID", name, namespaceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmTopicRead(d, meta)
}

func resourceArmTopicRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).topicsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    namespaceName := id.Path["namespaces"]
    name := id.Path["topics"]

    resp, err := client.Get(ctx, resourceGroup, namespaceName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Topic %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Topic %q (Namespace Name %q / Resource Group %q): %+v", name, namespaceName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if topicProperties := resp.TopicProperties; topicProperties != nil {
        d.Set("accessed_at", (topicProperties.AccessedAt).String())
        d.Set("auto_delete_on_idle", topicProperties.AutoDeleteOnIdle)
        if err := d.Set("count_details", flattenArmTopicMessageCountDetails(topicProperties.CountDetails)); err != nil {
            return fmt.Errorf("Error setting `count_details`: %+v", err)
        }
        d.Set("created_at", (topicProperties.CreatedAt).String())
        d.Set("default_message_time_to_live", topicProperties.DefaultMessageTimeToLive)
        d.Set("duplicate_detection_history_time_window", topicProperties.DuplicateDetectionHistoryTimeWindow)
        d.Set("enable_batched_operations", topicProperties.EnableBatchedOperations)
        d.Set("enable_express", topicProperties.EnableExpress)
        d.Set("enable_partitioning", topicProperties.EnablePartitioning)
        d.Set("entity_availability_status", string(topicProperties.EntityAvailabilityStatus))
        d.Set("filtering_messages_before_publishing", topicProperties.FilteringMessagesBeforePublishing)
        d.Set("is_anonymous_accessible", topicProperties.IsAnonymousAccessible)
        d.Set("is_express", topicProperties.IsExpress)
        d.Set("max_size_in_megabytes", int(*topicProperties.MaxSizeInMegabytes))
        d.Set("requires_duplicate_detection", topicProperties.RequiresDuplicateDetection)
        d.Set("size_in_bytes", int(*topicProperties.SizeInBytes))
        d.Set("status", string(topicProperties.Status))
        d.Set("subscription_count", int(*topicProperties.SubscriptionCount))
        d.Set("support_ordering", topicProperties.SupportOrdering)
        d.Set("updated_at", (topicProperties.UpdatedAt).String())
    }
    d.Set("namespace_name", namespaceName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmTopicDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).topicsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    namespaceName := id.Path["namespaces"]
    name := id.Path["topics"]

    if _, err := client.Delete(ctx, resourceGroup, namespaceName, name); err != nil {
        return fmt.Errorf("Error deleting Topic %q (Namespace Name %q / Resource Group %q): %+v", name, namespaceName, resourceGroup, err)
    }

    return nil
}


func flattenArmTopicMessageCountDetails(input *servicebus.MessageCountDetails) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})


    return []interface{}{result}
}
