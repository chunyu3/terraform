// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmScheduledQueryRule() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmScheduledQueryRuleCreate,
        Read: resourceArmScheduledQueryRuleRead,
        Update: resourceArmScheduledQueryRuleUpdate,
        Delete: resourceArmScheduledQueryRuleDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "enabled": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(monitorclient.true),
                    string(monitorclient.false),
                }, false),
                Default: string(monitorclient.true),
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmScheduledQueryRuleCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).scheduledQueryRulesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Scheduled Query Rule %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_scheduled_query_rule", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    enabled := d.Get("enabled").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := monitorclient.LogSearchRuleResourcePatch{
        Location: utils.String(location),
        LogSearchRulePatch: &monitorclient.LogSearchRulePatch{
            Enabled: monitorclient.Enabled(enabled),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error creating Scheduled Query Rule %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Scheduled Query Rule %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Scheduled Query Rule %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmScheduledQueryRuleRead(d, meta)
}

func resourceArmScheduledQueryRuleRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).scheduledQueryRulesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    name := id.Path["scheduledQueryRules"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Scheduled Query Rule %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Scheduled Query Rule %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmScheduledQueryRuleUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).scheduledQueryRulesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    enabled := d.Get("enabled").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := monitorclient.LogSearchRuleResourcePatch{
        LogSearchRulePatch: &monitorclient.LogSearchRulePatch{
            Enabled: monitorclient.Enabled(enabled),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error updating Scheduled Query Rule %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmScheduledQueryRuleRead(d, meta)
}

func resourceArmScheduledQueryRuleDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).scheduledQueryRulesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    name := id.Path["scheduledQueryRules"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Scheduled Query Rule %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}
