// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDomainService() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDomainServiceCreate,
        Read: resourceArmDomainServiceRead,
        Update: resourceArmDomainServiceUpdate,
        Delete: resourceArmDomainServiceDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "domain_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "domain_security_settings": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "ntlm_v1": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(domainservices.Enabled),
                                string(domainservices.Disabled),
                            }, false),
                            Default: string(domainservices.Enabled),
                        },
                        "sync_ntlm_passwords": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(domainservices.Enabled),
                                string(domainservices.Disabled),
                            }, false),
                            Default: string(domainservices.Enabled),
                        },
                        "tls_v1": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(domainservices.Enabled),
                                string(domainservices.Disabled),
                            }, false),
                            Default: string(domainservices.Enabled),
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "filtered_sync": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(domainservices.Enabled),
                    string(domainservices.Disabled),
                }, false),
                Default: string(domainservices.Enabled),
            },

            "ldaps_settings": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "external_access": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(domainservices.Enabled),
                                string(domainservices.Disabled),
                            }, false),
                            Default: string(domainservices.Enabled),
                        },
                        "ldaps": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(domainservices.Enabled),
                                string(domainservices.Disabled),
                            }, false),
                            Default: string(domainservices.Enabled),
                        },
                        "pfx_certificate": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "pfx_certificate_password": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "notification_settings": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "additional_recipients": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "notify_dc_admins": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(domainservices.Enabled),
                                string(domainservices.Disabled),
                            }, false),
                            Default: string(domainservices.Enabled),
                        },
                        "notify_global_admins": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(domainservices.Enabled),
                                string(domainservices.Disabled),
                            }, false),
                            Default: string(domainservices.Enabled),
                        },
                    },
                },
            },

            "subnet_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "domain_controller_ip_address": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "health_alerts": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "issue": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "last_detected": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "raised": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "resolution_uri": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "severity": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "health_last_evaluated": {
                Type: schema.TypeString,
                Computed: true,
            },

            "health_monitors": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "details": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "service_status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tenant_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "vnet_site_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmDomainServiceCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).domainServicesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Domain Service %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_domain_service", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    domainName := d.Get("domain_name").(string)
    domainSecuritySettings := d.Get("domain_security_settings").([]interface{})
    etag := d.Get("etag").(string)
    filteredSync := d.Get("filtered_sync").(string)
    ldapsSettings := d.Get("ldaps_settings").([]interface{})
    notificationSettings := d.Get("notification_settings").([]interface{})
    subnetId := d.Get("subnet_id").(string)
    t := d.Get("tags").(map[string]interface{})

    domainService := domainservices.DomainService{
        Etag: utils.String(etag),
        Location: utils.String(location),
        DomainServiceProperties: &domainservices.DomainServiceProperties{
            DomainName: utils.String(domainName),
            DomainSecuritySettings: expandArmDomainServiceDomainSecuritySettings(domainSecuritySettings),
            FilteredSync: domainservices.FilteredSync(filteredSync),
            LdapsSettings: expandArmDomainServiceLdapsSettings(ldapsSettings),
            NotificationSettings: expandArmDomainServiceNotificationSettings(notificationSettings),
            SubnetID: utils.String(subnetId),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, domainService)
    if err != nil {
        return fmt.Errorf("Error creating Domain Service %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Domain Service %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Domain Service %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Domain Service %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmDomainServiceRead(d, meta)
}

func resourceArmDomainServiceRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).domainServicesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["domainServices"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Domain Service %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Domain Service %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if domainServiceProperties := resp.DomainServiceProperties; domainServiceProperties != nil {
        d.Set("domain_controller_ip_address", utils.FlattenStringSlice(domainServiceProperties.DomainControllerIpAddress))
        d.Set("domain_name", domainServiceProperties.DomainName)
        if err := d.Set("domain_security_settings", flattenArmDomainServiceDomainSecuritySettings(domainServiceProperties.DomainSecuritySettings)); err != nil {
            return fmt.Errorf("Error setting `domain_security_settings`: %+v", err)
        }
        d.Set("filtered_sync", string(domainServiceProperties.FilteredSync))
        if err := d.Set("health_alerts", flattenArmDomainServiceHealthAlert(domainServiceProperties.HealthAlerts)); err != nil {
            return fmt.Errorf("Error setting `health_alerts`: %+v", err)
        }
        d.Set("health_last_evaluated", (domainServiceProperties.HealthLastEvaluated).String())
        if err := d.Set("health_monitors", flattenArmDomainServiceHealthMonitor(domainServiceProperties.HealthMonitors)); err != nil {
            return fmt.Errorf("Error setting `health_monitors`: %+v", err)
        }
        if err := d.Set("ldaps_settings", flattenArmDomainServiceLdapsSettings(domainServiceProperties.LdapsSettings)); err != nil {
            return fmt.Errorf("Error setting `ldaps_settings`: %+v", err)
        }
        if err := d.Set("notification_settings", flattenArmDomainServiceNotificationSettings(domainServiceProperties.NotificationSettings)); err != nil {
            return fmt.Errorf("Error setting `notification_settings`: %+v", err)
        }
        d.Set("provisioning_state", domainServiceProperties.ProvisioningState)
        d.Set("service_status", domainServiceProperties.ServiceStatus)
        d.Set("subnet_id", domainServiceProperties.SubnetID)
        d.Set("tenant_id", domainServiceProperties.TenantID)
        d.Set("vnet_site_id", domainServiceProperties.VnetSiteID)
    }
    d.Set("etag", resp.Etag)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmDomainServiceUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).domainServicesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    domainName := d.Get("domain_name").(string)
    domainSecuritySettings := d.Get("domain_security_settings").([]interface{})
    etag := d.Get("etag").(string)
    filteredSync := d.Get("filtered_sync").(string)
    ldapsSettings := d.Get("ldaps_settings").([]interface{})
    notificationSettings := d.Get("notification_settings").([]interface{})
    subnetId := d.Get("subnet_id").(string)
    t := d.Get("tags").(map[string]interface{})

    domainService := domainservices.DomainService{
        Etag: utils.String(etag),
        Location: utils.String(location),
        DomainServiceProperties: &domainservices.DomainServiceProperties{
            DomainName: utils.String(domainName),
            DomainSecuritySettings: expandArmDomainServiceDomainSecuritySettings(domainSecuritySettings),
            FilteredSync: domainservices.FilteredSync(filteredSync),
            LdapsSettings: expandArmDomainServiceLdapsSettings(ldapsSettings),
            NotificationSettings: expandArmDomainServiceNotificationSettings(notificationSettings),
            SubnetID: utils.String(subnetId),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, name, domainService)
    if err != nil {
        return fmt.Errorf("Error updating Domain Service %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Domain Service %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmDomainServiceRead(d, meta)
}

func resourceArmDomainServiceDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).domainServicesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["domainServices"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Domain Service %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Domain Service %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmDomainServiceDomainSecuritySettings(input []interface{}) *domainservices.DomainSecuritySettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    ntlmV1 := v["ntlm_v1"].(string)
    tlsV1 := v["tls_v1"].(string)
    syncNtlmPasswords := v["sync_ntlm_passwords"].(string)

    result := domainservices.DomainSecuritySettings{
        NtlmV1: domainservices.NtlmV1(ntlmV1),
        SyncNtlmPasswords: domainservices.SyncNtlmPasswords(syncNtlmPasswords),
        TlsV1: domainservices.TlsV1(tlsV1),
    }
    return &result
}

func expandArmDomainServiceLdapsSettings(input []interface{}) *domainservices.LdapsSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    ldaps := v["ldaps"].(string)
    pfxCertificate := v["pfx_certificate"].(string)
    pfxCertificatePassword := v["pfx_certificate_password"].(string)
    externalAccess := v["external_access"].(string)

    result := domainservices.LdapsSettings{
        ExternalAccess: domainservices.ExternalAccess(externalAccess),
        Ldaps: domainservices.Ldaps(ldaps),
        PfxCertificate: utils.String(pfxCertificate),
        PfxCertificatePassword: utils.String(pfxCertificatePassword),
    }
    return &result
}

func expandArmDomainServiceNotificationSettings(input []interface{}) *domainservices.NotificationSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    notifyGlobalAdmins := v["notify_global_admins"].(string)
    notifyDcAdmins := v["notify_dc_admins"].(string)
    additionalRecipients := v["additional_recipients"].([]interface{})

    result := domainservices.NotificationSettings{
        AdditionalRecipients: utils.ExpandStringSlice(additionalRecipients),
        NotifyDcAdmins: domainservices.NotifyDcAdmins(notifyDcAdmins),
        NotifyGlobalAdmins: domainservices.NotifyGlobalAdmins(notifyGlobalAdmins),
    }
    return &result
}


func flattenArmDomainServiceDomainSecuritySettings(input *domainservices.DomainSecuritySettings) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["ntlm_v1"] = string(input.NtlmV1)
    result["sync_ntlm_passwords"] = string(input.SyncNtlmPasswords)
    result["tls_v1"] = string(input.TlsV1)

    return []interface{}{result}
}

func flattenArmDomainServiceHealthAlert(input *[]domainservices.HealthAlert) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}

func flattenArmDomainServiceHealthMonitor(input *[]domainservices.HealthMonitor) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}

func flattenArmDomainServiceLdapsSettings(input *domainservices.LdapsSettings) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["external_access"] = string(input.ExternalAccess)
    result["ldaps"] = string(input.Ldaps)
    if pfxCertificate := input.PfxCertificate; pfxCertificate != nil {
        result["pfx_certificate"] = *pfxCertificate
    }
    if pfxCertificatePassword := input.PfxCertificatePassword; pfxCertificatePassword != nil {
        result["pfx_certificate_password"] = *pfxCertificatePassword
    }

    return []interface{}{result}
}

func flattenArmDomainServiceNotificationSettings(input *domainservices.NotificationSettings) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["additional_recipients"] = utils.FlattenStringSlice(input.AdditionalRecipients)
    result["notify_dc_admins"] = string(input.NotifyDcAdmins)
    result["notify_global_admins"] = string(input.NotifyGlobalAdmins)

    return []interface{}{result}
}
