// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmConnectionMonitor() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmConnectionMonitorCreateUpdate,
        Read: resourceArmConnectionMonitorRead,
        Update: resourceArmConnectionMonitorCreateUpdate,
        Delete: resourceArmConnectionMonitorDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "destination": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "resource_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "network_watcher_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "source": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "resource_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "auto_start": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "monitoring_interval_in_seconds": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "monitoring_status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "start_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmConnectionMonitorCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectionMonitorsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    networkWatcherName := d.Get("network_watcher_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, networkWatcherName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Connection Monitor %q (Network Watcher Name %q / Resource Group %q): %+v", name, networkWatcherName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_connection_monitor", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    autoStart := d.Get("auto_start").(bool)
    destination := d.Get("destination").([]interface{})
    monitoringIntervalInSeconds := d.Get("monitoring_interval_in_seconds").(int)
    source := d.Get("source").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := network.ConnectionMonitor{
        Location: utils.String(location),
        ConnectionMonitorParameters: &network.ConnectionMonitorParameters{
            AutoStart: utils.Bool(autoStart),
            Destination: expandArmConnectionMonitorConnectionMonitorDestination(destination),
            MonitoringIntervalInSeconds: utils.Int(monitoringIntervalInSeconds),
            Source: expandArmConnectionMonitorConnectionMonitorSource(source),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, networkWatcherName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Connection Monitor %q (Network Watcher Name %q / Resource Group %q): %+v", name, networkWatcherName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Connection Monitor %q (Network Watcher Name %q / Resource Group %q): %+v", name, networkWatcherName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, networkWatcherName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Connection Monitor %q (Network Watcher Name %q / Resource Group %q): %+v", name, networkWatcherName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Connection Monitor %q (Network Watcher Name %q / Resource Group %q) ID", name, networkWatcherName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmConnectionMonitorRead(d, meta)
}

func resourceArmConnectionMonitorRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectionMonitorsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    networkWatcherName := id.Path["networkWatchers"]
    name := id.Path["connectionMonitors"]

    resp, err := client.Get(ctx, resourceGroup, networkWatcherName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Connection Monitor %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Connection Monitor %q (Network Watcher Name %q / Resource Group %q): %+v", name, networkWatcherName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if connectionMonitorParameters := resp.ConnectionMonitorParameters; connectionMonitorParameters != nil {
        d.Set("auto_start", connectionMonitorParameters.AutoStart)
        if err := d.Set("destination", flattenArmConnectionMonitorConnectionMonitorDestination(connectionMonitorParameters.Destination)); err != nil {
            return fmt.Errorf("Error setting `destination`: %+v", err)
        }
        d.Set("monitoring_interval_in_seconds", connectionMonitorParameters.MonitoringIntervalInSeconds)
        d.Set("monitoring_status", connectionMonitorParameters.MonitoringStatus)
        d.Set("provisioning_state", string(connectionMonitorParameters.ProvisioningState))
        if err := d.Set("source", flattenArmConnectionMonitorConnectionMonitorSource(connectionMonitorParameters.Source)); err != nil {
            return fmt.Errorf("Error setting `source`: %+v", err)
        }
        d.Set("start_time", (connectionMonitorParameters.StartTime).String())
    }
    d.Set("etag", resp.Etag)
    d.Set("network_watcher_name", networkWatcherName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmConnectionMonitorDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectionMonitorsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    networkWatcherName := id.Path["networkWatchers"]
    name := id.Path["connectionMonitors"]

    future, err := client.Delete(ctx, resourceGroup, networkWatcherName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Connection Monitor %q (Network Watcher Name %q / Resource Group %q): %+v", name, networkWatcherName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Connection Monitor %q (Network Watcher Name %q / Resource Group %q): %+v", name, networkWatcherName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmConnectionMonitorConnectionMonitorDestination(input []interface{}) *network.ConnectionMonitorDestination {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    resourceId := v["resource_id"].(string)
    address := v["address"].(string)
    port := v["port"].(int)

    result := network.ConnectionMonitorDestination{
        Address: utils.String(address),
        Port: utils.Int(port),
        ResourceID: utils.String(resourceId),
    }
    return &result
}

func expandArmConnectionMonitorConnectionMonitorSource(input []interface{}) *network.ConnectionMonitorSource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    resourceId := v["resource_id"].(string)
    port := v["port"].(int)

    result := network.ConnectionMonitorSource{
        Port: utils.Int(port),
        ResourceID: utils.String(resourceId),
    }
    return &result
}


func flattenArmConnectionMonitorConnectionMonitorDestination(input *network.ConnectionMonitorDestination) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if address := input.Address; address != nil {
        result["address"] = *address
    }
    if port := input.Port; port != nil {
        result["port"] = *port
    }
    if resourceId := input.ResourceID; resourceId != nil {
        result["resource_id"] = *resourceId
    }

    return []interface{}{result}
}

func flattenArmConnectionMonitorConnectionMonitorSource(input *network.ConnectionMonitorSource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if port := input.Port; port != nil {
        result["port"] = *port
    }
    if resourceId := input.ResourceID; resourceId != nil {
        result["resource_id"] = *resourceId
    }

    return []interface{}{result}
}
