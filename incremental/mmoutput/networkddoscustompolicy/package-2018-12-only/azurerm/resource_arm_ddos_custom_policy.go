// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDdosCustomPolicy() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDdosCustomPolicyCreateUpdate,
        Read: resourceArmDdosCustomPolicyRead,
        Update: resourceArmDdosCustomPolicyCreateUpdate,
        Delete: resourceArmDdosCustomPolicyDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "protocol_custom_settings": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "protocol": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Tcp),
                                string(network.Udp),
                                string(network.Syn),
                            }, false),
                            Default: string(network.Tcp),
                        },
                        "source_rate_override": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "trigger_rate_override": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "trigger_sensitivity_override": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Relaxed),
                                string(network.Low),
                                string(network.Default),
                                string(network.High),
                            }, false),
                            Default: string(network.Relaxed),
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "public_ip_addresses": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "resource_guid": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmDdosCustomPolicyCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).ddosCustomPoliciesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Ddos Custom Policy %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_ddos_custom_policy", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    protocolCustomSettings := d.Get("protocol_custom_settings").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := network.DdosCustomPolicy{
        ID: utils.String(id),
        Location: utils.String(location),
        DdosCustomPolicyPropertiesFormat: &network.DdosCustomPolicyPropertiesFormat{
            ProtocolCustomSettings: expandArmDdosCustomPolicyProtocolCustomSettingsFormat(protocolCustomSettings),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Ddos Custom Policy %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Ddos Custom Policy %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Ddos Custom Policy %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Ddos Custom Policy %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmDdosCustomPolicyRead(d, meta)
}

func resourceArmDdosCustomPolicyRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).ddosCustomPoliciesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["ddosCustomPolicies"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Ddos Custom Policy %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Ddos Custom Policy %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("etag", resp.Etag)
    if ddosCustomPolicyPropertiesFormat := resp.DdosCustomPolicyPropertiesFormat; ddosCustomPolicyPropertiesFormat != nil {
        if err := d.Set("protocol_custom_settings", flattenArmDdosCustomPolicyProtocolCustomSettingsFormat(ddosCustomPolicyPropertiesFormat.ProtocolCustomSettings)); err != nil {
            return fmt.Errorf("Error setting `protocol_custom_settings`: %+v", err)
        }
        d.Set("provisioning_state", ddosCustomPolicyPropertiesFormat.ProvisioningState)
        if err := d.Set("public_ip_addresses", flattenArmDdosCustomPolicySubResource(ddosCustomPolicyPropertiesFormat.PublicIpAddresses)); err != nil {
            return fmt.Errorf("Error setting `public_ip_addresses`: %+v", err)
        }
        d.Set("resource_guid", ddosCustomPolicyPropertiesFormat.ResourceGuid)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmDdosCustomPolicyDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).ddosCustomPoliciesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["ddosCustomPolicies"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Ddos Custom Policy %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Ddos Custom Policy %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmDdosCustomPolicyProtocolCustomSettingsFormat(input []interface{}) *[]network.ProtocolCustomSettingsFormat {
    results := make([]network.ProtocolCustomSettingsFormat, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        protocol := v["protocol"].(string)
        triggerRateOverride := v["trigger_rate_override"].(string)
        sourceRateOverride := v["source_rate_override"].(string)
        triggerSensitivityOverride := v["trigger_sensitivity_override"].(string)

        result := network.ProtocolCustomSettingsFormat{
            Protocol: network.DdosCustomPolicyProtocol(protocol),
            SourceRateOverride: utils.String(sourceRateOverride),
            TriggerRateOverride: utils.String(triggerRateOverride),
            TriggerSensitivityOverride: network.DdosCustomPolicyTriggerSensitivityOverride(triggerSensitivityOverride),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmDdosCustomPolicyProtocolCustomSettingsFormat(input *[]network.ProtocolCustomSettingsFormat) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["protocol"] = string(item.Protocol)
        if sourceRateOverride := item.SourceRateOverride; sourceRateOverride != nil {
            v["source_rate_override"] = *sourceRateOverride
        }
        if triggerRateOverride := item.TriggerRateOverride; triggerRateOverride != nil {
            v["trigger_rate_override"] = *triggerRateOverride
        }
        v["trigger_sensitivity_override"] = string(item.TriggerSensitivityOverride)

        results = append(results, v)
    }

    return results
}

func flattenArmDdosCustomPolicySubResource(input *[]network.SubResource) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}
