// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmProduct() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmProductCreate,
        Read: resourceArmProductRead,
        Update: resourceArmProductUpdate,
        Delete: resourceArmProductDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "display_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "product_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "approval_required": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.notPublished),
                    string(apimanagement.published),
                }, false),
                Default: string(apimanagement.notPublished),
            },

            "subscription_required": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "subscriptions_limit": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "terms": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmProductCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).productClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    productID := d.Get("product_id").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, productID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Product %q (Product %q / Resource Group %q): %+v", name, productID, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_product", *existing.ID)
        }
    }

    approvalRequired := d.Get("approval_required").(bool)
    description := d.Get("description").(string)
    displayName := d.Get("display_name").(string)
    state := d.Get("state").(string)
    subscriptionRequired := d.Get("subscription_required").(bool)
    subscriptionsLimit := d.Get("subscriptions_limit").(int)
    terms := d.Get("terms").(string)

    parameters := apimanagement.ProductContract{
        ProductContractProperties: &apimanagement.ProductContractProperties{
            ApprovalRequired: utils.Bool(approvalRequired),
            Description: utils.String(description),
            DisplayName: utils.String(displayName),
            State: apimanagement.ProductState(state),
            SubscriptionRequired: utils.Bool(subscriptionRequired),
            SubscriptionsLimit: utils.Int32(int32(subscriptionsLimit)),
            Terms: utils.String(terms),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, productID, parameters); err != nil {
        return fmt.Errorf("Error creating Product %q (Product %q / Resource Group %q): %+v", name, productID, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, productID)
    if err != nil {
        return fmt.Errorf("Error retrieving Product %q (Product %q / Resource Group %q): %+v", name, productID, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Product %q (Product %q / Resource Group %q) ID", name, productID, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmProductRead(d, meta)
}

func resourceArmProductRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).productClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    productID := id.Path["products"]

    resp, err := client.Get(ctx, resourceGroup, name, productID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Product %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Product %q (Product %q / Resource Group %q): %+v", name, productID, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if productContractProperties := resp.ProductContractProperties; productContractProperties != nil {
        d.Set("approval_required", productContractProperties.ApprovalRequired)
        d.Set("description", productContractProperties.Description)
        d.Set("display_name", productContractProperties.DisplayName)
        d.Set("state", string(productContractProperties.State))
        d.Set("subscription_required", productContractProperties.SubscriptionRequired)
        d.Set("subscriptions_limit", int(*productContractProperties.SubscriptionsLimit))
        d.Set("terms", productContractProperties.Terms)
    }
    d.Set("product_id", productID)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmProductUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).productClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    approvalRequired := d.Get("approval_required").(bool)
    description := d.Get("description").(string)
    displayName := d.Get("display_name").(string)
    productID := d.Get("product_id").(string)
    state := d.Get("state").(string)
    subscriptionRequired := d.Get("subscription_required").(bool)
    subscriptionsLimit := d.Get("subscriptions_limit").(int)
    terms := d.Get("terms").(string)

    parameters := apimanagement.ProductContract{
        ProductContractProperties: &apimanagement.ProductContractProperties{
            ApprovalRequired: utils.Bool(approvalRequired),
            Description: utils.String(description),
            DisplayName: utils.String(displayName),
            State: apimanagement.ProductState(state),
            SubscriptionRequired: utils.Bool(subscriptionRequired),
            SubscriptionsLimit: utils.Int32(int32(subscriptionsLimit)),
            Terms: utils.String(terms),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, name, productID, parameters); err != nil {
        return fmt.Errorf("Error updating Product %q (Product %q / Resource Group %q): %+v", name, productID, resourceGroup, err)
    }

    return resourceArmProductRead(d, meta)
}

func resourceArmProductDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).productClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    productID := id.Path["products"]

    if _, err := client.Delete(ctx, resourceGroup, name, productID); err != nil {
        return fmt.Errorf("Error deleting Product %q (Product %q / Resource Group %q): %+v", name, productID, resourceGroup, err)
    }

    return nil
}
