// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmVirtualHub() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmVirtualHubCreateUpdate,
        Read: resourceArmVirtualHubRead,
        Update: resourceArmVirtualHubCreateUpdate,
        Delete: resourceArmVirtualHubDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "address_prefix": {
                Type: schema.TypeString,
                Optional: true,
            },

            "hub_virtual_network_connections": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "allow_hub_to_remote_vnet_transit": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "allow_remote_vnet_to_use_hub_vnet_gateways": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "location": azure.SchemaLocation(),
                        "remote_virtual_network": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "tags": tags.Schema(),
                    },
                },
            },

            "virtual_wan": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmVirtualHubCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualHubsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Virtual Hub %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_virtual_hub", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    addressPrefix := d.Get("address_prefix").(string)
    hubVirtualNetworkConnections := d.Get("hub_virtual_network_connections").([]interface{})
    virtualWan := d.Get("virtual_wan").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    virtualHubParameters := network.VirtualHub{
        ID: utils.String(id),
        Location: utils.String(location),
        VirtualHubProperties: &network.VirtualHubProperties{
            AddressPrefix: utils.String(addressPrefix),
            HubVirtualNetworkConnections: expandArmVirtualHubHubVirtualNetworkConnection(hubVirtualNetworkConnections),
            VirtualWan: expandArmVirtualHubSubResource(virtualWan),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, virtualHubParameters)
    if err != nil {
        return fmt.Errorf("Error creating Virtual Hub %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Virtual Hub %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Virtual Hub %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Virtual Hub %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmVirtualHubRead(d, meta)
}

func resourceArmVirtualHubRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualHubsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["virtualHubs"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Virtual Hub %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Virtual Hub %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if virtualHubProperties := resp.VirtualHubProperties; virtualHubProperties != nil {
        d.Set("address_prefix", virtualHubProperties.AddressPrefix)
        if err := d.Set("hub_virtual_network_connections", flattenArmVirtualHubHubVirtualNetworkConnection(virtualHubProperties.HubVirtualNetworkConnections)); err != nil {
            return fmt.Errorf("Error setting `hub_virtual_network_connections`: %+v", err)
        }
        d.Set("provisioning_state", string(virtualHubProperties.ProvisioningState))
        if err := d.Set("virtual_wan", flattenArmVirtualHubSubResource(virtualHubProperties.VirtualWan)); err != nil {
            return fmt.Errorf("Error setting `virtual_wan`: %+v", err)
        }
    }
    d.Set("etag", resp.Etag)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmVirtualHubDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualHubsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["virtualHubs"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Virtual Hub %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Virtual Hub %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmVirtualHubHubVirtualNetworkConnection(input []interface{}) *[]network.HubVirtualNetworkConnection {
    results := make([]network.HubVirtualNetworkConnection, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        location := azure.NormalizeLocation(v["location"].(string))
        t := v["tags"].(map[string]interface{})
        remoteVirtualNetwork := v["remote_virtual_network"].([]interface{})
        allowHubToRemoteVnetTransit := v["allow_hub_to_remote_vnet_transit"].(bool)
        allowRemoteVnetToUseHubVnetGateways := v["allow_remote_vnet_to_use_hub_vnet_gateways"].(bool)

        result := network.HubVirtualNetworkConnection{
            ID: utils.String(id),
            Location: utils.String(location),
            HubVirtualNetworkConnectionProperties: &network.HubVirtualNetworkConnectionProperties{
                AllowHubToRemoteVnetTransit: utils.Bool(allowHubToRemoteVnetTransit),
                AllowRemoteVnetToUseHubVnetGateways: utils.Bool(allowRemoteVnetToUseHubVnetGateways),
                RemoteVirtualNetwork: expandArmVirtualHubSubResource(remoteVirtualNetwork),
            },
            Tags: tags.Expand(t),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualHubSubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(id),
    }
    return &result
}


func flattenArmVirtualHubHubVirtualNetworkConnection(input *[]network.HubVirtualNetworkConnection) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if location := item.Location; location != nil {
            v["location"] = azure.NormalizeLocation(*location)
        }
        if hubVirtualNetworkConnectionProperties := item.HubVirtualNetworkConnectionProperties; hubVirtualNetworkConnectionProperties != nil {
            if allowHubToRemoteVnetTransit := hubVirtualNetworkConnectionProperties.AllowHubToRemoteVnetTransit; allowHubToRemoteVnetTransit != nil {
                v["allow_hub_to_remote_vnet_transit"] = *allowHubToRemoteVnetTransit
            }
            if allowRemoteVnetToUseHubVnetGateways := hubVirtualNetworkConnectionProperties.AllowRemoteVnetToUseHubVnetGateways; allowRemoteVnetToUseHubVnetGateways != nil {
                v["allow_remote_vnet_to_use_hub_vnet_gateways"] = *allowRemoteVnetToUseHubVnetGateways
            }
            v["remote_virtual_network"] = flattenArmVirtualHubSubResource(hubVirtualNetworkConnectionProperties.RemoteVirtualNetwork)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualHubSubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}
