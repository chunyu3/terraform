// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmWorkspace() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmWorkspaceCreate,
        Read: resourceArmWorkspaceRead,
        Update: resourceArmWorkspaceUpdate,
        Delete: resourceArmWorkspaceDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "friendly_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "application_insights": {
                Type: schema.TypeString,
                Computed: true,
            },

            "container_registry": {
                Type: schema.TypeString,
                Computed: true,
            },

            "creation_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "discovery_url": {
                Type: schema.TypeString,
                Computed: true,
            },

            "identity": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "principal_id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "tenant_id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "key_vault": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "storage_account": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "workspace_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmWorkspaceCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workspacesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Workspace %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_workspace", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    description := d.Get("description").(string)
    friendlyName := d.Get("friendly_name").(string)
    sku := d.Get("sku").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := machinelearningservices.WorkspaceUpdateParameters{
        Location: utils.String(location),
        WorkspacePropertiesUpdateParameters: &machinelearningservices.WorkspacePropertiesUpdateParameters{
            Description: utils.String(description),
            FriendlyName: utils.String(friendlyName),
        },
        Sku: expandArmWorkspaceSku(sku),
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error creating Workspace %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Workspace %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Workspace %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmWorkspaceRead(d, meta)
}

func resourceArmWorkspaceRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workspacesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["workspaces"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Workspace %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Workspace %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if workspacePropertiesUpdateParameters := resp.WorkspacePropertiesUpdateParameters; workspacePropertiesUpdateParameters != nil {
        d.Set("application_insights", workspacePropertiesUpdateParameters.ApplicationInsights)
        d.Set("container_registry", workspacePropertiesUpdateParameters.ContainerRegistry)
        d.Set("creation_time", (workspacePropertiesUpdateParameters.CreationTime).String())
        d.Set("description", workspacePropertiesUpdateParameters.Description)
        d.Set("discovery_url", workspacePropertiesUpdateParameters.DiscoveryURL)
        d.Set("friendly_name", workspacePropertiesUpdateParameters.FriendlyName)
        d.Set("key_vault", workspacePropertiesUpdateParameters.KeyVault)
        d.Set("provisioning_state", string(workspacePropertiesUpdateParameters.ProvisioningState))
        d.Set("storage_account", workspacePropertiesUpdateParameters.StorageAccount)
        d.Set("workspace_id", workspacePropertiesUpdateParameters.WorkspaceID)
    }
    if err := d.Set("identity", flattenArmWorkspaceIdentity(resp.Identity)); err != nil {
        return fmt.Errorf("Error setting `identity`: %+v", err)
    }
    if err := d.Set("sku", flattenArmWorkspaceSku(resp.Sku)); err != nil {
        return fmt.Errorf("Error setting `sku`: %+v", err)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmWorkspaceUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workspacesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    description := d.Get("description").(string)
    friendlyName := d.Get("friendly_name").(string)
    sku := d.Get("sku").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := machinelearningservices.WorkspaceUpdateParameters{
        WorkspacePropertiesUpdateParameters: &machinelearningservices.WorkspacePropertiesUpdateParameters{
            Description: utils.String(description),
            FriendlyName: utils.String(friendlyName),
        },
        Sku: expandArmWorkspaceSku(sku),
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error updating Workspace %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmWorkspaceRead(d, meta)
}

func resourceArmWorkspaceDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workspacesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["workspaces"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Workspace %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}

func expandArmWorkspaceSku(input []interface{}) *machinelearningservices.Sku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    tier := v["tier"].(string)

    result := machinelearningservices.Sku{
        Name: utils.String(name),
        Tier: utils.String(tier),
    }
    return &result
}


func flattenArmWorkspaceIdentity(input *machinelearningservices.Identity) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if principalId := input.PrincipalID; principalId != nil {
        result["principal_id"] = *principalId
    }
    if tenantId := input.TenantID; tenantId != nil {
        result["tenant_id"] = *tenantId
    }
    result["type"] = string(input.Type)

    return []interface{}{result}
}

func flattenArmWorkspaceSku(input *machinelearningservices.Sku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if tier := input.Tier; tier != nil {
        result["tier"] = *tier
    }

    return []interface{}{result}
}
