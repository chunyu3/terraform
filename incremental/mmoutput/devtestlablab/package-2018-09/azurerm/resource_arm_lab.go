// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmLab() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmLabCreate,
        Read: resourceArmLabRead,
        Update: resourceArmLabUpdate,
        Delete: resourceArmLabDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "announcement": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "enabled": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(devtestlab.Enabled),
                                string(devtestlab.Disabled),
                            }, false),
                            Default: string(devtestlab.Enabled),
                        },
                        "expiration_date": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "expired": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "markdown": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "title": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "environment_permission": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(devtestlab.Reader),
                    string(devtestlab.Contributor),
                }, false),
                Default: string(devtestlab.Reader),
            },

            "extended_properties": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "lab_storage_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(devtestlab.Standard),
                    string(devtestlab.Premium),
                    string(devtestlab.StandardSSD),
                }, false),
                Default: string(devtestlab.Standard),
            },

            "mandatory_artifacts_resource_ids_linux": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "mandatory_artifacts_resource_ids_windows": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "premium_data_disks": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(devtestlab.Disabled),
                    string(devtestlab.Enabled),
                }, false),
                Default: string(devtestlab.Disabled),
            },

            "support": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "enabled": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(devtestlab.Enabled),
                                string(devtestlab.Disabled),
                            }, false),
                            Default: string(devtestlab.Enabled),
                        },
                        "markdown": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "artifacts_storage_account": {
                Type: schema.TypeString,
                Computed: true,
            },

            "created_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "default_premium_storage_account": {
                Type: schema.TypeString,
                Computed: true,
            },

            "default_storage_account": {
                Type: schema.TypeString,
                Computed: true,
            },

            "load_balancer_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "network_security_group_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "premium_data_disk_storage_account": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "public_ip_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "unique_identifier": {
                Type: schema.TypeString,
                Computed: true,
            },

            "vault_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "vm_creation_resource_group": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmLabCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Lab %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_lab", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    announcement := d.Get("announcement").([]interface{})
    environmentPermission := d.Get("environment_permission").(string)
    extendedProperties := d.Get("extended_properties").(map[string]interface{})
    labStorageType := d.Get("lab_storage_type").(string)
    mandatoryArtifactsResourceIdsLinux := d.Get("mandatory_artifacts_resource_ids_linux").([]interface{})
    mandatoryArtifactsResourceIdsWindows := d.Get("mandatory_artifacts_resource_ids_windows").([]interface{})
    premiumDataDisks := d.Get("premium_data_disks").(string)
    support := d.Get("support").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    lab := devtestlab.LabFragment{
        Location: utils.String(location),
        LabPropertiesFragment: &devtestlab.LabPropertiesFragment{
            Announcement: expandArmLabLabAnnouncementPropertiesFragment(announcement),
            EnvironmentPermission: devtestlab.EnvironmentPermission(environmentPermission),
            ExtendedProperties: utils.ExpandKeyValuePairs(extendedProperties),
            LabStorageType: devtestlab.StorageType(labStorageType),
            MandatoryArtifactsResourceIdsLinux: utils.ExpandStringSlice(mandatoryArtifactsResourceIdsLinux),
            MandatoryArtifactsResourceIdsWindows: utils.ExpandStringSlice(mandatoryArtifactsResourceIdsWindows),
            PremiumDataDisks: devtestlab.PremiumDataDisk(premiumDataDisks),
            Support: expandArmLabLabSupportPropertiesFragment(support),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, lab)
    if err != nil {
        return fmt.Errorf("Error creating Lab %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Lab %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Lab %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Lab %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmLabRead(d, meta)
}

func resourceArmLabRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["labs"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Lab %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Lab %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if labPropertiesFragment := resp.LabPropertiesFragment; labPropertiesFragment != nil {
        if err := d.Set("announcement", flattenArmLabLabAnnouncementPropertiesFragment(labPropertiesFragment.Announcement)); err != nil {
            return fmt.Errorf("Error setting `announcement`: %+v", err)
        }
        d.Set("artifacts_storage_account", labPropertiesFragment.ArtifactsStorageAccount)
        d.Set("created_date", (labPropertiesFragment.CreatedDate).String())
        d.Set("default_premium_storage_account", labPropertiesFragment.DefaultPremiumStorageAccount)
        d.Set("default_storage_account", labPropertiesFragment.DefaultStorageAccount)
        d.Set("environment_permission", string(labPropertiesFragment.EnvironmentPermission))
        d.Set("extended_properties", utils.FlattenKeyValuePairs(labPropertiesFragment.ExtendedProperties))
        d.Set("lab_storage_type", string(labPropertiesFragment.LabStorageType))
        d.Set("load_balancer_id", labPropertiesFragment.LoadBalancerID)
        d.Set("mandatory_artifacts_resource_ids_linux", utils.FlattenStringSlice(labPropertiesFragment.MandatoryArtifactsResourceIdsLinux))
        d.Set("mandatory_artifacts_resource_ids_windows", utils.FlattenStringSlice(labPropertiesFragment.MandatoryArtifactsResourceIdsWindows))
        d.Set("network_security_group_id", labPropertiesFragment.NetworkSecurityGroupID)
        d.Set("premium_data_disk_storage_account", labPropertiesFragment.PremiumDataDiskStorageAccount)
        d.Set("premium_data_disks", string(labPropertiesFragment.PremiumDataDisks))
        d.Set("provisioning_state", labPropertiesFragment.ProvisioningState)
        d.Set("public_ip_id", labPropertiesFragment.PublicIpID)
        if err := d.Set("support", flattenArmLabLabSupportPropertiesFragment(labPropertiesFragment.Support)); err != nil {
            return fmt.Errorf("Error setting `support`: %+v", err)
        }
        d.Set("unique_identifier", labPropertiesFragment.UniqueIdentifier)
        d.Set("vault_name", labPropertiesFragment.VaultName)
        d.Set("vm_creation_resource_group", labPropertiesFragment.VmCreationResourceGroup)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmLabUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    announcement := d.Get("announcement").([]interface{})
    environmentPermission := d.Get("environment_permission").(string)
    extendedProperties := d.Get("extended_properties").(map[string]interface{})
    labStorageType := d.Get("lab_storage_type").(string)
    mandatoryArtifactsResourceIdsLinux := d.Get("mandatory_artifacts_resource_ids_linux").([]interface{})
    mandatoryArtifactsResourceIdsWindows := d.Get("mandatory_artifacts_resource_ids_windows").([]interface{})
    premiumDataDisks := d.Get("premium_data_disks").(string)
    support := d.Get("support").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    lab := devtestlab.LabFragment{
        Location: utils.String(location),
        LabPropertiesFragment: &devtestlab.LabPropertiesFragment{
            Announcement: expandArmLabLabAnnouncementPropertiesFragment(announcement),
            EnvironmentPermission: devtestlab.EnvironmentPermission(environmentPermission),
            ExtendedProperties: utils.ExpandKeyValuePairs(extendedProperties),
            LabStorageType: devtestlab.StorageType(labStorageType),
            MandatoryArtifactsResourceIdsLinux: utils.ExpandStringSlice(mandatoryArtifactsResourceIdsLinux),
            MandatoryArtifactsResourceIdsWindows: utils.ExpandStringSlice(mandatoryArtifactsResourceIdsWindows),
            PremiumDataDisks: devtestlab.PremiumDataDisk(premiumDataDisks),
            Support: expandArmLabLabSupportPropertiesFragment(support),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, lab); err != nil {
        return fmt.Errorf("Error updating Lab %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmLabRead(d, meta)
}

func resourceArmLabDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["labs"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Lab %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Lab %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmLabLabAnnouncementPropertiesFragment(input []interface{}) *devtestlab.LabAnnouncementPropertiesFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    title := v["title"].(string)
    markdown := v["markdown"].(string)
    enabled := v["enabled"].(string)
    expirationDate := v["expiration_date"].(string)
    expired := v["expired"].(bool)

    result := devtestlab.LabAnnouncementPropertiesFragment{
        Enabled: devtestlab.EnableStatus(enabled),
        ExpirationDate: convertStringToDate(expirationDate),
        Expired: utils.Bool(expired),
        Markdown: utils.String(markdown),
        Title: utils.String(title),
    }
    return &result
}

func expandArmLabLabSupportPropertiesFragment(input []interface{}) *devtestlab.LabSupportPropertiesFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    enabled := v["enabled"].(string)
    markdown := v["markdown"].(string)

    result := devtestlab.LabSupportPropertiesFragment{
        Enabled: devtestlab.EnableStatus(enabled),
        Markdown: utils.String(markdown),
    }
    return &result
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}


func flattenArmLabLabAnnouncementPropertiesFragment(input *devtestlab.LabAnnouncementPropertiesFragment) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["enabled"] = string(input.Enabled)
    if expirationDate := input.ExpirationDate; expirationDate != nil {
        result["expiration_date"] = (*expirationDate).String()
    }
    if expired := input.Expired; expired != nil {
        result["expired"] = *expired
    }
    if markdown := input.Markdown; markdown != nil {
        result["markdown"] = *markdown
    }
    if title := input.Title; title != nil {
        result["title"] = *title
    }

    return []interface{}{result}
}

func flattenArmLabLabSupportPropertiesFragment(input *devtestlab.LabSupportPropertiesFragment) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["enabled"] = string(input.Enabled)
    if markdown := input.Markdown; markdown != nil {
        result["markdown"] = *markdown
    }

    return []interface{}{result}
}
