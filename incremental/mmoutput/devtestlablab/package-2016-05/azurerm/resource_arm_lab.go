// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmLab() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmLabCreate,
        Read: resourceArmLabRead,
        Update: resourceArmLabUpdate,
        Delete: resourceArmLabDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "allow_claim": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "applicable_schedule": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "lab_vms_shutdown": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "daily_recurrence": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "time": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "hourly_recurrence": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "minute": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "location": azure.SchemaLocation(),
                                    "notification_settings": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "status": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                    ValidateFunc: validation.StringInSlice([]string{
                                                        string(devtestlab.Disabled),
                                                        string(devtestlab.Enabled),
                                                    }, false),
                                                    Default: string(devtestlab.Disabled),
                                                },
                                                "time_in_minutes": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                                "webhook_url": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(devtestlab.Enabled),
                                            string(devtestlab.Disabled),
                                        }, false),
                                        Default: string(devtestlab.Enabled),
                                    },
                                    "tags": tags.Schema(),
                                    "target_resource_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "task_type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "time_zone_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "unique_identifier": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "weekly_recurrence": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "time": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "weekdays": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    Elem: &schema.Schema{
                                                        Type: schema.TypeString,
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "lab_vms_startup": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "daily_recurrence": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "time": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "hourly_recurrence": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "minute": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "location": azure.SchemaLocation(),
                                    "notification_settings": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "status": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                    ValidateFunc: validation.StringInSlice([]string{
                                                        string(devtestlab.Disabled),
                                                        string(devtestlab.Enabled),
                                                    }, false),
                                                    Default: string(devtestlab.Disabled),
                                                },
                                                "time_in_minutes": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                                "webhook_url": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(devtestlab.Enabled),
                                            string(devtestlab.Disabled),
                                        }, false),
                                        Default: string(devtestlab.Enabled),
                                    },
                                    "tags": tags.Schema(),
                                    "target_resource_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "task_type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "time_zone_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "unique_identifier": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "weekly_recurrence": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "time": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "weekdays": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    Elem: &schema.Schema{
                                                        Type: schema.TypeString,
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "location": azure.SchemaLocation(),
                        "tags": tags.Schema(),
                    },
                },
            },

            "artifact_deployment_status": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "artifacts_applied": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "deployment_status": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "total_artifacts": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "artifacts": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "artifact_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "deployment_status_message": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "install_time": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "parameters": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "value": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "status": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "vm_extension_status_message": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "blob_name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "blob_storage_absolute_sas_uri": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "bulk_creation_parameters": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "instance_count": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "compute_vm": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "data_disk_ids": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "data_disks": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "disk_size_gi_b": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "disk_uri": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "managed_disk_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "network_interface_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "os_disk_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "os_type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "statuses": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "code": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "display_status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "message": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "vm_size": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "created_by_user": {
                Type: schema.TypeString,
                Optional: true,
            },

            "created_by_user_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "created_date": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "custom_image_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "disallow_public_ip_address": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "environment_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "expiration_date": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "fqdn": {
                Type: schema.TypeString,
                Optional: true,
            },

            "gallery_image_reference": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "offer": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "os_type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "publisher": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "sku": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "version": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "is_authentication_with_ssh_key": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "lab_subnet_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "lab_virtual_network_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "location": azure.SchemaLocation(),

            "network_interface": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "dns_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "public_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "public_ip_address_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "rdp_authority": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "ssh_authority": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "shared_public_ip_address_configuration": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "inbound_nat_rules": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "backend_port": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                                "frontend_port": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                                "transport_protocol": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                    ValidateFunc: validation.StringInSlice([]string{
                                                        string(devtestlab.Tcp),
                                                        string(devtestlab.Udp),
                                                    }, false),
                                                    Default: string(devtestlab.Tcp),
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "subnet_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "virtual_network_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "notes": {
                Type: schema.TypeString,
                Optional: true,
            },

            "os_type": {
                Type: schema.TypeString,
                Optional: true,
            },

            "owner_object_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "owner_user_principal_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "password": {
                Type: schema.TypeString,
                Optional: true,
            },

            "ssh_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "size": {
                Type: schema.TypeString,
                Optional: true,
            },

            "storage_type": {
                Type: schema.TypeString,
                Optional: true,
            },

            "tags": tags.Schema(),

            "unique_identifier": {
                Type: schema.TypeString,
                Optional: true,
            },

            "usage_start_date": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validateRFC3339Date,
            },

            "user_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "virtual_machine_creation_source": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(devtestlab.FromCustomImage),
                    string(devtestlab.FromGalleryImage),
                }, false),
                Default: string(devtestlab.FromCustomImage),
            },

            "artifacts_storage_account": {
                Type: schema.TypeString,
                Computed: true,
            },

            "default_premium_storage_account": {
                Type: schema.TypeString,
                Computed: true,
            },

            "default_storage_account": {
                Type: schema.TypeString,
                Computed: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "lab_storage_type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "premium_data_disk_storage_account": {
                Type: schema.TypeString,
                Computed: true,
            },

            "premium_data_disks": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "vault_name": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmLabCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx, cancel := timeouts.ForCreate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Lab (Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_lab", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    allowClaim := d.Get("allow_claim").(bool)
    applicableSchedule := d.Get("applicable_schedule").([]interface{})
    artifactDeploymentStatus := d.Get("artifact_deployment_status").([]interface{})
    artifacts := d.Get("artifacts").([]interface{})
    blobName := d.Get("blob_name").(string)
    blobStorageAbsoluteSasURI := d.Get("blob_storage_absolute_sas_uri").(string)
    bulkCreationParameters := d.Get("bulk_creation_parameters").([]interface{})
    computeVM := d.Get("compute_vm").([]interface{})
    createdByUser := d.Get("created_by_user").(string)
    createdByUserID := d.Get("created_by_user_id").(string)
    createdDate := d.Get("created_date").(string)
    customImageID := d.Get("custom_image_id").(string)
    disallowPublicIPAddress := d.Get("disallow_public_ip_address").(bool)
    environmentID := d.Get("environment_id").(string)
    expirationDate := d.Get("expiration_date").(string)
    fqdn := d.Get("fqdn").(string)
    galleryImageReference := d.Get("gallery_image_reference").([]interface{})
    isAuthenticationWithSSHKey := d.Get("is_authentication_with_ssh_key").(bool)
    labSubnetName := d.Get("lab_subnet_name").(string)
    labVirtualNetworkID := d.Get("lab_virtual_network_id").(string)
    networkInterface := d.Get("network_interface").([]interface{})
    notes := d.Get("notes").(string)
    osType := d.Get("os_type").(string)
    ownerObjectID := d.Get("owner_object_id").(string)
    ownerUserPrincipalName := d.Get("owner_user_principal_name").(string)
    password := d.Get("password").(string)
    sSHKey := d.Get("ssh_key").(string)
    size := d.Get("size").(string)
    storageType := d.Get("storage_type").(string)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    usageStartDate := d.Get("usage_start_date").(string)
    userName := d.Get("user_name").(string)
    virtualMachineCreationSource := d.Get("virtual_machine_creation_source").(string)
    tags := d.Get("tags").(map[string]interface{})

    lab := devtestlab.LabFragment{
        BlobName: utils.String(blobName),
        BlobStorageAbsoluteSasURI: utils.String(blobStorageAbsoluteSasURI),
        Location: utils.String(location),
        LabVirtualMachineCreationParameterProperties: &devtestlab.LabVirtualMachineCreationParameterProperties{
            AllowClaim: utils.Bool(allowClaim),
            ApplicableSchedule: expandArmLabApplicableSchedule(applicableSchedule),
            ArtifactDeploymentStatus: expandArmLabArtifactDeploymentStatusProperties(artifactDeploymentStatus),
            Artifacts: expandArmLabArtifactInstallProperties(artifacts),
            BulkCreationParameters: expandArmLabBulkCreationParameters(bulkCreationParameters),
            ComputeVM: expandArmLabComputeVmProperties(computeVM),
            CreatedByUser: utils.String(createdByUser),
            CreatedByUserID: utils.String(createdByUserID),
            CreatedDate: convertStringToDate(createdDate),
            CustomImageID: utils.String(customImageID),
            DisallowPublicIPAddress: utils.Bool(disallowPublicIPAddress),
            EnvironmentID: utils.String(environmentID),
            ExpirationDate: convertStringToDate(expirationDate),
            Fqdn: utils.String(fqdn),
            GalleryImageReference: expandArmLabGalleryImageReference(galleryImageReference),
            IsAuthenticationWithSSHKey: utils.Bool(isAuthenticationWithSSHKey),
            LabSubnetName: utils.String(labSubnetName),
            LabVirtualNetworkID: utils.String(labVirtualNetworkID),
            NetworkInterface: expandArmLabNetworkInterfaceProperties(networkInterface),
            Notes: utils.String(notes),
            OsType: utils.String(osType),
            OwnerObjectID: utils.String(ownerObjectID),
            OwnerUserPrincipalName: utils.String(ownerUserPrincipalName),
            Password: utils.String(password),
            Size: utils.String(size),
            SSHKey: utils.String(sSHKey),
            StorageType: utils.String(storageType),
            UniqueIdentifier: utils.String(uniqueIdentifier),
            UserName: utils.String(userName),
            VirtualMachineCreationSource: devtestlab.VirtualMachineCreationSource(virtualMachineCreationSource),
        },
        Tags: tags.Expand(tags),
        UsageStartDate: convertStringToDate(usageStartDate),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroupName, name, lab)
    if err != nil {
        return fmt.Errorf("Error creating Lab (Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Lab (Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Lab (Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Lab (Name %q / Resource Group %q) ID", name, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmLabRead(d, meta)
}

func resourceArmLabRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["labs"]

    resp, err := client.Get(ctx, resourceGroupName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Lab %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Lab (Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if labVirtualMachineCreationParameterProperties := resp.LabVirtualMachineCreationParameterProperties; labVirtualMachineCreationParameterProperties != nil {
        d.Set("artifacts_storage_account", labVirtualMachineCreationParameterProperties.ArtifactsStorageAccount)
        d.Set("created_date", (labVirtualMachineCreationParameterProperties.CreatedDate).String())
        d.Set("default_premium_storage_account", labVirtualMachineCreationParameterProperties.DefaultPremiumStorageAccount)
        d.Set("default_storage_account", labVirtualMachineCreationParameterProperties.DefaultStorageAccount)
        d.Set("lab_storage_type", string(labVirtualMachineCreationParameterProperties.LabStorageType))
        d.Set("premium_data_disk_storage_account", labVirtualMachineCreationParameterProperties.PremiumDataDiskStorageAccount)
        d.Set("premium_data_disks", string(labVirtualMachineCreationParameterProperties.PremiumDataDisks))
        d.Set("provisioning_state", labVirtualMachineCreationParameterProperties.ProvisioningState)
        d.Set("unique_identifier", labVirtualMachineCreationParameterProperties.UniqueIdentifier)
        d.Set("vault_name", labVirtualMachineCreationParameterProperties.VaultName)
    }
    d.Set("id", resp.ID)
    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmLabUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx, cancel := timeouts.ForUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

      resourceGroupName := d.Get("resource_group").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    allowClaim := d.Get("allow_claim").(bool)
    applicableSchedule := d.Get("applicable_schedule").([]interface{})
    artifactDeploymentStatus := d.Get("artifact_deployment_status").([]interface{})
    artifacts := d.Get("artifacts").([]interface{})
    blobName := d.Get("blob_name").(string)
    blobStorageAbsoluteSasURI := d.Get("blob_storage_absolute_sas_uri").(string)
    bulkCreationParameters := d.Get("bulk_creation_parameters").([]interface{})
    computeVM := d.Get("compute_vm").([]interface{})
    createdByUser := d.Get("created_by_user").(string)
    createdByUserID := d.Get("created_by_user_id").(string)
    createdDate := d.Get("created_date").(string)
    customImageID := d.Get("custom_image_id").(string)
    disallowPublicIPAddress := d.Get("disallow_public_ip_address").(bool)
    environmentID := d.Get("environment_id").(string)
    expirationDate := d.Get("expiration_date").(string)
    fqdn := d.Get("fqdn").(string)
    galleryImageReference := d.Get("gallery_image_reference").([]interface{})
    isAuthenticationWithSSHKey := d.Get("is_authentication_with_ssh_key").(bool)
    labSubnetName := d.Get("lab_subnet_name").(string)
    labVirtualNetworkID := d.Get("lab_virtual_network_id").(string)
    name := d.Get("name").(string)
    networkInterface := d.Get("network_interface").([]interface{})
    notes := d.Get("notes").(string)
    osType := d.Get("os_type").(string)
    ownerObjectID := d.Get("owner_object_id").(string)
    ownerUserPrincipalName := d.Get("owner_user_principal_name").(string)
    password := d.Get("password").(string)
    sSHKey := d.Get("ssh_key").(string)
    size := d.Get("size").(string)
    storageType := d.Get("storage_type").(string)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    usageStartDate := d.Get("usage_start_date").(string)
    userName := d.Get("user_name").(string)
    virtualMachineCreationSource := d.Get("virtual_machine_creation_source").(string)
    tags := d.Get("tags").(map[string]interface{})

    lab := devtestlab.LabFragment{
        BlobName: utils.String(blobName),
        BlobStorageAbsoluteSasURI: utils.String(blobStorageAbsoluteSasURI),
        Location: utils.String(location),
        LabVirtualMachineCreationParameterProperties: &devtestlab.LabVirtualMachineCreationParameterProperties{
            AllowClaim: utils.Bool(allowClaim),
            ApplicableSchedule: expandArmLabApplicableSchedule(applicableSchedule),
            ArtifactDeploymentStatus: expandArmLabArtifactDeploymentStatusProperties(artifactDeploymentStatus),
            Artifacts: expandArmLabArtifactInstallProperties(artifacts),
            BulkCreationParameters: expandArmLabBulkCreationParameters(bulkCreationParameters),
            ComputeVM: expandArmLabComputeVmProperties(computeVM),
            CreatedByUser: utils.String(createdByUser),
            CreatedByUserID: utils.String(createdByUserID),
            CreatedDate: convertStringToDate(createdDate),
            CustomImageID: utils.String(customImageID),
            DisallowPublicIPAddress: utils.Bool(disallowPublicIPAddress),
            EnvironmentID: utils.String(environmentID),
            ExpirationDate: convertStringToDate(expirationDate),
            Fqdn: utils.String(fqdn),
            GalleryImageReference: expandArmLabGalleryImageReference(galleryImageReference),
            IsAuthenticationWithSSHKey: utils.Bool(isAuthenticationWithSSHKey),
            LabSubnetName: utils.String(labSubnetName),
            LabVirtualNetworkID: utils.String(labVirtualNetworkID),
            NetworkInterface: expandArmLabNetworkInterfaceProperties(networkInterface),
            Notes: utils.String(notes),
            OsType: utils.String(osType),
            OwnerObjectID: utils.String(ownerObjectID),
            OwnerUserPrincipalName: utils.String(ownerUserPrincipalName),
            Password: utils.String(password),
            Size: utils.String(size),
            SSHKey: utils.String(sSHKey),
            StorageType: utils.String(storageType),
            UniqueIdentifier: utils.String(uniqueIdentifier),
            UserName: utils.String(userName),
            VirtualMachineCreationSource: devtestlab.VirtualMachineCreationSource(virtualMachineCreationSource),
        },
        Tags: tags.Expand(tags),
        UsageStartDate: convertStringToDate(usageStartDate),
    }


    if _, err := client.Update(ctx, resourceGroupName, name, lab); err != nil {
        return fmt.Errorf("Error updating Lab (Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }

    return resourceArmLabRead(d, meta)
}

func resourceArmLabDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["labs"]

    future, err := client.Delete(ctx, resourceGroupName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Lab (Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Lab (Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
        }
    }

    return nil
}

func expandArmLabApplicableSchedule(input []interface{}) *devtestlab.ApplicableSchedule {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    location := azure.NormalizeLocation(v["location"].(string))
    tags := v["tags"].(map[string]interface{})
    labVmsShutdown := v["lab_vms_shutdown"].([]interface{})
    labVmsStartup := v["lab_vms_startup"].([]interface{})

    result := devtestlab.ApplicableSchedule{
        Location: utils.String(location),
        ApplicableScheduleProperties: &devtestlab.ApplicableScheduleProperties{
            LabVmsShutdown: expandArmLabSchedule(labVmsShutdown),
            LabVmsStartup: expandArmLabSchedule(labVmsStartup),
        },
        Tags: tags.Expand(tags),
    }
    return &result
}

func expandArmLabArtifactDeploymentStatusProperties(input []interface{}) *devtestlab.ArtifactDeploymentStatusProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    deploymentStatus := v["deployment_status"].(string)
    artifactsApplied := v["artifacts_applied"].(int)
    totalArtifacts := v["total_artifacts"].(int)

    result := devtestlab.ArtifactDeploymentStatusProperties{
        ArtifactsApplied: utils.Int32(int32(artifactsApplied)),
        DeploymentStatus: utils.String(deploymentStatus),
        TotalArtifacts: utils.Int32(int32(totalArtifacts)),
    }
    return &result
}

func expandArmLabArtifactInstallProperties(input []interface{}) *[]devtestlab.ArtifactInstallProperties {
    results := make([]devtestlab.ArtifactInstallProperties, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        artifactID := v["artifact_id"].(string)
        parameters := v["parameters"].([]interface{})
        status := v["status"].(string)
        deploymentStatusMessage := v["deployment_status_message"].(string)
        vMExtensionStatusMessage := v["vm_extension_status_message"].(string)
        installTime := v["install_time"].(string)

        result := devtestlab.ArtifactInstallProperties{
            ArtifactID: utils.String(artifactID),
            DeploymentStatusMessage: utils.String(deploymentStatusMessage),
            InstallTime: convertStringToDate(installTime),
            Parameters: expandArmLabArtifactParameterProperties(parameters),
            Status: utils.String(status),
            VMExtensionStatusMessage: utils.String(vMExtensionStatusMessage),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmLabBulkCreationParameters(input []interface{}) *devtestlab.BulkCreationParameters {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    instanceCount := v["instance_count"].(int)

    result := devtestlab.BulkCreationParameters{
        InstanceCount: utils.Int32(int32(instanceCount)),
    }
    return &result
}

func expandArmLabComputeVmProperties(input []interface{}) *devtestlab.ComputeVmProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    statuses := v["statuses"].([]interface{})
    osType := v["os_type"].(string)
    vMSize := v["vm_size"].(string)
    networkInterfaceID := v["network_interface_id"].(string)
    osDiskID := v["os_disk_id"].(string)
    dataDiskIds := v["data_disk_ids"].([]interface{})
    dataDisks := v["data_disks"].([]interface{})

    result := devtestlab.ComputeVmProperties{
        DataDiskIds: utils.ExpandStringSlice(dataDiskIds),
        DataDisks: expandArmLabComputeDataDisk(dataDisks),
        NetworkInterfaceID: utils.String(networkInterfaceID),
        OsDiskID: utils.String(osDiskID),
        OsType: utils.String(osType),
        Statuses: expandArmLabComputeVmInstanceViewStatus(statuses),
        VMSize: utils.String(vMSize),
    }
    return &result
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}

func expandArmLabGalleryImageReference(input []interface{}) *devtestlab.GalleryImageReference {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    offer := v["offer"].(string)
    publisher := v["publisher"].(string)
    sku := v["sku"].(string)
    osType := v["os_type"].(string)
    version := v["version"].(string)

    result := devtestlab.GalleryImageReference{
        Offer: utils.String(offer),
        OsType: utils.String(osType),
        Publisher: utils.String(publisher),
        Sku: utils.String(sku),
        Version: utils.String(version),
    }
    return &result
}

func expandArmLabNetworkInterfaceProperties(input []interface{}) *devtestlab.NetworkInterfaceProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    virtualNetworkID := v["virtual_network_id"].(string)
    subnetID := v["subnet_id"].(string)
    publicIPAddressID := v["public_ip_address_id"].(string)
    publicIPAddress := v["public_ip_address"].(string)
    privateIPAddress := v["private_ip_address"].(string)
    dNSName := v["dns_name"].(string)
    rdpAuthority := v["rdp_authority"].(string)
    sSHAuthority := v["ssh_authority"].(string)
    sharedPublicIPAddressConfiguration := v["shared_public_ip_address_configuration"].([]interface{})

    result := devtestlab.NetworkInterfaceProperties{
        DNSName: utils.String(dNSName),
        PrivateIPAddress: utils.String(privateIPAddress),
        PublicIPAddress: utils.String(publicIPAddress),
        PublicIPAddressID: utils.String(publicIPAddressID),
        RdpAuthority: utils.String(rdpAuthority),
        SharedPublicIPAddressConfiguration: expandArmLabSharedPublicIpAddressConfiguration(sharedPublicIPAddressConfiguration),
        SSHAuthority: utils.String(sSHAuthority),
        SubnetID: utils.String(subnetID),
        VirtualNetworkID: utils.String(virtualNetworkID),
    }
    return &result
}

func expandArmLabSchedule(input []interface{}) *devtestlab.Schedule {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    location := azure.NormalizeLocation(v["location"].(string))
    tags := v["tags"].(map[string]interface{})
    status := v["status"].(string)
    taskType := v["task_type"].(string)
    weeklyRecurrence := v["weekly_recurrence"].([]interface{})
    dailyRecurrence := v["daily_recurrence"].([]interface{})
    hourlyRecurrence := v["hourly_recurrence"].([]interface{})
    timeZoneID := v["time_zone_id"].(string)
    notificationSettings := v["notification_settings"].([]interface{})
    targetResourceID := v["target_resource_id"].(string)
    uniqueIdentifier := v["unique_identifier"].(string)

    result := devtestlab.Schedule{
        Location: utils.String(location),
        ScheduleProperties: &devtestlab.ScheduleProperties{
            DailyRecurrence: expandArmLabDayDetails(dailyRecurrence),
            HourlyRecurrence: expandArmLabHourDetails(hourlyRecurrence),
            NotificationSettings: expandArmLabNotificationSettings(notificationSettings),
            Status: devtestlab.EnableStatus(status),
            TargetResourceID: utils.String(targetResourceID),
            TaskType: utils.String(taskType),
            TimeZoneID: utils.String(timeZoneID),
            UniqueIdentifier: utils.String(uniqueIdentifier),
            WeeklyRecurrence: expandArmLabWeekDetails(weeklyRecurrence),
        },
        Tags: tags.Expand(tags),
    }
    return &result
}

func expandArmLabArtifactParameterProperties(input []interface{}) *[]devtestlab.ArtifactParameterProperties {
    results := make([]devtestlab.ArtifactParameterProperties, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        value := v["value"].(string)

        result := devtestlab.ArtifactParameterProperties{
            Name: utils.String(name),
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmLabComputeDataDisk(input []interface{}) *[]devtestlab.ComputeDataDisk {
    results := make([]devtestlab.ComputeDataDisk, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        diskURI := v["disk_uri"].(string)
        managedDiskID := v["managed_disk_id"].(string)
        diskSizeGiB := v["disk_size_gi_b"].(int)

        result := devtestlab.ComputeDataDisk{
            DiskSizeGiB: utils.Int32(int32(diskSizeGiB)),
            DiskURI: utils.String(diskURI),
            ManagedDiskID: utils.String(managedDiskID),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmLabComputeVmInstanceViewStatus(input []interface{}) *[]devtestlab.ComputeVmInstanceViewStatus {
    results := make([]devtestlab.ComputeVmInstanceViewStatus, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        code := v["code"].(string)
        displayStatus := v["display_status"].(string)
        message := v["message"].(string)

        result := devtestlab.ComputeVmInstanceViewStatus{
            Code: utils.String(code),
            DisplayStatus: utils.String(displayStatus),
            Message: utils.String(message),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmLabSharedPublicIpAddressConfiguration(input []interface{}) *devtestlab.SharedPublicIpAddressConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    inboundNatRules := v["inbound_nat_rules"].([]interface{})

    result := devtestlab.SharedPublicIpAddressConfiguration{
        InboundNatRules: expandArmLabInboundNatRule(inboundNatRules),
    }
    return &result
}

func expandArmLabDayDetails(input []interface{}) *devtestlab.DayDetails {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    time := v["time"].(string)

    result := devtestlab.DayDetails{
        Time: utils.String(time),
    }
    return &result
}

func expandArmLabHourDetails(input []interface{}) *devtestlab.HourDetails {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    minute := v["minute"].(int)

    result := devtestlab.HourDetails{
        Minute: utils.Int32(int32(minute)),
    }
    return &result
}

func expandArmLabNotificationSettings(input []interface{}) *devtestlab.NotificationSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    status := v["status"].(string)
    timeInMinutes := v["time_in_minutes"].(int)
    webhookURL := v["webhook_url"].(string)

    result := devtestlab.NotificationSettings{
        Status: devtestlab.NotificationStatus(status),
        TimeInMinutes: utils.Int32(int32(timeInMinutes)),
        WebhookURL: utils.String(webhookURL),
    }
    return &result
}

func expandArmLabWeekDetails(input []interface{}) *devtestlab.WeekDetails {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    weekdays := v["weekdays"].([]interface{})
    time := v["time"].(string)

    result := devtestlab.WeekDetails{
        Time: utils.String(time),
        Weekdays: utils.ExpandStringSlice(weekdays),
    }
    return &result
}

func expandArmLabInboundNatRule(input []interface{}) *[]devtestlab.InboundNatRule {
    results := make([]devtestlab.InboundNatRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        transportProtocol := v["transport_protocol"].(string)
        frontendPort := v["frontend_port"].(int)
        backendPort := v["backend_port"].(int)

        result := devtestlab.InboundNatRule{
            BackendPort: utils.Int32(int32(backendPort)),
            FrontendPort: utils.Int32(int32(frontendPort)),
            TransportProtocol: devtestlab.TransportProtocol(transportProtocol),
        }

        results = append(results, result)
    }
    return &results
}
