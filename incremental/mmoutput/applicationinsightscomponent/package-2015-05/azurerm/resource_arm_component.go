// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmComponent() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmComponentCreateUpdate,
        Read: resourceArmComponentRead,
        Update: resourceArmComponentCreateUpdate,
        Delete: resourceArmComponentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "application_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(applicationinsights.web),
                    string(applicationinsights.other),
                }, false),
            },

            "kind": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "flow_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(applicationinsights.Bluefield),
                }, false),
                Default: string(applicationinsights.Bluefield),
            },

            "hockey_app_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "request_source": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(applicationinsights.rest),
                }, false),
                Default: string(applicationinsights.rest),
            },

            "sampling_percentage": {
                Type: schema.TypeFloat,
                Optional: true,
            },

            "app_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "application_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "creation_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "hockey_app_token": {
                Type: schema.TypeString,
                Computed: true,
            },

            "instrumentation_key": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tenant_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmComponentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).componentsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Component %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_component", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    applicationType := d.Get("application_type").(string)
    flowType := d.Get("flow_type").(string)
    hockeyAppId := d.Get("hockey_app_id").(string)
    kind := d.Get("kind").(string)
    requestSource := d.Get("request_source").(string)
    samplingPercentage := d.Get("sampling_percentage").(float64)
    t := d.Get("tags").(map[string]interface{})

    insightProperties := applicationinsights.Component{
        Kind: utils.String(kind),
        Location: utils.String(location),
        ComponentProperties: &applicationinsights.ComponentProperties{
            ApplicationType: applicationinsights.ApplicationType(applicationType),
            FlowType: applicationinsights.FlowType(flowType),
            HockeyAppID: utils.String(hockeyAppId),
            RequestSource: applicationinsights.RequestSource(requestSource),
            SamplingPercentage: utils.Float(samplingPercentage),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, insightProperties); err != nil {
        return fmt.Errorf("Error creating Component %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Component %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Component %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmComponentRead(d, meta)
}

func resourceArmComponentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).componentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["components"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Component %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Component %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if componentProperties := resp.ComponentProperties; componentProperties != nil {
        d.Set("app_id", componentProperties.AppID)
        d.Set("application_id", componentProperties.ApplicationID)
        d.Set("application_type", string(componentProperties.ApplicationType))
        d.Set("creation_date", (componentProperties.CreationDate).String())
        d.Set("flow_type", string(componentProperties.FlowType))
        d.Set("hockey_app_id", componentProperties.HockeyAppID)
        d.Set("hockey_app_token", componentProperties.HockeyAppToken)
        d.Set("instrumentation_key", componentProperties.InstrumentationKey)
        d.Set("provisioning_state", componentProperties.ProvisioningState)
        d.Set("request_source", string(componentProperties.RequestSource))
        d.Set("sampling_percentage", componentProperties.SamplingPercentage)
        d.Set("tenant_id", componentProperties.TenantID)
    }
    d.Set("kind", resp.Kind)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmComponentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).componentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["components"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Component %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}
