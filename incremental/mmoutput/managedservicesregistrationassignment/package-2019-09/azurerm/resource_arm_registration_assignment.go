// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmRegistrationAssignment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmRegistrationAssignmentCreateUpdate,
        Read: resourceArmRegistrationAssignmentRead,
        Update: resourceArmRegistrationAssignmentCreateUpdate,
        Delete: resourceArmRegistrationAssignmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "registration_assignment_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "registration_definition_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "scope": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmRegistrationAssignmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).registrationAssignmentsClient
    ctx := meta.(*ArmClient).StopContext

    registrationAssignmentID := d.Get("registration_assignment_id").(string)
    scope := d.Get("scope").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, scope, registrationAssignmentID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_registration_assignment", *existing.ID)
        }
    }

    registrationDefinitionId := d.Get("registration_definition_id").(string)

    requestBody := managedservices.RegistrationAssignment{
        RegistrationAssignmentProperties: &managedservices.RegistrationAssignmentProperties{
            RegistrationDefinitionID: utils.String(registrationDefinitionId),
        },
    }


    future, err := client.CreateOrUpdate(ctx, scope, registrationAssignmentID, requestBody)
    if err != nil {
        return fmt.Errorf("Error creating Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
    }


    resp, err := client.Get(ctx, scope, registrationAssignmentID)
    if err != nil {
        return fmt.Errorf("Error retrieving Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Registration Assignment (Registration Assignment %q / Scope %q) ID", registrationAssignmentID, scope)
    }
    d.SetId(*resp.ID)

    return resourceArmRegistrationAssignmentRead(d, meta)
}

func resourceArmRegistrationAssignmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).registrationAssignmentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    registrationAssignmentID := id.Path["registrationAssignments"]

    resp, err := client.Get(ctx, scope, registrationAssignmentID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Registration Assignment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
    }


    d.Set("name", resp.Name)
    d.Set("registration_assignment_id", registrationAssignmentID)
    d.Set("scope", scope)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmRegistrationAssignmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).registrationAssignmentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    registrationAssignmentID := id.Path["registrationAssignments"]

    future, err := client.Delete(ctx, scope, registrationAssignmentID)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
        }
    }

    return nil
}
