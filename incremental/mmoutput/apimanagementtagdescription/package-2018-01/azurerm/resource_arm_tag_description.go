// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmTagDescription() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmTagDescriptionCreateUpdate,
        Read: resourceArmTagDescriptionRead,
        Update: resourceArmTagDescriptionCreateUpdate,
        Delete: resourceArmTagDescriptionDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "api_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "tag_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "external_docs_description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "external_docs_url": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmTagDescriptionCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).tagDescriptionClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    aPIID := d.Get("api_id").(string)
    tagID := d.Get("tag_id").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, aPIID, tagID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Tag Description %q (Tag %q / Api %q / Resource Group %q): %+v", name, tagID, aPIID, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_tag_description", *existing.ID)
        }
    }

    description := d.Get("description").(string)
    externalDocsDescription := d.Get("external_docs_description").(string)
    externalDocsUrl := d.Get("external_docs_url").(string)

    parameters := apimanagement.TagDescriptionCreateParameters{
        TagDescriptionBaseProperties: &apimanagement.TagDescriptionBaseProperties{
            Description: utils.String(description),
            ExternalDocsDescription: utils.String(externalDocsDescription),
            ExternalDocsURL: utils.String(externalDocsUrl),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, aPIID, tagID, parameters); err != nil {
        return fmt.Errorf("Error creating Tag Description %q (Tag %q / Api %q / Resource Group %q): %+v", name, tagID, aPIID, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, aPIID, tagID)
    if err != nil {
        return fmt.Errorf("Error retrieving Tag Description %q (Tag %q / Api %q / Resource Group %q): %+v", name, tagID, aPIID, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Tag Description %q (Tag %q / Api %q / Resource Group %q) ID", name, tagID, aPIID, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmTagDescriptionRead(d, meta)
}

func resourceArmTagDescriptionRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).tagDescriptionClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    aPIID := id.Path["apis"]
    tagID := id.Path["tagDescriptions"]

    resp, err := client.Get(ctx, resourceGroup, name, aPIID, tagID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Tag Description %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Tag Description %q (Tag %q / Api %q / Resource Group %q): %+v", name, tagID, aPIID, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("api_id", aPIID)
    d.Set("tag_id", tagID)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmTagDescriptionDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).tagDescriptionClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    aPIID := id.Path["apis"]
    tagID := id.Path["tagDescriptions"]

    if _, err := client.Delete(ctx, resourceGroup, name, aPIID, tagID); err != nil {
        return fmt.Errorf("Error deleting Tag Description %q (Tag %q / Api %q / Resource Group %q): %+v", name, tagID, aPIID, resourceGroup, err)
    }

    return nil
}
