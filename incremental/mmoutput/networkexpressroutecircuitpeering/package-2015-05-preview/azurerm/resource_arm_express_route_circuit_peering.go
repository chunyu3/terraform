// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmExpressRouteCircuitPeering() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmExpressRouteCircuitPeeringCreateUpdate,
        Read: resourceArmExpressRouteCircuitPeeringRead,
        Update: resourceArmExpressRouteCircuitPeeringCreateUpdate,
        Delete: resourceArmExpressRouteCircuitPeeringDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "circuit_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "azure_asn": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "microsoft_peering_config": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "advertised_public_prefixes": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "advertised_public_prefixes_state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.NotConfigured),
                                string(network.Configuring),
                                string(network.Configured),
                                string(network.ValidationNeeded),
                            }, false),
                            Default: string(network.NotConfigured),
                        },
                        "customer_asn": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "routing_registry_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "peer_asn": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "peering_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.AzurePublicPeering),
                    string(network.AzurePrivatePeering),
                    string(network.MicrosoftPeering),
                }, false),
                Default: string(network.AzurePublicPeering),
            },

            "primary_azure_port": {
                Type: schema.TypeString,
                Optional: true,
            },

            "primary_peer_address_prefix": {
                Type: schema.TypeString,
                Optional: true,
            },

            "secondary_azure_port": {
                Type: schema.TypeString,
                Optional: true,
            },

            "secondary_peer_address_prefix": {
                Type: schema.TypeString,
                Optional: true,
            },

            "shared_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.Disabled),
                    string(network.Enabled),
                }, false),
                Default: string(network.Disabled),
            },

            "stats": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "bytes_in": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "bytes_out": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "vlan_id": {
                Type: schema.TypeInt,
                Optional: true,
            },
        },
    }
}

func resourceArmExpressRouteCircuitPeeringCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).expressRouteCircuitPeeringsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    circuitName := d.Get("circuit_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, circuitName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Express Route Circuit Peering %q (Circuit Name %q / Resource Group %q): %+v", name, circuitName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_express_route_circuit_peering", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    name := d.Get("name").(string)
    azureAsn := d.Get("azure_asn").(int)
    etag := d.Get("etag").(string)
    microsoftPeeringConfig := d.Get("microsoft_peering_config").([]interface{})
    peerAsn := d.Get("peer_asn").(int)
    peeringType := d.Get("peering_type").(string)
    primaryAzurePort := d.Get("primary_azure_port").(string)
    primaryPeerAddressPrefix := d.Get("primary_peer_address_prefix").(string)
    secondaryAzurePort := d.Get("secondary_azure_port").(string)
    secondaryPeerAddressPrefix := d.Get("secondary_peer_address_prefix").(string)
    sharedKey := d.Get("shared_key").(string)
    state := d.Get("state").(string)
    stats := d.Get("stats").([]interface{})
    vlanId := d.Get("vlan_id").(int)

    peeringParameters := network.ExpressRouteCircuitPeering{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Name: utils.String(name),
        ExpressRouteCircuitPeeringPropertiesFormat: &network.ExpressRouteCircuitPeeringPropertiesFormat{
            AzureASN: utils.Int32(int32(azureAsn)),
            MicrosoftPeeringConfig: expandArmExpressRouteCircuitPeeringExpressRouteCircuitPeeringConfig(microsoftPeeringConfig),
            PeerASN: utils.Int32(int32(peerAsn)),
            PeeringType: network.ExpressRouteCircuitPeeringType(peeringType),
            PrimaryAzurePort: utils.String(primaryAzurePort),
            PrimaryPeerAddressPrefix: utils.String(primaryPeerAddressPrefix),
            SecondaryAzurePort: utils.String(secondaryAzurePort),
            SecondaryPeerAddressPrefix: utils.String(secondaryPeerAddressPrefix),
            SharedKey: utils.String(sharedKey),
            State: network.ExpressRouteCircuitPeeringState(state),
            Stats: expandArmExpressRouteCircuitPeeringExpressRouteCircuitStats(stats),
            VlanID: utils.Int32(int32(vlanId)),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, circuitName, name, peeringParameters)
    if err != nil {
        return fmt.Errorf("Error creating Express Route Circuit Peering %q (Circuit Name %q / Resource Group %q): %+v", name, circuitName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Express Route Circuit Peering %q (Circuit Name %q / Resource Group %q): %+v", name, circuitName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, circuitName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Express Route Circuit Peering %q (Circuit Name %q / Resource Group %q): %+v", name, circuitName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Express Route Circuit Peering %q (Circuit Name %q / Resource Group %q) ID", name, circuitName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmExpressRouteCircuitPeeringRead(d, meta)
}

func resourceArmExpressRouteCircuitPeeringRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).expressRouteCircuitPeeringsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    circuitName := id.Path["expressRouteCircuits"]
    name := id.Path["peerings"]

    resp, err := client.Get(ctx, resourceGroup, circuitName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Express Route Circuit Peering %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Express Route Circuit Peering %q (Circuit Name %q / Resource Group %q): %+v", name, circuitName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    d.Set("circuit_name", circuitName)

    return nil
}


func resourceArmExpressRouteCircuitPeeringDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).expressRouteCircuitPeeringsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    circuitName := id.Path["expressRouteCircuits"]
    name := id.Path["peerings"]

    future, err := client.Delete(ctx, resourceGroup, circuitName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Express Route Circuit Peering %q (Circuit Name %q / Resource Group %q): %+v", name, circuitName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Express Route Circuit Peering %q (Circuit Name %q / Resource Group %q): %+v", name, circuitName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmExpressRouteCircuitPeeringExpressRouteCircuitPeeringConfig(input []interface{}) *network.ExpressRouteCircuitPeeringConfig {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    advertisedPublicPrefixes := v["advertised_public_prefixes"].([]interface{})
    advertisedPublicPrefixesState := v["advertised_public_prefixes_state"].(string)
    customerAsn := v["customer_asn"].(int)
    routingRegistryName := v["routing_registry_name"].(string)

    result := network.ExpressRouteCircuitPeeringConfig{
        AdvertisedPublicPrefixes: utils.ExpandStringSlice(advertisedPublicPrefixes),
        AdvertisedPublicPrefixesState: network.ExpressRouteCircuitPeeringAdvertisedPublicPrefixState(advertisedPublicPrefixesState),
        CustomerASN: utils.Int32(int32(customerAsn)),
        RoutingRegistryName: utils.String(routingRegistryName),
    }
    return &result
}

func expandArmExpressRouteCircuitPeeringExpressRouteCircuitStats(input []interface{}) *network.ExpressRouteCircuitStats {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    bytesIn := v["bytes_in"].(int)
    bytesOut := v["bytes_out"].(int)

    result := network.ExpressRouteCircuitStats{
        BytesIn: utils.Int32(int32(bytesIn)),
        BytesOut: utils.Int32(int32(bytesOut)),
    }
    return &result
}
