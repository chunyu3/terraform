// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmBatchAccount() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmBatchAccountCreate,
        Read: resourceArmBatchAccountRead,
        Update: resourceArmBatchAccountUpdate,
        Delete: resourceArmBatchAccountDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "key_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(batch.Primary),
                    string(batch.Secondary),
                }, false),
            },

            "auto_storage": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "storage_account_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "account_endpoint": {
                Type: schema.TypeString,
                Computed: true,
            },

            "active_job_and_job_schedule_quota": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "core_quota": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "key_vault_reference": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "url": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "pool_allocation_mode": {
                Type: schema.TypeString,
                Computed: true,
            },

            "pool_quota": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmBatchAccountCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).batchAccountClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Batch Account %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_batch_account", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    autoStorage := d.Get("auto_storage").([]interface{})
    keyName := d.Get("key_name").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := batch.AccountRegenerateKeyParameters{
        KeyName: batch.AccountKeyType(keyName),
        Location: utils.String(location),
        AccountUpdateBaseProperties: &batch.AccountUpdateBaseProperties{
            AutoStorage: expandArmBatchAccountAutoStorageBaseProperties(autoStorage),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Create(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Batch Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Batch Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Batch Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Batch Account %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmBatchAccountRead(d, meta)
}

func resourceArmBatchAccountRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).batchAccountClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["batchAccounts"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Batch Account %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Batch Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if accountUpdateBaseProperties := resp.AccountUpdateBaseProperties; accountUpdateBaseProperties != nil {
        d.Set("account_endpoint", accountUpdateBaseProperties.AccountEndpoint)
        d.Set("active_job_and_job_schedule_quota", int(*accountUpdateBaseProperties.ActiveJobAndJobScheduleQuota))
        if err := d.Set("auto_storage", flattenArmBatchAccountAutoStorageBaseProperties(accountUpdateBaseProperties.AutoStorage)); err != nil {
            return fmt.Errorf("Error setting `auto_storage`: %+v", err)
        }
        d.Set("core_quota", int(*accountUpdateBaseProperties.CoreQuota))
        if err := d.Set("key_vault_reference", flattenArmBatchAccountKeyVaultReference(accountUpdateBaseProperties.KeyVaultReference)); err != nil {
            return fmt.Errorf("Error setting `key_vault_reference`: %+v", err)
        }
        d.Set("pool_allocation_mode", string(accountUpdateBaseProperties.PoolAllocationMode))
        d.Set("pool_quota", int(*accountUpdateBaseProperties.PoolQuota))
        d.Set("provisioning_state", string(accountUpdateBaseProperties.ProvisioningState))
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmBatchAccountUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).batchAccountClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    autoStorage := d.Get("auto_storage").([]interface{})
    keyName := d.Get("key_name").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := batch.AccountRegenerateKeyParameters{
        KeyName: batch.AccountKeyType(keyName),
        AccountUpdateBaseProperties: &batch.AccountUpdateBaseProperties{
            AutoStorage: expandArmBatchAccountAutoStorageBaseProperties(autoStorage),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error updating Batch Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmBatchAccountRead(d, meta)
}

func resourceArmBatchAccountDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).batchAccountClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["batchAccounts"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Batch Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Batch Account %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmBatchAccountAutoStorageBaseProperties(input []interface{}) *batch.AutoStorageBaseProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    storageAccountId := v["storage_account_id"].(string)

    result := batch.AutoStorageBaseProperties{
        StorageAccountID: utils.String(storageAccountId),
    }
    return &result
}


func flattenArmBatchAccountAutoStorageBaseProperties(input *batch.AutoStorageBaseProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if storageAccountId := input.StorageAccountID; storageAccountId != nil {
        result["storage_account_id"] = *storageAccountId
    }

    return []interface{}{result}
}

func flattenArmBatchAccountKeyVaultReference(input *batch.KeyVaultReference) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if url := input.URL; url != nil {
        result["url"] = *url
    }

    return []interface{}{result}
}
