// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAsset() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAssetCreate,
        Read: resourceArmAssetRead,
        Update: resourceArmAssetUpdate,
        Delete: resourceArmAssetDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "alternate_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "container": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "expiry_time": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validateRFC3339Date,
            },

            "permissions": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(mediaservices.Read),
                    string(mediaservices.ReadWrite),
                    string(mediaservices.ReadWriteDelete),
                }, false),
                Default: string(mediaservices.Read),
            },

            "storage_account_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "asset_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "created": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_modified": {
                Type: schema.TypeString,
                Computed: true,
            },

            "storage_encryption_format": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmAssetCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assetsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Asset %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_asset", *existing.ID)
        }
    }

    alternateId := d.Get("alternate_id").(string)
    container := d.Get("container").(string)
    description := d.Get("description").(string)
    expiryTime := d.Get("expiry_time").(string)
    permissions := d.Get("permissions").(string)
    storageAccountName := d.Get("storage_account_name").(string)

    parameters := mediaservices.ListContainerSasInput{
        ExpiryTime: convertStringToDate(expiryTime),
        Permissions: mediaservices.AssetContainerPermission(permissions),
        AssetProperties: &mediaservices.AssetProperties{
            AlternateID: utils.String(alternateId),
            Container: utils.String(container),
            Description: utils.String(description),
            StorageAccountName: utils.String(storageAccountName),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, accountName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Asset %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Asset %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Asset %q (Account Name %q / Resource Group %q) ID", name, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAssetRead(d, meta)
}

func resourceArmAssetRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assetsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaServices"]
    name := id.Path["assets"]

    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Asset %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Asset %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("account_name", accountName)
    if assetProperties := resp.AssetProperties; assetProperties != nil {
        d.Set("alternate_id", assetProperties.AlternateID)
        d.Set("asset_id", assetProperties.AssetID)
        d.Set("container", assetProperties.Container)
        d.Set("created", (assetProperties.Created).String())
        d.Set("description", assetProperties.Description)
        d.Set("last_modified", (assetProperties.LastModified).String())
        d.Set("storage_account_name", assetProperties.StorageAccountName)
        d.Set("storage_encryption_format", string(assetProperties.StorageEncryptionFormat))
    }
    d.Set("type", resp.Type)

    return nil
}

func resourceArmAssetUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assetsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    alternateId := d.Get("alternate_id").(string)
    container := d.Get("container").(string)
    description := d.Get("description").(string)
    expiryTime := d.Get("expiry_time").(string)
    permissions := d.Get("permissions").(string)
    storageAccountName := d.Get("storage_account_name").(string)

    parameters := mediaservices.ListContainerSasInput{
        ExpiryTime: convertStringToDate(expiryTime),
        Permissions: mediaservices.AssetContainerPermission(permissions),
        AssetProperties: &mediaservices.AssetProperties{
            AlternateID: utils.String(alternateId),
            Container: utils.String(container),
            Description: utils.String(description),
            StorageAccountName: utils.String(storageAccountName),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, accountName, name, parameters); err != nil {
        return fmt.Errorf("Error updating Asset %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    return resourceArmAssetRead(d, meta)
}

func resourceArmAssetDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assetsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaServices"]
    name := id.Path["assets"]

    if _, err := client.Delete(ctx, resourceGroup, accountName, name); err != nil {
        return fmt.Errorf("Error deleting Asset %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    return nil
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}
