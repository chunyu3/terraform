// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmJitRequest() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmJitRequestCreate,
        Read: resourceArmJitRequestRead,
        Update: resourceArmJitRequestUpdate,
        Delete: resourceArmJitRequestDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "application_resource_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "jit_authorization_policies": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "principal_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "role_definition_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "jit_scheduling_policy": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "duration": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                            ValidateFunc: validateIso8601Duration(),
                        },
                        "start_time": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(resource.NotSpecified),
                                string(resource.Once),
                                string(resource.Recurring),
                            }, false),
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmJitRequestCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jitRequestsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Jit Request %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_jit_request", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    applicationResourceId := d.Get("application_resource_id").(string)
    jitAuthorizationPolicies := d.Get("jit_authorization_policies").([]interface{})
    jitSchedulingPolicy := d.Get("jit_scheduling_policy").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := resource.JitRequestPatchable{
        Location: utils.String(location),
        JitRequestProperties: &resource.JitRequestProperties{
            ApplicationResourceID: utils.String(applicationResourceId),
            JitAuthorizationPolicies: expandArmJitRequestJitAuthorizationPolicies(jitAuthorizationPolicies),
            JitSchedulingPolicy: expandArmJitRequestJitSchedulingPolicy(jitSchedulingPolicy),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Jit Request %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Jit Request %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Jit Request %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Jit Request %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmJitRequestRead(d, meta)
}

func resourceArmJitRequestRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jitRequestsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["jitRequests"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Jit Request %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Jit Request %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmJitRequestUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jitRequestsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    applicationResourceId := d.Get("application_resource_id").(string)
    jitAuthorizationPolicies := d.Get("jit_authorization_policies").([]interface{})
    jitSchedulingPolicy := d.Get("jit_scheduling_policy").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := resource.JitRequestPatchable{
        JitRequestProperties: &resource.JitRequestProperties{
            ApplicationResourceID: utils.String(applicationResourceId),
            JitAuthorizationPolicies: expandArmJitRequestJitAuthorizationPolicies(jitAuthorizationPolicies),
            JitSchedulingPolicy: expandArmJitRequestJitSchedulingPolicy(jitSchedulingPolicy),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error updating Jit Request %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmJitRequestRead(d, meta)
}

func resourceArmJitRequestDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).jitRequestsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["jitRequests"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Jit Request %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}

func expandArmJitRequestJitAuthorizationPolicies(input []interface{}) *[]resource.JitAuthorizationPolicies {
    results := make([]resource.JitAuthorizationPolicies, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        principalId := v["principal_id"].(string)
        roleDefinitionId := v["role_definition_id"].(string)

        result := resource.JitAuthorizationPolicies{
            PrincipalID: utils.String(principalId),
            RoleDefinitionID: utils.String(roleDefinitionId),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmJitRequestJitSchedulingPolicy(input []interface{}) *resource.JitSchedulingPolicy {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)
    duration := v["duration"].(string)
    startTime := v["start_time"].(string)

    result := resource.JitSchedulingPolicy{
        Duration: utils.String(duration),
        StartTime: convertStringToDate(startTime),
        Type: resource.JitSchedulingType(type),
    }
    return &result
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}
