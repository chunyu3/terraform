// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmSecurityContact() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmSecurityContactCreate,
        Read: resourceArmSecurityContactRead,
        Update: resourceArmSecurityContactUpdate,
        Delete: resourceArmSecurityContactDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "alert_notifications": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(securitycenter.On),
                    string(securitycenter.Off),
                }, false),
            },

            "alerts_to_admins": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(securitycenter.On),
                    string(securitycenter.Off),
                }, false),
            },

            "email": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "phone": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmSecurityContactCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).securityContactsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Security Contact %q: %+v", name, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_security_contact", *existing.ID)
        }
    }

    alertNotifications := d.Get("alert_notifications").(string)
    alertsToAdmins := d.Get("alerts_to_admins").(string)
    email := d.Get("email").(string)
    phone := d.Get("phone").(string)

    securityContact := securitycenter.SecurityContact{
        SecurityContactProperties: &securitycenter.SecurityContactProperties{
            AlertNotifications: securitycenter.AlertNotifications(alertNotifications),
            AlertsToAdmins: securitycenter.AlertsToAdmins(alertsToAdmins),
            Email: utils.String(email),
            Phone: utils.String(phone),
        },
    }


    if _, err := client.Create(ctx, name, securityContact); err != nil {
        return fmt.Errorf("Error creating Security Contact %q: %+v", name, err)
    }


    resp, err := client.Get(ctx, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Security Contact %q: %+v", name, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Security Contact %q ID", name)
    }
    d.SetId(*resp.ID)

    return resourceArmSecurityContactRead(d, meta)
}

func resourceArmSecurityContactRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).securityContactsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["securityContacts"]

    resp, err := client.Get(ctx, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Security Contact %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Security Contact %q: %+v", name, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    if securityContactProperties := resp.SecurityContactProperties; securityContactProperties != nil {
        d.Set("alert_notifications", string(securityContactProperties.AlertNotifications))
        d.Set("alerts_to_admins", string(securityContactProperties.AlertsToAdmins))
        d.Set("email", securityContactProperties.Email)
        d.Set("phone", securityContactProperties.Phone)
    }
    d.Set("type", resp.Type)

    return nil
}

func resourceArmSecurityContactUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).securityContactsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    alertNotifications := d.Get("alert_notifications").(string)
    alertsToAdmins := d.Get("alerts_to_admins").(string)
    email := d.Get("email").(string)
    phone := d.Get("phone").(string)

    securityContact := securitycenter.SecurityContact{
        SecurityContactProperties: &securitycenter.SecurityContactProperties{
            AlertNotifications: securitycenter.AlertNotifications(alertNotifications),
            AlertsToAdmins: securitycenter.AlertsToAdmins(alertsToAdmins),
            Email: utils.String(email),
            Phone: utils.String(phone),
        },
    }


    if _, err := client.Update(ctx, name, securityContact); err != nil {
        return fmt.Errorf("Error updating Security Contact %q: %+v", name, err)
    }

    return resourceArmSecurityContactRead(d, meta)
}

func resourceArmSecurityContactDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).securityContactsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["securityContacts"]

    if _, err := client.Delete(ctx, name); err != nil {
        return fmt.Errorf("Error deleting Security Contact %q: %+v", name, err)
    }

    return nil
}
