// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmBlockchainMember() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmBlockchainMemberCreate,
        Read: resourceArmBlockchainMemberRead,
        Update: resourceArmBlockchainMemberUpdate,
        Delete: resourceArmBlockchainMemberDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "consortium_management_account_password": {
                Type: schema.TypeString,
                Optional: true,
            },

            "firewall_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "end_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "rule_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "start_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "key_name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "password": {
                Type: schema.TypeString,
                Optional: true,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "value": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmBlockchainMemberCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).blockchainMembersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Blockchain Member %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_blockchain_member", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    consortiumManagementAccountPassword := d.Get("consortium_management_account_password").(string)
    firewallRules := d.Get("firewall_rules").([]interface{})
    keyName := d.Get("key_name").(string)
    password := d.Get("password").(string)
    sku := d.Get("sku").([]interface{})
    value := d.Get("value").(string)
    t := d.Get("tags").(map[string]interface{})

    blockchainMember := blockchain.MemberUpdate{
        KeyName: utils.String(keyName),
        Location: utils.String(location),
        MemberPropertiesUpdate: &blockchain.MemberPropertiesUpdate{
            ConsortiumManagementAccountPassword: utils.String(consortiumManagementAccountPassword),
            FirewallRules: expandArmBlockchainMemberFirewallRule(firewallRules),
            Password: utils.String(password),
        },
        Sku: expandArmBlockchainMemberSku(sku),
        Tags: tags.Expand(t),
        Value: utils.String(value),
    }


    future, err := client.Create(ctx, resourceGroup, name, blockchainMember)
    if err != nil {
        return fmt.Errorf("Error creating Blockchain Member %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Blockchain Member %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Blockchain Member %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Blockchain Member %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmBlockchainMemberRead(d, meta)
}

func resourceArmBlockchainMemberRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).blockchainMembersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["blockchainMembers"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Blockchain Member %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Blockchain Member %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmBlockchainMemberUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).blockchainMembersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    consortiumManagementAccountPassword := d.Get("consortium_management_account_password").(string)
    firewallRules := d.Get("firewall_rules").([]interface{})
    keyName := d.Get("key_name").(string)
    password := d.Get("password").(string)
    sku := d.Get("sku").([]interface{})
    value := d.Get("value").(string)
    t := d.Get("tags").(map[string]interface{})

    blockchainMember := blockchain.MemberUpdate{
        KeyName: utils.String(keyName),
        MemberPropertiesUpdate: &blockchain.MemberPropertiesUpdate{
            ConsortiumManagementAccountPassword: utils.String(consortiumManagementAccountPassword),
            FirewallRules: expandArmBlockchainMemberFirewallRule(firewallRules),
            Password: utils.String(password),
        },
        Sku: expandArmBlockchainMemberSku(sku),
        Tags: tags.Expand(t),
        Value: utils.String(value),
    }


    if _, err := client.Update(ctx, resourceGroup, name, blockchainMember); err != nil {
        return fmt.Errorf("Error updating Blockchain Member %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmBlockchainMemberRead(d, meta)
}

func resourceArmBlockchainMemberDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).blockchainMembersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["blockchainMembers"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Blockchain Member %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Blockchain Member %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmBlockchainMemberFirewallRule(input []interface{}) *[]blockchain.FirewallRule {
    results := make([]blockchain.FirewallRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        ruleName := v["rule_name"].(string)
        startIpAddress := v["start_ip_address"].(string)
        endIpAddress := v["end_ip_address"].(string)

        result := blockchain.FirewallRule{
            EndIPAddress: utils.String(endIpAddress),
            RuleName: utils.String(ruleName),
            StartIPAddress: utils.String(startIpAddress),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmBlockchainMemberSku(input []interface{}) *blockchain.Sku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    tier := v["tier"].(string)

    result := blockchain.Sku{
        Name: utils.String(name),
        Tier: utils.String(tier),
    }
    return &result
}
