// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmCustomerSubscription() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmCustomerSubscriptionCreateUpdate,
        Read: resourceArmCustomerSubscriptionRead,
        Update: resourceArmCustomerSubscriptionCreateUpdate,
        Delete: resourceArmCustomerSubscriptionDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "registration_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "tenant_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmCustomerSubscriptionCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).customerSubscriptionsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    registrationName := d.Get("registration_name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, registrationName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Customer Subscription %q (Registration Name %q / Resource Group %q): %+v", name, registrationName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_customer_subscription", *existing.ID)
        }
    }

    etag := d.Get("etag").(string)
    tenantId := d.Get("tenant_id").(string)

    customerCreationParameters := azurestack.CustomerSubscription{
        Etag: utils.String(etag),
        CustomerSubscriptionProperties: &azurestack.CustomerSubscriptionProperties{
            TenantID: utils.String(tenantId),
        },
    }


    if _, err := client.Create(ctx, resourceGroup, registrationName, name, customerCreationParameters); err != nil {
        return fmt.Errorf("Error creating Customer Subscription %q (Registration Name %q / Resource Group %q): %+v", name, registrationName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, registrationName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Customer Subscription %q (Registration Name %q / Resource Group %q): %+v", name, registrationName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Customer Subscription %q (Registration Name %q / Resource Group %q) ID", name, registrationName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmCustomerSubscriptionRead(d, meta)
}

func resourceArmCustomerSubscriptionRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).customerSubscriptionsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    registrationName := id.Path["registrations"]
    name := id.Path["customerSubscriptions"]

    resp, err := client.Get(ctx, resourceGroup, registrationName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Customer Subscription %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Customer Subscription %q (Registration Name %q / Resource Group %q): %+v", name, registrationName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("registration_name", registrationName)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmCustomerSubscriptionDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).customerSubscriptionsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    registrationName := id.Path["registrations"]
    name := id.Path["customerSubscriptions"]

    if _, err := client.Delete(ctx, resourceGroup, registrationName, name); err != nil {
        return fmt.Errorf("Error deleting Customer Subscription %q (Registration Name %q / Resource Group %q): %+v", name, registrationName, resourceGroup, err)
    }

    return nil
}
