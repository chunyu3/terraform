// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmVirtualNetworkGateway() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmVirtualNetworkGatewayCreateUpdate,
        Read: resourceArmVirtualNetworkGatewayRead,
        Update: resourceArmVirtualNetworkGatewayCreateUpdate,
        Delete: resourceArmVirtualNetworkGatewayDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "virtual_network_gateway_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "enable_bgp": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "gateway_default_site": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "gateway_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.Vpn),
                    string(network.ExpressRoute),
                }, false),
                Default: string(network.Vpn),
            },

            "ip_configurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_allocation_method": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Static),
                                string(network.Dynamic),
                            }, false),
                            Default: string(network.Static),
                        },
                        "public_ip_address": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "resource_guid": {
                Type: schema.TypeString,
                Optional: true,
            },

            "tags": tags.Schema(),

            "vpn_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.PolicyBased),
                    string(network.RouteBased),
                }, false),
                Default: string(network.PolicyBased),
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmVirtualNetworkGatewayCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkGatewaysClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("virtual_network_gateway_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_virtual_network_gateway", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    enableBgp := d.Get("enable_bgp").(bool)
    etag := d.Get("etag").(string)
    gatewayDefaultSite := d.Get("gateway_default_site").([]interface{})
    gatewayType := d.Get("gateway_type").(string)
    iPConfigurations := d.Get("ip_configurations").([]interface{})
    resourceGUID := d.Get("resource_guid").(string)
    vpnType := d.Get("vpn_type").(string)
    tags := d.Get("tags").(map[string]interface{})

    parameters := network.VirtualNetworkGateway{
        Etag: utils.String(etag),
        Location: utils.String(location),
        VirtualNetworkGatewayPropertiesFormat: &network.VirtualNetworkGatewayPropertiesFormat{
            EnableBgp: utils.Bool(enableBgp),
            GatewayDefaultSite: expandArmVirtualNetworkGatewaySubResource(gatewayDefaultSite),
            GatewayType: network.VirtualNetworkGatewayType(gatewayType),
            IPConfigurations: expandArmVirtualNetworkGatewayVirtualNetworkGatewayIpConfiguration(iPConfigurations),
            ResourceGUID: utils.String(resourceGUID),
            VpnType: network.VpnType(vpnType),
        },
        Tags: tags.Expand(tags),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroupName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q) ID", name, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmVirtualNetworkGatewayRead(d, meta)
}

func resourceArmVirtualNetworkGatewayRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkGatewaysClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["virtualnetworkgateways"]

    resp, err := client.Get(ctx, resourceGroupName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Virtual Network Gateway %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if virtualNetworkGatewayPropertiesFormat := resp.VirtualNetworkGatewayPropertiesFormat; virtualNetworkGatewayPropertiesFormat != nil {
        d.Set("enable_bgp", virtualNetworkGatewayPropertiesFormat.EnableBgp)
        if err := d.Set("gateway_default_site", flattenArmVirtualNetworkGatewaySubResource(virtualNetworkGatewayPropertiesFormat.GatewayDefaultSite)); err != nil {
            return fmt.Errorf("Error setting `gateway_default_site`: %+v", err)
        }
        d.Set("gateway_type", string(virtualNetworkGatewayPropertiesFormat.GatewayType))
        if err := d.Set("ip_configurations", flattenArmVirtualNetworkGatewayVirtualNetworkGatewayIpConfiguration(virtualNetworkGatewayPropertiesFormat.IPConfigurations)); err != nil {
            return fmt.Errorf("Error setting `ip_configurations`: %+v", err)
        }
        d.Set("provisioning_state", virtualNetworkGatewayPropertiesFormat.ProvisioningState)
        d.Set("resource_guid", virtualNetworkGatewayPropertiesFormat.ResourceGUID)
        d.Set("vpn_type", string(virtualNetworkGatewayPropertiesFormat.VpnType))
    }
    d.Set("etag", resp.Etag)
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    d.Set("type", resp.Type)
    d.Set("virtual_network_gateway_name", name)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmVirtualNetworkGatewayDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkGatewaysClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["virtualnetworkgateways"]

    future, err := client.Delete(ctx, resourceGroupName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", name, resourceGroupName, err)
        }
    }

    return nil
}

func expandArmVirtualNetworkGatewaySubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    iD := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(iD),
    }
    return &result
}

func expandArmVirtualNetworkGatewayVirtualNetworkGatewayIpConfiguration(input []interface{}) *[]network.VirtualNetworkGatewayIpConfiguration {
    results := make([]network.VirtualNetworkGatewayIpConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        iD := v["id"].(string)
        privateIPAddress := v["private_ip_address"].(string)
        privateIPAllocationMethod := v["private_ip_allocation_method"].(string)
        subnet := v["subnet"].([]interface{})
        publicIPAddress := v["public_ip_address"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.VirtualNetworkGatewayIpConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(iD),
            Name: utils.String(name),
            VirtualNetworkGatewayIpConfigurationPropertiesFormat: &network.VirtualNetworkGatewayIpConfigurationPropertiesFormat{
                PrivateIPAddress: utils.String(privateIPAddress),
                PrivateIPAllocationMethod: network.IpAllocationMethod(privateIPAllocationMethod),
                PublicIPAddress: expandArmVirtualNetworkGatewaySubResource(publicIPAddress),
                Subnet: expandArmVirtualNetworkGatewaySubResource(subnet),
            },
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmVirtualNetworkGatewaySubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}

func flattenArmVirtualNetworkGatewayVirtualNetworkGatewayIpConfiguration(input *[]network.VirtualNetworkGatewayIpConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if virtualNetworkGatewayIpConfigurationPropertiesFormat := item.VirtualNetworkGatewayIpConfigurationPropertiesFormat; virtualNetworkGatewayIpConfigurationPropertiesFormat != nil {
            if privateIpAddress := virtualNetworkGatewayIpConfigurationPropertiesFormat.PrivateIPAddress; privateIpAddress != nil {
                v["private_ip_address"] = *privateIpAddress
            }
            v["private_ip_allocation_method"] = string(virtualNetworkGatewayIpConfigurationPropertiesFormat.PrivateIPAllocationMethod)
            v["public_ip_address"] = flattenArmVirtualNetworkGatewaySubResource(virtualNetworkGatewayIpConfigurationPropertiesFormat.PublicIPAddress)
            v["subnet"] = flattenArmVirtualNetworkGatewaySubResource(virtualNetworkGatewayIpConfigurationPropertiesFormat.Subnet)
        }

        results = append(results, v)
    }

    return results
}
