// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmStorageTarget() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmStorageTargetCreate,
        Read: resourceArmStorageTargetRead,
        Update: resourceArmStorageTargetUpdate,
        Delete: resourceArmStorageTargetDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "cache_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "clfs": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "target": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "junctions": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "namespace_path": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "nfs_export": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "target_path": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "nfs3": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "target": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "usage_model": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "target_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(storagecache.nfs3),
                    string(storagecache.clfs),
                    string(storagecache.unknown),
                }, false),
                Default: string(storagecache.nfs3),
            },

            "unknown": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "unknown_map": {
                            Type: schema.TypeMap,
                            Optional: true,
                            Elem: &schema.Schema{Type: schema.TypeString},
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmStorageTargetCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).storageTargetsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    cacheName := d.Get("cache_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, cacheName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Storage Target %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_storage_target", *existing.ID)
        }
    }

    clfs := d.Get("clfs").([]interface{})
    junctions := d.Get("junctions").([]interface{})
    nfs3 := d.Get("nfs3").([]interface{})
    targetType := d.Get("target_type").(string)
    unknown := d.Get("unknown").([]interface{})

    storagetarget := storagecache.StorageTarget{
        StorageTarget_properties: &storagecache.StorageTarget_properties{
            Clfs: expandArmStorageTargetClfs(clfs),
            Junctions: expandArmStorageTargetNamespaceJunction(junctions),
            Nfs3: expandArmStorageTargetNfs3(nfs3),
            TargetType: storagecache.StorageTargetType(targetType),
            Unknown: expandArmStorageTargetUnknown(unknown),
        },
    }


    future, err := client.Create(ctx, resourceGroup, cacheName, name, storagetarget)
    if err != nil {
        return fmt.Errorf("Error creating Storage Target %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Storage Target %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, cacheName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Storage Target %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Storage Target %q (Cache Name %q / Resource Group %q) ID", name, cacheName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmStorageTargetRead(d, meta)
}

func resourceArmStorageTargetRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).storageTargetsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    cacheName := id.Path["caches"]
    name := id.Path["storageTargets"]

    resp, err := client.Get(ctx, resourceGroup, cacheName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Storage Target %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Storage Target %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("cache_name", cacheName)
    if storageTargetProperties := resp.StorageTarget_properties; storageTargetProperties != nil {
        if err := d.Set("clfs", flattenArmStorageTargetClfs(storageTargetProperties.Clfs)); err != nil {
            return fmt.Errorf("Error setting `clfs`: %+v", err)
        }
        if err := d.Set("junctions", flattenArmStorageTargetNamespaceJunction(storageTargetProperties.Junctions)); err != nil {
            return fmt.Errorf("Error setting `junctions`: %+v", err)
        }
        if err := d.Set("nfs3", flattenArmStorageTargetNfs3(storageTargetProperties.Nfs3)); err != nil {
            return fmt.Errorf("Error setting `nfs3`: %+v", err)
        }
        d.Set("provisioning_state", string(storageTargetProperties.ProvisioningState))
        d.Set("target_type", string(storageTargetProperties.TargetType))
        if err := d.Set("unknown", flattenArmStorageTargetUnknown(storageTargetProperties.Unknown)); err != nil {
            return fmt.Errorf("Error setting `unknown`: %+v", err)
        }
    }
    d.Set("type", resp.Type)

    return nil
}

func resourceArmStorageTargetUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).storageTargetsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    cacheName := d.Get("cache_name").(string)
    clfs := d.Get("clfs").([]interface{})
    junctions := d.Get("junctions").([]interface{})
    nfs3 := d.Get("nfs3").([]interface{})
    targetType := d.Get("target_type").(string)
    unknown := d.Get("unknown").([]interface{})

    storagetarget := storagecache.StorageTarget{
        StorageTarget_properties: &storagecache.StorageTarget_properties{
            Clfs: expandArmStorageTargetClfs(clfs),
            Junctions: expandArmStorageTargetNamespaceJunction(junctions),
            Nfs3: expandArmStorageTargetNfs3(nfs3),
            TargetType: storagecache.StorageTargetType(targetType),
            Unknown: expandArmStorageTargetUnknown(unknown),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, cacheName, name, storagetarget); err != nil {
        return fmt.Errorf("Error updating Storage Target %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
    }

    return resourceArmStorageTargetRead(d, meta)
}

func resourceArmStorageTargetDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).storageTargetsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    cacheName := id.Path["caches"]
    name := id.Path["storageTargets"]

    future, err := client.Delete(ctx, resourceGroup, cacheName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Storage Target %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Storage Target %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmStorageTargetClfs(input []interface{}) *storagecache.Clfs {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    target := v["target"].(string)

    result := storagecache.Clfs{
        Target: utils.String(target),
    }
    return &result
}

func expandArmStorageTargetNamespaceJunction(input []interface{}) *[]storagecache.NamespaceJunction {
    results := make([]storagecache.NamespaceJunction, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        namespacePath := v["namespace_path"].(string)
        targetPath := v["target_path"].(string)
        nfsExport := v["nfs_export"].(string)

        result := storagecache.NamespaceJunction{
            NamespacePath: utils.String(namespacePath),
            NfsExport: utils.String(nfsExport),
            TargetPath: utils.String(targetPath),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmStorageTargetNfs3(input []interface{}) *storagecache.Nfs3 {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    target := v["target"].(string)
    usageModel := v["usage_model"].(string)

    result := storagecache.Nfs3{
        Target: utils.String(target),
        UsageModel: utils.String(usageModel),
    }
    return &result
}

func expandArmStorageTargetUnknown(input []interface{}) *storagecache.Unknown {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    unknownMap := v["unknown_map"].(map[string]interface{})

    result := storagecache.Unknown{
        UnknownMap: utils.ExpandKeyValuePairs(unknownMap),
    }
    return &result
}


func flattenArmStorageTargetClfs(input *storagecache.Clfs) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if target := input.Target; target != nil {
        result["target"] = *target
    }

    return []interface{}{result}
}

func flattenArmStorageTargetNamespaceJunction(input *[]storagecache.NamespaceJunction) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if namespacePath := item.NamespacePath; namespacePath != nil {
            v["namespace_path"] = *namespacePath
        }
        if nfsExport := item.NfsExport; nfsExport != nil {
            v["nfs_export"] = *nfsExport
        }
        if targetPath := item.TargetPath; targetPath != nil {
            v["target_path"] = *targetPath
        }

        results = append(results, v)
    }

    return results
}

func flattenArmStorageTargetNfs3(input *storagecache.Nfs3) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if target := input.Target; target != nil {
        result["target"] = *target
    }
    if usageModel := input.UsageModel; usageModel != nil {
        result["usage_model"] = *usageModel
    }

    return []interface{}{result}
}

func flattenArmStorageTargetUnknown(input *storagecache.Unknown) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["unknown_map"] = utils.FlattenKeyValuePairs(input.UnknownMap)

    return []interface{}{result}
}
