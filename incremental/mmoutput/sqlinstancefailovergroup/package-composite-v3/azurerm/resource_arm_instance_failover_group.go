// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmInstanceFailoverGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmInstanceFailoverGroupCreateUpdate,
        Read: resourceArmInstanceFailoverGroupRead,
        Update: resourceArmInstanceFailoverGroupCreateUpdate,
        Delete: resourceArmInstanceFailoverGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "location_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "managed_instance_pairs": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "partner_managed_instance_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "primary_managed_instance_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "partner_regions": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "location": azure.SchemaLocation(),
                    },
                },
            },

            "read_write_endpoint": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "failover_policy": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(sql.Manual),
                                string(sql.Automatic),
                            }, false),
                        },
                        "failover_with_data_loss_grace_period_minutes": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "read_only_endpoint": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "failover_policy": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(sql.Disabled),
                                string(sql.Enabled),
                            }, false),
                            Default: string(sql.Disabled),
                        },
                    },
                },
            },

            "replication_role": {
                Type: schema.TypeString,
                Computed: true,
            },

            "replication_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmInstanceFailoverGroupCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).instanceFailoverGroupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    locationName := d.Get("location_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, locationName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Instance Failover Group %q (Location Name %q / Resource Group %q): %+v", name, locationName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_instance_failover_group", *existing.ID)
        }
    }

    managedInstancePairs := d.Get("managed_instance_pairs").([]interface{})
    partnerRegions := d.Get("partner_regions").([]interface{})
    readOnlyEndpoint := d.Get("read_only_endpoint").([]interface{})
    readWriteEndpoint := d.Get("read_write_endpoint").([]interface{})

    parameters := sql.InstanceFailoverGroup{
        InstanceFailoverGroupProperties: &sql.InstanceFailoverGroupProperties{
            ManagedInstancePairs: expandArmInstanceFailoverGroupManagedInstancePairInfo(managedInstancePairs),
            PartnerRegions: expandArmInstanceFailoverGroupPartnerRegionInfo(partnerRegions),
            ReadOnlyEndpoint: expandArmInstanceFailoverGroupInstanceFailoverGroupReadOnlyEndpoint(readOnlyEndpoint),
            ReadWriteEndpoint: expandArmInstanceFailoverGroupInstanceFailoverGroupReadWriteEndpoint(readWriteEndpoint),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, locationName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Instance Failover Group %q (Location Name %q / Resource Group %q): %+v", name, locationName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Instance Failover Group %q (Location Name %q / Resource Group %q): %+v", name, locationName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, locationName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Instance Failover Group %q (Location Name %q / Resource Group %q): %+v", name, locationName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Instance Failover Group %q (Location Name %q / Resource Group %q) ID", name, locationName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmInstanceFailoverGroupRead(d, meta)
}

func resourceArmInstanceFailoverGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).instanceFailoverGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    locationName := id.Path["locations"]
    name := id.Path["instanceFailoverGroups"]

    resp, err := client.Get(ctx, resourceGroup, locationName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Instance Failover Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Instance Failover Group %q (Location Name %q / Resource Group %q): %+v", name, locationName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("location_name", locationName)
    if instanceFailoverGroupProperties := resp.InstanceFailoverGroupProperties; instanceFailoverGroupProperties != nil {
        if err := d.Set("managed_instance_pairs", flattenArmInstanceFailoverGroupManagedInstancePairInfo(instanceFailoverGroupProperties.ManagedInstancePairs)); err != nil {
            return fmt.Errorf("Error setting `managed_instance_pairs`: %+v", err)
        }
        if err := d.Set("partner_regions", flattenArmInstanceFailoverGroupPartnerRegionInfo(instanceFailoverGroupProperties.PartnerRegions)); err != nil {
            return fmt.Errorf("Error setting `partner_regions`: %+v", err)
        }
        if err := d.Set("read_only_endpoint", flattenArmInstanceFailoverGroupInstanceFailoverGroupReadOnlyEndpoint(instanceFailoverGroupProperties.ReadOnlyEndpoint)); err != nil {
            return fmt.Errorf("Error setting `read_only_endpoint`: %+v", err)
        }
        if err := d.Set("read_write_endpoint", flattenArmInstanceFailoverGroupInstanceFailoverGroupReadWriteEndpoint(instanceFailoverGroupProperties.ReadWriteEndpoint)); err != nil {
            return fmt.Errorf("Error setting `read_write_endpoint`: %+v", err)
        }
        d.Set("replication_role", string(instanceFailoverGroupProperties.ReplicationRole))
        d.Set("replication_state", instanceFailoverGroupProperties.ReplicationState)
    }
    d.Set("type", resp.Type)

    return nil
}


func resourceArmInstanceFailoverGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).instanceFailoverGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    locationName := id.Path["locations"]
    name := id.Path["instanceFailoverGroups"]

    future, err := client.Delete(ctx, resourceGroup, locationName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Instance Failover Group %q (Location Name %q / Resource Group %q): %+v", name, locationName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Instance Failover Group %q (Location Name %q / Resource Group %q): %+v", name, locationName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmInstanceFailoverGroupManagedInstancePairInfo(input []interface{}) *[]sql.ManagedInstancePairInfo {
    results := make([]sql.ManagedInstancePairInfo, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        primaryManagedInstanceId := v["primary_managed_instance_id"].(string)
        partnerManagedInstanceId := v["partner_managed_instance_id"].(string)

        result := sql.ManagedInstancePairInfo{
            PartnerManagedInstanceID: utils.String(partnerManagedInstanceId),
            PrimaryManagedInstanceID: utils.String(primaryManagedInstanceId),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmInstanceFailoverGroupPartnerRegionInfo(input []interface{}) *[]sql.PartnerRegionInfo {
    results := make([]sql.PartnerRegionInfo, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        location := azure.NormalizeLocation(v["location"].(string))

        result := sql.PartnerRegionInfo{
            Location: utils.String(location),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmInstanceFailoverGroupInstanceFailoverGroupReadOnlyEndpoint(input []interface{}) *sql.InstanceFailoverGroupReadOnlyEndpoint {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    failoverPolicy := v["failover_policy"].(string)

    result := sql.InstanceFailoverGroupReadOnlyEndpoint{
        FailoverPolicy: sql.ReadOnlyEndpointFailoverPolicy(failoverPolicy),
    }
    return &result
}

func expandArmInstanceFailoverGroupInstanceFailoverGroupReadWriteEndpoint(input []interface{}) *sql.InstanceFailoverGroupReadWriteEndpoint {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    failoverPolicy := v["failover_policy"].(string)
    failoverWithDataLossGracePeriodMinutes := v["failover_with_data_loss_grace_period_minutes"].(int)

    result := sql.InstanceFailoverGroupReadWriteEndpoint{
        FailoverPolicy: sql.ReadWriteEndpointFailoverPolicy(failoverPolicy),
        FailoverWithDataLossGracePeriodMinutes: utils.Int32(int32(failoverWithDataLossGracePeriodMinutes)),
    }
    return &result
}


func flattenArmInstanceFailoverGroupManagedInstancePairInfo(input *[]sql.ManagedInstancePairInfo) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if partnerManagedInstanceId := item.PartnerManagedInstanceID; partnerManagedInstanceId != nil {
            v["partner_managed_instance_id"] = *partnerManagedInstanceId
        }
        if primaryManagedInstanceId := item.PrimaryManagedInstanceID; primaryManagedInstanceId != nil {
            v["primary_managed_instance_id"] = *primaryManagedInstanceId
        }

        results = append(results, v)
    }

    return results
}

func flattenArmInstanceFailoverGroupPartnerRegionInfo(input *[]sql.PartnerRegionInfo) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if location := item.Location; location != nil {
            v["location"] = azure.NormalizeLocation(*location)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmInstanceFailoverGroupInstanceFailoverGroupReadOnlyEndpoint(input *sql.InstanceFailoverGroupReadOnlyEndpoint) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["failover_policy"] = string(input.FailoverPolicy)

    return []interface{}{result}
}

func flattenArmInstanceFailoverGroupInstanceFailoverGroupReadWriteEndpoint(input *sql.InstanceFailoverGroupReadWriteEndpoint) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["failover_policy"] = string(input.FailoverPolicy)
    if failoverWithDataLossGracePeriodMinutes := input.FailoverWithDataLossGracePeriodMinutes; failoverWithDataLossGracePeriodMinutes != nil {
        result["failover_with_data_loss_grace_period_minutes"] = int(*failoverWithDataLossGracePeriodMinutes)
    }

    return []interface{}{result}
}
