// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmLiveOutput() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmLiveOutputCreateUpdate,
        Read: resourceArmLiveOutputRead,
        Update: resourceArmLiveOutputCreateUpdate,
        Delete: resourceArmLiveOutputDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "archive_window_length": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
                ValidateFunc: validateIso8601Duration(),
            },

            "asset_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "live_event_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "hls": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "fragments_per_ts_segment": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "manifest_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "output_snap_time": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmLiveOutputCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).liveOutputsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    liveEventName := d.Get("live_event_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName, liveEventName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Live Output %q (Live Event Name %q / Account Name %q / Resource Group %q): %+v", name, liveEventName, accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_live_output", *existing.ID)
        }
    }

    archiveWindowLength := d.Get("archive_window_length").(string)
    assetName := d.Get("asset_name").(string)
    description := d.Get("description").(string)
    hls := d.Get("hls").([]interface{})
    manifestName := d.Get("manifest_name").(string)
    outputSnapTime := d.Get("output_snap_time").(int)

    parameters := mediaservices.LiveOutput{
        LiveOutputProperties: &mediaservices.LiveOutputProperties{
            ArchiveWindowLength: utils.String(archiveWindowLength),
            AssetName: utils.String(assetName),
            Description: utils.String(description),
            Hls: expandArmLiveOutputHls(hls),
            ManifestName: utils.String(manifestName),
            OutputSnapTime: utils.Int64(int64(outputSnapTime)),
        },
    }


    future, err := client.Create(ctx, resourceGroup, accountName, liveEventName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Live Output %q (Live Event Name %q / Account Name %q / Resource Group %q): %+v", name, liveEventName, accountName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Live Output %q (Live Event Name %q / Account Name %q / Resource Group %q): %+v", name, liveEventName, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, liveEventName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Live Output %q (Live Event Name %q / Account Name %q / Resource Group %q): %+v", name, liveEventName, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Live Output %q (Live Event Name %q / Account Name %q / Resource Group %q) ID", name, liveEventName, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmLiveOutputRead(d, meta)
}

func resourceArmLiveOutputRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).liveOutputsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaservices"]
    liveEventName := id.Path["liveEvents"]
    name := id.Path["liveOutputs"]

    resp, err := client.Get(ctx, resourceGroup, accountName, liveEventName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Live Output %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Live Output %q (Live Event Name %q / Account Name %q / Resource Group %q): %+v", name, liveEventName, accountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("account_name", accountName)
    d.Set("live_event_name", liveEventName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmLiveOutputDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).liveOutputsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaservices"]
    liveEventName := id.Path["liveEvents"]
    name := id.Path["liveOutputs"]

    future, err := client.Delete(ctx, resourceGroup, accountName, liveEventName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Live Output %q (Live Event Name %q / Account Name %q / Resource Group %q): %+v", name, liveEventName, accountName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Live Output %q (Live Event Name %q / Account Name %q / Resource Group %q): %+v", name, liveEventName, accountName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmLiveOutputHls(input []interface{}) *mediaservices.Hls {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    fragmentsPerTsSegment := v["fragments_per_ts_segment"].(int)

    result := mediaservices.Hls{
        FragmentsPerTsSegment: utils.Int32(int32(fragmentsPerTsSegment)),
    }
    return &result
}
