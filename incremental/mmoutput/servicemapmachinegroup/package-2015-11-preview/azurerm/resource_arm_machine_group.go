// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmMachineGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmMachineGroupCreate,
        Read: resourceArmMachineGroupRead,
        Update: resourceArmMachineGroupUpdate,
        Delete: resourceArmMachineGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "display_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "count": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "group_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(servicemap.unknown),
                    string(servicemap.azure-cs),
                    string(servicemap.azure-sf),
                    string(servicemap.azure-vmss),
                    string(servicemap.user-static),
                }, false),
                Default: string(servicemap.unknown),
            },

            "machines": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmMachineGroupCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).machineGroupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Machine Group %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_machine_group", *existing.ID)
        }
    }

    count := d.Get("count").(int)
    displayName := d.Get("display_name").(string)
    etag := d.Get("etag").(string)
    groupType := d.Get("group_type").(string)
    machines := d.Get("machines").([]interface{})

    machineGroup := servicemap.MachineGroup{
        Etag: utils.String(etag),
        MachineGroup_properties: &servicemap.MachineGroup_properties{
            Count: utils.Int32(int32(count)),
            DisplayName: utils.String(displayName),
            GroupType: servicemap.MachineGroupType(groupType),
            Machines: expandArmMachineGroupRef:machinewithhints(machines),
        },
    }


    if _, err := client.Create(ctx, resourceGroup, name, machineGroup); err != nil {
        return fmt.Errorf("Error creating Machine Group %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Machine Group %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Machine Group %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmMachineGroupRead(d, meta)
}

func resourceArmMachineGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).machineGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["workspaces"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Machine Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Machine Group %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if machineGroupProperties := resp.MachineGroup_properties; machineGroupProperties != nil {
        d.Set("count", int(*machineGroupProperties.Count))
        d.Set("display_name", machineGroupProperties.DisplayName)
        d.Set("group_type", string(machineGroupProperties.GroupType))
        if err := d.Set("machines", flattenArmMachineGroupRef:machinewithhints(machineGroupProperties.Machines)); err != nil {
            return fmt.Errorf("Error setting `machines`: %+v", err)
        }
    }
    d.Set("etag", resp.Etag)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmMachineGroupUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).machineGroupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    count := d.Get("count").(int)
    displayName := d.Get("display_name").(string)
    etag := d.Get("etag").(string)
    groupType := d.Get("group_type").(string)
    machines := d.Get("machines").([]interface{})

    machineGroup := servicemap.MachineGroup{
        Etag: utils.String(etag),
        MachineGroup_properties: &servicemap.MachineGroup_properties{
            Count: utils.Int32(int32(count)),
            DisplayName: utils.String(displayName),
            GroupType: servicemap.MachineGroupType(groupType),
            Machines: expandArmMachineGroupRef:machinewithhints(machines),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, name, machineGroup); err != nil {
        return fmt.Errorf("Error updating Machine Group %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmMachineGroupRead(d, meta)
}

func resourceArmMachineGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).machineGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["workspaces"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Machine Group %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}

func expandArmMachineGroupRef:machinewithhints(input []interface{}) *[]servicemap.Ref:machinewithhints {
    results := make([]servicemap.Ref:machinewithhints, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)

        result := servicemap.Ref:machinewithhints{
            ID: utils.String(id),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmMachineGroupRef:machinewithhints(input *[]servicemap.Ref:machinewithhints) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }

        results = append(results, v)
    }

    return results
}
