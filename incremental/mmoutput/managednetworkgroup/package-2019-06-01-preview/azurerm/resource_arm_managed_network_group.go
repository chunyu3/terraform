// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmManagedNetworkGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmManagedNetworkGroupCreateUpdate,
        Read: resourceArmManagedNetworkGroupRead,
        Update: resourceArmManagedNetworkGroupCreateUpdate,
        Delete: resourceArmManagedNetworkGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "managed_network_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },
        },
    }
}

func resourceArmManagedNetworkGroupCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedNetworkGroupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    managedNetworkName := d.Get("managed_network_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, managedNetworkName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Managed Network Group %q (Managed Network Name %q / Resource Group %q): %+v", name, managedNetworkName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_managed_network_group", *existing.ID)
        }
    }


    managedNetworkGroup := managednetwork.Group{
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, managedNetworkName, name, managedNetworkGroup)
    if err != nil {
        return fmt.Errorf("Error creating Managed Network Group %q (Managed Network Name %q / Resource Group %q): %+v", name, managedNetworkName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Managed Network Group %q (Managed Network Name %q / Resource Group %q): %+v", name, managedNetworkName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, managedNetworkName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Managed Network Group %q (Managed Network Name %q / Resource Group %q): %+v", name, managedNetworkName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Managed Network Group %q (Managed Network Name %q / Resource Group %q) ID", name, managedNetworkName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmManagedNetworkGroupRead(d, meta)
}

func resourceArmManagedNetworkGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedNetworkGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    managedNetworkName := id.Path["managedNetworks"]
    name := id.Path["managedNetworkGroups"]

    resp, err := client.Get(ctx, resourceGroup, managedNetworkName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Managed Network Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Managed Network Group %q (Managed Network Name %q / Resource Group %q): %+v", name, managedNetworkName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    d.Set("managed_network_name", managedNetworkName)

    return nil
}


func resourceArmManagedNetworkGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedNetworkGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    managedNetworkName := id.Path["managedNetworks"]
    name := id.Path["managedNetworkGroups"]

    future, err := client.Delete(ctx, resourceGroup, managedNetworkName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Managed Network Group %q (Managed Network Name %q / Resource Group %q): %+v", name, managedNetworkName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Managed Network Group %q (Managed Network Name %q / Resource Group %q): %+v", name, managedNetworkName, resourceGroup, err)
        }
    }

    return nil
}
