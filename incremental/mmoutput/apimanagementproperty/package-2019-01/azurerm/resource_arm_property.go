// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmProperty() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPropertyCreate,
        Read: resourceArmPropertyRead,
        Update: resourceArmPropertyUpdate,
        Delete: resourceArmPropertyDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "display_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "prop_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "value": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "secret": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },
        },
    }
}

func resourceArmPropertyCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).propertyClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    propID := d.Get("prop_id").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, propID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Property %q (Prop %q / Resource Group %q): %+v", name, propID, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_property", *existing.ID)
        }
    }

    displayName := d.Get("display_name").(string)
    secret := d.Get("secret").(bool)
    t := d.Get("tags").([]interface{})
    value := d.Get("value").(string)

    parameters := apimanagement.PropertyContract{
        PropertyContractProperties: &apimanagement.PropertyContractProperties{
            DisplayName: utils.String(displayName),
            Secret: utils.Bool(secret),
            Tags: utils.ExpandStringSlice(tags),
            Value: utils.String(value),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, propID, parameters); err != nil {
        return fmt.Errorf("Error creating Property %q (Prop %q / Resource Group %q): %+v", name, propID, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, propID)
    if err != nil {
        return fmt.Errorf("Error retrieving Property %q (Prop %q / Resource Group %q): %+v", name, propID, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Property %q (Prop %q / Resource Group %q) ID", name, propID, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmPropertyRead(d, meta)
}

func resourceArmPropertyRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).propertyClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    propID := id.Path["properties"]

    resp, err := client.Get(ctx, resourceGroup, name, propID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Property %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Property %q (Prop %q / Resource Group %q): %+v", name, propID, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if propertyContractProperties := resp.PropertyContractProperties; propertyContractProperties != nil {
        d.Set("display_name", propertyContractProperties.DisplayName)
        d.Set("secret", propertyContractProperties.Secret)
        d.Set("tags", utils.FlattenStringSlice(propertyContractProperties.Tags))
        d.Set("value", propertyContractProperties.Value)
    }
    d.Set("prop_id", propID)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmPropertyUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).propertyClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    displayName := d.Get("display_name").(string)
    propID := d.Get("prop_id").(string)
    secret := d.Get("secret").(bool)
    t := d.Get("tags").([]interface{})
    value := d.Get("value").(string)

    parameters := apimanagement.PropertyContract{
        PropertyContractProperties: &apimanagement.PropertyContractProperties{
            DisplayName: utils.String(displayName),
            Secret: utils.Bool(secret),
            Tags: utils.ExpandStringSlice(tags),
            Value: utils.String(value),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, name, propID, parameters); err != nil {
        return fmt.Errorf("Error updating Property %q (Prop %q / Resource Group %q): %+v", name, propID, resourceGroup, err)
    }

    return resourceArmPropertyRead(d, meta)
}

func resourceArmPropertyDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).propertyClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    propID := id.Path["properties"]

    if _, err := client.Delete(ctx, resourceGroup, name, propID); err != nil {
        return fmt.Errorf("Error deleting Property %q (Prop %q / Resource Group %q): %+v", name, propID, resourceGroup, err)
    }

    return nil
}
