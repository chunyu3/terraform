---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cluster"
sidebar_current: "docs-azurerm-resource-cluster"
description: |-
  Manage Azure Cluster instance.
---

# azurerm_cluster

Manage Azure Cluster instance.


## Argument Reference

The following arguments are supported:

* `resource_group` - (Required) The name of the resource group. Changing this forces a new resource to be created.

* `location` - (Required) Resource location. Changing this forces a new resource to be created.

* `cluster_name` - (Required) The name of the cluster resource Changing this forces a new resource to be created.

* `management_endpoint` - (Required) The http management endpoint of the cluster.

* `node_types` - (Required) One or more `node_type` block defined below.

---

The `node_type` block supports the following:

* `name` - (Required) The name of the node type.

* `placement_properties` - (Optional) The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.

* `capacities` - (Optional) The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.

* `client_connection_endpoint_port` - (Required) The TCP cluster management endpoint port.

* `http_gateway_endpoint_port` - (Required) The HTTP cluster management endpoint port.

* `durability_level` - (Optional)  Defaults to `Bronze`.

* `application_ports` - (Optional) One `application_port` block defined below.

* `ephemeral_ports` - (Optional) One `ephemeral_port` block defined below.

* `is_primary` - (Required) The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.

* `vm_instance_count` - (Required) The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.

* `reverse_proxy_endpoint_port` - (Optional) The endpoint used by reverse proxy.


---

The `application_port` block supports the following:

* `start_port` - (Required) Starting port of a range of ports

* `end_port` - (Required) End port of a range of ports

---

The `ephemeral_port` block supports the following:

* `start_port` - (Required) Starting port of a range of ports

* `end_port` - (Required) End port of a range of ports

* `add_on_features` - (Optional) The list of add-on features to enable in the cluster.

* `available_cluster_versions` - (Optional) One or more `available_cluster_version` block defined below.

* `azure_active_directory` - (Optional) One `azure_active_directory` block defined below.

* `certificate` - (Optional) One `certificate` block defined below.

* `client_certificate_common_names` - (Optional) One or more `client_certificate_common_name` block defined below.

* `client_certificate_thumbprints` - (Optional) One or more `client_certificate_thumbprint` block defined below.

* `cluster_code_version` - (Optional) The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.

* `cluster_state` - (Optional)  Defaults to `WaitingForNodes`.

* `diagnostics_storage_account_config` - (Optional) One `diagnostics_storage_account_config` block defined below.

* `fabric_settings` - (Optional) One or more `fabric_setting` block defined below.

* `reliability_level` - (Optional)  Defaults to `None`.

* `reverse_proxy_certificate` - (Optional) One `reverse_proxy_certificate` block defined below.

* `upgrade_description` - (Optional) One `upgrade_description` block defined below.

* `upgrade_mode` - (Optional)  Defaults to `Automatic`.

* `vm_image` - (Optional) The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.

* `tags` - (Optional) Resource tags. Changing this forces a new resource to be created.

---

The `available_cluster_version` block supports the following:

* `code_version` - (Optional) The Service Fabric runtime version of the cluster.

* `support_expiry_utc` - (Optional) The date of expiry of support of the version.

* `environment` - (Optional) Indicates if this version is for Windows or Linux operating system. Defaults to `Windows`.

---

The `azure_active_directory` block supports the following:

* `tenant_id` - (Optional) Azure active directory tenant id.

* `cluster_application` - (Optional) Azure active directory cluster application id.

* `client_application` - (Optional) Azure active directory client application id.

---

The `certificate` block supports the following:

* `thumbprint` - (Required) Thumbprint of the primary certificate.

* `thumbprint_secondary` - (Optional) Thumbprint of the secondary certificate.

* `x509store_name` - (Optional) The local certificate store location. Defaults to `AddressBook`.

---

The `client_certificate_common_name` block supports the following:

* `is_admin` - (Required) Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.

* `certificate_common_name` - (Required) The common name of the client certificate.

* `certificate_issuer_thumbprint` - (Required) The issuer thumbprint of the client certificate.

---

The `client_certificate_thumbprint` block supports the following:

* `is_admin` - (Required) Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.

* `certificate_thumbprint` - (Required) The thumbprint of the client certificate.

---

The `diagnostics_storage_account_config` block supports the following:

* `storage_account_name` - (Required) The Azure storage account name.

* `protected_account_key_name` - (Required) The protected diagnostics storage key name.

* `blob_endpoint` - (Required) The blob endpoint of the azure storage account.

* `queue_endpoint` - (Required) The queue endpoint of the azure storage account.

* `table_endpoint` - (Required) The table endpoint of the azure storage account.

---

The `fabric_setting` block supports the following:

* `name` - (Required) The section name of the fabric settings.

* `parameters` - (Required) One or more `parameter` block defined below.


---

The `parameter` block supports the following:

* `name` - (Required) The parameter name of fabric setting.

* `value` - (Required) The parameter value of fabric setting.

---

The `reverse_proxy_certificate` block supports the following:

* `thumbprint` - (Required) Thumbprint of the primary certificate.

* `thumbprint_secondary` - (Optional) Thumbprint of the secondary certificate.

* `x509store_name` - (Optional) The local certificate store location. Defaults to `AddressBook`.

---

The `upgrade_description` block supports the following:

* `force_restart` - (Optional) If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

* `upgrade_replica_set_check_timeout` - (Required) The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.

* `health_check_wait_duration` - (Required) The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.

* `health_check_stable_duration` - (Required) The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.

* `health_check_retry_timeout` - (Required) The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.

* `upgrade_timeout` - (Required) The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.

* `upgrade_domain_timeout` - (Required) The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.

* `health_policy` - (Required) One `health_policy` block defined below.

* `delta_health_policy` - (Optional) One `delta_health_policy` block defined below.


---

The `health_policy` block supports the following:

* `max_percent_unhealthy_nodes` - (Optional) The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.

* `max_percent_unhealthy_applications` - (Optional) The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.

---

The `delta_health_policy` block supports the following:

* `max_percent_delta_unhealthy_nodes` - (Required) The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.

* `max_percent_upgrade_domain_delta_unhealthy_nodes` - (Required) The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.

* `max_percent_delta_unhealthy_applications` - (Required) The maximum allowed percentage of applications health degradation allowed during cluster upgrades. The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.

## Attributes Reference

The following attributes are exported:

* `cluster_id` - A service generated unique identifier for the cluster resource.

* `cluster_endpoint` - The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.

* `provisioning_state` - The provisioning state of the cluster resource.

* `id` - Azure resource ID.

* `name` - Azure resource name.

* `type` - Azure resource type.
