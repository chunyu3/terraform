// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmCertificate() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmCertificateCreate,
        Read: resourceArmCertificateRead,
        Update: resourceArmCertificateUpdate,
        Delete: resourceArmCertificateDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "certificate_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "data": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "format": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(batch.Pfx),
                    string(batch.Cer),
                }, false),
                Default: string(batch.Pfx),
            },

            "password": {
                Type: schema.TypeString,
                Optional: true,
            },

            "thumbprint": {
                Type: schema.TypeString,
                Optional: true,
            },

            "thumbprint_algorithm": {
                Type: schema.TypeString,
                Optional: true,
            },

            "delete_certificate_error": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "code": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "message": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "details": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "code": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "message": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "details": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "code": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                                "message": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                                "target": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "target": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "target": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "previous_provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "previous_provisioning_state_transition_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state_transition_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "public_data": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmCertificateCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).certificateClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    certificateName := d.Get("certificate_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName, certificateName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Certificate (Certificate Name %q / Account Name %q / Resource Group %q): %+v", certificateName, accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_certificate", *existing.ID)
        }
    }

    data := d.Get("data").(string)
    format := d.Get("format").(string)
    password := d.Get("password").(string)
    thumbprint := d.Get("thumbprint").(string)
    thumbprintAlgorithm := d.Get("thumbprint_algorithm").(string)

    parameters := batch.CertificateCreateOrUpdateParameters{
        CertificateCreateOrUpdateProperties: &batch.CertificateCreateOrUpdateProperties{
            Data: utils.String(data),
            Format: batch.CertificateFormat(format),
            Password: utils.String(password),
            Thumbprint: utils.String(thumbprint),
            ThumbprintAlgorithm: utils.String(thumbprintAlgorithm),
        },
    }


    future, err := client.Create(ctx, resourceGroup, accountName, certificateName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Certificate (Certificate Name %q / Account Name %q / Resource Group %q): %+v", certificateName, accountName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Certificate (Certificate Name %q / Account Name %q / Resource Group %q): %+v", certificateName, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, certificateName)
    if err != nil {
        return fmt.Errorf("Error retrieving Certificate (Certificate Name %q / Account Name %q / Resource Group %q): %+v", certificateName, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Certificate (Certificate Name %q / Account Name %q / Resource Group %q) ID", certificateName, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmCertificateRead(d, meta)
}

func resourceArmCertificateRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).certificateClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["batchAccounts"]
    certificateName := id.Path["certificates"]

    resp, err := client.Get(ctx, resourceGroup, accountName, certificateName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Certificate %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Certificate (Certificate Name %q / Account Name %q / Resource Group %q): %+v", certificateName, accountName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("account_name", accountName)
    d.Set("certificate_name", certificateName)
    if certificateCreateOrUpdateProperties := resp.CertificateCreateOrUpdateProperties; certificateCreateOrUpdateProperties != nil {
        if err := d.Set("delete_certificate_error", flattenArmCertificateDeleteCertificateError(certificateCreateOrUpdateProperties.DeleteCertificateError)); err != nil {
            return fmt.Errorf("Error setting `delete_certificate_error`: %+v", err)
        }
        d.Set("format", string(certificateCreateOrUpdateProperties.Format))
        d.Set("previous_provisioning_state", string(certificateCreateOrUpdateProperties.PreviousProvisioningState))
        d.Set("previous_provisioning_state_transition_time", (certificateCreateOrUpdateProperties.PreviousProvisioningStateTransitionTime).String())
        d.Set("provisioning_state", string(certificateCreateOrUpdateProperties.ProvisioningState))
        d.Set("provisioning_state_transition_time", (certificateCreateOrUpdateProperties.ProvisioningStateTransitionTime).String())
        d.Set("public_data", certificateCreateOrUpdateProperties.PublicData)
        d.Set("thumbprint", certificateCreateOrUpdateProperties.Thumbprint)
        d.Set("thumbprint_algorithm", certificateCreateOrUpdateProperties.ThumbprintAlgorithm)
    }
    d.Set("etag", resp.Etag)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmCertificateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).certificateClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    certificateName := d.Get("certificate_name").(string)
    data := d.Get("data").(string)
    format := d.Get("format").(string)
    password := d.Get("password").(string)
    thumbprint := d.Get("thumbprint").(string)
    thumbprintAlgorithm := d.Get("thumbprint_algorithm").(string)

    parameters := batch.CertificateCreateOrUpdateParameters{
        CertificateCreateOrUpdateProperties: &batch.CertificateCreateOrUpdateProperties{
            Data: utils.String(data),
            Format: batch.CertificateFormat(format),
            Password: utils.String(password),
            Thumbprint: utils.String(thumbprint),
            ThumbprintAlgorithm: utils.String(thumbprintAlgorithm),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, accountName, certificateName, parameters); err != nil {
        return fmt.Errorf("Error updating Certificate (Certificate Name %q / Account Name %q / Resource Group %q): %+v", certificateName, accountName, resourceGroup, err)
    }

    return resourceArmCertificateRead(d, meta)
}

func resourceArmCertificateDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).certificateClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["batchAccounts"]
    certificateName := id.Path["certificates"]

    future, err := client.Delete(ctx, resourceGroup, accountName, certificateName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Certificate (Certificate Name %q / Account Name %q / Resource Group %q): %+v", certificateName, accountName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Certificate (Certificate Name %q / Account Name %q / Resource Group %q): %+v", certificateName, accountName, resourceGroup, err)
        }
    }

    return nil
}


func flattenArmCertificateDeleteCertificateError(input *batch.DeleteCertificateError) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})


    return []interface{}{result}
}
