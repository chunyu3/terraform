// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmOperationalizationCluster() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmOperationalizationClusterCreate,
        Read: resourceArmOperationalizationClusterRead,
        Update: resourceArmOperationalizationClusterUpdate,
        Delete: resourceArmOperationalizationClusterDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "cluster_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "container_service": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "orchestrator_properties": {
                            Type: schema.TypeList,
                            Required: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "service_principal": {
                                        Type: schema.TypeList,
                                        Required: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "client_id": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                                "secret": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "orchestrator_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "agent_count": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "agent_vm_size": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(machinelearningcompute.Standard_A0),
                                string(machinelearningcompute.Standard_A1),
                                string(machinelearningcompute.Standard_A2),
                                string(machinelearningcompute.Standard_A3),
                                string(machinelearningcompute.Standard_A4),
                                string(machinelearningcompute.Standard_A5),
                                string(machinelearningcompute.Standard_A6),
                                string(machinelearningcompute.Standard_A7),
                                string(machinelearningcompute.Standard_A8),
                                string(machinelearningcompute.Standard_A9),
                                string(machinelearningcompute.Standard_A10),
                                string(machinelearningcompute.Standard_A11),
                                string(machinelearningcompute.Standard_D1),
                                string(machinelearningcompute.Standard_D2),
                                string(machinelearningcompute.Standard_D3),
                                string(machinelearningcompute.Standard_D4),
                                string(machinelearningcompute.Standard_D11),
                                string(machinelearningcompute.Standard_D12),
                                string(machinelearningcompute.Standard_D13),
                                string(machinelearningcompute.Standard_D14),
                                string(machinelearningcompute.Standard_D1_v2),
                                string(machinelearningcompute.Standard_D2_v2),
                                string(machinelearningcompute.Standard_D3_v2),
                                string(machinelearningcompute.Standard_D4_v2),
                                string(machinelearningcompute.Standard_D5_v2),
                                string(machinelearningcompute.Standard_D11_v2),
                                string(machinelearningcompute.Standard_D12_v2),
                                string(machinelearningcompute.Standard_D13_v2),
                                string(machinelearningcompute.Standard_D14_v2),
                                string(machinelearningcompute.Standard_G1),
                                string(machinelearningcompute.Standard_G2),
                                string(machinelearningcompute.Standard_G3),
                                string(machinelearningcompute.Standard_G4),
                                string(machinelearningcompute.Standard_G5),
                                string(machinelearningcompute.Standard_DS1),
                                string(machinelearningcompute.Standard_DS2),
                                string(machinelearningcompute.Standard_DS3),
                                string(machinelearningcompute.Standard_DS4),
                                string(machinelearningcompute.Standard_DS11),
                                string(machinelearningcompute.Standard_DS12),
                                string(machinelearningcompute.Standard_DS13),
                                string(machinelearningcompute.Standard_DS14),
                                string(machinelearningcompute.Standard_GS1),
                                string(machinelearningcompute.Standard_GS2),
                                string(machinelearningcompute.Standard_GS3),
                                string(machinelearningcompute.Standard_GS4),
                                string(machinelearningcompute.Standard_GS5),
                            }, false),
                            Default: string(machinelearningcompute.Standard_A0),
                        },
                        "system_services": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                                ValidateFunc: validation.StringInSlice([]string{
                                    string(machinelearningcompute.Scoring),
                                    string(machinelearningcompute.Batch),
                               }, false),
                            },
                        },
                    },
                },
            },

            "app_insights": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "api_key": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "app_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "container_registry": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "resource_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "global_service_configuration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "additional_properties": {
                            Type: schema.TypeMap,
                            Optional: true,
                            Elem: &schema.Schema{Type: schema.TypeString},
                        },
                        "auto_scale": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "max_replicas": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "min_replicas": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "refresh_period_in_seconds": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(machinelearningcompute.Enabled),
                                            string(machinelearningcompute.Disabled),
                                        }, false),
                                        Default: string(machinelearningcompute.Enabled),
                                    },
                                    "target_utilization": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "service_auth": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "primary_auth_key_hash": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "secondary_auth_key_hash": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                },
                            },
                        },
                        "ssl": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "cert": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "key": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(machinelearningcompute.Enabled),
                                            string(machinelearningcompute.Disabled),
                                        }, false),
                                        Default: string(machinelearningcompute.Enabled),
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "storage_account": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "resource_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "created_on": {
                Type: schema.TypeString,
                Computed: true,
            },

            "modified_on": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmOperationalizationClusterCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).operationalizationClustersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Operationalization Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_operationalization_cluster", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    appInsights := d.Get("app_insights").([]interface{})
    clusterType := d.Get("cluster_type").(string)
    containerRegistry := d.Get("container_registry").([]interface{})
    containerService := d.Get("container_service").([]interface{})
    description := d.Get("description").(string)
    globalServiceConfiguration := d.Get("global_service_configuration").([]interface{})
    storageAccount := d.Get("storage_account").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := machinelearningcompute.OperationalizationCluster{
        Location: utils.String(location),
        OperationalizationClusterProperties: &machinelearningcompute.OperationalizationClusterProperties{
            AppInsights: expandArmOperationalizationClusterAppInsightsCredentials(appInsights),
            ClusterType: utils.String(clusterType),
            ContainerRegistry: expandArmOperationalizationClusterContainerRegistryProperties(containerRegistry),
            ContainerService: expandArmOperationalizationClusterAcsClusterProperties(containerService),
            Description: utils.String(description),
            GlobalServiceConfiguration: expandArmOperationalizationClusterGlobalServiceConfiguration(globalServiceConfiguration),
            StorageAccount: expandArmOperationalizationClusterStorageAccountProperties(storageAccount),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Operationalization Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Operationalization Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Operationalization Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Operationalization Cluster %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmOperationalizationClusterRead(d, meta)
}

func resourceArmOperationalizationClusterRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).operationalizationClustersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["operationalizationClusters"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Operationalization Cluster %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Operationalization Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if operationalizationClusterProperties := resp.OperationalizationClusterProperties; operationalizationClusterProperties != nil {
        if err := d.Set("app_insights", flattenArmOperationalizationClusterAppInsightsCredentials(operationalizationClusterProperties.AppInsights)); err != nil {
            return fmt.Errorf("Error setting `app_insights`: %+v", err)
        }
        d.Set("cluster_type", operationalizationClusterProperties.ClusterType)
        if err := d.Set("container_registry", flattenArmOperationalizationClusterContainerRegistryProperties(operationalizationClusterProperties.ContainerRegistry)); err != nil {
            return fmt.Errorf("Error setting `container_registry`: %+v", err)
        }
        if err := d.Set("container_service", flattenArmOperationalizationClusterAcsClusterProperties(operationalizationClusterProperties.ContainerService)); err != nil {
            return fmt.Errorf("Error setting `container_service`: %+v", err)
        }
        d.Set("created_on", (operationalizationClusterProperties.CreatedOn).String())
        d.Set("description", operationalizationClusterProperties.Description)
        if err := d.Set("global_service_configuration", flattenArmOperationalizationClusterGlobalServiceConfiguration(operationalizationClusterProperties.GlobalServiceConfiguration)); err != nil {
            return fmt.Errorf("Error setting `global_service_configuration`: %+v", err)
        }
        d.Set("modified_on", (operationalizationClusterProperties.ModifiedOn).String())
        d.Set("provisioning_state", string(operationalizationClusterProperties.ProvisioningState))
        if err := d.Set("storage_account", flattenArmOperationalizationClusterStorageAccountProperties(operationalizationClusterProperties.StorageAccount)); err != nil {
            return fmt.Errorf("Error setting `storage_account`: %+v", err)
        }
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmOperationalizationClusterUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).operationalizationClustersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    appInsights := d.Get("app_insights").([]interface{})
    clusterType := d.Get("cluster_type").(string)
    containerRegistry := d.Get("container_registry").([]interface{})
    containerService := d.Get("container_service").([]interface{})
    description := d.Get("description").(string)
    globalServiceConfiguration := d.Get("global_service_configuration").([]interface{})
    storageAccount := d.Get("storage_account").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := machinelearningcompute.OperationalizationCluster{
        Location: utils.String(location),
        OperationalizationClusterProperties: &machinelearningcompute.OperationalizationClusterProperties{
            AppInsights: expandArmOperationalizationClusterAppInsightsCredentials(appInsights),
            ClusterType: utils.String(clusterType),
            ContainerRegistry: expandArmOperationalizationClusterContainerRegistryProperties(containerRegistry),
            ContainerService: expandArmOperationalizationClusterAcsClusterProperties(containerService),
            Description: utils.String(description),
            GlobalServiceConfiguration: expandArmOperationalizationClusterGlobalServiceConfiguration(globalServiceConfiguration),
            StorageAccount: expandArmOperationalizationClusterStorageAccountProperties(storageAccount),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error updating Operationalization Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmOperationalizationClusterRead(d, meta)
}

func resourceArmOperationalizationClusterDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).operationalizationClustersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["operationalizationClusters"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Operationalization Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Operationalization Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmOperationalizationClusterAppInsightsCredentials(input []interface{}) *machinelearningcompute.AppInsightsCredentials {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    appId := v["app_id"].(string)
    apiKey := v["api_key"].(string)

    result := machinelearningcompute.AppInsightsCredentials{
        ApiKey: utils.String(apiKey),
        AppID: utils.String(appId),
    }
    return &result
}

func expandArmOperationalizationClusterContainerRegistryProperties(input []interface{}) *machinelearningcompute.ContainerRegistryProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    resourceId := v["resource_id"].(string)

    result := machinelearningcompute.ContainerRegistryProperties{
        ResourceID: utils.String(resourceId),
    }
    return &result
}

func expandArmOperationalizationClusterAcsClusterProperties(input []interface{}) *machinelearningcompute.AcsClusterProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    orchestratorType := v["orchestrator_type"].(string)
    orchestratorProperties := v["orchestrator_properties"].([]interface{})
    systemServices := v["system_services"].([]interface{})
    agentCount := v["agent_count"].(int)
    agentVmSize := v["agent_vm_size"].(string)

    result := machinelearningcompute.AcsClusterProperties{
        AgentCount: utils.Int(agentCount),
        AgentVmSize: machinelearningcompute.AgentVMSizeTypes(agentVmSize),
        OrchestratorProperties: expandArmOperationalizationClusterKubernetes(orchestratorProperties),
        OrchestratorType: utils.String(orchestratorType),
        SystemServices: expandArmOperationalizationCluster(systemServices),
    }
    return &result
}

func expandArmOperationalizationClusterGlobalServiceConfiguration(input []interface{}) *machinelearningcompute.GlobalServiceConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    additionalProperties := v["additional_properties"].(map[string]interface{})
    etag := v["etag"].(string)
    ssl := v["ssl"].([]interface{})
    serviceAuth := v["service_auth"].([]interface{})
    autoScale := v["auto_scale"].([]interface{})

    result := machinelearningcompute.GlobalServiceConfiguration{
        AdditionalProperties: utils.ExpandKeyValuePairs(additionalProperties),
        AutoScale: expandArmOperationalizationClusterAutoScaleConfiguration(autoScale),
        Etag: utils.String(etag),
        ServiceAuth: expandArmOperationalizationClusterServiceAuthConfiguration(serviceAuth),
        Ssl: expandArmOperationalizationClusterSslConfiguration(ssl),
    }
    return &result
}

func expandArmOperationalizationClusterStorageAccountProperties(input []interface{}) *machinelearningcompute.StorageAccountProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    resourceId := v["resource_id"].(string)

    result := machinelearningcompute.StorageAccountProperties{
        ResourceID: utils.String(resourceId),
    }
    return &result
}

func expandArmOperationalizationClusterKubernetes(input []interface{}) *machinelearningcompute.Kubernetes {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    servicePrincipal := v["service_principal"].([]interface{})

    result := machinelearningcompute.Kubernetes{
        ServicePrincipal: expandArmOperationalizationClusterServicePrincipalProperties(servicePrincipal),
    }
    return &result
}

func expandArmOperationalizationCluster(input []interface{}) *[]machinelearningcompute. {
    results := make([]machinelearningcompute., 0)
    for _, item := range input {
        v := item.(string)
        result := machinelearningcompute.(v)
        results = append(results, result)
    }
    return &results
}

func expandArmOperationalizationClusterAutoScaleConfiguration(input []interface{}) *machinelearningcompute.AutoScaleConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    status := v["status"].(string)
    minReplicas := v["min_replicas"].(int)
    maxReplicas := v["max_replicas"].(int)
    targetUtilization := v["target_utilization"].(int)
    refreshPeriodInSeconds := v["refresh_period_in_seconds"].(int)

    result := machinelearningcompute.AutoScaleConfiguration{
        MaxReplicas: utils.Int(maxReplicas),
        MinReplicas: utils.Int(minReplicas),
        RefreshPeriodInSeconds: utils.Int(refreshPeriodInSeconds),
        Status: machinelearningcompute.Status(status),
        TargetUtilization: utils.Int(targetUtilization),
    }
    return &result
}

func expandArmOperationalizationClusterServiceAuthConfiguration(input []interface{}) *machinelearningcompute.ServiceAuthConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    primaryAuthKeyHash := v["primary_auth_key_hash"].(string)
    secondaryAuthKeyHash := v["secondary_auth_key_hash"].(string)

    result := machinelearningcompute.ServiceAuthConfiguration{
        PrimaryAuthKeyHash: utils.String(primaryAuthKeyHash),
        SecondaryAuthKeyHash: utils.String(secondaryAuthKeyHash),
    }
    return &result
}

func expandArmOperationalizationClusterSslConfiguration(input []interface{}) *machinelearningcompute.SslConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    status := v["status"].(string)
    cert := v["cert"].(string)
    key := v["key"].(string)

    result := machinelearningcompute.SslConfiguration{
        Cert: utils.String(cert),
        Key: utils.String(key),
        Status: machinelearningcompute.Status(status),
    }
    return &result
}

func expandArmOperationalizationClusterServicePrincipalProperties(input []interface{}) *machinelearningcompute.ServicePrincipalProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    clientId := v["client_id"].(string)
    secret := v["secret"].(string)

    result := machinelearningcompute.ServicePrincipalProperties{
        ClientID: utils.String(clientId),
        Secret: utils.String(secret),
    }
    return &result
}


func flattenArmOperationalizationClusterAppInsightsCredentials(input *machinelearningcompute.AppInsightsCredentials) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if apiKey := input.ApiKey; apiKey != nil {
        result["api_key"] = *apiKey
    }
    if appId := input.AppID; appId != nil {
        result["app_id"] = *appId
    }

    return []interface{}{result}
}

func flattenArmOperationalizationClusterContainerRegistryProperties(input *machinelearningcompute.ContainerRegistryProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if resourceId := input.ResourceID; resourceId != nil {
        result["resource_id"] = *resourceId
    }

    return []interface{}{result}
}

func flattenArmOperationalizationClusterAcsClusterProperties(input *machinelearningcompute.AcsClusterProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if agentCount := input.AgentCount; agentCount != nil {
        result["agent_count"] = *agentCount
    }
    result["agent_vm_size"] = string(input.AgentVmSize)
    result["orchestrator_properties"] = flattenArmOperationalizationClusterKubernetes(input.OrchestratorProperties)
    if orchestratorType := input.OrchestratorType; orchestratorType != nil {
        result["orchestrator_type"] = *orchestratorType
    }
    result["system_services"] = flattenArmOperationalizationCluster(string(input.SystemServices))

    return []interface{}{result}
}

func flattenArmOperationalizationClusterGlobalServiceConfiguration(input *machinelearningcompute.GlobalServiceConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["additional_properties"] = utils.FlattenKeyValuePairs(input.AdditionalProperties)
    result["auto_scale"] = flattenArmOperationalizationClusterAutoScaleConfiguration(input.AutoScale)
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }
    result["service_auth"] = flattenArmOperationalizationClusterServiceAuthConfiguration(input.ServiceAuth)
    result["ssl"] = flattenArmOperationalizationClusterSslConfiguration(input.Ssl)

    return []interface{}{result}
}

func flattenArmOperationalizationClusterStorageAccountProperties(input *machinelearningcompute.StorageAccountProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if resourceId := input.ResourceID; resourceId != nil {
        result["resource_id"] = *resourceId
    }

    return []interface{}{result}
}

func flattenArmOperationalizationClusterKubernetes(input *machinelearningcompute.Kubernetes) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["service_principal"] = flattenArmOperationalizationClusterServicePrincipalProperties(input.ServicePrincipal)

    return []interface{}{result}
}

func flattenArmOperationalizationCluster(input *[]machinelearningcompute.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}

func flattenArmOperationalizationClusterAutoScaleConfiguration(input *machinelearningcompute.AutoScaleConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if maxReplicas := input.MaxReplicas; maxReplicas != nil {
        result["max_replicas"] = *maxReplicas
    }
    if minReplicas := input.MinReplicas; minReplicas != nil {
        result["min_replicas"] = *minReplicas
    }
    if refreshPeriodInSeconds := input.RefreshPeriodInSeconds; refreshPeriodInSeconds != nil {
        result["refresh_period_in_seconds"] = *refreshPeriodInSeconds
    }
    result["status"] = string(input.Status)
    if targetUtilization := input.TargetUtilization; targetUtilization != nil {
        result["target_utilization"] = *targetUtilization
    }

    return []interface{}{result}
}

func flattenArmOperationalizationClusterServiceAuthConfiguration(input *machinelearningcompute.ServiceAuthConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if primaryAuthKeyHash := input.PrimaryAuthKeyHash; primaryAuthKeyHash != nil {
        result["primary_auth_key_hash"] = *primaryAuthKeyHash
    }
    if secondaryAuthKeyHash := input.SecondaryAuthKeyHash; secondaryAuthKeyHash != nil {
        result["secondary_auth_key_hash"] = *secondaryAuthKeyHash
    }

    return []interface{}{result}
}

func flattenArmOperationalizationClusterSslConfiguration(input *machinelearningcompute.SslConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if cert := input.Cert; cert != nil {
        result["cert"] = *cert
    }
    if key := input.Key; key != nil {
        result["key"] = *key
    }
    result["status"] = string(input.Status)

    return []interface{}{result}
}

func flattenArmOperationalizationClusterServicePrincipalProperties(input *machinelearningcompute.ServicePrincipalProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if clientId := input.ClientID; clientId != nil {
        result["client_id"] = *clientId
    }
    if secret := input.Secret; secret != nil {
        result["secret"] = *secret
    }

    return []interface{}{result}
}
