// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmRunbook() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmRunbookCreate,
        Read: resourceArmRunbookRead,
        Update: resourceArmRunbookUpdate,
        Delete: resourceArmRunbookDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "automation_account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "log_activity_trace": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "log_progress": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "log_verbose": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmRunbookCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).runbookClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    automationAccountName := d.Get("automation_account_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, automationAccountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Runbook %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_runbook", *existing.ID)
        }
    }

    name := d.Get("name").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    description := d.Get("description").(string)
    logActivityTrace := d.Get("log_activity_trace").(int)
    logProgress := d.Get("log_progress").(bool)
    logVerbose := d.Get("log_verbose").(bool)
    t := d.Get("tags").(map[string]interface{})

    parameters := automation.RunbookUpdateParameters{
        Location: utils.String(location),
        Name: utils.String(name),
        RunbookUpdateProperties: &automation.RunbookUpdateProperties{
            Description: utils.String(description),
            LogActivityTrace: utils.Int32(int32(logActivityTrace)),
            LogProgress: utils.Bool(logProgress),
            LogVerbose: utils.Bool(logVerbose),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, automationAccountName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Runbook %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, automationAccountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Runbook %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Runbook %q (Automation Account Name %q / Resource Group %q) ID", name, automationAccountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmRunbookRead(d, meta)
}

func resourceArmRunbookRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).runbookClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    automationAccountName := id.Path["automationAccounts"]
    name := id.Path["runbooks"]

    resp, err := client.Get(ctx, resourceGroup, automationAccountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Runbook %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Runbook %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("automation_account_name", automationAccountName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmRunbookUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).runbookClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    automationAccountName := d.Get("automation_account_name").(string)
    description := d.Get("description").(string)
    logActivityTrace := d.Get("log_activity_trace").(int)
    logProgress := d.Get("log_progress").(bool)
    logVerbose := d.Get("log_verbose").(bool)
    t := d.Get("tags").(map[string]interface{})

    parameters := automation.RunbookUpdateParameters{
        Name: utils.String(name),
        RunbookUpdateProperties: &automation.RunbookUpdateProperties{
            Description: utils.String(description),
            LogActivityTrace: utils.Int32(int32(logActivityTrace)),
            LogProgress: utils.Bool(logProgress),
            LogVerbose: utils.Bool(logVerbose),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, automationAccountName, name, parameters); err != nil {
        return fmt.Errorf("Error updating Runbook %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }

    return resourceArmRunbookRead(d, meta)
}

func resourceArmRunbookDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).runbookClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    automationAccountName := id.Path["automationAccounts"]
    name := id.Path["runbooks"]

    if _, err := client.Delete(ctx, resourceGroup, automationAccountName, name); err != nil {
        return fmt.Errorf("Error deleting Runbook %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }

    return nil
}
