// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmBackend() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmBackendCreate,
        Read: resourceArmBackendRead,
        Update: resourceArmBackendUpdate,
        Delete: resourceArmBackendDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "backendid": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "host": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "skip_certificate_chain_validation": {
                Type: schema.TypeBool,
                Optional: true,
                ForceNew: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmBackendCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backendsClient
    ctx, cancel := timeouts.ForCreate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    backendid := d.Get("backendid").(string)
    name := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, name, backendid)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Backend (Backendid %q / Service Name %q / Resource Group %q): %+v", backendid, name, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_backend", *existing.ID)
        }
    }

    host := d.Get("host").(string)
    skipCertificateChainValidation := d.Get("skip_certificate_chain_validation").(bool)

    parameters := apimanagement.BackendUpdateParameters{
        Host: utils.String(host),
        SkipCertificateChainValidation: utils.Bool(skipCertificateChainValidation),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroupName, name, backendid, parameters); err != nil {
        return fmt.Errorf("Error creating Backend (Backendid %q / Service Name %q / Resource Group %q): %+v", backendid, name, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, name, backendid)
    if err != nil {
        return fmt.Errorf("Error retrieving Backend (Backendid %q / Service Name %q / Resource Group %q): %+v", backendid, name, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Backend (Backendid %q / Service Name %q / Resource Group %q) ID", backendid, name, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmBackendRead(d, meta)
}

func resourceArmBackendRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backendsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["service"]
    backendid := id.Path["backends"]

    resp, err := client.Get(ctx, resourceGroupName, name, backendid)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Backend %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Backend (Backendid %q / Service Name %q / Resource Group %q): %+v", backendid, name, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    d.Set("backendid", backendid)
    d.Set("host", resp.Host)
    d.Set("id", resp.ID)
    d.Set("service_name", name)
    d.Set("skip_certificate_chain_validation", resp.SkipCertificateChainValidation)

    return nil
}

func resourceArmBackendUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backendsClient
    ctx, cancel := timeouts.ForUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

      resourceGroupName := d.Get("resource_group").(string)
    backendid := d.Get("backendid").(string)
    host := d.Get("host").(string)
    name := d.Get("service_name").(string)
    skipCertificateChainValidation := d.Get("skip_certificate_chain_validation").(bool)

    parameters := apimanagement.BackendUpdateParameters{
        Host: utils.String(host),
        SkipCertificateChainValidation: utils.Bool(skipCertificateChainValidation),
    }


    if _, err := client.Update(ctx, resourceGroupName, name, backendid, parameters); err != nil {
        return fmt.Errorf("Error updating Backend (Backendid %q / Service Name %q / Resource Group %q): %+v", backendid, name, resourceGroupName, err)
    }

    return resourceArmBackendRead(d, meta)
}

func resourceArmBackendDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backendsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["service"]
    backendid := id.Path["backends"]

    if _, err := client.Delete(ctx, resourceGroupName, name, backendid); err != nil {
        return fmt.Errorf("Error deleting Backend (Backendid %q / Service Name %q / Resource Group %q): %+v", backendid, name, resourceGroupName, err)
    }

    return nil
}
