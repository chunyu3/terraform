// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmVirtualWan() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmVirtualWanCreateUpdate,
        Read: resourceArmVirtualWanRead,
        Update: resourceArmVirtualWanCreateUpdate,
        Delete: resourceArmVirtualWanDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "virtual_wanname": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "allow_branch_to_branch_traffic": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "allow_vnet_to_vnet_traffic": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "disable_vpn_encryption": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "office365local_breakout_category": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.Optimize),
                    string(network.OptimizeAndAllow),
                    string(network.All),
                    string(network.None),
                }, false),
                Default: string(network.Optimize),
            },

            "p2svpn_server_configurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "p2svpn_server_config_radius_client_root_certificates": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "p2svpn_server_config_radius_server_root_certificates": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "p2svpn_server_config_vpn_client_revoked_certificates": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "p2svpn_server_config_vpn_client_root_certificates": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "radius_server_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "radius_server_secret": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "vpn_client_ipsec_policies": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "dh_group": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.None),
                                            string(network.DHGroup1),
                                            string(network.DHGroup2),
                                            string(network.DHGroup14),
                                            string(network.DHGroup2048),
                                            string(network.ECP256),
                                            string(network.ECP384),
                                            string(network.DHGroup24),
                                        }, false),
                                    },
                                    "ike_encryption": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.DES),
                                            string(network.DES3),
                                            string(network.AES128),
                                            string(network.AES192),
                                            string(network.AES256),
                                            string(network.GCMAES256),
                                            string(network.GCMAES128),
                                        }, false),
                                    },
                                    "ike_integrity": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.MD5),
                                            string(network.SHA1),
                                            string(network.SHA256),
                                            string(network.SHA384),
                                            string(network.GCMAES256),
                                            string(network.GCMAES128),
                                        }, false),
                                    },
                                    "ipsec_encryption": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.None),
                                            string(network.DES),
                                            string(network.DES3),
                                            string(network.AES128),
                                            string(network.AES192),
                                            string(network.AES256),
                                            string(network.GCMAES128),
                                            string(network.GCMAES192),
                                            string(network.GCMAES256),
                                        }, false),
                                    },
                                    "ipsec_integrity": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.MD5),
                                            string(network.SHA1),
                                            string(network.SHA256),
                                            string(network.GCMAES128),
                                            string(network.GCMAES192),
                                            string(network.GCMAES256),
                                        }, false),
                                    },
                                    "pfs_group": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.None),
                                            string(network.PFS1),
                                            string(network.PFS2),
                                            string(network.PFS2048),
                                            string(network.ECP256),
                                            string(network.ECP384),
                                            string(network.PFS24),
                                            string(network.PFS14),
                                            string(network.PFSMM),
                                        }, false),
                                    },
                                    "sa_data_size_kilobytes": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "sa_life_time_seconds": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                },
                            },
                        },
                        "vpn_protocols": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                                ValidateFunc: validation.StringInSlice([]string{
                                    string(network.IkeV2),
                                    string(network.OpenVPN),
                               }, false),
                            },
                        },
                    },
                },
            },

            "security_provider_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "virtual_hubs": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "vpn_sites": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmVirtualWanCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualWansClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    virtualWanname := d.Get("virtual_wanname").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, virtualWanname)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Virtual Wan (Virtual Wanname %q / Resource Group %q): %+v", virtualWanname, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_virtual_wan", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    allowBranchToBranchTraffic := d.Get("allow_branch_to_branch_traffic").(bool)
    allowVnetToVnetTraffic := d.Get("allow_vnet_to_vnet_traffic").(bool)
    disableVpnEncryption := d.Get("disable_vpn_encryption").(bool)
    office365localBreakoutCategory := d.Get("office365local_breakout_category").(string)
    p2svpnServerConfigurations := d.Get("p2svpn_server_configurations").([]interface{})
    securityProviderName := d.Get("security_provider_name").(string)
    t := d.Get("tags").(map[string]interface{})

    wanparameters := network.VirtualWAN{
        ID: utils.String(id),
        Location: utils.String(location),
        VirtualWanProperties: &network.VirtualWanProperties{
            AllowBranchToBranchTraffic: utils.Bool(allowBranchToBranchTraffic),
            AllowVnetToVnetTraffic: utils.Bool(allowVnetToVnetTraffic),
            DisableVpnEncryption: utils.Bool(disableVpnEncryption),
            Office365localBreakoutCategory: network.OfficeTrafficCategory(office365localBreakoutCategory),
            P2svpnServerConfigurations: expandArmVirtualWanP2SVpnServerConfiguration(p2svpnServerConfigurations),
            SecurityProviderName: utils.String(securityProviderName),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, virtualWanname, wanparameters)
    if err != nil {
        return fmt.Errorf("Error creating Virtual Wan (Virtual Wanname %q / Resource Group %q): %+v", virtualWanname, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Virtual Wan (Virtual Wanname %q / Resource Group %q): %+v", virtualWanname, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, virtualWanname)
    if err != nil {
        return fmt.Errorf("Error retrieving Virtual Wan (Virtual Wanname %q / Resource Group %q): %+v", virtualWanname, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Virtual Wan (Virtual Wanname %q / Resource Group %q) ID", virtualWanname, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmVirtualWanRead(d, meta)
}

func resourceArmVirtualWanRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualWansClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    virtualWanname := id.Path["virtualWans"]

    resp, err := client.Get(ctx, resourceGroup, virtualWanname)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Virtual Wan %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Virtual Wan (Virtual Wanname %q / Resource Group %q): %+v", virtualWanname, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if virtualWanProperties := resp.VirtualWanProperties; virtualWanProperties != nil {
        d.Set("allow_branch_to_branch_traffic", virtualWanProperties.AllowBranchToBranchTraffic)
        d.Set("allow_vnet_to_vnet_traffic", virtualWanProperties.AllowVnetToVnetTraffic)
        d.Set("disable_vpn_encryption", virtualWanProperties.DisableVpnEncryption)
        d.Set("office365local_breakout_category", string(virtualWanProperties.Office365localBreakoutCategory))
        if err := d.Set("p2svpn_server_configurations", flattenArmVirtualWanP2SVpnServerConfiguration(virtualWanProperties.P2svpnServerConfigurations)); err != nil {
            return fmt.Errorf("Error setting `p2svpn_server_configurations`: %+v", err)
        }
        d.Set("provisioning_state", string(virtualWanProperties.ProvisioningState))
        d.Set("security_provider_name", virtualWanProperties.SecurityProviderName)
        if err := d.Set("virtual_hubs", flattenArmVirtualWanSubResource(virtualWanProperties.VirtualHubs)); err != nil {
            return fmt.Errorf("Error setting `virtual_hubs`: %+v", err)
        }
        if err := d.Set("vpn_sites", flattenArmVirtualWanSubResource(virtualWanProperties.VpnSites)); err != nil {
            return fmt.Errorf("Error setting `vpn_sites`: %+v", err)
        }
    }
    d.Set("etag", resp.Etag)
    d.Set("type", resp.Type)
    d.Set("virtual_wanname", virtualWanname)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmVirtualWanDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualWansClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    virtualWanname := id.Path["virtualWans"]

    future, err := client.Delete(ctx, resourceGroup, virtualWanname)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Virtual Wan (Virtual Wanname %q / Resource Group %q): %+v", virtualWanname, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Virtual Wan (Virtual Wanname %q / Resource Group %q): %+v", virtualWanname, resourceGroup, err)
        }
    }

    return nil
}

func expandArmVirtualWanP2SVpnServerConfiguration(input []interface{}) *[]network.P2SVpnServerConfiguration {
    results := make([]network.P2SVpnServerConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        vpnProtocols := v["vpn_protocols"].([]interface{})
        p2svpnServerConfigVpnClientRootCertificates := v["p2svpn_server_config_vpn_client_root_certificates"].([]interface{})
        p2svpnServerConfigVpnClientRevokedCertificates := v["p2svpn_server_config_vpn_client_revoked_certificates"].([]interface{})
        p2svpnServerConfigRadiusServerRootCertificates := v["p2svpn_server_config_radius_server_root_certificates"].([]interface{})
        p2svpnServerConfigRadiusClientRootCertificates := v["p2svpn_server_config_radius_client_root_certificates"].([]interface{})
        vpnClientIpsecPolicies := v["vpn_client_ipsec_policies"].([]interface{})
        radiusServerAddress := v["radius_server_address"].(string)
        radiusServerSecret := v["radius_server_secret"].(string)
        etag := v["etag"].(string)
        name := v["name"].(string)

        result := network.P2SVpnServerConfiguration{
            ID: utils.String(id),
            Name: utils.String(name),
            P2SVpnServerConfigurationProperties: &network.P2SVpnServerConfigurationProperties{
                Etag: utils.String(etag),
                Name: utils.String(name),
                P2svpnServerConfigRadiusClientRootCertificates: expandArmVirtualWanP2SVpnServerConfigRadiusClientRootCertificate(p2svpnServerConfigRadiusClientRootCertificates),
                P2svpnServerConfigRadiusServerRootCertificates: expandArmVirtualWanP2SVpnServerConfigRadiusServerRootCertificate(p2svpnServerConfigRadiusServerRootCertificates),
                P2svpnServerConfigVpnClientRevokedCertificates: expandArmVirtualWanP2SVpnServerConfigVpnClientRevokedCertificate(p2svpnServerConfigVpnClientRevokedCertificates),
                P2svpnServerConfigVpnClientRootCertificates: expandArmVirtualWanP2SVpnServerConfigVpnClientRootCertificate(p2svpnServerConfigVpnClientRootCertificates),
                RadiusServerAddress: utils.String(radiusServerAddress),
                RadiusServerSecret: utils.String(radiusServerSecret),
                VpnClientIpsecPolicies: expandArmVirtualWanIpsecPolicy(vpnClientIpsecPolicies),
                VpnProtocols: expandArmVirtualWan(vpnProtocols),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualWanP2SVpnServerConfigRadiusClientRootCertificate(input []interface{}) *[]network.P2SVpnServerConfigRadiusClientRootCertificate {
    results := make([]network.P2SVpnServerConfigRadiusClientRootCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.P2SVpnServerConfigRadiusClientRootCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualWanP2SVpnServerConfigRadiusServerRootCertificate(input []interface{}) *[]network.P2SVpnServerConfigRadiusServerRootCertificate {
    results := make([]network.P2SVpnServerConfigRadiusServerRootCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.P2SVpnServerConfigRadiusServerRootCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualWanP2SVpnServerConfigVpnClientRevokedCertificate(input []interface{}) *[]network.P2SVpnServerConfigVpnClientRevokedCertificate {
    results := make([]network.P2SVpnServerConfigVpnClientRevokedCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.P2SVpnServerConfigVpnClientRevokedCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualWanP2SVpnServerConfigVpnClientRootCertificate(input []interface{}) *[]network.P2SVpnServerConfigVpnClientRootCertificate {
    results := make([]network.P2SVpnServerConfigVpnClientRootCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.P2SVpnServerConfigVpnClientRootCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualWanIpsecPolicy(input []interface{}) *[]network.IpsecPolicy {
    results := make([]network.IpsecPolicy, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        saLifeTimeSeconds := v["sa_life_time_seconds"].(int)
        saDataSizeKilobytes := v["sa_data_size_kilobytes"].(int)
        ipsecEncryption := v["ipsec_encryption"].(string)
        ipsecIntegrity := v["ipsec_integrity"].(string)
        ikeEncryption := v["ike_encryption"].(string)
        ikeIntegrity := v["ike_integrity"].(string)
        dhGroup := v["dh_group"].(string)
        pfsGroup := v["pfs_group"].(string)

        result := network.IpsecPolicy{
            DhGroup: network.DhGroup(dhGroup),
            IkeEncryption: network.IkeEncryption(ikeEncryption),
            IkeIntegrity: network.IkeIntegrity(ikeIntegrity),
            IpsecEncryption: network.IpsecEncryption(ipsecEncryption),
            IpsecIntegrity: network.IpsecIntegrity(ipsecIntegrity),
            PfsGroup: network.PfsGroup(pfsGroup),
            SaDataSizeKilobytes: utils.Int32(int32(saDataSizeKilobytes)),
            SaLifeTimeSeconds: utils.Int32(int32(saLifeTimeSeconds)),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualWan(input []interface{}) *[]network. {
    results := make([]network., 0)
    for _, item := range input {
        v := item.(string)
        result := network.(v)
        results = append(results, result)
    }
    return &results
}


func flattenArmVirtualWanP2SVpnServerConfiguration(input *[]network.P2SVpnServerConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if p2SVpnServerConfigurationProperties := item.P2SVpnServerConfigurationProperties; p2SVpnServerConfigurationProperties != nil {
            if name := p2SVpnServerConfigurationProperties.Name; name != nil {
                v["name"] = *name
            }
            if etag := p2SVpnServerConfigurationProperties.Etag; etag != nil {
                v["etag"] = *etag
            }
            v["p2svpn_server_config_radius_client_root_certificates"] = flattenArmVirtualWanP2SVpnServerConfigRadiusClientRootCertificate(p2SVpnServerConfigurationProperties.P2svpnServerConfigRadiusClientRootCertificates)
            v["p2svpn_server_config_radius_server_root_certificates"] = flattenArmVirtualWanP2SVpnServerConfigRadiusServerRootCertificate(p2SVpnServerConfigurationProperties.P2svpnServerConfigRadiusServerRootCertificates)
            v["p2svpn_server_config_vpn_client_revoked_certificates"] = flattenArmVirtualWanP2SVpnServerConfigVpnClientRevokedCertificate(p2SVpnServerConfigurationProperties.P2svpnServerConfigVpnClientRevokedCertificates)
            v["p2svpn_server_config_vpn_client_root_certificates"] = flattenArmVirtualWanP2SVpnServerConfigVpnClientRootCertificate(p2SVpnServerConfigurationProperties.P2svpnServerConfigVpnClientRootCertificates)
            if radiusServerAddress := p2SVpnServerConfigurationProperties.RadiusServerAddress; radiusServerAddress != nil {
                v["radius_server_address"] = *radiusServerAddress
            }
            if radiusServerSecret := p2SVpnServerConfigurationProperties.RadiusServerSecret; radiusServerSecret != nil {
                v["radius_server_secret"] = *radiusServerSecret
            }
            v["vpn_client_ipsec_policies"] = flattenArmVirtualWanIpsecPolicy(p2SVpnServerConfigurationProperties.VpnClientIpsecPolicies)
            v["vpn_protocols"] = flattenArmVirtualWan(string(p2SVpnServerConfigurationProperties.VpnProtocols))
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualWanSubResource(input *[]network.SubResource) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}

func flattenArmVirtualWanP2SVpnServerConfigRadiusClientRootCertificate(input *[]network.P2SVpnServerConfigRadiusClientRootCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualWanP2SVpnServerConfigRadiusServerRootCertificate(input *[]network.P2SVpnServerConfigRadiusServerRootCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualWanP2SVpnServerConfigVpnClientRevokedCertificate(input *[]network.P2SVpnServerConfigVpnClientRevokedCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualWanP2SVpnServerConfigVpnClientRootCertificate(input *[]network.P2SVpnServerConfigVpnClientRootCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualWanIpsecPolicy(input *[]network.IpsecPolicy) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["dh_group"] = string(item.DhGroup)
        v["ike_encryption"] = string(item.IkeEncryption)
        v["ike_integrity"] = string(item.IkeIntegrity)
        v["ipsec_encryption"] = string(item.IpsecEncryption)
        v["ipsec_integrity"] = string(item.IpsecIntegrity)
        v["pfs_group"] = string(item.PfsGroup)
        if saDataSizeKilobytes := item.SaDataSizeKilobytes; saDataSizeKilobytes != nil {
            v["sa_data_size_kilobytes"] = int(*saDataSizeKilobytes)
        }
        if saLifeTimeSeconds := item.SaLifeTimeSeconds; saLifeTimeSeconds != nil {
            v["sa_life_time_seconds"] = int(*saLifeTimeSeconds)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualWan(input *[]network.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}
