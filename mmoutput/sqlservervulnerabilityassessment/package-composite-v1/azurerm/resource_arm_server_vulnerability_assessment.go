// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmServerVulnerabilityAssessment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmServerVulnerabilityAssessmentCreateUpdate,
        Read: resourceArmServerVulnerabilityAssessmentRead,
        Update: resourceArmServerVulnerabilityAssessmentCreateUpdate,
        Delete: resourceArmServerVulnerabilityAssessmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "server_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "storage_container_path": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "vulnerability_assessment_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "recurring_scans": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "email_subscription_admins": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "emails": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "is_enabled": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                    },
                },
            },

            "storage_account_access_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "storage_container_sas_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmServerVulnerabilityAssessmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serverVulnerabilityAssessmentsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    serverName := d.Get("server_name").(string)
    vulnerabilityAssessmentName := d.Get("vulnerability_assessment_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serverName, vulnerabilityAssessmentName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Server Vulnerability Assessment (Vulnerability Assessment Name %q / Server Name %q / Resource Group %q): %+v", vulnerabilityAssessmentName, serverName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_server_vulnerability_assessment", *existing.ID)
        }
    }

    recurringScans := d.Get("recurring_scans").([]interface{})
    storageAccountAccessKey := d.Get("storage_account_access_key").(string)
    storageContainerPath := d.Get("storage_container_path").(string)
    storageContainerSasKey := d.Get("storage_container_sas_key").(string)

    parameters := sql.ServerVulnerabilityAssessment{
        ServerVulnerabilityAssessmentProperties: &sql.ServerVulnerabilityAssessmentProperties{
            RecurringScans: expandArmServerVulnerabilityAssessmentVulnerabilityAssessmentRecurringScansProperties(recurringScans),
            StorageAccountAccessKey: utils.String(storageAccountAccessKey),
            StorageContainerPath: utils.String(storageContainerPath),
            StorageContainerSasKey: utils.String(storageContainerSasKey),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, serverName, vulnerabilityAssessmentName, parameters); err != nil {
        return fmt.Errorf("Error creating Server Vulnerability Assessment (Vulnerability Assessment Name %q / Server Name %q / Resource Group %q): %+v", vulnerabilityAssessmentName, serverName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serverName, vulnerabilityAssessmentName)
    if err != nil {
        return fmt.Errorf("Error retrieving Server Vulnerability Assessment (Vulnerability Assessment Name %q / Server Name %q / Resource Group %q): %+v", vulnerabilityAssessmentName, serverName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Server Vulnerability Assessment (Vulnerability Assessment Name %q / Server Name %q / Resource Group %q) ID", vulnerabilityAssessmentName, serverName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmServerVulnerabilityAssessmentRead(d, meta)
}

func resourceArmServerVulnerabilityAssessmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serverVulnerabilityAssessmentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    vulnerabilityAssessmentName := id.Path["vulnerabilityAssessments"]

    resp, err := client.Get(ctx, resourceGroup, serverName, vulnerabilityAssessmentName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Server Vulnerability Assessment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Server Vulnerability Assessment (Vulnerability Assessment Name %q / Server Name %q / Resource Group %q): %+v", vulnerabilityAssessmentName, serverName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if serverVulnerabilityAssessmentProperties := resp.ServerVulnerabilityAssessmentProperties; serverVulnerabilityAssessmentProperties != nil {
        if err := d.Set("recurring_scans", flattenArmServerVulnerabilityAssessmentVulnerabilityAssessmentRecurringScansProperties(serverVulnerabilityAssessmentProperties.RecurringScans)); err != nil {
            return fmt.Errorf("Error setting `recurring_scans`: %+v", err)
        }
        d.Set("storage_account_access_key", serverVulnerabilityAssessmentProperties.StorageAccountAccessKey)
        d.Set("storage_container_path", serverVulnerabilityAssessmentProperties.StorageContainerPath)
        d.Set("storage_container_sas_key", serverVulnerabilityAssessmentProperties.StorageContainerSasKey)
    }
    d.Set("server_name", serverName)
    d.Set("type", resp.Type)
    d.Set("vulnerability_assessment_name", vulnerabilityAssessmentName)

    return nil
}


func resourceArmServerVulnerabilityAssessmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serverVulnerabilityAssessmentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    vulnerabilityAssessmentName := id.Path["vulnerabilityAssessments"]

    if _, err := client.Delete(ctx, resourceGroup, serverName, vulnerabilityAssessmentName); err != nil {
        return fmt.Errorf("Error deleting Server Vulnerability Assessment (Vulnerability Assessment Name %q / Server Name %q / Resource Group %q): %+v", vulnerabilityAssessmentName, serverName, resourceGroup, err)
    }

    return nil
}

func expandArmServerVulnerabilityAssessmentVulnerabilityAssessmentRecurringScansProperties(input []interface{}) *sql.VulnerabilityAssessmentRecurringScansProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    isEnabled := v["is_enabled"].(bool)
    emailSubscriptionAdmins := v["email_subscription_admins"].(bool)
    emails := v["emails"].([]interface{})

    result := sql.VulnerabilityAssessmentRecurringScansProperties{
        EmailSubscriptionAdmins: utils.Bool(emailSubscriptionAdmins),
        Emails: utils.ExpandStringSlice(emails),
        IsEnabled: utils.Bool(isEnabled),
    }
    return &result
}


func flattenArmServerVulnerabilityAssessmentVulnerabilityAssessmentRecurringScansProperties(input *sql.VulnerabilityAssessmentRecurringScansProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if emailSubscriptionAdmins := input.EmailSubscriptionAdmins; emailSubscriptionAdmins != nil {
        result["email_subscription_admins"] = *emailSubscriptionAdmins
    }
    result["emails"] = utils.FlattenStringSlice(input.Emails)
    if isEnabled := input.IsEnabled; isEnabled != nil {
        result["is_enabled"] = *isEnabled
    }

    return []interface{}{result}
}
