// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmNetwork() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmNetworkCreateUpdate,
        Read: resourceArmNetworkRead,
        Update: resourceArmNetworkCreateUpdate,
        Delete: resourceArmNetworkDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "network_resource_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "status_details": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmNetworkCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).networkClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    networkResourceName := d.Get("network_resource_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, networkResourceName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Network (Network Resource Name %q / Resource Group %q): %+v", networkResourceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_network", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    description := d.Get("description").(string)
    t := d.Get("tags").(map[string]interface{})

    networkResourceDescription := servicefabricmeshrestapis.NetworkResourceDescription{
        Location: utils.String(location),
        NetworkResourceProperties: &servicefabricmeshrestapis.NetworkResourceProperties{
            Description: utils.String(description),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Create(ctx, resourceGroup, networkResourceName, networkResourceDescription); err != nil {
        return fmt.Errorf("Error creating Network (Network Resource Name %q / Resource Group %q): %+v", networkResourceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, networkResourceName)
    if err != nil {
        return fmt.Errorf("Error retrieving Network (Network Resource Name %q / Resource Group %q): %+v", networkResourceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Network (Network Resource Name %q / Resource Group %q) ID", networkResourceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmNetworkRead(d, meta)
}

func resourceArmNetworkRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).networkClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    networkResourceName := id.Path["networks"]

    resp, err := client.Get(ctx, resourceGroup, networkResourceName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Network %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Network (Network Resource Name %q / Resource Group %q): %+v", networkResourceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if networkResourceProperties := resp.NetworkResourceProperties; networkResourceProperties != nil {
        d.Set("description", networkResourceProperties.Description)
        d.Set("provisioning_state", networkResourceProperties.ProvisioningState)
        d.Set("status", string(networkResourceProperties.Status))
        d.Set("status_details", networkResourceProperties.StatusDetails)
    }
    d.Set("network_resource_name", networkResourceName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmNetworkDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).networkClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    networkResourceName := id.Path["networks"]

    if _, err := client.Delete(ctx, resourceGroup, networkResourceName); err != nil {
        return fmt.Errorf("Error deleting Network (Network Resource Name %q / Resource Group %q): %+v", networkResourceName, resourceGroup, err)
    }

    return nil
}
