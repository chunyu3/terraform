// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmRedisFirewallRule() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmRedisFirewallRuleCreateUpdate,
        Read: resourceArmRedisFirewallRuleRead,
        Update: resourceArmRedisFirewallRuleCreateUpdate,
        Delete: resourceArmRedisFirewallRuleDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "cache_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "end_ip": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "start_ip": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmRedisFirewallRuleCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).redisFirewallRuleClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    cacheName := d.Get("cache_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, cacheName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Redis Firewall Rule %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_redis_firewall_rule", *existing.ID)
        }
    }

    endIp := d.Get("end_ip").(string)
    startIp := d.Get("start_ip").(string)

    parameters := redis.FirewallRule{
        FirewallRuleProperties: &redis.FirewallRuleProperties{
            EndIP: utils.String(endIp),
            StartIP: utils.String(startIp),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, cacheName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Redis Firewall Rule %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, cacheName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Redis Firewall Rule %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Redis Firewall Rule %q (Cache Name %q / Resource Group %q) ID", name, cacheName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmRedisFirewallRuleRead(d, meta)
}

func resourceArmRedisFirewallRuleRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).redisFirewallRuleClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    cacheName := id.Path["Redis"]
    name := id.Path["firewallRules"]

    resp, err := client.Get(ctx, resourceGroup, cacheName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Redis Firewall Rule %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Redis Firewall Rule %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("cache_name", cacheName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmRedisFirewallRuleDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).redisFirewallRuleClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    cacheName := id.Path["Redis"]
    name := id.Path["firewallRules"]

    if _, err := client.Delete(ctx, resourceGroup, cacheName, name); err != nil {
        return fmt.Errorf("Error deleting Redis Firewall Rule %q (Cache Name %q / Resource Group %q): %+v", name, cacheName, resourceGroup, err)
    }

    return nil
}
