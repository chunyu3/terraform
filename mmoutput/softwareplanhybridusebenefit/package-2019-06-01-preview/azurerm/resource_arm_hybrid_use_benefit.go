// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmHybridUseBenefit() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmHybridUseBenefitCreate,
        Read: resourceArmHybridUseBenefitRead,
        Update: resourceArmHybridUseBenefitUpdate,
        Delete: resourceArmHybridUseBenefitDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "plan_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "scope": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "sku": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmHybridUseBenefitCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).hybridUseBenefitClient
    ctx := meta.(*ArmClient).StopContext

    planID := d.Get("plan_id").(string)
    scope := d.Get("scope").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, scope, planID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Hybrid Use Benefit (Plan %q / Scope %q): %+v", planID, scope, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_hybrid_use_benefit", *existing.ID)
        }
    }

    sku := d.Get("sku").([]interface{})

    body := softwareplan.HybridUseBenefitModel{
        Sku: expandArmHybridUseBenefitSku(sku),
    }


    if _, err := client.Create(ctx, scope, planID, body); err != nil {
        return fmt.Errorf("Error creating Hybrid Use Benefit (Plan %q / Scope %q): %+v", planID, scope, err)
    }


    resp, err := client.Get(ctx, scope, planID)
    if err != nil {
        return fmt.Errorf("Error retrieving Hybrid Use Benefit (Plan %q / Scope %q): %+v", planID, scope, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Hybrid Use Benefit (Plan %q / Scope %q) ID", planID, scope)
    }
    d.SetId(*resp.ID)

    return resourceArmHybridUseBenefitRead(d, meta)
}

func resourceArmHybridUseBenefitRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).hybridUseBenefitClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    planID := id.Path["hybridUseBenefits"]

    resp, err := client.Get(ctx, scope, planID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Hybrid Use Benefit %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Hybrid Use Benefit (Plan %q / Scope %q): %+v", planID, scope, err)
    }


    d.Set("name", resp.Name)
    d.Set("etag", int(*resp.Etag))
    d.Set("plan_id", planID)
    d.Set("scope", scope)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmHybridUseBenefitUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).hybridUseBenefitClient
    ctx := meta.(*ArmClient).StopContext

    planID := d.Get("plan_id").(string)
    scope := d.Get("scope").(string)
    sku := d.Get("sku").([]interface{})

    body := softwareplan.HybridUseBenefitModel{
        Sku: expandArmHybridUseBenefitSku(sku),
    }


    if _, err := client.Update(ctx, scope, planID, body); err != nil {
        return fmt.Errorf("Error updating Hybrid Use Benefit (Plan %q / Scope %q): %+v", planID, scope, err)
    }

    return resourceArmHybridUseBenefitRead(d, meta)
}

func resourceArmHybridUseBenefitDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).hybridUseBenefitClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    planID := id.Path["hybridUseBenefits"]

    if _, err := client.Delete(ctx, scope, planID); err != nil {
        return fmt.Errorf("Error deleting Hybrid Use Benefit (Plan %q / Scope %q): %+v", planID, scope, err)
    }

    return nil
}

func expandArmHybridUseBenefitSku(input []interface{}) *softwareplan.Sku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)

    result := softwareplan.Sku{
        Name: utils.String(name),
    }
    return &result
}
