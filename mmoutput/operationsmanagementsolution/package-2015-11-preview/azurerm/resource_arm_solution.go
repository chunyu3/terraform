// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmSolution() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmSolutionCreate,
        Read: resourceArmSolutionRead,
        Update: resourceArmSolutionUpdate,
        Delete: resourceArmSolutionDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "solution_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "workspace_resource_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "contained_resources": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "plan": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "product": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "promotion_code": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "publisher": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "referenced_resources": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmSolutionCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).solutionsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    solutionName := d.Get("solution_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, solutionName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Solution (Solution Name %q / Resource Group %q): %+v", solutionName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_solution", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    containedResources := d.Get("contained_resources").([]interface{})
    plan := d.Get("plan").([]interface{})
    referencedResources := d.Get("referenced_resources").([]interface{})
    workspaceResourceId := d.Get("workspace_resource_id").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := operationsmanagement.Solution{
        Location: utils.String(location),
        Plan: expandArmSolutionSolutionPlan(plan),
        SolutionProperties: &operationsmanagement.SolutionProperties{
            ContainedResources: utils.ExpandStringSlice(containedResources),
            ReferencedResources: utils.ExpandStringSlice(referencedResources),
            WorkspaceResourceID: utils.String(workspaceResourceId),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, solutionName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Solution (Solution Name %q / Resource Group %q): %+v", solutionName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Solution (Solution Name %q / Resource Group %q): %+v", solutionName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, solutionName)
    if err != nil {
        return fmt.Errorf("Error retrieving Solution (Solution Name %q / Resource Group %q): %+v", solutionName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Solution (Solution Name %q / Resource Group %q) ID", solutionName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmSolutionRead(d, meta)
}

func resourceArmSolutionRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).solutionsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    solutionName := id.Path["solutions"]

    resp, err := client.Get(ctx, resourceGroup, solutionName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Solution %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Solution (Solution Name %q / Resource Group %q): %+v", solutionName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if solutionProperties := resp.SolutionProperties; solutionProperties != nil {
        d.Set("contained_resources", utils.FlattenStringSlice(solutionProperties.ContainedResources))
        d.Set("provisioning_state", solutionProperties.ProvisioningState)
        d.Set("referenced_resources", utils.FlattenStringSlice(solutionProperties.ReferencedResources))
        d.Set("workspace_resource_id", solutionProperties.WorkspaceResourceID)
    }
    if err := d.Set("plan", flattenArmSolutionSolutionPlan(resp.Plan)); err != nil {
        return fmt.Errorf("Error setting `plan`: %+v", err)
    }
    d.Set("solution_name", solutionName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmSolutionUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).solutionsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    containedResources := d.Get("contained_resources").([]interface{})
    plan := d.Get("plan").([]interface{})
    referencedResources := d.Get("referenced_resources").([]interface{})
    solutionName := d.Get("solution_name").(string)
    workspaceResourceId := d.Get("workspace_resource_id").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := operationsmanagement.Solution{
        Location: utils.String(location),
        Plan: expandArmSolutionSolutionPlan(plan),
        SolutionProperties: &operationsmanagement.SolutionProperties{
            ContainedResources: utils.ExpandStringSlice(containedResources),
            ReferencedResources: utils.ExpandStringSlice(referencedResources),
            WorkspaceResourceID: utils.String(workspaceResourceId),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, solutionName, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Solution (Solution Name %q / Resource Group %q): %+v", solutionName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Solution (Solution Name %q / Resource Group %q): %+v", solutionName, resourceGroup, err)
    }

    return resourceArmSolutionRead(d, meta)
}

func resourceArmSolutionDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).solutionsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    solutionName := id.Path["solutions"]

    future, err := client.Delete(ctx, resourceGroup, solutionName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Solution (Solution Name %q / Resource Group %q): %+v", solutionName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Solution (Solution Name %q / Resource Group %q): %+v", solutionName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmSolutionSolutionPlan(input []interface{}) *operationsmanagement.SolutionPlan {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    publisher := v["publisher"].(string)
    promotionCode := v["promotion_code"].(string)
    product := v["product"].(string)

    result := operationsmanagement.SolutionPlan{
        Name: utils.String(name),
        Product: utils.String(product),
        PromotionCode: utils.String(promotionCode),
        Publisher: utils.String(publisher),
    }
    return &result
}


func flattenArmSolutionSolutionPlan(input *operationsmanagement.SolutionPlan) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if product := input.Product; product != nil {
        result["product"] = *product
    }
    if promotionCode := input.PromotionCode; promotionCode != nil {
        result["promotion_code"] = *promotionCode
    }
    if publisher := input.Publisher; publisher != nil {
        result["publisher"] = *publisher
    }

    return []interface{}{result}
}
