// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDatabaseVulnerabilityAssessmentRuleBaseline() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDatabaseVulnerabilityAssessmentRuleBaselineCreateUpdate,
        Read: resourceArmDatabaseVulnerabilityAssessmentRuleBaselineRead,
        Update: resourceArmDatabaseVulnerabilityAssessmentRuleBaselineCreateUpdate,
        Delete: resourceArmDatabaseVulnerabilityAssessmentRuleBaselineDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "baseline_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "baseline_results": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "result": {
                            Type: schema.TypeList,
                            Required: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                    },
                },
            },

            "database_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "rule_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "server_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "vulnerability_assessment_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmDatabaseVulnerabilityAssessmentRuleBaselineCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databaseVulnerabilityAssessmentRuleBaselinesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    baselineName := d.Get("baseline_name").(string)
    databaseName := d.Get("database_name").(string)
    ruleID := d.Get("rule_id").(string)
    serverName := d.Get("server_name").(string)
    vulnerabilityAssessmentName := d.Get("vulnerability_assessment_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serverName, databaseName, vulnerabilityAssessmentName, ruleID, baselineName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Database Vulnerability Assessment Rule Baseline (Baseline Name %q / Rule %q / Vulnerability Assessment Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", baselineName, ruleID, vulnerabilityAssessmentName, databaseName, serverName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_database_vulnerability_assessment_rule_baseline", *existing.ID)
        }
    }

    baselineResults := d.Get("baseline_results").([]interface{})

    parameters := sql.DatabaseVulnerabilityAssessmentRuleBaseline{
        DatabaseVulnerabilityAssessmentRuleBaselineProperties: &sql.DatabaseVulnerabilityAssessmentRuleBaselineProperties{
            BaselineResults: expandArmDatabaseVulnerabilityAssessmentRuleBaselineDatabaseVulnerabilityAssessmentRuleBaselineItem(baselineResults),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, serverName, databaseName, vulnerabilityAssessmentName, ruleID, baselineName, parameters); err != nil {
        return fmt.Errorf("Error creating Database Vulnerability Assessment Rule Baseline (Baseline Name %q / Rule %q / Vulnerability Assessment Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", baselineName, ruleID, vulnerabilityAssessmentName, databaseName, serverName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serverName, databaseName, vulnerabilityAssessmentName, ruleID, baselineName)
    if err != nil {
        return fmt.Errorf("Error retrieving Database Vulnerability Assessment Rule Baseline (Baseline Name %q / Rule %q / Vulnerability Assessment Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", baselineName, ruleID, vulnerabilityAssessmentName, databaseName, serverName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Database Vulnerability Assessment Rule Baseline (Baseline Name %q / Rule %q / Vulnerability Assessment Name %q / Database Name %q / Server Name %q / Resource Group %q) ID", baselineName, ruleID, vulnerabilityAssessmentName, databaseName, serverName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmDatabaseVulnerabilityAssessmentRuleBaselineRead(d, meta)
}

func resourceArmDatabaseVulnerabilityAssessmentRuleBaselineRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databaseVulnerabilityAssessmentRuleBaselinesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    databaseName := id.Path["databases"]
    vulnerabilityAssessmentName := id.Path["vulnerabilityAssessments"]
    ruleID := id.Path["rules"]
    baselineName := id.Path["baselines"]

    resp, err := client.Get(ctx, resourceGroup, serverName, databaseName, vulnerabilityAssessmentName, ruleID, baselineName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Database Vulnerability Assessment Rule Baseline %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Database Vulnerability Assessment Rule Baseline (Baseline Name %q / Rule %q / Vulnerability Assessment Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", baselineName, ruleID, vulnerabilityAssessmentName, databaseName, serverName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("baseline_name", baselineName)
    if databaseVulnerabilityAssessmentRuleBaselineProperties := resp.DatabaseVulnerabilityAssessmentRuleBaselineProperties; databaseVulnerabilityAssessmentRuleBaselineProperties != nil {
        if err := d.Set("baseline_results", flattenArmDatabaseVulnerabilityAssessmentRuleBaselineDatabaseVulnerabilityAssessmentRuleBaselineItem(databaseVulnerabilityAssessmentRuleBaselineProperties.BaselineResults)); err != nil {
            return fmt.Errorf("Error setting `baseline_results`: %+v", err)
        }
    }
    d.Set("database_name", databaseName)
    d.Set("rule_id", ruleID)
    d.Set("server_name", serverName)
    d.Set("type", resp.Type)
    d.Set("vulnerability_assessment_name", vulnerabilityAssessmentName)

    return nil
}


func resourceArmDatabaseVulnerabilityAssessmentRuleBaselineDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databaseVulnerabilityAssessmentRuleBaselinesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    databaseName := id.Path["databases"]
    vulnerabilityAssessmentName := id.Path["vulnerabilityAssessments"]
    ruleID := id.Path["rules"]
    baselineName := id.Path["baselines"]

    if _, err := client.Delete(ctx, resourceGroup, serverName, databaseName, vulnerabilityAssessmentName, ruleID, baselineName); err != nil {
        return fmt.Errorf("Error deleting Database Vulnerability Assessment Rule Baseline (Baseline Name %q / Rule %q / Vulnerability Assessment Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", baselineName, ruleID, vulnerabilityAssessmentName, databaseName, serverName, resourceGroup, err)
    }

    return nil
}

func expandArmDatabaseVulnerabilityAssessmentRuleBaselineDatabaseVulnerabilityAssessmentRuleBaselineItem(input []interface{}) *[]sql.DatabaseVulnerabilityAssessmentRuleBaselineItem {
    results := make([]sql.DatabaseVulnerabilityAssessmentRuleBaselineItem, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        result := v["result"].([]interface{})

        result := sql.DatabaseVulnerabilityAssessmentRuleBaselineItem{
            Result: utils.ExpandStringSlice(result),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmDatabaseVulnerabilityAssessmentRuleBaselineDatabaseVulnerabilityAssessmentRuleBaselineItem(input *[]sql.DatabaseVulnerabilityAssessmentRuleBaselineItem) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["result"] = utils.FlattenStringSlice(item.Result)

        results = append(results, v)
    }

    return results
}
