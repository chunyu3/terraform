// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmVirtualNetworkGateway() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmVirtualNetworkGatewayCreateUpdate,
        Read: resourceArmVirtualNetworkGatewayRead,
        Update: resourceArmVirtualNetworkGatewayCreateUpdate,
        Delete: resourceArmVirtualNetworkGatewayDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "virtual_network_gateway_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "active_active": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "bgp_settings": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "asn": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "bgp_peering_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "peer_weight": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "enable_bgp": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "gateway_default_site": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "gateway_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.Vpn),
                    string(network.ExpressRoute),
                }, false),
                Default: string(network.Vpn),
            },

            "ip_configurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ipallocation_method": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Static),
                                string(network.Dynamic),
                            }, false),
                            Default: string(network.Static),
                        },
                        "public_ip_address": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "resource_guid": {
                Type: schema.TypeString,
                Optional: true,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "capacity": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Basic),
                                string(network.HighPerformance),
                                string(network.Standard),
                                string(network.UltraPerformance),
                                string(network.VpnGw1),
                                string(network.VpnGw2),
                                string(network.VpnGw3),
                                string(network.VpnGw1AZ),
                                string(network.VpnGw2AZ),
                                string(network.VpnGw3AZ),
                                string(network.ErGw1AZ),
                                string(network.ErGw2AZ),
                                string(network.ErGw3AZ),
                            }, false),
                            Default: string(network.Basic),
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Basic),
                                string(network.HighPerformance),
                                string(network.Standard),
                                string(network.UltraPerformance),
                                string(network.VpnGw1),
                                string(network.VpnGw2),
                                string(network.VpnGw3),
                                string(network.VpnGw1AZ),
                                string(network.VpnGw2AZ),
                                string(network.VpnGw3AZ),
                                string(network.ErGw1AZ),
                                string(network.ErGw2AZ),
                                string(network.ErGw3AZ),
                            }, false),
                            Default: string(network.Basic),
                        },
                    },
                },
            },

            "vpn_client_configuration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "radius_server_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "radius_server_secret": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "vpn_client_address_pool": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "address_prefixes": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                },
                            },
                        },
                        "vpn_client_ipsec_policies": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "dh_group": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.None),
                                            string(network.DHGroup1),
                                            string(network.DHGroup2),
                                            string(network.DHGroup14),
                                            string(network.DHGroup2048),
                                            string(network.ECP256),
                                            string(network.ECP384),
                                            string(network.DHGroup24),
                                        }, false),
                                    },
                                    "ike_encryption": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.DES),
                                            string(network.DES3),
                                            string(network.AES128),
                                            string(network.AES192),
                                            string(network.AES256),
                                            string(network.GCMAES256),
                                            string(network.GCMAES128),
                                        }, false),
                                    },
                                    "ike_integrity": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.MD5),
                                            string(network.SHA1),
                                            string(network.SHA256),
                                            string(network.SHA384),
                                            string(network.GCMAES256),
                                            string(network.GCMAES128),
                                        }, false),
                                    },
                                    "ipsec_encryption": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.None),
                                            string(network.DES),
                                            string(network.DES3),
                                            string(network.AES128),
                                            string(network.AES192),
                                            string(network.AES256),
                                            string(network.GCMAES128),
                                            string(network.GCMAES192),
                                            string(network.GCMAES256),
                                        }, false),
                                    },
                                    "ipsec_integrity": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.MD5),
                                            string(network.SHA1),
                                            string(network.SHA256),
                                            string(network.GCMAES128),
                                            string(network.GCMAES192),
                                            string(network.GCMAES256),
                                        }, false),
                                    },
                                    "pfs_group": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(network.None),
                                            string(network.PFS1),
                                            string(network.PFS2),
                                            string(network.PFS2048),
                                            string(network.ECP256),
                                            string(network.ECP384),
                                            string(network.PFS24),
                                            string(network.PFS14),
                                            string(network.PFSMM),
                                        }, false),
                                    },
                                    "sa_data_size_kilobytes": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "sa_life_time_seconds": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                },
                            },
                        },
                        "vpn_client_protocols": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                                ValidateFunc: validation.StringInSlice([]string{
                                    string(network.IkeV2),
                                    string(network.SSTP),
                                    string(network.OpenVPN),
                               }, false),
                            },
                        },
                        "vpn_client_revoked_certificates": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "thumbprint": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "vpn_client_root_certificates": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "public_cert_data": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "vpn_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.PolicyBased),
                    string(network.RouteBased),
                }, false),
                Default: string(network.PolicyBased),
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmVirtualNetworkGatewayCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkGatewaysClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    virtualNetworkGatewayName := d.Get("virtual_network_gateway_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, virtualNetworkGatewayName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", virtualNetworkGatewayName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_virtual_network_gateway", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    activeActive := d.Get("active_active").(bool)
    bgpSettings := d.Get("bgp_settings").([]interface{})
    enableBgp := d.Get("enable_bgp").(bool)
    etag := d.Get("etag").(string)
    gatewayDefaultSite := d.Get("gateway_default_site").([]interface{})
    gatewayType := d.Get("gateway_type").(string)
    ipConfigurations := d.Get("ip_configurations").([]interface{})
    resourceGuid := d.Get("resource_guid").(string)
    sku := d.Get("sku").([]interface{})
    vpnClientConfiguration := d.Get("vpn_client_configuration").([]interface{})
    vpnType := d.Get("vpn_type").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := network.VirtualNetworkGateway{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        VirtualNetworkGatewayPropertiesFormat: &network.VirtualNetworkGatewayPropertiesFormat{
            ActiveActive: utils.Bool(activeActive),
            BgpSettings: expandArmVirtualNetworkGatewayBgpSettings(bgpSettings),
            EnableBgp: utils.Bool(enableBgp),
            GatewayDefaultSite: expandArmVirtualNetworkGatewaySubResource(gatewayDefaultSite),
            GatewayType: network.VirtualNetworkGatewayType(gatewayType),
            IpConfigurations: expandArmVirtualNetworkGatewayVirtualNetworkGatewayIPConfiguration(ipConfigurations),
            ResourceGuid: utils.String(resourceGuid),
            Sku: expandArmVirtualNetworkGatewayVirtualNetworkGatewaySku(sku),
            VpnClientConfiguration: expandArmVirtualNetworkGatewayVpnClientConfiguration(vpnClientConfiguration),
            VpnType: network.VpnType(vpnType),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, virtualNetworkGatewayName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", virtualNetworkGatewayName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", virtualNetworkGatewayName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, virtualNetworkGatewayName)
    if err != nil {
        return fmt.Errorf("Error retrieving Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", virtualNetworkGatewayName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q) ID", virtualNetworkGatewayName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmVirtualNetworkGatewayRead(d, meta)
}

func resourceArmVirtualNetworkGatewayRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkGatewaysClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    virtualNetworkGatewayName := id.Path["virtualNetworkGateways"]

    resp, err := client.Get(ctx, resourceGroup, virtualNetworkGatewayName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Virtual Network Gateway %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", virtualNetworkGatewayName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if virtualNetworkGatewayPropertiesFormat := resp.VirtualNetworkGatewayPropertiesFormat; virtualNetworkGatewayPropertiesFormat != nil {
        d.Set("active_active", virtualNetworkGatewayPropertiesFormat.ActiveActive)
        if err := d.Set("bgp_settings", flattenArmVirtualNetworkGatewayBgpSettings(virtualNetworkGatewayPropertiesFormat.BgpSettings)); err != nil {
            return fmt.Errorf("Error setting `bgp_settings`: %+v", err)
        }
        d.Set("enable_bgp", virtualNetworkGatewayPropertiesFormat.EnableBgp)
        if err := d.Set("gateway_default_site", flattenArmVirtualNetworkGatewaySubResource(virtualNetworkGatewayPropertiesFormat.GatewayDefaultSite)); err != nil {
            return fmt.Errorf("Error setting `gateway_default_site`: %+v", err)
        }
        d.Set("gateway_type", string(virtualNetworkGatewayPropertiesFormat.GatewayType))
        if err := d.Set("ip_configurations", flattenArmVirtualNetworkGatewayVirtualNetworkGatewayIPConfiguration(virtualNetworkGatewayPropertiesFormat.IpConfigurations)); err != nil {
            return fmt.Errorf("Error setting `ip_configurations`: %+v", err)
        }
        d.Set("provisioning_state", virtualNetworkGatewayPropertiesFormat.ProvisioningState)
        d.Set("resource_guid", virtualNetworkGatewayPropertiesFormat.ResourceGuid)
        if err := d.Set("sku", flattenArmVirtualNetworkGatewayVirtualNetworkGatewaySku(virtualNetworkGatewayPropertiesFormat.Sku)); err != nil {
            return fmt.Errorf("Error setting `sku`: %+v", err)
        }
        if err := d.Set("vpn_client_configuration", flattenArmVirtualNetworkGatewayVpnClientConfiguration(virtualNetworkGatewayPropertiesFormat.VpnClientConfiguration)); err != nil {
            return fmt.Errorf("Error setting `vpn_client_configuration`: %+v", err)
        }
        d.Set("vpn_type", string(virtualNetworkGatewayPropertiesFormat.VpnType))
    }
    d.Set("etag", resp.Etag)
    d.Set("type", resp.Type)
    d.Set("virtual_network_gateway_name", virtualNetworkGatewayName)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmVirtualNetworkGatewayDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkGatewaysClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    virtualNetworkGatewayName := id.Path["virtualNetworkGateways"]

    future, err := client.Delete(ctx, resourceGroup, virtualNetworkGatewayName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", virtualNetworkGatewayName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Virtual Network Gateway (Virtual Network Gateway Name %q / Resource Group %q): %+v", virtualNetworkGatewayName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmVirtualNetworkGatewayBgpSettings(input []interface{}) *network.BgpSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    asn := v["asn"].(int)
    bgpPeeringAddress := v["bgp_peering_address"].(string)
    peerWeight := v["peer_weight"].(int)

    result := network.BgpSettings{
        Asn: utils.Int64(int64(asn)),
        BgpPeeringAddress: utils.String(bgpPeeringAddress),
        PeerWeight: utils.Int32(int32(peerWeight)),
    }
    return &result
}

func expandArmVirtualNetworkGatewaySubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(id),
    }
    return &result
}

func expandArmVirtualNetworkGatewayVirtualNetworkGatewayIPConfiguration(input []interface{}) *[]network.VirtualNetworkGatewayIPConfiguration {
    results := make([]network.VirtualNetworkGatewayIPConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        privateIpallocationMethod := v["private_ipallocation_method"].(string)
        subnet := v["subnet"].([]interface{})
        publicIpAddress := v["public_ip_address"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.VirtualNetworkGatewayIPConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            VirtualNetworkGatewayIPConfigurationPropertiesFormat: &network.VirtualNetworkGatewayIPConfigurationPropertiesFormat{
                PrivateIpallocationMethod: network.IPAllocationMethod(privateIpallocationMethod),
                PublicIpAddress: expandArmVirtualNetworkGatewaySubResource(publicIpAddress),
                Subnet: expandArmVirtualNetworkGatewaySubResource(subnet),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualNetworkGatewayVirtualNetworkGatewaySku(input []interface{}) *network.VirtualNetworkGatewaySku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    tier := v["tier"].(string)
    capacity := v["capacity"].(int)

    result := network.VirtualNetworkGatewaySku{
        Capacity: utils.Int32(int32(capacity)),
        Name: network.VirtualNetworkGatewaySkuName(name),
        Tier: network.VirtualNetworkGatewaySkuTier(tier),
    }
    return &result
}

func expandArmVirtualNetworkGatewayVpnClientConfiguration(input []interface{}) *network.VpnClientConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    vpnClientAddressPool := v["vpn_client_address_pool"].([]interface{})
    vpnClientRootCertificates := v["vpn_client_root_certificates"].([]interface{})
    vpnClientRevokedCertificates := v["vpn_client_revoked_certificates"].([]interface{})
    vpnClientProtocols := v["vpn_client_protocols"].([]interface{})
    vpnClientIpsecPolicies := v["vpn_client_ipsec_policies"].([]interface{})
    radiusServerAddress := v["radius_server_address"].(string)
    radiusServerSecret := v["radius_server_secret"].(string)

    result := network.VpnClientConfiguration{
        RadiusServerAddress: utils.String(radiusServerAddress),
        RadiusServerSecret: utils.String(radiusServerSecret),
        VpnClientAddressPool: expandArmVirtualNetworkGatewayAddressSpace(vpnClientAddressPool),
        VpnClientIpsecPolicies: expandArmVirtualNetworkGatewayIpsecPolicy(vpnClientIpsecPolicies),
        VpnClientProtocols: expandArmVirtualNetworkGateway(vpnClientProtocols),
        VpnClientRevokedCertificates: expandArmVirtualNetworkGatewayVpnClientRevokedCertificate(vpnClientRevokedCertificates),
        VpnClientRootCertificates: expandArmVirtualNetworkGatewayVpnClientRootCertificate(vpnClientRootCertificates),
    }
    return &result
}

func expandArmVirtualNetworkGatewayAddressSpace(input []interface{}) *network.AddressSpace {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    addressPrefixes := v["address_prefixes"].([]interface{})

    result := network.AddressSpace{
        AddressPrefixes: utils.ExpandStringSlice(addressPrefixes),
    }
    return &result
}

func expandArmVirtualNetworkGatewayIpsecPolicy(input []interface{}) *[]network.IpsecPolicy {
    results := make([]network.IpsecPolicy, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        saLifeTimeSeconds := v["sa_life_time_seconds"].(int)
        saDataSizeKilobytes := v["sa_data_size_kilobytes"].(int)
        ipsecEncryption := v["ipsec_encryption"].(string)
        ipsecIntegrity := v["ipsec_integrity"].(string)
        ikeEncryption := v["ike_encryption"].(string)
        ikeIntegrity := v["ike_integrity"].(string)
        dhGroup := v["dh_group"].(string)
        pfsGroup := v["pfs_group"].(string)

        result := network.IpsecPolicy{
            DhGroup: network.DhGroup(dhGroup),
            IkeEncryption: network.IkeEncryption(ikeEncryption),
            IkeIntegrity: network.IkeIntegrity(ikeIntegrity),
            IpsecEncryption: network.IpsecEncryption(ipsecEncryption),
            IpsecIntegrity: network.IpsecIntegrity(ipsecIntegrity),
            PfsGroup: network.PfsGroup(pfsGroup),
            SaDataSizeKilobytes: utils.Int32(int32(saDataSizeKilobytes)),
            SaLifeTimeSeconds: utils.Int32(int32(saLifeTimeSeconds)),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualNetworkGateway(input []interface{}) *[]network. {
    results := make([]network., 0)
    for _, item := range input {
        v := item.(string)
        result := network.(v)
        results = append(results, result)
    }
    return &results
}

func expandArmVirtualNetworkGatewayVpnClientRevokedCertificate(input []interface{}) *[]network.VpnClientRevokedCertificate {
    results := make([]network.VpnClientRevokedCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        thumbprint := v["thumbprint"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.VpnClientRevokedCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            VpnClientRevokedCertificatePropertiesFormat: &network.VpnClientRevokedCertificatePropertiesFormat{
                Thumbprint: utils.String(thumbprint),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualNetworkGatewayVpnClientRootCertificate(input []interface{}) *[]network.VpnClientRootCertificate {
    results := make([]network.VpnClientRootCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        publicCertData := v["public_cert_data"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.VpnClientRootCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            VpnClientRootCertificatePropertiesFormat: &network.VpnClientRootCertificatePropertiesFormat{
                PublicCertData: utils.String(publicCertData),
            },
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmVirtualNetworkGatewayBgpSettings(input *network.BgpSettings) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if asn := input.Asn; asn != nil {
        result["asn"] = int(*asn)
    }
    if bgpPeeringAddress := input.BgpPeeringAddress; bgpPeeringAddress != nil {
        result["bgp_peering_address"] = *bgpPeeringAddress
    }
    if peerWeight := input.PeerWeight; peerWeight != nil {
        result["peer_weight"] = int(*peerWeight)
    }

    return []interface{}{result}
}

func flattenArmVirtualNetworkGatewaySubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}

func flattenArmVirtualNetworkGatewayVirtualNetworkGatewayIPConfiguration(input *[]network.VirtualNetworkGatewayIPConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if virtualNetworkGatewayIPConfigurationPropertiesFormat := item.VirtualNetworkGatewayIPConfigurationPropertiesFormat; virtualNetworkGatewayIPConfigurationPropertiesFormat != nil {
            v["private_ipallocation_method"] = string(virtualNetworkGatewayIPConfigurationPropertiesFormat.PrivateIpallocationMethod)
            v["public_ip_address"] = flattenArmVirtualNetworkGatewaySubResource(virtualNetworkGatewayIPConfigurationPropertiesFormat.PublicIpAddress)
            v["subnet"] = flattenArmVirtualNetworkGatewaySubResource(virtualNetworkGatewayIPConfigurationPropertiesFormat.Subnet)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualNetworkGatewayVirtualNetworkGatewaySku(input *network.VirtualNetworkGatewaySku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["name"] = string(input.Name)
    if capacity := input.Capacity; capacity != nil {
        result["capacity"] = int(*capacity)
    }
    result["tier"] = string(input.Tier)

    return []interface{}{result}
}

func flattenArmVirtualNetworkGatewayVpnClientConfiguration(input *network.VpnClientConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if radiusServerAddress := input.RadiusServerAddress; radiusServerAddress != nil {
        result["radius_server_address"] = *radiusServerAddress
    }
    if radiusServerSecret := input.RadiusServerSecret; radiusServerSecret != nil {
        result["radius_server_secret"] = *radiusServerSecret
    }
    result["vpn_client_address_pool"] = flattenArmVirtualNetworkGatewayAddressSpace(input.VpnClientAddressPool)
    result["vpn_client_ipsec_policies"] = flattenArmVirtualNetworkGatewayIpsecPolicy(input.VpnClientIpsecPolicies)
    result["vpn_client_protocols"] = flattenArmVirtualNetworkGateway(string(input.VpnClientProtocols))
    result["vpn_client_revoked_certificates"] = flattenArmVirtualNetworkGatewayVpnClientRevokedCertificate(input.VpnClientRevokedCertificates)
    result["vpn_client_root_certificates"] = flattenArmVirtualNetworkGatewayVpnClientRootCertificate(input.VpnClientRootCertificates)

    return []interface{}{result}
}

func flattenArmVirtualNetworkGatewayAddressSpace(input *network.AddressSpace) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["address_prefixes"] = utils.FlattenStringSlice(input.AddressPrefixes)

    return []interface{}{result}
}

func flattenArmVirtualNetworkGatewayIpsecPolicy(input *[]network.IpsecPolicy) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["dh_group"] = string(item.DhGroup)
        v["ike_encryption"] = string(item.IkeEncryption)
        v["ike_integrity"] = string(item.IkeIntegrity)
        v["ipsec_encryption"] = string(item.IpsecEncryption)
        v["ipsec_integrity"] = string(item.IpsecIntegrity)
        v["pfs_group"] = string(item.PfsGroup)
        if saDataSizeKilobytes := item.SaDataSizeKilobytes; saDataSizeKilobytes != nil {
            v["sa_data_size_kilobytes"] = int(*saDataSizeKilobytes)
        }
        if saLifeTimeSeconds := item.SaLifeTimeSeconds; saLifeTimeSeconds != nil {
            v["sa_life_time_seconds"] = int(*saLifeTimeSeconds)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualNetworkGateway(input *[]network.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}

func flattenArmVirtualNetworkGatewayVpnClientRevokedCertificate(input *[]network.VpnClientRevokedCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if vpnClientRevokedCertificatePropertiesFormat := item.VpnClientRevokedCertificatePropertiesFormat; vpnClientRevokedCertificatePropertiesFormat != nil {
            if thumbprint := vpnClientRevokedCertificatePropertiesFormat.Thumbprint; thumbprint != nil {
                v["thumbprint"] = *thumbprint
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualNetworkGatewayVpnClientRootCertificate(input *[]network.VpnClientRootCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if vpnClientRootCertificatePropertiesFormat := item.VpnClientRootCertificatePropertiesFormat; vpnClientRootCertificatePropertiesFormat != nil {
            if publicCertData := vpnClientRootCertificatePropertiesFormat.PublicCertData; publicCertData != nil {
                v["public_cert_data"] = *publicCertData
            }
        }

        results = append(results, v)
    }

    return results
}
