// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmLinkedServer() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmLinkedServerCreateUpdate,
        Read: resourceArmLinkedServerRead,
        Update: resourceArmLinkedServerCreateUpdate,
        Delete: resourceArmLinkedServerDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "linked_redis_cache_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "linked_redis_cache_location": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "linked_server_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "server_role": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(redis.Primary),
                    string(redis.Secondary),
                }, false),
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmLinkedServerCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).linkedServerClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    linkedServerName := d.Get("linked_server_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, linkedServerName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Linked Server %q (Linked Server Name %q / Resource Group %q): %+v", name, linkedServerName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_linked_server", *existing.ID)
        }
    }

    linkedRedisCacheId := d.Get("linked_redis_cache_id").(string)
    linkedRedisCacheLocation := d.Get("linked_redis_cache_location").(string)
    serverRole := d.Get("server_role").(string)

    parameters := redis.LinkedServerCreateParameters{
        LinkedServerCreateProperties: &redis.LinkedServerCreateProperties{
            LinkedRedisCacheID: utils.String(linkedRedisCacheId),
            LinkedRedisCacheLocation: utils.String(linkedRedisCacheLocation),
            ServerRole: redis.ReplicationRole(serverRole),
        },
    }


    future, err := client.Create(ctx, resourceGroup, name, linkedServerName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Linked Server %q (Linked Server Name %q / Resource Group %q): %+v", name, linkedServerName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Linked Server %q (Linked Server Name %q / Resource Group %q): %+v", name, linkedServerName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, linkedServerName)
    if err != nil {
        return fmt.Errorf("Error retrieving Linked Server %q (Linked Server Name %q / Resource Group %q): %+v", name, linkedServerName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Linked Server %q (Linked Server Name %q / Resource Group %q) ID", name, linkedServerName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmLinkedServerRead(d, meta)
}

func resourceArmLinkedServerRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).linkedServerClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["Redis"]
    linkedServerName := id.Path["linkedServers"]

    resp, err := client.Get(ctx, resourceGroup, name, linkedServerName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Linked Server %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Linked Server %q (Linked Server Name %q / Resource Group %q): %+v", name, linkedServerName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    if linkedServerCreateProperties := resp.LinkedServerCreateProperties; linkedServerCreateProperties != nil {
        d.Set("linked_redis_cache_id", linkedServerCreateProperties.LinkedRedisCacheID)
        d.Set("linked_redis_cache_location", linkedServerCreateProperties.LinkedRedisCacheLocation)
        d.Set("provisioning_state", linkedServerCreateProperties.ProvisioningState)
        d.Set("server_role", string(linkedServerCreateProperties.ServerRole))
    }
    d.Set("linked_server_name", linkedServerName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmLinkedServerDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).linkedServerClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["Redis"]
    linkedServerName := id.Path["linkedServers"]

    if _, err := client.Delete(ctx, resourceGroup, name, linkedServerName); err != nil {
        return fmt.Errorf("Error deleting Linked Server %q (Linked Server Name %q / Resource Group %q): %+v", name, linkedServerName, resourceGroup, err)
    }

    return nil
}
