// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmProject() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmProjectCreate,
        Read: resourceArmProjectRead,
        Update: resourceArmProjectUpdate,
        Delete: resourceArmProjectDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "assessment_solution_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "customer_workspace_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "customer_workspace_location": {
                Type: schema.TypeString,
                Optional: true,
            },

            "e_tag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "project_status": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.Active),
                    string(azuremigrate.Inactive),
                }, false),
                Default: string(azuremigrate.Active),
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmProjectCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).projectsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Project %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_project", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    assessmentSolutionId := d.Get("assessment_solution_id").(string)
    customerWorkspaceId := d.Get("customer_workspace_id").(string)
    customerWorkspaceLocation := d.Get("customer_workspace_location").(string)
    eTag := d.Get("e_tag").(string)
    projectStatus := d.Get("project_status").(string)
    t := d.Get("tags").(map[string]interface{})

    project := azuremigrate.Project{
        ETag: utils.String(eTag),
        Location: utils.String(location),
        ProjectProperties: &azuremigrate.ProjectProperties{
            AssessmentSolutionID: utils.String(assessmentSolutionId),
            CustomerWorkspaceID: utils.String(customerWorkspaceId),
            CustomerWorkspaceLocation: utils.String(customerWorkspaceLocation),
            ProjectStatus: azuremigrate.ProjectStatus(projectStatus),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Create(ctx, resourceGroup, name, project); err != nil {
        return fmt.Errorf("Error creating Project %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Project %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Project %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmProjectRead(d, meta)
}

func resourceArmProjectRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).projectsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    name := id.Path["assessmentProjects"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Project %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Project %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmProjectUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).projectsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    assessmentSolutionId := d.Get("assessment_solution_id").(string)
    customerWorkspaceId := d.Get("customer_workspace_id").(string)
    customerWorkspaceLocation := d.Get("customer_workspace_location").(string)
    eTag := d.Get("e_tag").(string)
    projectStatus := d.Get("project_status").(string)
    t := d.Get("tags").(map[string]interface{})

    project := azuremigrate.Project{
        ETag: utils.String(eTag),
        ProjectProperties: &azuremigrate.ProjectProperties{
            AssessmentSolutionID: utils.String(assessmentSolutionId),
            CustomerWorkspaceID: utils.String(customerWorkspaceId),
            CustomerWorkspaceLocation: utils.String(customerWorkspaceLocation),
            ProjectStatus: azuremigrate.ProjectStatus(projectStatus),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, project); err != nil {
        return fmt.Errorf("Error updating Project %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmProjectRead(d, meta)
}

func resourceArmProjectDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).projectsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    name := id.Path["assessmentProjects"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Project %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}
