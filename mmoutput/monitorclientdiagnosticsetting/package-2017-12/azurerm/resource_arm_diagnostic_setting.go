// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDiagnosticSetting() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDiagnosticSettingCreateUpdate,
        Read: resourceArmDiagnosticSettingRead,
        Update: resourceArmDiagnosticSettingCreateUpdate,
        Delete: resourceArmDiagnosticSettingDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_uri": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "event_hub_authorization_rule_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "event_hub_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "log_analytics_destination_type": {
                Type: schema.TypeString,
                Optional: true,
            },

            "logs": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "enabled": {
                            Type: schema.TypeBool,
                            Required: true,
                        },
                        "category": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "retention_policy": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "days": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "enabled": {
                                        Type: schema.TypeBool,
                                        Required: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "metrics": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "enabled": {
                            Type: schema.TypeBool,
                            Required: true,
                        },
                        "category": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "retention_policy": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "days": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "enabled": {
                                        Type: schema.TypeBool,
                                        Required: true,
                                    },
                                },
                            },
                        },
                        "time_grain": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateIso8601Duration(),
                        },
                    },
                },
            },

            "service_bus_rule_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "storage_account_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "workspace_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmDiagnosticSettingCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).diagnosticSettingsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceURI := d.Get("resource_uri").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceURI, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Diagnostic Setting %q (Resource Uri %q): %+v", name, resourceURI, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_diagnostic_setting", *existing.ID)
        }
    }

    eventHubAuthorizationRuleId := d.Get("event_hub_authorization_rule_id").(string)
    eventHubName := d.Get("event_hub_name").(string)
    logAnalyticsDestinationType := d.Get("log_analytics_destination_type").(string)
    logs := d.Get("logs").([]interface{})
    metrics := d.Get("metrics").([]interface{})
    serviceBusRuleId := d.Get("service_bus_rule_id").(string)
    storageAccountId := d.Get("storage_account_id").(string)
    workspaceId := d.Get("workspace_id").(string)

    parameters := monitorclient.DiagnosticSettingsResource{
        DiagnosticSettings: &monitorclient.DiagnosticSettings{
            EventHubAuthorizationRuleID: utils.String(eventHubAuthorizationRuleId),
            EventHubName: utils.String(eventHubName),
            LogAnalyticsDestinationType: utils.String(logAnalyticsDestinationType),
            Logs: expandArmDiagnosticSettingLogSettings(logs),
            Metrics: expandArmDiagnosticSettingMetricSettings(metrics),
            ServiceBusRuleID: utils.String(serviceBusRuleId),
            StorageAccountID: utils.String(storageAccountId),
            WorkspaceID: utils.String(workspaceId),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceURI, name, parameters); err != nil {
        return fmt.Errorf("Error creating Diagnostic Setting %q (Resource Uri %q): %+v", name, resourceURI, err)
    }


    resp, err := client.Get(ctx, resourceURI, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Diagnostic Setting %q (Resource Uri %q): %+v", name, resourceURI, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Diagnostic Setting %q (Resource Uri %q) ID", name, resourceURI)
    }
    d.SetId(*resp.ID)

    return resourceArmDiagnosticSettingRead(d, meta)
}

func resourceArmDiagnosticSettingRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).diagnosticSettingsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["diagnosticSettings"]

    resp, err := client.Get(ctx, resourceURI, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Diagnostic Setting %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Diagnostic Setting %q (Resource Uri %q): %+v", name, resourceURI, err)
    }


    d.Set("name", name)
    d.Set("resource_uri", resourceURI)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmDiagnosticSettingDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).diagnosticSettingsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["diagnosticSettings"]

    if _, err := client.Delete(ctx, resourceURI, name); err != nil {
        return fmt.Errorf("Error deleting Diagnostic Setting %q (Resource Uri %q): %+v", name, resourceURI, err)
    }

    return nil
}

func expandArmDiagnosticSettingLogSettings(input []interface{}) *[]monitorclient.LogSettings {
    results := make([]monitorclient.LogSettings, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        category := v["category"].(string)
        enabled := v["enabled"].(bool)
        retentionPolicy := v["retention_policy"].([]interface{})

        result := monitorclient.LogSettings{
            Category: utils.String(category),
            Enabled: utils.Bool(enabled),
            RetentionPolicy: expandArmDiagnosticSettingRetentionPolicy(retentionPolicy),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmDiagnosticSettingMetricSettings(input []interface{}) *[]monitorclient.MetricSettings {
    results := make([]monitorclient.MetricSettings, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        timeGrain := v["time_grain"].(string)
        category := v["category"].(string)
        enabled := v["enabled"].(bool)
        retentionPolicy := v["retention_policy"].([]interface{})

        result := monitorclient.MetricSettings{
            Category: utils.String(category),
            Enabled: utils.Bool(enabled),
            RetentionPolicy: expandArmDiagnosticSettingRetentionPolicy(retentionPolicy),
            TimeGrain: utils.String(timeGrain),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmDiagnosticSettingRetentionPolicy(input []interface{}) *monitorclient.RetentionPolicy {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    enabled := v["enabled"].(bool)
    days := v["days"].(int)

    result := monitorclient.RetentionPolicy{
        Days: utils.Int32(int32(days)),
        Enabled: utils.Bool(enabled),
    }
    return &result
}
