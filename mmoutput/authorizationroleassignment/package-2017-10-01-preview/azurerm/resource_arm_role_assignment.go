// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmRoleAssignment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmRoleAssignmentCreateUpdate,
        Read: resourceArmRoleAssignmentRead,
        Update: resourceArmRoleAssignmentCreateUpdate,
        Delete: resourceArmRoleAssignmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "role_assignment_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "scope": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "can_delegate": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "principal_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "role_definition_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "scope": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmRoleAssignmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).roleAssignmentsClient
    ctx := meta.(*ArmClient).StopContext

    roleAssignmentName := d.Get("role_assignment_name").(string)
    scope := d.Get("scope").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, scope, roleAssignmentName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Role Assignment (Role Assignment Name %q / Scope %q): %+v", roleAssignmentName, scope, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_role_assignment", *existing.ID)
        }
    }

    canDelegate := d.Get("can_delegate").(bool)
    principalId := d.Get("principal_id").(string)
    roleDefinitionId := d.Get("role_definition_id").(string)

    parameters := authorization.RoleAssignmentCreateParameters{
        RoleAssignmentProperties: &authorization.RoleAssignmentProperties{
            CanDelegate: utils.Bool(canDelegate),
            PrincipalID: utils.String(principalId),
            RoleDefinitionID: utils.String(roleDefinitionId),
        },
    }


    if _, err := client.Create(ctx, scope, roleAssignmentName, parameters); err != nil {
        return fmt.Errorf("Error creating Role Assignment (Role Assignment Name %q / Scope %q): %+v", roleAssignmentName, scope, err)
    }


    resp, err := client.Get(ctx, scope, roleAssignmentName)
    if err != nil {
        return fmt.Errorf("Error retrieving Role Assignment (Role Assignment Name %q / Scope %q): %+v", roleAssignmentName, scope, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Role Assignment (Role Assignment Name %q / Scope %q) ID", roleAssignmentName, scope)
    }
    d.SetId(*resp.ID)

    return resourceArmRoleAssignmentRead(d, meta)
}

func resourceArmRoleAssignmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).roleAssignmentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    roleAssignmentName := id.Path["roleAssignments"]

    resp, err := client.Get(ctx, scope, roleAssignmentName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Role Assignment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Role Assignment (Role Assignment Name %q / Scope %q): %+v", roleAssignmentName, scope, err)
    }


    d.Set("name", resp.Name)
    if roleAssignmentProperties := resp.RoleAssignmentProperties; roleAssignmentProperties != nil {
        d.Set("can_delegate", roleAssignmentProperties.CanDelegate)
        d.Set("principal_id", roleAssignmentProperties.PrincipalID)
        d.Set("role_definition_id", roleAssignmentProperties.RoleDefinitionID)
        d.Set("scope", roleAssignmentProperties.Scope)
    }
    d.Set("role_assignment_name", roleAssignmentName)
    d.Set("scope", scope)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmRoleAssignmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).roleAssignmentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    roleAssignmentName := id.Path["roleAssignments"]

    if _, err := client.Delete(ctx, scope, roleAssignmentName); err != nil {
        return fmt.Errorf("Error deleting Role Assignment (Role Assignment Name %q / Scope %q): %+v", roleAssignmentName, scope, err)
    }

    return nil
}
