// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmManagedNetworkGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmManagedNetworkGroupCreateUpdate,
        Read: resourceArmManagedNetworkGroupRead,
        Update: resourceArmManagedNetworkGroupCreateUpdate,
        Delete: resourceArmManagedNetworkGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "managed_network_group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "managed_network_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(managednetwork.Connectivity),
                }, false),
                Default: string(managednetwork.Connectivity),
            },

            "properties": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "properties_management_groups": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "management_groups_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "properties_subnets": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "subnets_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "properties_subscriptions": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "subscriptions_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "properties_virtual_networks": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "virtual_networks_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmManagedNetworkGroupCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedNetworkGroupsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    managedNetworkGroupName := d.Get("managed_network_group_name").(string)
    managedNetworkName := d.Get("managed_network_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, managedNetworkName, managedNetworkGroupName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Managed Network Group (Managed Network Group Name %q / Managed Network Name %q / Resource Group %q): %+v", managedNetworkGroupName, managedNetworkName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_managed_network_group", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    kind := d.Get("kind").(string)
    properties := d.Get("properties").([]interface{})

    managedNetworkGroup := managednetwork.Group{
        Kind: managednetwork.Kind(kind),
        Location: utils.String(location),
        GroupProperties: expandArmManagedNetworkGroupGroupProperties(properties),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, managedNetworkName, managedNetworkGroupName, managedNetworkGroup)
    if err != nil {
        return fmt.Errorf("Error creating Managed Network Group (Managed Network Group Name %q / Managed Network Name %q / Resource Group %q): %+v", managedNetworkGroupName, managedNetworkName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Managed Network Group (Managed Network Group Name %q / Managed Network Name %q / Resource Group %q): %+v", managedNetworkGroupName, managedNetworkName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, managedNetworkName, managedNetworkGroupName)
    if err != nil {
        return fmt.Errorf("Error retrieving Managed Network Group (Managed Network Group Name %q / Managed Network Name %q / Resource Group %q): %+v", managedNetworkGroupName, managedNetworkName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Managed Network Group (Managed Network Group Name %q / Managed Network Name %q / Resource Group %q) ID", managedNetworkGroupName, managedNetworkName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmManagedNetworkGroupRead(d, meta)
}

func resourceArmManagedNetworkGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedNetworkGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    managedNetworkName := id.Path["managedNetworks"]
    managedNetworkGroupName := id.Path["managedNetworkGroups"]

    resp, err := client.Get(ctx, resourceGroup, managedNetworkName, managedNetworkGroupName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Managed Network Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Managed Network Group (Managed Network Group Name %q / Managed Network Name %q / Resource Group %q): %+v", managedNetworkGroupName, managedNetworkName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("kind", string(resp.Kind))
    d.Set("managed_network_group_name", managedNetworkGroupName)
    d.Set("managed_network_name", managedNetworkName)
    if err := d.Set("properties", flattenArmManagedNetworkGroupGroupProperties(resp.GroupProperties)); err != nil {
        return fmt.Errorf("Error setting `properties`: %+v", err)
    }
    d.Set("type", resp.Type)

    return nil
}


func resourceArmManagedNetworkGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedNetworkGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    managedNetworkName := id.Path["managedNetworks"]
    managedNetworkGroupName := id.Path["managedNetworkGroups"]

    future, err := client.Delete(ctx, resourceGroup, managedNetworkName, managedNetworkGroupName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Managed Network Group (Managed Network Group Name %q / Managed Network Name %q / Resource Group %q): %+v", managedNetworkGroupName, managedNetworkName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Managed Network Group (Managed Network Group Name %q / Managed Network Name %q / Resource Group %q): %+v", managedNetworkGroupName, managedNetworkName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmManagedNetworkGroupGroupProperties(input []interface{}) *managednetwork.GroupProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    propertiesManagementGroups := v["properties_management_groups"].([]interface{})
    propertiesSubscriptions := v["properties_subscriptions"].([]interface{})
    propertiesVirtualNetworks := v["properties_virtual_networks"].([]interface{})
    propertiesSubnets := v["properties_subnets"].([]interface{})

    result := managednetwork.GroupProperties{
        PropertiesManagementGroups: expandArmManagedNetworkGroupResourceId(propertiesManagementGroups),
        PropertiesSubnets: expandArmManagedNetworkGroupResourceId(propertiesSubnets),
        PropertiesSubscriptions: expandArmManagedNetworkGroupResourceId(propertiesSubscriptions),
        PropertiesVirtualNetworks: expandArmManagedNetworkGroupResourceId(propertiesVirtualNetworks),
    }
    return &result
}

func expandArmManagedNetworkGroupResourceId(input []interface{}) *[]managednetwork.ResourceId {
    results := make([]managednetwork.ResourceId, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        managementGroupsId := v["management_groups_id"].(string)

        result := managednetwork.ResourceId{
            ManagementGroupsID: utils.String(managementGroupsId),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmManagedNetworkGroupResourceId(input []interface{}) *[]managednetwork.ResourceId {
    results := make([]managednetwork.ResourceId, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        subnetsId := v["subnets_id"].(string)

        result := managednetwork.ResourceId{
            SubnetsID: utils.String(subnetsId),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmManagedNetworkGroupResourceId(input []interface{}) *[]managednetwork.ResourceId {
    results := make([]managednetwork.ResourceId, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        subscriptionsId := v["subscriptions_id"].(string)

        result := managednetwork.ResourceId{
            SubscriptionsID: utils.String(subscriptionsId),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmManagedNetworkGroupResourceId(input []interface{}) *[]managednetwork.ResourceId {
    results := make([]managednetwork.ResourceId, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        virtualNetworksId := v["virtual_networks_id"].(string)

        result := managednetwork.ResourceId{
            VirtualNetworksID: utils.String(virtualNetworksId),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmManagedNetworkGroupGroupProperties(input *managednetwork.GroupProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["properties_management_groups"] = flattenArmManagedNetworkGroupResourceId(input.PropertiesManagementGroups)
    result["properties_subnets"] = flattenArmManagedNetworkGroupResourceId(input.PropertiesSubnets)
    result["properties_subscriptions"] = flattenArmManagedNetworkGroupResourceId(input.PropertiesSubscriptions)
    result["properties_virtual_networks"] = flattenArmManagedNetworkGroupResourceId(input.PropertiesVirtualNetworks)

    return []interface{}{result}
}

func flattenArmManagedNetworkGroupResourceId(input *[]managednetwork.ResourceId) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if managementGroupsId := item.ManagementGroupsID; managementGroupsId != nil {
            v["management_groups_id"] = *managementGroupsId
        }

        results = append(results, v)
    }

    return results
}

func flattenArmManagedNetworkGroupResourceId(input *[]managednetwork.ResourceId) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if subnetsId := item.SubnetsID; subnetsId != nil {
            v["subnets_id"] = *subnetsId
        }

        results = append(results, v)
    }

    return results
}

func flattenArmManagedNetworkGroupResourceId(input *[]managednetwork.ResourceId) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if subscriptionsId := item.SubscriptionsID; subscriptionsId != nil {
            v["subscriptions_id"] = *subscriptionsId
        }

        results = append(results, v)
    }

    return results
}

func flattenArmManagedNetworkGroupResourceId(input *[]managednetwork.ResourceId) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if virtualNetworksId := item.VirtualNetworksID; virtualNetworksId != nil {
            v["virtual_networks_id"] = *virtualNetworksId
        }

        results = append(results, v)
    }

    return results
}
