// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmConnection() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmConnectionCreate,
        Read: resourceArmConnectionRead,
        Update: resourceArmConnectionUpdate,
        Delete: resourceArmConnectionDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "automation_account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "connection_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "field_definition_values": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "connection_type": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "creation_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_modified_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmConnectionCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectionClient
    ctx, cancel := timeouts.ForCreate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    automationAccountName := d.Get("automation_account_name").(string)
    name := d.Get("connection_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, automationAccountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Connection (Connection Name %q / Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_connection", *existing.ID)
        }
    }

    description := d.Get("description").(string)
    fieldDefinitionValues := d.Get("field_definition_values").(map[string]interface{})
    name := d.Get("name").(string)

    parameters := automation.ConnectionUpdateParameters{
        Name: utils.String(name),
        ConnectionUpdateProperties: &automation.ConnectionUpdateProperties{
            Description: utils.String(description),
            FieldDefinitionValues: utils.ExpandKeyValuePairs(fieldDefinitionValues),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroupName, automationAccountName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Connection (Connection Name %q / Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, automationAccountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Connection (Connection Name %q / Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Connection (Connection Name %q / Automation Account Name %q / Resource Group %q) ID", name, automationAccountName, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmConnectionRead(d, meta)
}

func resourceArmConnectionRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectionClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    automationAccountName := id.Path["automationAccounts"]
    name := id.Path["connections"]

    resp, err := client.Get(ctx, resourceGroupName, automationAccountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Connection %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Connection (Connection Name %q / Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    d.Set("automation_account_name", automationAccountName)
    d.Set("connection_name", name)
    if connectionUpdateProperties := resp.ConnectionUpdateProperties; connectionUpdateProperties != nil {
        if err := d.Set("connection_type", flattenArmConnectionConnectionTypeAssociationProperty(connectionUpdateProperties.ConnectionType)); err != nil {
            return fmt.Errorf("Error setting `connection_type`: %+v", err)
        }
        d.Set("creation_time", (connectionUpdateProperties.CreationTime).String())
        d.Set("description", connectionUpdateProperties.Description)
        d.Set("field_definition_values", utils.FlattenKeyValuePairs(connectionUpdateProperties.FieldDefinitionValues))
        d.Set("last_modified_time", (connectionUpdateProperties.LastModifiedTime).String())
    }
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmConnectionUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectionClient
    ctx, cancel := timeouts.ForUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

      resourceGroupName := d.Get("resource_group").(string)
    automationAccountName := d.Get("automation_account_name").(string)
    name := d.Get("connection_name").(string)
    description := d.Get("description").(string)
    fieldDefinitionValues := d.Get("field_definition_values").(map[string]interface{})
    name := d.Get("name").(string)

    parameters := automation.ConnectionUpdateParameters{
        Name: utils.String(name),
        ConnectionUpdateProperties: &automation.ConnectionUpdateProperties{
            Description: utils.String(description),
            FieldDefinitionValues: utils.ExpandKeyValuePairs(fieldDefinitionValues),
        },
    }


    if _, err := client.Update(ctx, resourceGroupName, automationAccountName, name, parameters); err != nil {
        return fmt.Errorf("Error updating Connection (Connection Name %q / Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroupName, err)
    }

    return resourceArmConnectionRead(d, meta)
}

func resourceArmConnectionDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectionClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    automationAccountName := id.Path["automationAccounts"]
    name := id.Path["connections"]

    if _, err := client.Delete(ctx, resourceGroupName, automationAccountName, name); err != nil {
        return fmt.Errorf("Error deleting Connection (Connection Name %q / Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroupName, err)
    }

    return nil
}


func flattenArmConnectionConnectionTypeAssociationProperty(input *automation.ConnectionTypeAssociationProperty) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if name := input.Name; name != nil {
        result["name"] = *name
    }

    return []interface{}{result}
}
