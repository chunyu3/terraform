// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmRoute() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmRouteCreateUpdate,
        Read: resourceArmRouteRead,
        Update: resourceArmRouteCreateUpdate,
        Delete: resourceArmRouteDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "next_hop_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.VirtualNetworkGateway),
                    string(network.VnetLocal),
                    string(network.Internet),
                    string(network.VirtualAppliance),
                    string(network.None),
                }, false),
            },

            "route_table_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "address_prefix": {
                Type: schema.TypeString,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "next_hop_ip_address": {
                Type: schema.TypeString,
                Optional: true,
            },
        },
    }
}

func resourceArmRouteCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).routesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    routeTableName := d.Get("route_table_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, routeTableName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Route %q (Route Table Name %q / Resource Group %q): %+v", name, routeTableName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_route", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    name := d.Get("name").(string)
    addressPrefix := d.Get("address_prefix").(string)
    etag := d.Get("etag").(string)
    nextHopIpAddress := d.Get("next_hop_ip_address").(string)
    nextHopType := d.Get("next_hop_type").(string)

    routeParameters := network.Route{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Name: utils.String(name),
        RoutePropertiesFormat: &network.RoutePropertiesFormat{
            AddressPrefix: utils.String(addressPrefix),
            NextHopIPAddress: utils.String(nextHopIpAddress),
            NextHopType: network.RouteNextHopType(nextHopType),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, routeTableName, name, routeParameters)
    if err != nil {
        return fmt.Errorf("Error creating Route %q (Route Table Name %q / Resource Group %q): %+v", name, routeTableName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Route %q (Route Table Name %q / Resource Group %q): %+v", name, routeTableName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, routeTableName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Route %q (Route Table Name %q / Resource Group %q): %+v", name, routeTableName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Route %q (Route Table Name %q / Resource Group %q) ID", name, routeTableName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmRouteRead(d, meta)
}

func resourceArmRouteRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).routesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    routeTableName := id.Path["routeTables"]
    name := id.Path["routes"]

    resp, err := client.Get(ctx, resourceGroup, routeTableName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Route %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Route %q (Route Table Name %q / Resource Group %q): %+v", name, routeTableName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    d.Set("route_table_name", routeTableName)

    return nil
}


func resourceArmRouteDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).routesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    routeTableName := id.Path["routeTables"]
    name := id.Path["routes"]

    future, err := client.Delete(ctx, resourceGroup, routeTableName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Route %q (Route Table Name %q / Resource Group %q): %+v", name, routeTableName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Route %q (Route Table Name %q / Resource Group %q): %+v", name, routeTableName, resourceGroup, err)
        }
    }

    return nil
}
