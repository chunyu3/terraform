// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmManagedCluster() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmManagedClusterCreateUpdate,
        Read: resourceArmManagedClusterRead,
        Update: resourceArmManagedClusterCreateUpdate,
        Delete: resourceArmManagedClusterDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "aad_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "client_app_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "server_app_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "server_app_secret": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tenant_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "addon_profiles": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "agent_pool_profiles": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "count": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "vm_size": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(containerservices.Standard_A1),
                                string(containerservices.Standard_A10),
                                string(containerservices.Standard_A11),
                                string(containerservices.Standard_A1_v2),
                                string(containerservices.Standard_A2),
                                string(containerservices.Standard_A2_v2),
                                string(containerservices.Standard_A2m_v2),
                                string(containerservices.Standard_A3),
                                string(containerservices.Standard_A4),
                                string(containerservices.Standard_A4_v2),
                                string(containerservices.Standard_A4m_v2),
                                string(containerservices.Standard_A5),
                                string(containerservices.Standard_A6),
                                string(containerservices.Standard_A7),
                                string(containerservices.Standard_A8),
                                string(containerservices.Standard_A8_v2),
                                string(containerservices.Standard_A8m_v2),
                                string(containerservices.Standard_A9),
                                string(containerservices.Standard_B2ms),
                                string(containerservices.Standard_B2s),
                                string(containerservices.Standard_B4ms),
                                string(containerservices.Standard_B8ms),
                                string(containerservices.Standard_D1),
                                string(containerservices.Standard_D11),
                                string(containerservices.Standard_D11_v2),
                                string(containerservices.Standard_D11_v2_Promo),
                                string(containerservices.Standard_D12),
                                string(containerservices.Standard_D12_v2),
                                string(containerservices.Standard_D12_v2_Promo),
                                string(containerservices.Standard_D13),
                                string(containerservices.Standard_D13_v2),
                                string(containerservices.Standard_D13_v2_Promo),
                                string(containerservices.Standard_D14),
                                string(containerservices.Standard_D14_v2),
                                string(containerservices.Standard_D14_v2_Promo),
                                string(containerservices.Standard_D15_v2),
                                string(containerservices.Standard_D16_v3),
                                string(containerservices.Standard_D16s_v3),
                                string(containerservices.Standard_D1_v2),
                                string(containerservices.Standard_D2),
                                string(containerservices.Standard_D2_v2),
                                string(containerservices.Standard_D2_v2_Promo),
                                string(containerservices.Standard_D2_v3),
                                string(containerservices.Standard_D2s_v3),
                                string(containerservices.Standard_D3),
                                string(containerservices.Standard_D32_v3),
                                string(containerservices.Standard_D32s_v3),
                                string(containerservices.Standard_D3_v2),
                                string(containerservices.Standard_D3_v2_Promo),
                                string(containerservices.Standard_D4),
                                string(containerservices.Standard_D4_v2),
                                string(containerservices.Standard_D4_v2_Promo),
                                string(containerservices.Standard_D4_v3),
                                string(containerservices.Standard_D4s_v3),
                                string(containerservices.Standard_D5_v2),
                                string(containerservices.Standard_D5_v2_Promo),
                                string(containerservices.Standard_D64_v3),
                                string(containerservices.Standard_D64s_v3),
                                string(containerservices.Standard_D8_v3),
                                string(containerservices.Standard_D8s_v3),
                                string(containerservices.Standard_DS1),
                                string(containerservices.Standard_DS11),
                                string(containerservices.Standard_DS11_v2),
                                string(containerservices.Standard_DS11_v2_Promo),
                                string(containerservices.Standard_DS12),
                                string(containerservices.Standard_DS12_v2),
                                string(containerservices.Standard_DS12_v2_Promo),
                                string(containerservices.Standard_DS13),
                                string(containerservices.Standard_DS13-2_v2),
                                string(containerservices.Standard_DS13-4_v2),
                                string(containerservices.Standard_DS13_v2),
                                string(containerservices.Standard_DS13_v2_Promo),
                                string(containerservices.Standard_DS14),
                                string(containerservices.Standard_DS14-4_v2),
                                string(containerservices.Standard_DS14-8_v2),
                                string(containerservices.Standard_DS14_v2),
                                string(containerservices.Standard_DS14_v2_Promo),
                                string(containerservices.Standard_DS15_v2),
                                string(containerservices.Standard_DS1_v2),
                                string(containerservices.Standard_DS2),
                                string(containerservices.Standard_DS2_v2),
                                string(containerservices.Standard_DS2_v2_Promo),
                                string(containerservices.Standard_DS3),
                                string(containerservices.Standard_DS3_v2),
                                string(containerservices.Standard_DS3_v2_Promo),
                                string(containerservices.Standard_DS4),
                                string(containerservices.Standard_DS4_v2),
                                string(containerservices.Standard_DS4_v2_Promo),
                                string(containerservices.Standard_DS5_v2),
                                string(containerservices.Standard_DS5_v2_Promo),
                                string(containerservices.Standard_E16_v3),
                                string(containerservices.Standard_E16s_v3),
                                string(containerservices.Standard_E2_v3),
                                string(containerservices.Standard_E2s_v3),
                                string(containerservices.Standard_E32-16s_v3),
                                string(containerservices.Standard_E32-8s_v3),
                                string(containerservices.Standard_E32_v3),
                                string(containerservices.Standard_E32s_v3),
                                string(containerservices.Standard_E4_v3),
                                string(containerservices.Standard_E4s_v3),
                                string(containerservices.Standard_E64-16s_v3),
                                string(containerservices.Standard_E64-32s_v3),
                                string(containerservices.Standard_E64_v3),
                                string(containerservices.Standard_E64s_v3),
                                string(containerservices.Standard_E8_v3),
                                string(containerservices.Standard_E8s_v3),
                                string(containerservices.Standard_F1),
                                string(containerservices.Standard_F16),
                                string(containerservices.Standard_F16s),
                                string(containerservices.Standard_F16s_v2),
                                string(containerservices.Standard_F1s),
                                string(containerservices.Standard_F2),
                                string(containerservices.Standard_F2s),
                                string(containerservices.Standard_F2s_v2),
                                string(containerservices.Standard_F32s_v2),
                                string(containerservices.Standard_F4),
                                string(containerservices.Standard_F4s),
                                string(containerservices.Standard_F4s_v2),
                                string(containerservices.Standard_F64s_v2),
                                string(containerservices.Standard_F72s_v2),
                                string(containerservices.Standard_F8),
                                string(containerservices.Standard_F8s),
                                string(containerservices.Standard_F8s_v2),
                                string(containerservices.Standard_G1),
                                string(containerservices.Standard_G2),
                                string(containerservices.Standard_G3),
                                string(containerservices.Standard_G4),
                                string(containerservices.Standard_G5),
                                string(containerservices.Standard_GS1),
                                string(containerservices.Standard_GS2),
                                string(containerservices.Standard_GS3),
                                string(containerservices.Standard_GS4),
                                string(containerservices.Standard_GS4-4),
                                string(containerservices.Standard_GS4-8),
                                string(containerservices.Standard_GS5),
                                string(containerservices.Standard_GS5-16),
                                string(containerservices.Standard_GS5-8),
                                string(containerservices.Standard_H16),
                                string(containerservices.Standard_H16m),
                                string(containerservices.Standard_H16mr),
                                string(containerservices.Standard_H16r),
                                string(containerservices.Standard_H8),
                                string(containerservices.Standard_H8m),
                                string(containerservices.Standard_L16s),
                                string(containerservices.Standard_L32s),
                                string(containerservices.Standard_L4s),
                                string(containerservices.Standard_L8s),
                                string(containerservices.Standard_M128-32ms),
                                string(containerservices.Standard_M128-64ms),
                                string(containerservices.Standard_M128ms),
                                string(containerservices.Standard_M128s),
                                string(containerservices.Standard_M64-16ms),
                                string(containerservices.Standard_M64-32ms),
                                string(containerservices.Standard_M64ms),
                                string(containerservices.Standard_M64s),
                                string(containerservices.Standard_NC12),
                                string(containerservices.Standard_NC12s_v2),
                                string(containerservices.Standard_NC12s_v3),
                                string(containerservices.Standard_NC24),
                                string(containerservices.Standard_NC24r),
                                string(containerservices.Standard_NC24rs_v2),
                                string(containerservices.Standard_NC24rs_v3),
                                string(containerservices.Standard_NC24s_v2),
                                string(containerservices.Standard_NC24s_v3),
                                string(containerservices.Standard_NC6),
                                string(containerservices.Standard_NC6s_v2),
                                string(containerservices.Standard_NC6s_v3),
                                string(containerservices.Standard_ND12s),
                                string(containerservices.Standard_ND24rs),
                                string(containerservices.Standard_ND24s),
                                string(containerservices.Standard_ND6s),
                                string(containerservices.Standard_NV12),
                                string(containerservices.Standard_NV24),
                                string(containerservices.Standard_NV6),
                            }, false),
                        },
                        "availability_zones": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "enable_auto_scaling": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "max_count": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "max_pods": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "min_count": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "orchestrator_version": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "os_disk_size_gb": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "os_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(containerservices.Linux),
                                string(containerservices.Windows),
                            }, false),
                            Default: string(containerservices.Linux),
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(containerservices.VirtualMachineScaleSets),
                                string(containerservices.AvailabilitySet),
                            }, false),
                            Default: string(containerservices.VirtualMachineScaleSets),
                        },
                        "vnet_subnet_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "api_server_authorized_ipranges": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "dns_prefix": {
                Type: schema.TypeString,
                Optional: true,
            },

            "enable_pod_security_policy": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enable_rbac": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "identity": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(containerservices.SystemAssigned),
                                string(containerservices.None),
                            }, false),
                            Default: string(containerservices.SystemAssigned),
                        },
                    },
                },
            },

            "kubernetes_version": {
                Type: schema.TypeString,
                Optional: true,
            },

            "linux_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "admin_username": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "ssh": {
                            Type: schema.TypeList,
                            Required: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "public_keys": {
                                        Type: schema.TypeList,
                                        Required: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "key_data": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "network_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "dns_service_ip": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "docker_bridge_cidr": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "load_balancer_sku": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(containerservices.standard),
                                string(containerservices.basic),
                            }, false),
                            Default: string(containerservices.standard),
                        },
                        "network_plugin": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(containerservices.azure),
                                string(containerservices.kubenet),
                            }, false),
                            Default: string(containerservices.azure),
                        },
                        "network_policy": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(containerservices.calico),
                                string(containerservices.azure),
                            }, false),
                            Default: string(containerservices.calico),
                        },
                        "pod_cidr": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "service_cidr": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "node_resource_group": {
                Type: schema.TypeString,
                Optional: true,
            },

            "service_principal_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "client_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "secret": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "windows_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "admin_username": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "admin_password": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "fqdn": {
                Type: schema.TypeString,
                Computed: true,
            },

            "max_agent_pools": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmManagedClusterCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedClustersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Managed Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_managed_cluster", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    aadProfile := d.Get("aad_profile").([]interface{})
    addonProfiles := d.Get("addon_profiles").(map[string]interface{})
    agentPoolProfiles := d.Get("agent_pool_profiles").([]interface{})
    apiServerAuthorizedIpranges := d.Get("api_server_authorized_ipranges").([]interface{})
    dnsPrefix := d.Get("dns_prefix").(string)
    enablePodSecurityPolicy := d.Get("enable_pod_security_policy").(bool)
    enableRbac := d.Get("enable_rbac").(bool)
    identity := d.Get("identity").([]interface{})
    kubernetesVersion := d.Get("kubernetes_version").(string)
    linuxProfile := d.Get("linux_profile").([]interface{})
    networkProfile := d.Get("network_profile").([]interface{})
    nodeResourceGroup := d.Get("node_resource_group").(string)
    servicePrincipalProfile := d.Get("service_principal_profile").([]interface{})
    windowsProfile := d.Get("windows_profile").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := containerservices.ManagedCluster{
        Identity: expandArmManagedClusterManagedClusterIdentity(identity),
        Location: utils.String(location),
        ManagedClusterProperties: &containerservices.ManagedClusterProperties{
            AadProfile: expandArmManagedClusterManagedClusterAADProfile(aadProfile),
            AddonProfiles: utils.ExpandKeyValuePairs(addonProfiles),
            AgentPoolProfiles: expandArmManagedClusterManagedClusterAgentPoolProfile(agentPoolProfiles),
            ApiServerAuthorizedIpranges: utils.ExpandStringSlice(apiServerAuthorizedIpranges),
            DnsPrefix: utils.String(dnsPrefix),
            EnablePodSecurityPolicy: utils.Bool(enablePodSecurityPolicy),
            EnableRbac: utils.Bool(enableRbac),
            KubernetesVersion: utils.String(kubernetesVersion),
            LinuxProfile: expandArmManagedClusterContainerServiceLinuxProfile(linuxProfile),
            NetworkProfile: expandArmManagedClusterContainerServiceNetworkProfile(networkProfile),
            NodeResourceGroup: utils.String(nodeResourceGroup),
            ServicePrincipalProfile: expandArmManagedClusterManagedClusterServicePrincipalProfile(servicePrincipalProfile),
            WindowsProfile: expandArmManagedClusterManagedClusterWindowsProfile(windowsProfile),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Managed Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Managed Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Managed Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Managed Cluster %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmManagedClusterRead(d, meta)
}

func resourceArmManagedClusterRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedClustersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["managedClusters"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Managed Cluster %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Managed Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if managedClusterProperties := resp.ManagedClusterProperties; managedClusterProperties != nil {
        if err := d.Set("aad_profile", flattenArmManagedClusterManagedClusterAADProfile(managedClusterProperties.AadProfile)); err != nil {
            return fmt.Errorf("Error setting `aad_profile`: %+v", err)
        }
        d.Set("addon_profiles", utils.FlattenKeyValuePairs(managedClusterProperties.AddonProfiles))
        if err := d.Set("agent_pool_profiles", flattenArmManagedClusterManagedClusterAgentPoolProfile(managedClusterProperties.AgentPoolProfiles)); err != nil {
            return fmt.Errorf("Error setting `agent_pool_profiles`: %+v", err)
        }
        d.Set("api_server_authorized_ipranges", utils.FlattenStringSlice(managedClusterProperties.ApiServerAuthorizedIpranges))
        d.Set("dns_prefix", managedClusterProperties.DnsPrefix)
        d.Set("enable_pod_security_policy", managedClusterProperties.EnablePodSecurityPolicy)
        d.Set("enable_rbac", managedClusterProperties.EnableRbac)
        d.Set("fqdn", managedClusterProperties.Fqdn)
        d.Set("kubernetes_version", managedClusterProperties.KubernetesVersion)
        if err := d.Set("linux_profile", flattenArmManagedClusterContainerServiceLinuxProfile(managedClusterProperties.LinuxProfile)); err != nil {
            return fmt.Errorf("Error setting `linux_profile`: %+v", err)
        }
        d.Set("max_agent_pools", int(*managedClusterProperties.MaxAgentPools))
        if err := d.Set("network_profile", flattenArmManagedClusterContainerServiceNetworkProfile(managedClusterProperties.NetworkProfile)); err != nil {
            return fmt.Errorf("Error setting `network_profile`: %+v", err)
        }
        d.Set("node_resource_group", managedClusterProperties.NodeResourceGroup)
        d.Set("provisioning_state", managedClusterProperties.ProvisioningState)
        if err := d.Set("service_principal_profile", flattenArmManagedClusterManagedClusterServicePrincipalProfile(managedClusterProperties.ServicePrincipalProfile)); err != nil {
            return fmt.Errorf("Error setting `service_principal_profile`: %+v", err)
        }
        if err := d.Set("windows_profile", flattenArmManagedClusterManagedClusterWindowsProfile(managedClusterProperties.WindowsProfile)); err != nil {
            return fmt.Errorf("Error setting `windows_profile`: %+v", err)
        }
    }
    if err := d.Set("identity", flattenArmManagedClusterManagedClusterIdentity(resp.Identity)); err != nil {
        return fmt.Errorf("Error setting `identity`: %+v", err)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmManagedClusterDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedClustersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["managedClusters"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Managed Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Managed Cluster %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmManagedClusterManagedClusterIdentity(input []interface{}) *containerservices.ManagedClusterIdentity {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)

    result := containerservices.ManagedClusterIdentity{
        Type: containerservices.ResourceIdentityType(type),
    }
    return &result
}

func expandArmManagedClusterManagedClusterAADProfile(input []interface{}) *containerservices.ManagedClusterAADProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    clientAppId := v["client_app_id"].(string)
    serverAppId := v["server_app_id"].(string)
    serverAppSecret := v["server_app_secret"].(string)
    tenantId := v["tenant_id"].(string)

    result := containerservices.ManagedClusterAADProfile{
        ClientAppID: utils.String(clientAppId),
        ServerAppID: utils.String(serverAppId),
        ServerAppSecret: utils.String(serverAppSecret),
        TenantID: utils.String(tenantId),
    }
    return &result
}

func expandArmManagedClusterManagedClusterAgentPoolProfile(input []interface{}) *[]containerservices.ManagedClusterAgentPoolProfile {
    results := make([]containerservices.ManagedClusterAgentPoolProfile, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        count := v["count"].(int)
        vmSize := v["vm_size"].(string)
        osDiskSizeGb := v["os_disk_size_gb"].(int)
        vnetSubnetId := v["vnet_subnet_id"].(string)
        maxPods := v["max_pods"].(int)
        osType := v["os_type"].(string)
        maxCount := v["max_count"].(int)
        minCount := v["min_count"].(int)
        enableAutoScaling := v["enable_auto_scaling"].(bool)
        type := v["type"].(string)
        orchestratorVersion := v["orchestrator_version"].(string)
        availabilityZones := v["availability_zones"].([]interface{})
        name := v["name"].(string)

        result := containerservices.ManagedClusterAgentPoolProfile{
            AvailabilityZones: utils.ExpandStringSlice(availabilityZones),
            Count: utils.Int32(int32(count)),
            EnableAutoScaling: utils.Bool(enableAutoScaling),
            MaxCount: utils.Int32(int32(maxCount)),
            MaxPods: utils.Int32(int32(maxPods)),
            MinCount: utils.Int32(int32(minCount)),
            Name: utils.String(name),
            OrchestratorVersion: utils.String(orchestratorVersion),
            OsDiskSizeGb: utils.Int32(int32(osDiskSizeGb)),
            OsType: containerservices.OSType(osType),
            Type: containerservices.AgentPoolType(type),
            VmSize: containerservices.ContainerServiceVMSizeTypes(vmSize),
            VnetSubnetID: utils.String(vnetSubnetId),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmManagedClusterContainerServiceLinuxProfile(input []interface{}) *containerservices.ContainerServiceLinuxProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    adminUsername := v["admin_username"].(string)
    ssh := v["ssh"].([]interface{})

    result := containerservices.ContainerServiceLinuxProfile{
        AdminUsername: utils.String(adminUsername),
        Ssh: expandArmManagedClusterContainerServiceSshConfiguration(ssh),
    }
    return &result
}

func expandArmManagedClusterContainerServiceNetworkProfile(input []interface{}) *containerservices.ContainerServiceNetworkProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    networkPlugin := v["network_plugin"].(string)
    networkPolicy := v["network_policy"].(string)
    podCidr := v["pod_cidr"].(string)
    serviceCidr := v["service_cidr"].(string)
    dnsServiceIp := v["dns_service_ip"].(string)
    dockerBridgeCidr := v["docker_bridge_cidr"].(string)
    loadBalancerSku := v["load_balancer_sku"].(string)

    result := containerservices.ContainerServiceNetworkProfile{
        DnsServiceIp: utils.String(dnsServiceIp),
        DockerBridgeCidr: utils.String(dockerBridgeCidr),
        LoadBalancerSku: containerservices.LoadBalancerSku(loadBalancerSku),
        NetworkPlugin: containerservices.NetworkPlugin(networkPlugin),
        NetworkPolicy: containerservices.NetworkPolicy(networkPolicy),
        PodCidr: utils.String(podCidr),
        ServiceCidr: utils.String(serviceCidr),
    }
    return &result
}

func expandArmManagedClusterManagedClusterServicePrincipalProfile(input []interface{}) *containerservices.ManagedClusterServicePrincipalProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    clientId := v["client_id"].(string)
    secret := v["secret"].(string)

    result := containerservices.ManagedClusterServicePrincipalProfile{
        ClientID: utils.String(clientId),
        Secret: utils.String(secret),
    }
    return &result
}

func expandArmManagedClusterManagedClusterWindowsProfile(input []interface{}) *containerservices.ManagedClusterWindowsProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    adminUsername := v["admin_username"].(string)
    adminPassword := v["admin_password"].(string)

    result := containerservices.ManagedClusterWindowsProfile{
        AdminPassword: utils.String(adminPassword),
        AdminUsername: utils.String(adminUsername),
    }
    return &result
}

func expandArmManagedClusterContainerServiceSshConfiguration(input []interface{}) *containerservices.ContainerServiceSshConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    publicKeys := v["public_keys"].([]interface{})

    result := containerservices.ContainerServiceSshConfiguration{
        PublicKeys: expandArmManagedClusterContainerServiceSshPublicKey(publicKeys),
    }
    return &result
}

func expandArmManagedClusterContainerServiceSshPublicKey(input []interface{}) *[]containerservices.ContainerServiceSshPublicKey {
    results := make([]containerservices.ContainerServiceSshPublicKey, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        keyData := v["key_data"].(string)

        result := containerservices.ContainerServiceSshPublicKey{
            KeyData: utils.String(keyData),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmManagedClusterManagedClusterAADProfile(input *containerservices.ManagedClusterAADProfile) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if clientAppId := input.ClientAppID; clientAppId != nil {
        result["client_app_id"] = *clientAppId
    }
    if serverAppId := input.ServerAppID; serverAppId != nil {
        result["server_app_id"] = *serverAppId
    }
    if serverAppSecret := input.ServerAppSecret; serverAppSecret != nil {
        result["server_app_secret"] = *serverAppSecret
    }
    if tenantId := input.TenantID; tenantId != nil {
        result["tenant_id"] = *tenantId
    }

    return []interface{}{result}
}

func flattenArmManagedClusterManagedClusterAgentPoolProfile(input *[]containerservices.ManagedClusterAgentPoolProfile) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }
        v["availability_zones"] = utils.FlattenStringSlice(item.AvailabilityZones)
        if count := item.Count; count != nil {
            v["count"] = int(*count)
        }
        if enableAutoScaling := item.EnableAutoScaling; enableAutoScaling != nil {
            v["enable_auto_scaling"] = *enableAutoScaling
        }
        if maxCount := item.MaxCount; maxCount != nil {
            v["max_count"] = int(*maxCount)
        }
        if maxPods := item.MaxPods; maxPods != nil {
            v["max_pods"] = int(*maxPods)
        }
        if minCount := item.MinCount; minCount != nil {
            v["min_count"] = int(*minCount)
        }
        if orchestratorVersion := item.OrchestratorVersion; orchestratorVersion != nil {
            v["orchestrator_version"] = *orchestratorVersion
        }
        if osDiskSizeGb := item.OsDiskSizeGb; osDiskSizeGb != nil {
            v["os_disk_size_gb"] = int(*osDiskSizeGb)
        }
        v["os_type"] = string(item.OsType)
        v["type"] = string(item.Type)
        v["vm_size"] = string(item.VmSize)
        if vnetSubnetId := item.VnetSubnetID; vnetSubnetId != nil {
            v["vnet_subnet_id"] = *vnetSubnetId
        }

        results = append(results, v)
    }

    return results
}

func flattenArmManagedClusterContainerServiceLinuxProfile(input *containerservices.ContainerServiceLinuxProfile) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if adminUsername := input.AdminUsername; adminUsername != nil {
        result["admin_username"] = *adminUsername
    }
    result["ssh"] = flattenArmManagedClusterContainerServiceSshConfiguration(input.Ssh)

    return []interface{}{result}
}

func flattenArmManagedClusterContainerServiceNetworkProfile(input *containerservices.ContainerServiceNetworkProfile) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if dnsServiceIp := input.DnsServiceIp; dnsServiceIp != nil {
        result["dns_service_ip"] = *dnsServiceIp
    }
    if dockerBridgeCidr := input.DockerBridgeCidr; dockerBridgeCidr != nil {
        result["docker_bridge_cidr"] = *dockerBridgeCidr
    }
    result["load_balancer_sku"] = string(input.LoadBalancerSku)
    result["network_plugin"] = string(input.NetworkPlugin)
    result["network_policy"] = string(input.NetworkPolicy)
    if podCidr := input.PodCidr; podCidr != nil {
        result["pod_cidr"] = *podCidr
    }
    if serviceCidr := input.ServiceCidr; serviceCidr != nil {
        result["service_cidr"] = *serviceCidr
    }

    return []interface{}{result}
}

func flattenArmManagedClusterManagedClusterServicePrincipalProfile(input *containerservices.ManagedClusterServicePrincipalProfile) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if clientId := input.ClientID; clientId != nil {
        result["client_id"] = *clientId
    }
    if secret := input.Secret; secret != nil {
        result["secret"] = *secret
    }

    return []interface{}{result}
}

func flattenArmManagedClusterManagedClusterWindowsProfile(input *containerservices.ManagedClusterWindowsProfile) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if adminPassword := input.AdminPassword; adminPassword != nil {
        result["admin_password"] = *adminPassword
    }
    if adminUsername := input.AdminUsername; adminUsername != nil {
        result["admin_username"] = *adminUsername
    }

    return []interface{}{result}
}

func flattenArmManagedClusterManagedClusterIdentity(input *containerservices.ManagedClusterIdentity) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["type"] = string(input.Type)

    return []interface{}{result}
}

func flattenArmManagedClusterContainerServiceSshConfiguration(input *containerservices.ContainerServiceSshConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["public_keys"] = flattenArmManagedClusterContainerServiceSshPublicKey(input.PublicKeys)

    return []interface{}{result}
}

func flattenArmManagedClusterContainerServiceSshPublicKey(input *[]containerservices.ContainerServiceSshPublicKey) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if keyData := item.KeyData; keyData != nil {
            v["key_data"] = *keyData
        }

        results = append(results, v)
    }

    return results
}
