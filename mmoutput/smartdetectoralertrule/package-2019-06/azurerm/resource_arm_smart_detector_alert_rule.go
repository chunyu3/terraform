// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmSmartDetectorAlertRule() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmSmartDetectorAlertRuleCreateUpdate,
        Read: resourceArmSmartDetectorAlertRuleRead,
        Update: resourceArmSmartDetectorAlertRuleCreateUpdate,
        Delete: resourceArmSmartDetectorAlertRuleDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "action_groups": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "group_ids": {
                            Type: schema.TypeList,
                            Required: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "custom_email_subject": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "custom_webhook_payload": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "alert_rule_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "detector": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "description": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "image_paths": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "parameters": {
                            Type: schema.TypeMap,
                            Optional: true,
                            Elem: &schema.Schema{Type: schema.TypeString},
                        },
                        "supported_resource_types": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                    },
                },
            },

            "frequency": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
                ValidateFunc: validateIso8601Duration(),
            },

            "scope": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "severity": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(alertsmanagement.Sev0),
                    string(alertsmanagement.Sev1),
                    string(alertsmanagement.Sev2),
                    string(alertsmanagement.Sev3),
                    string(alertsmanagement.Sev4),
                }, false),
            },

            "state": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(alertsmanagement.Enabled),
                    string(alertsmanagement.Disabled),
                }, false),
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "throttling": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "duration": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateIso8601Duration(),
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmSmartDetectorAlertRuleCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).smartDetectorAlertRulesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    alertRuleName := d.Get("alert_rule_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, alertRuleName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Smart Detector Alert Rule (Alert Rule Name %q / Resource Group %q): %+v", alertRuleName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_smart_detector_alert_rule", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    actionGroups := d.Get("action_groups").([]interface{})
    description := d.Get("description").(string)
    detector := d.Get("detector").([]interface{})
    frequency := d.Get("frequency").(string)
    scope := d.Get("scope").([]interface{})
    severity := d.Get("severity").(string)
    state := d.Get("state").(string)
    throttling := d.Get("throttling").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := alertsmanagement.AlertRule{
        Location: utils.String(location),
        AlertRuleProperties: &alertsmanagement.AlertRuleProperties{
            ActionGroups: expandArmSmartDetectorAlertRuleActionGroupsInformation(actionGroups),
            Description: utils.String(description),
            Detector: expandArmSmartDetectorAlertRuleDetector(detector),
            Frequency: utils.String(frequency),
            Scope: utils.ExpandStringSlice(scope),
            Severity: alertsmanagement.Severity(severity),
            State: alertsmanagement.AlertRuleState(state),
            Throttling: expandArmSmartDetectorAlertRuleThrottlingInformation(throttling),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, alertRuleName, parameters); err != nil {
        return fmt.Errorf("Error creating Smart Detector Alert Rule (Alert Rule Name %q / Resource Group %q): %+v", alertRuleName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, alertRuleName)
    if err != nil {
        return fmt.Errorf("Error retrieving Smart Detector Alert Rule (Alert Rule Name %q / Resource Group %q): %+v", alertRuleName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Smart Detector Alert Rule (Alert Rule Name %q / Resource Group %q) ID", alertRuleName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmSmartDetectorAlertRuleRead(d, meta)
}

func resourceArmSmartDetectorAlertRuleRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).smartDetectorAlertRulesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    alertRuleName := id.Path["smartDetectorAlertRules"]

    resp, err := client.Get(ctx, resourceGroup, alertRuleName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Smart Detector Alert Rule %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Smart Detector Alert Rule (Alert Rule Name %q / Resource Group %q): %+v", alertRuleName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if alertRuleProperties := resp.AlertRuleProperties; alertRuleProperties != nil {
        if err := d.Set("action_groups", flattenArmSmartDetectorAlertRuleActionGroupsInformation(alertRuleProperties.ActionGroups)); err != nil {
            return fmt.Errorf("Error setting `action_groups`: %+v", err)
        }
        d.Set("description", alertRuleProperties.Description)
        if err := d.Set("detector", flattenArmSmartDetectorAlertRuleDetector(alertRuleProperties.Detector)); err != nil {
            return fmt.Errorf("Error setting `detector`: %+v", err)
        }
        d.Set("frequency", alertRuleProperties.Frequency)
        d.Set("scope", utils.FlattenStringSlice(alertRuleProperties.Scope))
        d.Set("severity", string(alertRuleProperties.Severity))
        d.Set("state", string(alertRuleProperties.State))
        if err := d.Set("throttling", flattenArmSmartDetectorAlertRuleThrottlingInformation(alertRuleProperties.Throttling)); err != nil {
            return fmt.Errorf("Error setting `throttling`: %+v", err)
        }
    }
    d.Set("alert_rule_name", alertRuleName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmSmartDetectorAlertRuleDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).smartDetectorAlertRulesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    alertRuleName := id.Path["smartDetectorAlertRules"]

    if _, err := client.Delete(ctx, resourceGroup, alertRuleName); err != nil {
        return fmt.Errorf("Error deleting Smart Detector Alert Rule (Alert Rule Name %q / Resource Group %q): %+v", alertRuleName, resourceGroup, err)
    }

    return nil
}

func expandArmSmartDetectorAlertRuleActionGroupsInformation(input []interface{}) *alertsmanagement.ActionGroupsInformation {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    customEmailSubject := v["custom_email_subject"].(string)
    customWebhookPayload := v["custom_webhook_payload"].(string)
    groupIds := v["group_ids"].([]interface{})

    result := alertsmanagement.ActionGroupsInformation{
        CustomEmailSubject: utils.String(customEmailSubject),
        CustomWebhookPayload: utils.String(customWebhookPayload),
        GroupIds: utils.ExpandStringSlice(groupIds),
    }
    return &result
}

func expandArmSmartDetectorAlertRuleDetector(input []interface{}) *alertsmanagement.Detector {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    parameters := v["parameters"].(map[string]interface{})
    name := v["name"].(string)
    description := v["description"].(string)
    supportedResourceTypes := v["supported_resource_types"].([]interface{})
    imagePaths := v["image_paths"].([]interface{})

    result := alertsmanagement.Detector{
        Description: utils.String(description),
        ID: utils.String(id),
        ImagePaths: utils.ExpandStringSlice(imagePaths),
        Name: utils.String(name),
        Parameters: utils.ExpandKeyValuePairs(parameters),
        SupportedResourceTypes: utils.ExpandStringSlice(supportedResourceTypes),
    }
    return &result
}

func expandArmSmartDetectorAlertRuleThrottlingInformation(input []interface{}) *alertsmanagement.ThrottlingInformation {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    duration := v["duration"].(string)

    result := alertsmanagement.ThrottlingInformation{
        Duration: utils.String(duration),
    }
    return &result
}


func flattenArmSmartDetectorAlertRuleActionGroupsInformation(input *alertsmanagement.ActionGroupsInformation) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if customEmailSubject := input.CustomEmailSubject; customEmailSubject != nil {
        result["custom_email_subject"] = *customEmailSubject
    }
    if customWebhookPayload := input.CustomWebhookPayload; customWebhookPayload != nil {
        result["custom_webhook_payload"] = *customWebhookPayload
    }
    result["group_ids"] = utils.FlattenStringSlice(input.GroupIds)

    return []interface{}{result}
}

func flattenArmSmartDetectorAlertRuleDetector(input *alertsmanagement.Detector) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if description := input.Description; description != nil {
        result["description"] = *description
    }
    result["image_paths"] = utils.FlattenStringSlice(input.ImagePaths)
    result["parameters"] = utils.FlattenKeyValuePairs(input.Parameters)
    result["supported_resource_types"] = utils.FlattenStringSlice(input.SupportedResourceTypes)

    return []interface{}{result}
}

func flattenArmSmartDetectorAlertRuleThrottlingInformation(input *alertsmanagement.ThrottlingInformation) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if duration := input.Duration; duration != nil {
        result["duration"] = *duration
    }

    return []interface{}{result}
}
