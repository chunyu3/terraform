// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmTrustedIdProvider() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmTrustedIdProviderCreate,
        Read: resourceArmTrustedIdProviderRead,
        Update: resourceArmTrustedIdProviderUpdate,
        Delete: resourceArmTrustedIdProviderDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "id_provider": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "trusted_id_provider_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmTrustedIdProviderCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).trustedIdProvidersClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    trustedIDProviderName := d.Get("trusted_id_provider_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName, trustedIDProviderName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Trusted Id Provider (Trusted Id Provider Name %q / Account Name %q / Resource Group %q): %+v", trustedIDProviderName, accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_trusted_id_provider", *existing.ID)
        }
    }

    idProvider := d.Get("id_provider").(string)

    parameters := datalakestore.CreateOrUpdateTrustedIdProviderParameters{
        CreateOrUpdateTrustedIdProviderProperties: &datalakestore.CreateOrUpdateTrustedIdProviderProperties{
            IDProvider: utils.String(idProvider),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, accountName, trustedIDProviderName, parameters); err != nil {
        return fmt.Errorf("Error creating Trusted Id Provider (Trusted Id Provider Name %q / Account Name %q / Resource Group %q): %+v", trustedIDProviderName, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, trustedIDProviderName)
    if err != nil {
        return fmt.Errorf("Error retrieving Trusted Id Provider (Trusted Id Provider Name %q / Account Name %q / Resource Group %q): %+v", trustedIDProviderName, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Trusted Id Provider (Trusted Id Provider Name %q / Account Name %q / Resource Group %q) ID", trustedIDProviderName, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmTrustedIdProviderRead(d, meta)
}

func resourceArmTrustedIdProviderRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).trustedIdProvidersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["accounts"]
    trustedIDProviderName := id.Path["trustedIdProviders"]

    resp, err := client.Get(ctx, resourceGroup, accountName, trustedIDProviderName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Trusted Id Provider %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Trusted Id Provider (Trusted Id Provider Name %q / Account Name %q / Resource Group %q): %+v", trustedIDProviderName, accountName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("account_name", accountName)
    if createOrUpdateTrustedIdProviderProperties := resp.CreateOrUpdateTrustedIdProviderProperties; createOrUpdateTrustedIdProviderProperties != nil {
        d.Set("id_provider", createOrUpdateTrustedIdProviderProperties.IDProvider)
    }
    d.Set("trusted_id_provider_name", trustedIDProviderName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmTrustedIdProviderUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).trustedIdProvidersClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    idProvider := d.Get("id_provider").(string)
    trustedIDProviderName := d.Get("trusted_id_provider_name").(string)

    parameters := datalakestore.CreateOrUpdateTrustedIdProviderParameters{
        CreateOrUpdateTrustedIdProviderProperties: &datalakestore.CreateOrUpdateTrustedIdProviderProperties{
            IDProvider: utils.String(idProvider),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, accountName, trustedIDProviderName, parameters); err != nil {
        return fmt.Errorf("Error updating Trusted Id Provider (Trusted Id Provider Name %q / Account Name %q / Resource Group %q): %+v", trustedIDProviderName, accountName, resourceGroup, err)
    }

    return resourceArmTrustedIdProviderRead(d, meta)
}

func resourceArmTrustedIdProviderDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).trustedIdProvidersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["accounts"]
    trustedIDProviderName := id.Path["trustedIdProviders"]

    if _, err := client.Delete(ctx, resourceGroup, accountName, trustedIDProviderName); err != nil {
        return fmt.Errorf("Error deleting Trusted Id Provider (Trusted Id Provider Name %q / Account Name %q / Resource Group %q): %+v", trustedIDProviderName, accountName, resourceGroup, err)
    }

    return nil
}
