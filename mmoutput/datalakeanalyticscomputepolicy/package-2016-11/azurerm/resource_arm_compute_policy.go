// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmComputePolicy() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmComputePolicyCreate,
        Read: resourceArmComputePolicyRead,
        Update: resourceArmComputePolicyUpdate,
        Delete: resourceArmComputePolicyDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "compute_policy_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "object_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "object_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(datalakeanalytics.User),
                    string(datalakeanalytics.Group),
                    string(datalakeanalytics.ServicePrincipal),
                }, false),
            },

            "max_degree_of_parallelism_per_job": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "min_priority_per_job": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmComputePolicyCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).computePoliciesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    computePolicyName := d.Get("compute_policy_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName, computePolicyName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Compute Policy (Compute Policy Name %q / Account Name %q / Resource Group %q): %+v", computePolicyName, accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_compute_policy", *existing.ID)
        }
    }

    maxDegreeOfParallelismPerJob := d.Get("max_degree_of_parallelism_per_job").(int)
    minPriorityPerJob := d.Get("min_priority_per_job").(int)
    objectId := d.Get("object_id").(string)
    objectType := d.Get("object_type").(string)

    parameters := datalakeanalytics.CreateOrUpdateComputePolicyParameters{
        CreateOrUpdateComputePolicyProperties: &datalakeanalytics.CreateOrUpdateComputePolicyProperties{
            MaxDegreeOfParallelismPerJob: utils.Int32(int32(maxDegreeOfParallelismPerJob)),
            MinPriorityPerJob: utils.Int32(int32(minPriorityPerJob)),
            ObjectID: utils.String(objectId),
            ObjectType: datalakeanalytics.AADObjectType(objectType),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, accountName, computePolicyName, parameters); err != nil {
        return fmt.Errorf("Error creating Compute Policy (Compute Policy Name %q / Account Name %q / Resource Group %q): %+v", computePolicyName, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, computePolicyName)
    if err != nil {
        return fmt.Errorf("Error retrieving Compute Policy (Compute Policy Name %q / Account Name %q / Resource Group %q): %+v", computePolicyName, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Compute Policy (Compute Policy Name %q / Account Name %q / Resource Group %q) ID", computePolicyName, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmComputePolicyRead(d, meta)
}

func resourceArmComputePolicyRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).computePoliciesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["accounts"]
    computePolicyName := id.Path["computePolicies"]

    resp, err := client.Get(ctx, resourceGroup, accountName, computePolicyName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Compute Policy %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Compute Policy (Compute Policy Name %q / Account Name %q / Resource Group %q): %+v", computePolicyName, accountName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("account_name", accountName)
    d.Set("compute_policy_name", computePolicyName)
    if createOrUpdateComputePolicyProperties := resp.CreateOrUpdateComputePolicyProperties; createOrUpdateComputePolicyProperties != nil {
        d.Set("max_degree_of_parallelism_per_job", int(*createOrUpdateComputePolicyProperties.MaxDegreeOfParallelismPerJob))
        d.Set("min_priority_per_job", int(*createOrUpdateComputePolicyProperties.MinPriorityPerJob))
        d.Set("object_id", createOrUpdateComputePolicyProperties.ObjectID)
        d.Set("object_type", string(createOrUpdateComputePolicyProperties.ObjectType))
    }
    d.Set("type", resp.Type)

    return nil
}

func resourceArmComputePolicyUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).computePoliciesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    computePolicyName := d.Get("compute_policy_name").(string)
    maxDegreeOfParallelismPerJob := d.Get("max_degree_of_parallelism_per_job").(int)
    minPriorityPerJob := d.Get("min_priority_per_job").(int)
    objectId := d.Get("object_id").(string)
    objectType := d.Get("object_type").(string)

    parameters := datalakeanalytics.CreateOrUpdateComputePolicyParameters{
        CreateOrUpdateComputePolicyProperties: &datalakeanalytics.CreateOrUpdateComputePolicyProperties{
            MaxDegreeOfParallelismPerJob: utils.Int32(int32(maxDegreeOfParallelismPerJob)),
            MinPriorityPerJob: utils.Int32(int32(minPriorityPerJob)),
            ObjectID: utils.String(objectId),
            ObjectType: datalakeanalytics.AADObjectType(objectType),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, accountName, computePolicyName, parameters); err != nil {
        return fmt.Errorf("Error updating Compute Policy (Compute Policy Name %q / Account Name %q / Resource Group %q): %+v", computePolicyName, accountName, resourceGroup, err)
    }

    return resourceArmComputePolicyRead(d, meta)
}

func resourceArmComputePolicyDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).computePoliciesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["accounts"]
    computePolicyName := id.Path["computePolicies"]

    if _, err := client.Delete(ctx, resourceGroup, accountName, computePolicyName); err != nil {
        return fmt.Errorf("Error deleting Compute Policy (Compute Policy Name %q / Account Name %q / Resource Group %q): %+v", computePolicyName, accountName, resourceGroup, err)
    }

    return nil
}
