// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmRelationshipLink() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmRelationshipLinkCreateUpdate,
        Read: resourceArmRelationshipLinkRead,
        Update: resourceArmRelationshipLinkCreateUpdate,
        Delete: resourceArmRelationshipLinkDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "hub_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "interaction_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "profile_property_references": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "interaction_property_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "profile_property_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "related_profile_property_references": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "interaction_property_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "profile_property_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "relationship_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "description": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "display_name": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "mappings": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "interaction_field_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "relationship_field_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "link_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(customerinsights.UpdateAlways),
                                string(customerinsights.CopyIfNull),
                            }, false),
                            Default: string(customerinsights.UpdateAlways),
                        },
                    },
                },
            },

            "link_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "relationship_guid_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tenant_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmRelationshipLinkCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).relationshipLinksClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    hubName := d.Get("hub_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, hubName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Relationship Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_relationship_link", *existing.ID)
        }
    }

    description := d.Get("description").(map[string]interface{})
    displayName := d.Get("display_name").(map[string]interface{})
    interactionType := d.Get("interaction_type").(string)
    mappings := d.Get("mappings").([]interface{})
    profilePropertyReferences := d.Get("profile_property_references").([]interface{})
    relatedProfilePropertyReferences := d.Get("related_profile_property_references").([]interface{})
    relationshipName := d.Get("relationship_name").(string)

    parameters := customerinsights.RelationshipLinkResourceFormat{
        RelationshipLinkDefinition: &customerinsights.RelationshipLinkDefinition{
            Description: utils.ExpandKeyValuePairs(description),
            DisplayName: utils.ExpandKeyValuePairs(displayName),
            InteractionType: utils.String(interactionType),
            Mappings: expandArmRelationshipLinkRelationshipLinkFieldMapping(mappings),
            ProfilePropertyReferences: expandArmRelationshipLinkParticipantPropertyReference(profilePropertyReferences),
            RelatedProfilePropertyReferences: expandArmRelationshipLinkParticipantPropertyReference(relatedProfilePropertyReferences),
            RelationshipName: utils.String(relationshipName),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, hubName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Relationship Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Relationship Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, hubName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Relationship Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Relationship Link %q (Hub Name %q / Resource Group %q) ID", name, hubName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmRelationshipLinkRead(d, meta)
}

func resourceArmRelationshipLinkRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).relationshipLinksClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    name := id.Path["relationshipLinks"]

    resp, err := client.Get(ctx, resourceGroup, hubName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Relationship Link %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Relationship Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if relationshipLinkDefinition := resp.RelationshipLinkDefinition; relationshipLinkDefinition != nil {
        d.Set("description", utils.FlattenKeyValuePairs(relationshipLinkDefinition.Description))
        d.Set("display_name", utils.FlattenKeyValuePairs(relationshipLinkDefinition.DisplayName))
        d.Set("interaction_type", relationshipLinkDefinition.InteractionType)
        d.Set("link_name", relationshipLinkDefinition.LinkName)
        if err := d.Set("mappings", flattenArmRelationshipLinkRelationshipLinkFieldMapping(relationshipLinkDefinition.Mappings)); err != nil {
            return fmt.Errorf("Error setting `mappings`: %+v", err)
        }
        if err := d.Set("profile_property_references", flattenArmRelationshipLinkParticipantPropertyReference(relationshipLinkDefinition.ProfilePropertyReferences)); err != nil {
            return fmt.Errorf("Error setting `profile_property_references`: %+v", err)
        }
        d.Set("provisioning_state", string(relationshipLinkDefinition.ProvisioningState))
        if err := d.Set("related_profile_property_references", flattenArmRelationshipLinkParticipantPropertyReference(relationshipLinkDefinition.RelatedProfilePropertyReferences)); err != nil {
            return fmt.Errorf("Error setting `related_profile_property_references`: %+v", err)
        }
        d.Set("relationship_guid_id", relationshipLinkDefinition.RelationshipGUIDID)
        d.Set("relationship_name", relationshipLinkDefinition.RelationshipName)
        d.Set("tenant_id", relationshipLinkDefinition.TenantID)
    }
    d.Set("hub_name", hubName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmRelationshipLinkDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).relationshipLinksClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    name := id.Path["relationshipLinks"]

    future, err := client.Delete(ctx, resourceGroup, hubName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Relationship Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Relationship Link %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmRelationshipLinkRelationshipLinkFieldMapping(input []interface{}) *[]customerinsights.RelationshipLinkFieldMapping {
    results := make([]customerinsights.RelationshipLinkFieldMapping, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        interactionFieldName := v["interaction_field_name"].(string)
        linkType := v["link_type"].(string)
        relationshipFieldName := v["relationship_field_name"].(string)

        result := customerinsights.RelationshipLinkFieldMapping{
            InteractionFieldName: utils.String(interactionFieldName),
            LinkType: customerinsights.LinkTypes(linkType),
            RelationshipFieldName: utils.String(relationshipFieldName),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmRelationshipLinkParticipantPropertyReference(input []interface{}) *[]customerinsights.ParticipantPropertyReference {
    results := make([]customerinsights.ParticipantPropertyReference, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        interactionPropertyName := v["interaction_property_name"].(string)
        profilePropertyName := v["profile_property_name"].(string)

        result := customerinsights.ParticipantPropertyReference{
            InteractionPropertyName: utils.String(interactionPropertyName),
            ProfilePropertyName: utils.String(profilePropertyName),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmRelationshipLinkRelationshipLinkFieldMapping(input *[]customerinsights.RelationshipLinkFieldMapping) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if interactionFieldName := item.InteractionFieldName; interactionFieldName != nil {
            v["interaction_field_name"] = *interactionFieldName
        }
        v["link_type"] = string(item.LinkType)
        if relationshipFieldName := item.RelationshipFieldName; relationshipFieldName != nil {
            v["relationship_field_name"] = *relationshipFieldName
        }

        results = append(results, v)
    }

    return results
}

func flattenArmRelationshipLinkParticipantPropertyReference(input *[]customerinsights.ParticipantPropertyReference) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if interactionPropertyName := item.InteractionPropertyName; interactionPropertyName != nil {
            v["interaction_property_name"] = *interactionPropertyName
        }
        if profilePropertyName := item.ProfilePropertyName; profilePropertyName != nil {
            v["profile_property_name"] = *profilePropertyName
        }

        results = append(results, v)
    }

    return results
}
