// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmSubscription() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmSubscriptionCreate,
        Read: resourceArmSubscriptionRead,
        Update: resourceArmSubscriptionUpdate,
        Delete: resourceArmSubscriptionDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "display_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "product_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "sid": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "user_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "primary_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "secondary_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.suspended),
                    string(apimanagement.active),
                    string(apimanagement.expired),
                    string(apimanagement.submitted),
                    string(apimanagement.rejected),
                    string(apimanagement.cancelled),
                }, false),
                Default: string(apimanagement.suspended),
            },

            "created_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "end_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "expiration_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "notification_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "start_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "state_comment": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmSubscriptionCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).subscriptionClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    sid := d.Get("sid").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, sid)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Subscription %q (Sid %q / Resource Group %q): %+v", name, sid, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_subscription", *existing.ID)
        }
    }

    displayName := d.Get("display_name").(string)
    primaryKey := d.Get("primary_key").(string)
    productId := d.Get("product_id").(string)
    secondaryKey := d.Get("secondary_key").(string)
    state := d.Get("state").(string)
    userId := d.Get("user_id").(string)

    parameters := apimanagement.SubscriptionCreateParameters{
        SubscriptionCreateParameterProperties: &apimanagement.SubscriptionCreateParameterProperties{
            DisplayName: utils.String(displayName),
            PrimaryKey: utils.String(primaryKey),
            ProductID: utils.String(productId),
            SecondaryKey: utils.String(secondaryKey),
            State: apimanagement.SubscriptionState(state),
            UserID: utils.String(userId),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, sid, parameters); err != nil {
        return fmt.Errorf("Error creating Subscription %q (Sid %q / Resource Group %q): %+v", name, sid, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, sid)
    if err != nil {
        return fmt.Errorf("Error retrieving Subscription %q (Sid %q / Resource Group %q): %+v", name, sid, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Subscription %q (Sid %q / Resource Group %q) ID", name, sid, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmSubscriptionRead(d, meta)
}

func resourceArmSubscriptionRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).subscriptionClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    sid := id.Path["subscriptions"]

    resp, err := client.Get(ctx, resourceGroup, name, sid)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Subscription %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Subscription %q (Sid %q / Resource Group %q): %+v", name, sid, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if subscriptionCreateParameterProperties := resp.SubscriptionCreateParameterProperties; subscriptionCreateParameterProperties != nil {
        d.Set("created_date", (subscriptionCreateParameterProperties.CreatedDate).String())
        d.Set("display_name", subscriptionCreateParameterProperties.DisplayName)
        d.Set("end_date", (subscriptionCreateParameterProperties.EndDate).String())
        d.Set("expiration_date", (subscriptionCreateParameterProperties.ExpirationDate).String())
        d.Set("notification_date", (subscriptionCreateParameterProperties.NotificationDate).String())
        d.Set("primary_key", subscriptionCreateParameterProperties.PrimaryKey)
        d.Set("product_id", subscriptionCreateParameterProperties.ProductID)
        d.Set("secondary_key", subscriptionCreateParameterProperties.SecondaryKey)
        d.Set("start_date", (subscriptionCreateParameterProperties.StartDate).String())
        d.Set("state", string(subscriptionCreateParameterProperties.State))
        d.Set("state_comment", subscriptionCreateParameterProperties.StateComment)
        d.Set("user_id", subscriptionCreateParameterProperties.UserID)
    }
    d.Set("sid", sid)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmSubscriptionUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).subscriptionClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    displayName := d.Get("display_name").(string)
    primaryKey := d.Get("primary_key").(string)
    productId := d.Get("product_id").(string)
    secondaryKey := d.Get("secondary_key").(string)
    sid := d.Get("sid").(string)
    state := d.Get("state").(string)
    userId := d.Get("user_id").(string)

    parameters := apimanagement.SubscriptionCreateParameters{
        SubscriptionCreateParameterProperties: &apimanagement.SubscriptionCreateParameterProperties{
            DisplayName: utils.String(displayName),
            PrimaryKey: utils.String(primaryKey),
            ProductID: utils.String(productId),
            SecondaryKey: utils.String(secondaryKey),
            State: apimanagement.SubscriptionState(state),
            UserID: utils.String(userId),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, name, sid, parameters); err != nil {
        return fmt.Errorf("Error updating Subscription %q (Sid %q / Resource Group %q): %+v", name, sid, resourceGroup, err)
    }

    return resourceArmSubscriptionRead(d, meta)
}

func resourceArmSubscriptionDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).subscriptionClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    sid := id.Path["subscriptions"]

    if _, err := client.Delete(ctx, resourceGroup, name, sid); err != nil {
        return fmt.Errorf("Error deleting Subscription %q (Sid %q / Resource Group %q): %+v", name, sid, resourceGroup, err)
    }

    return nil
}
