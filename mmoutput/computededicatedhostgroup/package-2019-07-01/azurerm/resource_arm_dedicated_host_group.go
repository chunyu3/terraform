// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDedicatedHostGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDedicatedHostGroupCreate,
        Read: resourceArmDedicatedHostGroupRead,
        Update: resourceArmDedicatedHostGroupUpdate,
        Delete: resourceArmDedicatedHostGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "host_group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "platform_fault_domain_count": {
                Type: schema.TypeInt,
                Required: true,
            },

            "zones": {
                Type: schema.TypeList,
                Optional: true,
                ForceNew: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "hosts": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmDedicatedHostGroupCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).dedicatedHostGroupsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    hostGroupName := d.Get("host_group_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, hostGroupName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Dedicated Host Group (Host Group Name %q / Resource Group %q): %+v", hostGroupName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_dedicated_host_group", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    platformFaultDomainCount := d.Get("platform_fault_domain_count").(int)
    zones := d.Get("zones").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := compute.DedicatedHostGroup{
        Location: utils.String(location),
        DedicatedHostGroupProperties: &compute.DedicatedHostGroupProperties{
            PlatformFaultDomainCount: utils.Int32(int32(platformFaultDomainCount)),
        },
        Tags: tags.Expand(t),
        Zones: utils.ExpandStringSlice(zones),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, hostGroupName, parameters); err != nil {
        return fmt.Errorf("Error creating Dedicated Host Group (Host Group Name %q / Resource Group %q): %+v", hostGroupName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, hostGroupName)
    if err != nil {
        return fmt.Errorf("Error retrieving Dedicated Host Group (Host Group Name %q / Resource Group %q): %+v", hostGroupName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Dedicated Host Group (Host Group Name %q / Resource Group %q) ID", hostGroupName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmDedicatedHostGroupRead(d, meta)
}

func resourceArmDedicatedHostGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).dedicatedHostGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hostGroupName := id.Path["hostGroups"]

    resp, err := client.Get(ctx, resourceGroup, hostGroupName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Dedicated Host Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Dedicated Host Group (Host Group Name %q / Resource Group %q): %+v", hostGroupName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("host_group_name", hostGroupName)
    if dedicatedHostGroupProperties := resp.DedicatedHostGroupProperties; dedicatedHostGroupProperties != nil {
        if err := d.Set("hosts", flattenArmDedicatedHostGroupSubResourceReadOnly(dedicatedHostGroupProperties.Hosts)); err != nil {
            return fmt.Errorf("Error setting `hosts`: %+v", err)
        }
        d.Set("platform_fault_domain_count", int(*dedicatedHostGroupProperties.PlatformFaultDomainCount))
    }
    d.Set("type", resp.Type)
    d.Set("zones", utils.FlattenStringSlice(resp.Zones))

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmDedicatedHostGroupUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).dedicatedHostGroupsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    hostGroupName := d.Get("host_group_name").(string)
    platformFaultDomainCount := d.Get("platform_fault_domain_count").(int)
    zones := d.Get("zones").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := compute.DedicatedHostGroup{
        Location: utils.String(location),
        DedicatedHostGroupProperties: &compute.DedicatedHostGroupProperties{
            PlatformFaultDomainCount: utils.Int32(int32(platformFaultDomainCount)),
        },
        Tags: tags.Expand(t),
        Zones: utils.ExpandStringSlice(zones),
    }


    if _, err := client.Update(ctx, resourceGroup, hostGroupName, parameters); err != nil {
        return fmt.Errorf("Error updating Dedicated Host Group (Host Group Name %q / Resource Group %q): %+v", hostGroupName, resourceGroup, err)
    }

    return resourceArmDedicatedHostGroupRead(d, meta)
}

func resourceArmDedicatedHostGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).dedicatedHostGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hostGroupName := id.Path["hostGroups"]

    if _, err := client.Delete(ctx, resourceGroup, hostGroupName); err != nil {
        return fmt.Errorf("Error deleting Dedicated Host Group (Host Group Name %q / Resource Group %q): %+v", hostGroupName, resourceGroup, err)
    }

    return nil
}


func flattenArmDedicatedHostGroupSubResourceReadOnly(input *[]compute.SubResourceReadOnly) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}
