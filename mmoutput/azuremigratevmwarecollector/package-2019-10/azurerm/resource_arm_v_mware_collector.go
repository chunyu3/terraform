// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmVMwareCollector() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmVMwareCollectorCreateUpdate,
        Read: resourceArmVMwareCollectorRead,
        Update: resourceArmVMwareCollectorCreateUpdate,
        Delete: resourceArmVMwareCollectorDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "project_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "vm_ware_collector_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "agent_properties": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "spn_details": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "application_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "audience": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "authority": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "object_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "tenant_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "discovery_site_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "e_tag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "created_timestamp": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "updated_timestamp": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmVMwareCollectorCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).vMwareCollectorsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    projectName := d.Get("project_name").(string)
    vmWareCollectorName := d.Get("vm_ware_collector_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, projectName, vmWareCollectorName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing V Mware Collector (Vm Ware Collector Name %q / Project Name %q / Resource Group %q): %+v", vmWareCollectorName, projectName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_v_mware_collector", *existing.ID)
        }
    }

    agentProperties := d.Get("agent_properties").([]interface{})
    discoverySiteId := d.Get("discovery_site_id").(string)
    eTag := d.Get("e_tag").(string)

    collectorBody := azuremigrate.VMwareCollector{
        ETag: utils.String(eTag),
        CollectorProperties: &azuremigrate.CollectorProperties{
            AgentProperties: expandArmVMwareCollectorCollectorAgentProperties(agentProperties),
            DiscoverySiteID: utils.String(discoverySiteId),
        },
    }


    if _, err := client.Create(ctx, resourceGroup, projectName, vmWareCollectorName, collectorBody); err != nil {
        return fmt.Errorf("Error creating V Mware Collector (Vm Ware Collector Name %q / Project Name %q / Resource Group %q): %+v", vmWareCollectorName, projectName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, projectName, vmWareCollectorName)
    if err != nil {
        return fmt.Errorf("Error retrieving V Mware Collector (Vm Ware Collector Name %q / Project Name %q / Resource Group %q): %+v", vmWareCollectorName, projectName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read V Mware Collector (Vm Ware Collector Name %q / Project Name %q / Resource Group %q) ID", vmWareCollectorName, projectName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmVMwareCollectorRead(d, meta)
}

func resourceArmVMwareCollectorRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).vMwareCollectorsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    projectName := id.Path["assessmentProjects"]
    vmWareCollectorName := id.Path["vmwarecollectors"]

    resp, err := client.Get(ctx, resourceGroup, projectName, vmWareCollectorName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] V Mware Collector %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading V Mware Collector (Vm Ware Collector Name %q / Project Name %q / Resource Group %q): %+v", vmWareCollectorName, projectName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if collectorProperties := resp.CollectorProperties; collectorProperties != nil {
        if err := d.Set("agent_properties", flattenArmVMwareCollectorCollectorAgentProperties(collectorProperties.AgentProperties)); err != nil {
            return fmt.Errorf("Error setting `agent_properties`: %+v", err)
        }
        d.Set("created_timestamp", collectorProperties.CreatedTimestamp)
        d.Set("discovery_site_id", collectorProperties.DiscoverySiteID)
        d.Set("updated_timestamp", collectorProperties.UpdatedTimestamp)
    }
    d.Set("e_tag", resp.ETag)
    d.Set("project_name", projectName)
    d.Set("type", resp.Type)
    d.Set("vm_ware_collector_name", vmWareCollectorName)

    return nil
}


func resourceArmVMwareCollectorDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).vMwareCollectorsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    projectName := id.Path["assessmentProjects"]
    vmWareCollectorName := id.Path["vmwarecollectors"]

    if _, err := client.Delete(ctx, resourceGroup, projectName, vmWareCollectorName); err != nil {
        return fmt.Errorf("Error deleting V Mware Collector (Vm Ware Collector Name %q / Project Name %q / Resource Group %q): %+v", vmWareCollectorName, projectName, resourceGroup, err)
    }

    return nil
}

func expandArmVMwareCollectorCollectorAgentProperties(input []interface{}) *azuremigrate.CollectorAgentProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    spnDetails := v["spn_details"].([]interface{})

    result := azuremigrate.CollectorAgentProperties{
        SpnDetails: expandArmVMwareCollectorCollectorBodyAgentSpnProperties(spnDetails),
    }
    return &result
}

func expandArmVMwareCollectorCollectorBodyAgentSpnProperties(input []interface{}) *azuremigrate.CollectorBodyAgentSpnProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    authority := v["authority"].(string)
    applicationId := v["application_id"].(string)
    audience := v["audience"].(string)
    objectId := v["object_id"].(string)
    tenantId := v["tenant_id"].(string)

    result := azuremigrate.CollectorBodyAgentSpnProperties{
        ApplicationID: utils.String(applicationId),
        Audience: utils.String(audience),
        Authority: utils.String(authority),
        ObjectID: utils.String(objectId),
        TenantID: utils.String(tenantId),
    }
    return &result
}


func flattenArmVMwareCollectorCollectorAgentProperties(input *azuremigrate.CollectorAgentProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["spn_details"] = flattenArmVMwareCollectorCollectorBodyAgentSpnProperties(input.SpnDetails)

    return []interface{}{result}
}

func flattenArmVMwareCollectorCollectorBodyAgentSpnProperties(input *azuremigrate.CollectorBodyAgentSpnProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if applicationId := input.ApplicationID; applicationId != nil {
        result["application_id"] = *applicationId
    }
    if audience := input.Audience; audience != nil {
        result["audience"] = *audience
    }
    if authority := input.Authority; authority != nil {
        result["authority"] = *authority
    }
    if objectId := input.ObjectID; objectId != nil {
        result["object_id"] = *objectId
    }
    if tenantId := input.TenantID; tenantId != nil {
        result["tenant_id"] = *tenantId
    }

    return []interface{}{result}
}
