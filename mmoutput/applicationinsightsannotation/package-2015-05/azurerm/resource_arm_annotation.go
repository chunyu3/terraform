// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAnnotation() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAnnotationCreateUpdate,
        Read: resourceArmAnnotationRead,
        Update: resourceArmAnnotationCreateUpdate,
        Delete: resourceArmAnnotationDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "resource_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "category": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "event_time": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validateRFC3339Date,
            },

            "properties": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "related_annotation": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },
        },
    }
}

func resourceArmAnnotationCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).annotationsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    resourceName := d.Get("resource_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, resourceName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Annotation (Resource Name %q / Resource Group %q): %+v", resourceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_annotation", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    name := d.Get("name").(string)
    category := d.Get("category").(string)
    eventTime := d.Get("event_time").(string)
    properties := d.Get("properties").(string)
    relatedAnnotation := d.Get("related_annotation").(string)

    annotationProperties := applicationinsights.Annotation{
        name: utils.String(name),
        Category: utils.String(category),
        EventTime: convertStringToDate(eventTime),
        ID: utils.String(id),
        String: utils.String(properties),
        RelatedAnnotation: utils.String(relatedAnnotation),
    }


    if _, err := client.Create(ctx, resourceGroup, resourceName, annotationProperties); err != nil {
        return fmt.Errorf("Error creating Annotation (Resource Name %q / Resource Group %q): %+v", resourceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, resourceName)
    if err != nil {
        return fmt.Errorf("Error retrieving Annotation (Resource Name %q / Resource Group %q): %+v", resourceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Annotation (Resource Name %q / Resource Group %q) ID", resourceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAnnotationRead(d, meta)
}

func resourceArmAnnotationRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).annotationsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    resourceName := id.Path["components"]

    resp, err := client.Get(ctx, resourceGroup, resourceName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Annotation %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Annotation (Resource Name %q / Resource Group %q): %+v", resourceName, resourceGroup, err)
    }


    d.Set("resource_group", resourceGroup)
    d.Set("resource_name", resourceName)

    return nil
}


func resourceArmAnnotationDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).annotationsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    resourceName := id.Path["components"]

    if _, err := client.Delete(ctx, resourceGroup, resourceName); err != nil {
        return fmt.Errorf("Error deleting Annotation (Resource Name %q / Resource Group %q): %+v", resourceName, resourceGroup, err)
    }

    return nil
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}
