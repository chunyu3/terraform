// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDeviceSecurityGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDeviceSecurityGroupCreateUpdate,
        Read: resourceArmDeviceSecurityGroupRead,
        Update: resourceArmDeviceSecurityGroupCreateUpdate,
        Delete: resourceArmDeviceSecurityGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "allowlist_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "allowlist_values": {
                            Type: schema.TypeList,
                            Required: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "is_enabled": {
                            Type: schema.TypeBool,
                            Required: true,
                        },
                        "rule_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "denylist_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "denylist_values": {
                            Type: schema.TypeList,
                            Required: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "is_enabled": {
                            Type: schema.TypeBool,
                            Required: true,
                        },
                        "rule_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "threshold_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "is_enabled": {
                            Type: schema.TypeBool,
                            Required: true,
                        },
                        "max_threshold": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "min_threshold": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "rule_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "time_window_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "is_enabled": {
                            Type: schema.TypeBool,
                            Required: true,
                        },
                        "max_threshold": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "min_threshold": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "rule_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "time_window_size": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                            ValidateFunc: validateIso8601Duration(),
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmDeviceSecurityGroupCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).deviceSecurityGroupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceID := d.Get("resource_id").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceID, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Device Security Group %q (Resource %q): %+v", name, resourceID, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_device_security_group", *existing.ID)
        }
    }

    allowlistRules := d.Get("allowlist_rules").([]interface{})
    denylistRules := d.Get("denylist_rules").([]interface{})
    thresholdRules := d.Get("threshold_rules").([]interface{})
    timeWindowRules := d.Get("time_window_rules").([]interface{})

    deviceSecurityGroup := securitycenter.DeviceSecurityGroup{
        DeviceSecurityGroupProperties: &securitycenter.DeviceSecurityGroupProperties{
            AllowlistRules: expandArmDeviceSecurityGroupAllowlistCustomAlertRule(allowlistRules),
            DenylistRules: expandArmDeviceSecurityGroupDenylistCustomAlertRule(denylistRules),
            ThresholdRules: expandArmDeviceSecurityGroupThresholdCustomAlertRule(thresholdRules),
            TimeWindowRules: expandArmDeviceSecurityGroupTimeWindowCustomAlertRule(timeWindowRules),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceID, name, deviceSecurityGroup); err != nil {
        return fmt.Errorf("Error creating Device Security Group %q (Resource %q): %+v", name, resourceID, err)
    }


    resp, err := client.Get(ctx, resourceID, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Device Security Group %q (Resource %q): %+v", name, resourceID, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Device Security Group %q (Resource %q) ID", name, resourceID)
    }
    d.SetId(*resp.ID)

    return resourceArmDeviceSecurityGroupRead(d, meta)
}

func resourceArmDeviceSecurityGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).deviceSecurityGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["deviceSecurityGroups"]

    resp, err := client.Get(ctx, resourceID, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Device Security Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Device Security Group %q (Resource %q): %+v", name, resourceID, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    if deviceSecurityGroupProperties := resp.DeviceSecurityGroupProperties; deviceSecurityGroupProperties != nil {
        if err := d.Set("allowlist_rules", flattenArmDeviceSecurityGroupAllowlistCustomAlertRule(deviceSecurityGroupProperties.AllowlistRules)); err != nil {
            return fmt.Errorf("Error setting `allowlist_rules`: %+v", err)
        }
        if err := d.Set("denylist_rules", flattenArmDeviceSecurityGroupDenylistCustomAlertRule(deviceSecurityGroupProperties.DenylistRules)); err != nil {
            return fmt.Errorf("Error setting `denylist_rules`: %+v", err)
        }
        if err := d.Set("threshold_rules", flattenArmDeviceSecurityGroupThresholdCustomAlertRule(deviceSecurityGroupProperties.ThresholdRules)); err != nil {
            return fmt.Errorf("Error setting `threshold_rules`: %+v", err)
        }
        if err := d.Set("time_window_rules", flattenArmDeviceSecurityGroupTimeWindowCustomAlertRule(deviceSecurityGroupProperties.TimeWindowRules)); err != nil {
            return fmt.Errorf("Error setting `time_window_rules`: %+v", err)
        }
    }
    d.Set("resource_id", resourceID)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmDeviceSecurityGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).deviceSecurityGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["deviceSecurityGroups"]

    if _, err := client.Delete(ctx, resourceID, name); err != nil {
        return fmt.Errorf("Error deleting Device Security Group %q (Resource %q): %+v", name, resourceID, err)
    }

    return nil
}

func expandArmDeviceSecurityGroupAllowlistCustomAlertRule(input []interface{}) *[]securitycenter.AllowlistCustomAlertRule {
    results := make([]securitycenter.AllowlistCustomAlertRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        isEnabled := v["is_enabled"].(bool)
        ruleType := v["rule_type"].(string)
        allowlistValues := v["allowlist_values"].([]interface{})

        result := securitycenter.AllowlistCustomAlertRule{
            AllowlistValues: utils.ExpandStringSlice(allowlistValues),
            IsEnabled: utils.Bool(isEnabled),
            RuleType: utils.String(ruleType),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmDeviceSecurityGroupDenylistCustomAlertRule(input []interface{}) *[]securitycenter.DenylistCustomAlertRule {
    results := make([]securitycenter.DenylistCustomAlertRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        isEnabled := v["is_enabled"].(bool)
        ruleType := v["rule_type"].(string)
        denylistValues := v["denylist_values"].([]interface{})

        result := securitycenter.DenylistCustomAlertRule{
            DenylistValues: utils.ExpandStringSlice(denylistValues),
            IsEnabled: utils.Bool(isEnabled),
            RuleType: utils.String(ruleType),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmDeviceSecurityGroupThresholdCustomAlertRule(input []interface{}) *[]securitycenter.ThresholdCustomAlertRule {
    results := make([]securitycenter.ThresholdCustomAlertRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        isEnabled := v["is_enabled"].(bool)
        ruleType := v["rule_type"].(string)
        minThreshold := v["min_threshold"].(int)
        maxThreshold := v["max_threshold"].(int)

        result := securitycenter.ThresholdCustomAlertRule{
            IsEnabled: utils.Bool(isEnabled),
            MaxThreshold: utils.Int(maxThreshold),
            MinThreshold: utils.Int(minThreshold),
            RuleType: utils.String(ruleType),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmDeviceSecurityGroupTimeWindowCustomAlertRule(input []interface{}) *[]securitycenter.TimeWindowCustomAlertRule {
    results := make([]securitycenter.TimeWindowCustomAlertRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        isEnabled := v["is_enabled"].(bool)
        ruleType := v["rule_type"].(string)
        minThreshold := v["min_threshold"].(int)
        maxThreshold := v["max_threshold"].(int)
        timeWindowSize := v["time_window_size"].(string)

        result := securitycenter.TimeWindowCustomAlertRule{
            IsEnabled: utils.Bool(isEnabled),
            MaxThreshold: utils.Int(maxThreshold),
            MinThreshold: utils.Int(minThreshold),
            RuleType: utils.String(ruleType),
            TimeWindowSize: utils.String(timeWindowSize),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmDeviceSecurityGroupAllowlistCustomAlertRule(input *[]securitycenter.AllowlistCustomAlertRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["allowlist_values"] = utils.FlattenStringSlice(item.AllowlistValues)
        if isEnabled := item.IsEnabled; isEnabled != nil {
            v["is_enabled"] = *isEnabled
        }
        if ruleType := item.RuleType; ruleType != nil {
            v["rule_type"] = *ruleType
        }

        results = append(results, v)
    }

    return results
}

func flattenArmDeviceSecurityGroupDenylistCustomAlertRule(input *[]securitycenter.DenylistCustomAlertRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["denylist_values"] = utils.FlattenStringSlice(item.DenylistValues)
        if isEnabled := item.IsEnabled; isEnabled != nil {
            v["is_enabled"] = *isEnabled
        }
        if ruleType := item.RuleType; ruleType != nil {
            v["rule_type"] = *ruleType
        }

        results = append(results, v)
    }

    return results
}

func flattenArmDeviceSecurityGroupThresholdCustomAlertRule(input *[]securitycenter.ThresholdCustomAlertRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if isEnabled := item.IsEnabled; isEnabled != nil {
            v["is_enabled"] = *isEnabled
        }
        if maxThreshold := item.MaxThreshold; maxThreshold != nil {
            v["max_threshold"] = *maxThreshold
        }
        if minThreshold := item.MinThreshold; minThreshold != nil {
            v["min_threshold"] = *minThreshold
        }
        if ruleType := item.RuleType; ruleType != nil {
            v["rule_type"] = *ruleType
        }

        results = append(results, v)
    }

    return results
}

func flattenArmDeviceSecurityGroupTimeWindowCustomAlertRule(input *[]securitycenter.TimeWindowCustomAlertRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if isEnabled := item.IsEnabled; isEnabled != nil {
            v["is_enabled"] = *isEnabled
        }
        if maxThreshold := item.MaxThreshold; maxThreshold != nil {
            v["max_threshold"] = *maxThreshold
        }
        if minThreshold := item.MinThreshold; minThreshold != nil {
            v["min_threshold"] = *minThreshold
        }
        if ruleType := item.RuleType; ruleType != nil {
            v["rule_type"] = *ruleType
        }
        if timeWindowSize := item.TimeWindowSize; timeWindowSize != nil {
            v["time_window_size"] = *timeWindowSize
        }

        results = append(results, v)
    }

    return results
}
