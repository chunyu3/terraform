// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmProtectionIntent() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmProtectionIntentCreateUpdate,
        Read: resourceArmProtectionIntentRead,
        Update: resourceArmProtectionIntentCreateUpdate,
        Delete: resourceArmProtectionIntentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "fabric_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "intent_object_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "vault_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "backup_management_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(backup.Invalid),
                    string(backup.AzureIaasVM),
                    string(backup.MAB),
                    string(backup.DPM),
                    string(backup.AzureBackupServer),
                    string(backup.AzureSql),
                    string(backup.AzureStorage),
                    string(backup.AzureWorkload),
                    string(backup.DefaultBackup),
                }, false),
                Default: string(backup.Invalid),
            },

            "e_tag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "item_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "policy_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "protection_state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(backup.Invalid),
                    string(backup.NotProtected),
                    string(backup.Protecting),
                    string(backup.Protected),
                    string(backup.ProtectionFailed),
                }, false),
                Default: string(backup.Invalid),
            },

            "source_resource_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmProtectionIntentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).protectionIntentClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    fabricName := d.Get("fabric_name").(string)
    intentObjectName := d.Get("intent_object_name").(string)
    vaultName := d.Get("vault_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, vaultName, resourceGroup, fabricName, intentObjectName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Protection Intent (Intent Object Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", intentObjectName, fabricName, resourceGroup, vaultName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_protection_intent", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    backupManagementType := d.Get("backup_management_type").(string)
    eTag := d.Get("e_tag").(string)
    itemId := d.Get("item_id").(string)
    policyId := d.Get("policy_id").(string)
    protectionState := d.Get("protection_state").(string)
    sourceResourceId := d.Get("source_resource_id").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := backup.ProtectionIntentResource{
        ETag: utils.String(eTag),
        Location: utils.String(location),
        ProtectionIntent: &backup.ProtectionIntent{
            BackupManagementType: backup.ManagementType(backupManagementType),
            ItemID: utils.String(itemId),
            PolicyID: utils.String(policyId),
            ProtectionState: backup.ProtectionStatus(protectionState),
            SourceResourceID: utils.String(sourceResourceId),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, vaultName, resourceGroup, fabricName, intentObjectName, parameters); err != nil {
        return fmt.Errorf("Error creating Protection Intent (Intent Object Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", intentObjectName, fabricName, resourceGroup, vaultName, err)
    }


    resp, err := client.Get(ctx, vaultName, resourceGroup, fabricName, intentObjectName)
    if err != nil {
        return fmt.Errorf("Error retrieving Protection Intent (Intent Object Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", intentObjectName, fabricName, resourceGroup, vaultName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Protection Intent (Intent Object Name %q / Fabric Name %q / Resource Group %q / Vault Name %q) ID", intentObjectName, fabricName, resourceGroup, vaultName)
    }
    d.SetId(*resp.ID)

    return resourceArmProtectionIntentRead(d, meta)
}

func resourceArmProtectionIntentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).protectionIntentClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    vaultName := id.Path["vaults"]
    resourceGroup := id.ResourceGroup
    fabricName := id.Path["backupFabrics"]
    intentObjectName := id.Path["backupProtectionIntent"]

    resp, err := client.Get(ctx, vaultName, resourceGroup, fabricName, intentObjectName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Protection Intent %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Protection Intent (Intent Object Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", intentObjectName, fabricName, resourceGroup, vaultName, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if protectionIntent := resp.ProtectionIntent; protectionIntent != nil {
        d.Set("backup_management_type", string(protectionIntent.BackupManagementType))
        d.Set("item_id", protectionIntent.ItemID)
        d.Set("policy_id", protectionIntent.PolicyID)
        d.Set("protection_state", string(protectionIntent.ProtectionState))
        d.Set("source_resource_id", protectionIntent.SourceResourceID)
    }
    d.Set("e_tag", resp.ETag)
    d.Set("fabric_name", fabricName)
    d.Set("intent_object_name", intentObjectName)
    d.Set("type", resp.Type)
    d.Set("vault_name", vaultName)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmProtectionIntentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).protectionIntentClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    vaultName := id.Path["vaults"]
    resourceGroup := id.ResourceGroup
    fabricName := id.Path["backupFabrics"]
    intentObjectName := id.Path["backupProtectionIntent"]

    if _, err := client.Delete(ctx, vaultName, resourceGroup, fabricName, intentObjectName); err != nil {
        return fmt.Errorf("Error deleting Protection Intent (Intent Object Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", intentObjectName, fabricName, resourceGroup, vaultName, err)
    }

    return nil
}
