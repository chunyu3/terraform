// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmSourceControl() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmSourceControlCreate,
        Read: resourceArmSourceControlRead,
        Update: resourceArmSourceControlUpdate,
        Delete: resourceArmSourceControlDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "automation_account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "auto_sync": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "branch": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "folder_path": {
                Type: schema.TypeString,
                Optional: true,
            },

            "publish_runbook": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "repo_url": {
                Type: schema.TypeString,
                Optional: true,
            },

            "security_token": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "access_token": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "refresh_token": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "token_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(automation.PersonalAccessToken),
                                string(automation.Oauth),
                            }, false),
                            Default: string(automation.PersonalAccessToken),
                        },
                    },
                },
            },

            "source_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(automation.VsoGit),
                    string(automation.VsoTfvc),
                    string(automation.GitHub),
                }, false),
                Default: string(automation.VsoGit),
            },

            "creation_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_modified_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmSourceControlCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).sourceControlClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    automationAccountName := d.Get("automation_account_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, automationAccountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Source Control %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_source_control", *existing.ID)
        }
    }

    autoSync := d.Get("auto_sync").(bool)
    branch := d.Get("branch").(string)
    description := d.Get("description").(string)
    folderPath := d.Get("folder_path").(string)
    publishRunbook := d.Get("publish_runbook").(bool)
    repoUrl := d.Get("repo_url").(string)
    securityToken := d.Get("security_token").([]interface{})
    sourceType := d.Get("source_type").(string)

    parameters := automation.SourceControlCreateOrUpdateParameters{
        SourceControlCreateOrUpdateProperties: &automation.SourceControlCreateOrUpdateProperties{
            AutoSync: utils.Bool(autoSync),
            Branch: utils.String(branch),
            Description: utils.String(description),
            FolderPath: utils.String(folderPath),
            PublishRunbook: utils.Bool(publishRunbook),
            RepoURL: utils.String(repoUrl),
            SecurityToken: expandArmSourceControlSourceControlSecurityTokenProperties(securityToken),
            SourceType: automation.SourceType(sourceType),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, automationAccountName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Source Control %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, automationAccountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Source Control %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Source Control %q (Automation Account Name %q / Resource Group %q) ID", name, automationAccountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmSourceControlRead(d, meta)
}

func resourceArmSourceControlRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).sourceControlClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    automationAccountName := id.Path["automationAccounts"]
    name := id.Path["sourceControls"]

    resp, err := client.Get(ctx, resourceGroup, automationAccountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Source Control %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Source Control %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if sourceControlCreateOrUpdateProperties := resp.SourceControlCreateOrUpdateProperties; sourceControlCreateOrUpdateProperties != nil {
        d.Set("auto_sync", sourceControlCreateOrUpdateProperties.AutoSync)
        d.Set("branch", sourceControlCreateOrUpdateProperties.Branch)
        d.Set("creation_time", (sourceControlCreateOrUpdateProperties.CreationTime).String())
        d.Set("description", sourceControlCreateOrUpdateProperties.Description)
        d.Set("folder_path", sourceControlCreateOrUpdateProperties.FolderPath)
        d.Set("last_modified_time", (sourceControlCreateOrUpdateProperties.LastModifiedTime).String())
        d.Set("publish_runbook", sourceControlCreateOrUpdateProperties.PublishRunbook)
        d.Set("repo_url", sourceControlCreateOrUpdateProperties.RepoURL)
        d.Set("source_type", string(sourceControlCreateOrUpdateProperties.SourceType))
    }
    d.Set("automation_account_name", automationAccountName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmSourceControlUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).sourceControlClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    autoSync := d.Get("auto_sync").(bool)
    automationAccountName := d.Get("automation_account_name").(string)
    branch := d.Get("branch").(string)
    description := d.Get("description").(string)
    folderPath := d.Get("folder_path").(string)
    publishRunbook := d.Get("publish_runbook").(bool)
    repoUrl := d.Get("repo_url").(string)
    securityToken := d.Get("security_token").([]interface{})
    sourceType := d.Get("source_type").(string)

    parameters := automation.SourceControlCreateOrUpdateParameters{
        SourceControlCreateOrUpdateProperties: &automation.SourceControlCreateOrUpdateProperties{
            AutoSync: utils.Bool(autoSync),
            Branch: utils.String(branch),
            Description: utils.String(description),
            FolderPath: utils.String(folderPath),
            PublishRunbook: utils.Bool(publishRunbook),
            RepoURL: utils.String(repoUrl),
            SecurityToken: expandArmSourceControlSourceControlSecurityTokenProperties(securityToken),
            SourceType: automation.SourceType(sourceType),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, automationAccountName, name, parameters); err != nil {
        return fmt.Errorf("Error updating Source Control %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }

    return resourceArmSourceControlRead(d, meta)
}

func resourceArmSourceControlDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).sourceControlClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    automationAccountName := id.Path["automationAccounts"]
    name := id.Path["sourceControls"]

    if _, err := client.Delete(ctx, resourceGroup, automationAccountName, name); err != nil {
        return fmt.Errorf("Error deleting Source Control %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }

    return nil
}

func expandArmSourceControlSourceControlSecurityTokenProperties(input []interface{}) *automation.SourceControlSecurityTokenProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    accessToken := v["access_token"].(string)
    refreshToken := v["refresh_token"].(string)
    tokenType := v["token_type"].(string)

    result := automation.SourceControlSecurityTokenProperties{
        AccessToken: utils.String(accessToken),
        RefreshToken: utils.String(refreshToken),
        TokenType: automation.TokenType(tokenType),
    }
    return &result
}
