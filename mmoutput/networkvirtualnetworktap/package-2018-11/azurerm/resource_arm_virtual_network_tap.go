// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmVirtualNetworkTap() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmVirtualNetworkTapCreateUpdate,
        Read: resourceArmVirtualNetworkTapRead,
        Update: resourceArmVirtualNetworkTapCreateUpdate,
        Delete: resourceArmVirtualNetworkTapDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "tap_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "destination_load_balancer_front_end_ipconfiguration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ipallocation_method": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Static),
                                string(network.Dynamic),
                            }, false),
                            Default: string(network.Static),
                        },
                        "public_ip_address": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "tags": tags.Schema(),
                                    "zones": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                },
                            },
                        },
                        "public_ipprefix": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "zones": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                    },
                },
            },

            "destination_network_interface_ipconfiguration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "application_gateway_backend_address_pools": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "application_security_groups": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "tags": tags.Schema(),
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "load_balancer_backend_address_pools": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "load_balancer_inbound_nat_rules": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "primary": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "private_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_address_version": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.IPv4),
                                string(network.IPv6),
                            }, false),
                            Default: string(network.IPv4),
                        },
                        "private_ipallocation_method": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Static),
                                string(network.Dynamic),
                            }, false),
                            Default: string(network.Static),
                        },
                        "public_ip_address": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "tags": tags.Schema(),
                                    "zones": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                },
                            },
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "virtual_network_taps": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "tags": tags.Schema(),
                                },
                            },
                        },
                    },
                },
            },

            "destination_port": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "network_interface_tap_configurations": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "provisioning_state": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "virtual_network_tap": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "tags": tags.Schema(),
                                    "type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_guid": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmVirtualNetworkTapCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkTapsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    tapName := d.Get("tap_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, tapName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Virtual Network Tap (Tap Name %q / Resource Group %q): %+v", tapName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_virtual_network_tap", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    destinationLoadBalancerFrontEndIpconfiguration := d.Get("destination_load_balancer_front_end_ipconfiguration").([]interface{})
    destinationNetworkInterfaceIpconfiguration := d.Get("destination_network_interface_ipconfiguration").([]interface{})
    destinationPort := d.Get("destination_port").(int)
    etag := d.Get("etag").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := network.VirtualNetworkTap{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        VirtualNetworkTapPropertiesFormat: &network.VirtualNetworkTapPropertiesFormat{
            DestinationLoadBalancerFrontEndIpconfiguration: expandArmVirtualNetworkTapFrontendIPConfiguration(destinationLoadBalancerFrontEndIpconfiguration),
            DestinationNetworkInterfaceIpconfiguration: expandArmVirtualNetworkTapInterfaceIPConfiguration(destinationNetworkInterfaceIpconfiguration),
            DestinationPort: utils.Int(destinationPort),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, tapName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Virtual Network Tap (Tap Name %q / Resource Group %q): %+v", tapName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Virtual Network Tap (Tap Name %q / Resource Group %q): %+v", tapName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, tapName)
    if err != nil {
        return fmt.Errorf("Error retrieving Virtual Network Tap (Tap Name %q / Resource Group %q): %+v", tapName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Virtual Network Tap (Tap Name %q / Resource Group %q) ID", tapName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmVirtualNetworkTapRead(d, meta)
}

func resourceArmVirtualNetworkTapRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkTapsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    tapName := id.Path["virtualNetworkTaps"]

    resp, err := client.Get(ctx, resourceGroup, tapName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Virtual Network Tap %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Virtual Network Tap (Tap Name %q / Resource Group %q): %+v", tapName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if virtualNetworkTapPropertiesFormat := resp.VirtualNetworkTapPropertiesFormat; virtualNetworkTapPropertiesFormat != nil {
        if err := d.Set("destination_load_balancer_front_end_ipconfiguration", flattenArmVirtualNetworkTapFrontendIPConfiguration(virtualNetworkTapPropertiesFormat.DestinationLoadBalancerFrontEndIpconfiguration)); err != nil {
            return fmt.Errorf("Error setting `destination_load_balancer_front_end_ipconfiguration`: %+v", err)
        }
        if err := d.Set("destination_network_interface_ipconfiguration", flattenArmVirtualNetworkTapInterfaceIPConfiguration(virtualNetworkTapPropertiesFormat.DestinationNetworkInterfaceIpconfiguration)); err != nil {
            return fmt.Errorf("Error setting `destination_network_interface_ipconfiguration`: %+v", err)
        }
        d.Set("destination_port", virtualNetworkTapPropertiesFormat.DestinationPort)
        if err := d.Set("network_interface_tap_configurations", flattenArmVirtualNetworkTapInterfaceTapConfiguration(virtualNetworkTapPropertiesFormat.NetworkInterfaceTapConfigurations)); err != nil {
            return fmt.Errorf("Error setting `network_interface_tap_configurations`: %+v", err)
        }
        d.Set("provisioning_state", virtualNetworkTapPropertiesFormat.ProvisioningState)
        d.Set("resource_guid", virtualNetworkTapPropertiesFormat.ResourceGuid)
    }
    d.Set("etag", resp.Etag)
    d.Set("tap_name", tapName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmVirtualNetworkTapDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkTapsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    tapName := id.Path["virtualNetworkTaps"]

    future, err := client.Delete(ctx, resourceGroup, tapName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Virtual Network Tap (Tap Name %q / Resource Group %q): %+v", tapName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Virtual Network Tap (Tap Name %q / Resource Group %q): %+v", tapName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmVirtualNetworkTapFrontendIPConfiguration(input []interface{}) *network.FrontendIPConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    privateIpAddress := v["private_ip_address"].(string)
    privateIpallocationMethod := v["private_ipallocation_method"].(string)
    subnet := v["subnet"].([]interface{})
    publicIpAddress := v["public_ip_address"].([]interface{})
    publicIpprefix := v["public_ipprefix"].([]interface{})
    name := v["name"].(string)
    etag := v["etag"].(string)
    zones := v["zones"].([]interface{})

    result := network.FrontendIPConfiguration{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Name: utils.String(name),
        FrontendIPConfigurationPropertiesFormat: &network.FrontendIPConfigurationPropertiesFormat{
            PrivateIpAddress: utils.String(privateIpAddress),
            PrivateIpallocationMethod: network.IPAllocationMethod(privateIpallocationMethod),
            PublicIpAddress: expandArmVirtualNetworkTapPublicIPAddress(publicIpAddress),
            PublicIpprefix: expandArmVirtualNetworkTapSubResource(publicIpprefix),
            Subnet: expandArmVirtualNetworkTapSubnet(subnet),
        },
        Zones: utils.ExpandStringSlice(zones),
    }
    return &result
}

func expandArmVirtualNetworkTapInterfaceIPConfiguration(input []interface{}) *network.InterfaceIPConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    virtualNetworkTaps := v["virtual_network_taps"].([]interface{})
    applicationGatewayBackendAddressPools := v["application_gateway_backend_address_pools"].([]interface{})
    loadBalancerBackendAddressPools := v["load_balancer_backend_address_pools"].([]interface{})
    loadBalancerInboundNatRules := v["load_balancer_inbound_nat_rules"].([]interface{})
    privateIpAddress := v["private_ip_address"].(string)
    privateIpallocationMethod := v["private_ipallocation_method"].(string)
    privateIpAddressVersion := v["private_ip_address_version"].(string)
    subnet := v["subnet"].([]interface{})
    primary := v["primary"].(bool)
    publicIpAddress := v["public_ip_address"].([]interface{})
    applicationSecurityGroups := v["application_security_groups"].([]interface{})
    name := v["name"].(string)
    etag := v["etag"].(string)

    result := network.InterfaceIPConfiguration{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Name: utils.String(name),
        InterfaceIPConfigurationPropertiesFormat: &network.InterfaceIPConfigurationPropertiesFormat{
            ApplicationGatewayBackendAddressPools: expandArmVirtualNetworkTapApplicationGatewayBackendAddressPool(applicationGatewayBackendAddressPools),
            ApplicationSecurityGroups: expandArmVirtualNetworkTapApplicationSecurityGroup(applicationSecurityGroups),
            LoadBalancerBackendAddressPools: expandArmVirtualNetworkTapBackendAddressPool(loadBalancerBackendAddressPools),
            LoadBalancerInboundNatRules: expandArmVirtualNetworkTapInboundNatRule(loadBalancerInboundNatRules),
            Primary: utils.Bool(primary),
            PrivateIpAddress: utils.String(privateIpAddress),
            PrivateIpAddressVersion: network.IPVersion(privateIpAddressVersion),
            PrivateIpallocationMethod: network.IPAllocationMethod(privateIpallocationMethod),
            PublicIpAddress: expandArmVirtualNetworkTapPublicIPAddress(publicIpAddress),
            Subnet: expandArmVirtualNetworkTapSubnet(subnet),
            VirtualNetworkTaps: expandArmVirtualNetworkTapVirtualNetworkTap(virtualNetworkTaps),
        },
    }
    return &result
}

func expandArmVirtualNetworkTapPublicIPAddress(input []interface{}) *network.PublicIPAddress {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    location := azure.NormalizeLocation(v["location"].(string))
    t := v["tags"].(map[string]interface{})
    etag := v["etag"].(string)
    zones := v["zones"].([]interface{})

    result := network.PublicIPAddress{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        Tags: tags.Expand(t),
        Zones: utils.ExpandStringSlice(zones),
    }
    return &result
}

func expandArmVirtualNetworkTapSubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(id),
    }
    return &result
}

func expandArmVirtualNetworkTapSubnet(input []interface{}) *network.Subnet {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    name := v["name"].(string)
    etag := v["etag"].(string)

    result := network.Subnet{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Name: utils.String(name),
    }
    return &result
}

func expandArmVirtualNetworkTapApplicationGatewayBackendAddressPool(input []interface{}) *[]network.ApplicationGatewayBackendAddressPool {
    results := make([]network.ApplicationGatewayBackendAddressPool, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)
        type := v["type"].(string)

        result := network.ApplicationGatewayBackendAddressPool{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            Type: utils.String(type),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualNetworkTapApplicationSecurityGroup(input []interface{}) *[]network.ApplicationSecurityGroup {
    results := make([]network.ApplicationSecurityGroup, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        location := azure.NormalizeLocation(v["location"].(string))
        t := v["tags"].(map[string]interface{})

        result := network.ApplicationSecurityGroup{
            ID: utils.String(id),
            Location: utils.String(location),
            Tags: tags.Expand(t),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualNetworkTapBackendAddressPool(input []interface{}) *[]network.BackendAddressPool {
    results := make([]network.BackendAddressPool, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.BackendAddressPool{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualNetworkTapInboundNatRule(input []interface{}) *[]network.InboundNatRule {
    results := make([]network.InboundNatRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.InboundNatRule{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualNetworkTapVirtualNetworkTap(input []interface{}) *[]network.VirtualNetworkTap {
    results := make([]network.VirtualNetworkTap, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        location := azure.NormalizeLocation(v["location"].(string))
        t := v["tags"].(map[string]interface{})
        etag := v["etag"].(string)

        result := network.VirtualNetworkTap{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Location: utils.String(location),
            Tags: tags.Expand(t),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmVirtualNetworkTapFrontendIPConfiguration(input *network.FrontendIPConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }
    if frontendIPConfigurationPropertiesFormat := input.FrontendIPConfigurationPropertiesFormat; frontendIPConfigurationPropertiesFormat != nil {
        if privateIpAddress := frontendIPConfigurationPropertiesFormat.PrivateIpAddress; privateIpAddress != nil {
            result["private_ip_address"] = *privateIpAddress
        }
        result["private_ipallocation_method"] = string(frontendIPConfigurationPropertiesFormat.PrivateIpallocationMethod)
        result["public_ip_address"] = flattenArmVirtualNetworkTapPublicIPAddress(frontendIPConfigurationPropertiesFormat.PublicIpAddress)
        result["public_ipprefix"] = flattenArmVirtualNetworkTapSubResource(frontendIPConfigurationPropertiesFormat.PublicIpprefix)
        result["subnet"] = flattenArmVirtualNetworkTapSubnet(frontendIPConfigurationPropertiesFormat.Subnet)
    }
    result["zones"] = utils.FlattenStringSlice(input.Zones)

    return []interface{}{result}
}

func flattenArmVirtualNetworkTapInterfaceIPConfiguration(input *network.InterfaceIPConfiguration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if interfaceIPConfigurationPropertiesFormat := input.InterfaceIPConfigurationPropertiesFormat; interfaceIPConfigurationPropertiesFormat != nil {
        result["application_gateway_backend_address_pools"] = flattenArmVirtualNetworkTapApplicationGatewayBackendAddressPool(interfaceIPConfigurationPropertiesFormat.ApplicationGatewayBackendAddressPools)
        result["application_security_groups"] = flattenArmVirtualNetworkTapApplicationSecurityGroup(interfaceIPConfigurationPropertiesFormat.ApplicationSecurityGroups)
        result["load_balancer_backend_address_pools"] = flattenArmVirtualNetworkTapBackendAddressPool(interfaceIPConfigurationPropertiesFormat.LoadBalancerBackendAddressPools)
        result["load_balancer_inbound_nat_rules"] = flattenArmVirtualNetworkTapInboundNatRule(interfaceIPConfigurationPropertiesFormat.LoadBalancerInboundNatRules)
        if primary := interfaceIPConfigurationPropertiesFormat.Primary; primary != nil {
            result["primary"] = *primary
        }
        if privateIpAddress := interfaceIPConfigurationPropertiesFormat.PrivateIpAddress; privateIpAddress != nil {
            result["private_ip_address"] = *privateIpAddress
        }
        result["private_ip_address_version"] = string(interfaceIPConfigurationPropertiesFormat.PrivateIpAddressVersion)
        result["private_ipallocation_method"] = string(interfaceIPConfigurationPropertiesFormat.PrivateIpallocationMethod)
        result["public_ip_address"] = flattenArmVirtualNetworkTapPublicIPAddress(interfaceIPConfigurationPropertiesFormat.PublicIpAddress)
        result["subnet"] = flattenArmVirtualNetworkTapSubnet(interfaceIPConfigurationPropertiesFormat.Subnet)
        result["virtual_network_taps"] = flattenArmVirtualNetworkTapVirtualNetworkTap(interfaceIPConfigurationPropertiesFormat.VirtualNetworkTaps)
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }

    return []interface{}{result}
}

func flattenArmVirtualNetworkTapInterfaceTapConfiguration(input *[]network.InterfaceTapConfiguration) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}

func flattenArmVirtualNetworkTapPublicIPAddress(input *network.PublicIPAddress) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if location := input.Location; location != nil {
        result["location"] = azure.NormalizeLocation(*location)
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }
    result["zones"] = utils.FlattenStringSlice(input.Zones)

    return []interface{}{result}
}

func flattenArmVirtualNetworkTapSubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}

func flattenArmVirtualNetworkTapSubnet(input *network.Subnet) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }

    return []interface{}{result}
}

func flattenArmVirtualNetworkTapApplicationGatewayBackendAddressPool(input *[]network.ApplicationGatewayBackendAddressPool) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualNetworkTapApplicationSecurityGroup(input *[]network.ApplicationSecurityGroup) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if location := item.Location; location != nil {
            v["location"] = azure.NormalizeLocation(*location)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualNetworkTapBackendAddressPool(input *[]network.BackendAddressPool) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualNetworkTapInboundNatRule(input *[]network.InboundNatRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmVirtualNetworkTapVirtualNetworkTap(input *[]network.VirtualNetworkTap) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if location := item.Location; location != nil {
            v["location"] = azure.NormalizeLocation(*location)
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}
