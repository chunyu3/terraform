// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmZone() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmZoneCreate,
        Read: resourceArmZoneRead,
        Update: resourceArmZoneUpdate,
        Delete: resourceArmZoneDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "registration_virtual_networks": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "resolution_virtual_networks": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "zone_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(dns.Public),
                    string(dns.Private),
                }, false),
                Default: string(dns.Public),
            },

            "max_number_of_record_sets": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "name_servers": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "number_of_record_sets": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmZoneCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).zonesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Zone %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_zone", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    etag := d.Get("etag").(string)
    registrationVirtualNetworks := d.Get("registration_virtual_networks").([]interface{})
    resolutionVirtualNetworks := d.Get("resolution_virtual_networks").([]interface{})
    zoneType := d.Get("zone_type").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := dns.ZoneUpdate{
        Etag: utils.String(etag),
        Location: utils.String(location),
        ZoneProperties: &dns.ZoneProperties{
            RegistrationVirtualNetworks: expandArmZoneSubResource(registrationVirtualNetworks),
            ResolutionVirtualNetworks: expandArmZoneSubResource(resolutionVirtualNetworks),
            ZoneType: dns.ZoneType(zoneType),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error creating Zone %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Zone %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Zone %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmZoneRead(d, meta)
}

func resourceArmZoneRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).zonesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["dnsZones"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Zone %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Zone %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("etag", resp.Etag)
    if zoneProperties := resp.ZoneProperties; zoneProperties != nil {
        d.Set("max_number_of_record_sets", int(*zoneProperties.MaxNumberOfRecordSets))
        d.Set("name_servers", utils.FlattenStringSlice(zoneProperties.NameServers))
        d.Set("number_of_record_sets", int(*zoneProperties.NumberOfRecordSets))
        if err := d.Set("registration_virtual_networks", flattenArmZoneSubResource(zoneProperties.RegistrationVirtualNetworks)); err != nil {
            return fmt.Errorf("Error setting `registration_virtual_networks`: %+v", err)
        }
        if err := d.Set("resolution_virtual_networks", flattenArmZoneSubResource(zoneProperties.ResolutionVirtualNetworks)); err != nil {
            return fmt.Errorf("Error setting `resolution_virtual_networks`: %+v", err)
        }
        d.Set("zone_type", string(zoneProperties.ZoneType))
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmZoneUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).zonesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    etag := d.Get("etag").(string)
    registrationVirtualNetworks := d.Get("registration_virtual_networks").([]interface{})
    resolutionVirtualNetworks := d.Get("resolution_virtual_networks").([]interface{})
    zoneType := d.Get("zone_type").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := dns.ZoneUpdate{
        Etag: utils.String(etag),
        ZoneProperties: &dns.ZoneProperties{
            RegistrationVirtualNetworks: expandArmZoneSubResource(registrationVirtualNetworks),
            ResolutionVirtualNetworks: expandArmZoneSubResource(resolutionVirtualNetworks),
            ZoneType: dns.ZoneType(zoneType),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error updating Zone %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmZoneRead(d, meta)
}

func resourceArmZoneDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).zonesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["dnsZones"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Zone %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Zone %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmZoneSubResource(input []interface{}) *[]dns.SubResource {
    results := make([]dns.SubResource, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)

        result := dns.SubResource{
            ID: utils.String(id),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmZoneSubResource(input *[]dns.SubResource) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }

        results = append(results, v)
    }

    return results
}
