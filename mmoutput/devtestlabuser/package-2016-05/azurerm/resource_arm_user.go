// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmUser() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmUserCreate,
        Read: resourceArmUserRead,
        Update: resourceArmUserUpdate,
        Delete: resourceArmUserDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "lab_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "identity": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "app_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "object_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "principal_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "principal_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tenant_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "secret_store": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "key_vault_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "key_vault_uri": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "unique_identifier": {
                Type: schema.TypeString,
                Optional: true,
            },

            "created_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmUserCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).usersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    labName := d.Get("lab_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, labName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing User %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_user", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    identity := d.Get("identity").([]interface{})
    secretStore := d.Get("secret_store").([]interface{})
    uniqueIdentifier := d.Get("unique_identifier").(string)
    t := d.Get("tags").(map[string]interface{})

    user := devtestlab.User{
        Location: utils.String(location),
        UserProperties: &devtestlab.UserProperties{
            Identity: expandArmUserUserIdentity(identity),
            SecretStore: expandArmUserUserSecretStore(secretStore),
            UniqueIdentifier: utils.String(uniqueIdentifier),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, labName, name, user); err != nil {
        return fmt.Errorf("Error creating User %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, labName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving User %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read User %q (Lab Name %q / Resource Group %q) ID", name, labName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmUserRead(d, meta)
}

func resourceArmUserRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).usersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    labName := id.Path["labs"]
    name := id.Path["users"]

    resp, err := client.Get(ctx, resourceGroup, labName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] User %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading User %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if userProperties := resp.UserProperties; userProperties != nil {
        d.Set("created_date", (userProperties.CreatedDate).String())
        if err := d.Set("identity", flattenArmUserUserIdentity(userProperties.Identity)); err != nil {
            return fmt.Errorf("Error setting `identity`: %+v", err)
        }
        d.Set("provisioning_state", userProperties.ProvisioningState)
        if err := d.Set("secret_store", flattenArmUserUserSecretStore(userProperties.SecretStore)); err != nil {
            return fmt.Errorf("Error setting `secret_store`: %+v", err)
        }
        d.Set("unique_identifier", userProperties.UniqueIdentifier)
    }
    d.Set("lab_name", labName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmUserUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).usersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    identity := d.Get("identity").([]interface{})
    labName := d.Get("lab_name").(string)
    secretStore := d.Get("secret_store").([]interface{})
    uniqueIdentifier := d.Get("unique_identifier").(string)
    t := d.Get("tags").(map[string]interface{})

    user := devtestlab.User{
        Location: utils.String(location),
        UserProperties: &devtestlab.UserProperties{
            Identity: expandArmUserUserIdentity(identity),
            SecretStore: expandArmUserUserSecretStore(secretStore),
            UniqueIdentifier: utils.String(uniqueIdentifier),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, labName, name, user); err != nil {
        return fmt.Errorf("Error updating User %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
    }

    return resourceArmUserRead(d, meta)
}

func resourceArmUserDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).usersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    labName := id.Path["labs"]
    name := id.Path["users"]

    future, err := client.Delete(ctx, resourceGroup, labName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting User %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting User %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmUserUserIdentity(input []interface{}) *devtestlab.UserIdentity {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    principalName := v["principal_name"].(string)
    principalId := v["principal_id"].(string)
    tenantId := v["tenant_id"].(string)
    objectId := v["object_id"].(string)
    appId := v["app_id"].(string)

    result := devtestlab.UserIdentity{
        AppID: utils.String(appId),
        ObjectID: utils.String(objectId),
        PrincipalID: utils.String(principalId),
        PrincipalName: utils.String(principalName),
        TenantID: utils.String(tenantId),
    }
    return &result
}

func expandArmUserUserSecretStore(input []interface{}) *devtestlab.UserSecretStore {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    keyVaultUri := v["key_vault_uri"].(string)
    keyVaultId := v["key_vault_id"].(string)

    result := devtestlab.UserSecretStore{
        KeyVaultID: utils.String(keyVaultId),
        KeyVaultUri: utils.String(keyVaultUri),
    }
    return &result
}


func flattenArmUserUserIdentity(input *devtestlab.UserIdentity) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if appId := input.AppID; appId != nil {
        result["app_id"] = *appId
    }
    if objectId := input.ObjectID; objectId != nil {
        result["object_id"] = *objectId
    }
    if principalId := input.PrincipalID; principalId != nil {
        result["principal_id"] = *principalId
    }
    if principalName := input.PrincipalName; principalName != nil {
        result["principal_name"] = *principalName
    }
    if tenantId := input.TenantID; tenantId != nil {
        result["tenant_id"] = *tenantId
    }

    return []interface{}{result}
}

func flattenArmUserUserSecretStore(input *devtestlab.UserSecretStore) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if keyVaultId := input.KeyVaultID; keyVaultId != nil {
        result["key_vault_id"] = *keyVaultId
    }
    if keyVaultUri := input.KeyVaultUri; keyVaultUri != nil {
        result["key_vault_uri"] = *keyVaultUri
    }

    return []interface{}{result}
}
