// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmEnterpriseChannel() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmEnterpriseChannelCreate,
        Read: resourceArmEnterpriseChannelRead,
        Update: resourceArmEnterpriseChannelUpdate,
        Delete: resourceArmEnterpriseChannelDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "nodes": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "azure_location": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "azure_sku": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(botservice.Creating),
                                string(botservice.CreateFailed),
                                string(botservice.Started),
                                string(botservice.Starting),
                                string(botservice.StartFailed),
                                string(botservice.Stopped),
                                string(botservice.Stopping),
                                string(botservice.StopFailed),
                                string(botservice.Deleting),
                                string(botservice.DeleteFailed),
                            }, false),
                            Default: string(botservice.Creating),
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(botservice.sdk),
                    string(botservice.designer),
                    string(botservice.bot),
                    string(botservice.function),
                }, false),
                Default: string(botservice.sdk),
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(botservice.F0),
                                string(botservice.S1),
                            }, false),
                        },
                    },
                },
            },

            "state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(botservice.Creating),
                    string(botservice.CreateFailed),
                    string(botservice.Started),
                    string(botservice.Starting),
                    string(botservice.StartFailed),
                    string(botservice.Stopped),
                    string(botservice.Stopping),
                    string(botservice.StopFailed),
                    string(botservice.Deleting),
                    string(botservice.DeleteFailed),
                }, false),
                Default: string(botservice.Creating),
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmEnterpriseChannelCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).enterpriseChannelsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Enterprise Channel %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_enterprise_channel", *existing.ID)
        }
    }

    name := d.Get("name").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    etag := d.Get("etag").(string)
    kind := d.Get("kind").(string)
    nodes := d.Get("nodes").([]interface{})
    sku := d.Get("sku").([]interface{})
    state := d.Get("state").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := botservice.EnterpriseChannel{
        Etag: utils.String(etag),
        Kind: botservice.Kind(kind),
        Location: utils.String(location),
        Name: utils.String(name),
        EnterpriseChannelProperties: &botservice.EnterpriseChannelProperties{
            Nodes: expandArmEnterpriseChannelEnterpriseChannelNode(nodes),
            State: botservice.EnterpriseChannelState(state),
        },
        Sku: expandArmEnterpriseChannelSku(sku),
        Tags: tags.Expand(t),
    }


    future, err := client.Create(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Enterprise Channel %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Enterprise Channel %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Enterprise Channel %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Enterprise Channel %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmEnterpriseChannelRead(d, meta)
}

func resourceArmEnterpriseChannelRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).enterpriseChannelsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["enterpriseChannels"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Enterprise Channel %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Enterprise Channel %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("etag", resp.Etag)
    d.Set("kind", string(resp.Kind))
    if enterpriseChannelProperties := resp.EnterpriseChannelProperties; enterpriseChannelProperties != nil {
        if err := d.Set("nodes", flattenArmEnterpriseChannelEnterpriseChannelNode(enterpriseChannelProperties.Nodes)); err != nil {
            return fmt.Errorf("Error setting `nodes`: %+v", err)
        }
        d.Set("state", string(enterpriseChannelProperties.State))
    }
    if err := d.Set("sku", flattenArmEnterpriseChannelSku(resp.Sku)); err != nil {
        return fmt.Errorf("Error setting `sku`: %+v", err)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmEnterpriseChannelUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).enterpriseChannelsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    etag := d.Get("etag").(string)
    kind := d.Get("kind").(string)
    nodes := d.Get("nodes").([]interface{})
    sku := d.Get("sku").([]interface{})
    state := d.Get("state").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := botservice.EnterpriseChannel{
        Etag: utils.String(etag),
        Kind: botservice.Kind(kind),
        Name: utils.String(name),
        EnterpriseChannelProperties: &botservice.EnterpriseChannelProperties{
            Nodes: expandArmEnterpriseChannelEnterpriseChannelNode(nodes),
            State: botservice.EnterpriseChannelState(state),
        },
        Sku: expandArmEnterpriseChannelSku(sku),
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Enterprise Channel %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Enterprise Channel %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmEnterpriseChannelRead(d, meta)
}

func resourceArmEnterpriseChannelDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).enterpriseChannelsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["enterpriseChannels"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Enterprise Channel %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Enterprise Channel %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmEnterpriseChannelEnterpriseChannelNode(input []interface{}) *[]botservice.EnterpriseChannelNode {
    results := make([]botservice.EnterpriseChannelNode, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        state := v["state"].(string)
        name := v["name"].(string)
        azureSku := v["azure_sku"].(string)
        azureLocation := v["azure_location"].(string)

        result := botservice.EnterpriseChannelNode{
            AzureLocation: utils.String(azureLocation),
            AzureSku: utils.String(azureSku),
            Name: utils.String(name),
            State: botservice.EnterpriseChannelNodeState(state),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmEnterpriseChannelSku(input []interface{}) *botservice.Sku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)

    result := botservice.Sku{
        Name: botservice.SkuName(name),
    }
    return &result
}


func flattenArmEnterpriseChannelEnterpriseChannelNode(input *[]botservice.EnterpriseChannelNode) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if azureLocation := item.AzureLocation; azureLocation != nil {
            v["azure_location"] = *azureLocation
        }
        if azureSku := item.AzureSku; azureSku != nil {
            v["azure_sku"] = *azureSku
        }
        v["state"] = string(item.State)

        results = append(results, v)
    }

    return results
}

func flattenArmEnterpriseChannelSku(input *botservice.Sku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["name"] = string(input.Name)

    return []interface{}{result}
}
