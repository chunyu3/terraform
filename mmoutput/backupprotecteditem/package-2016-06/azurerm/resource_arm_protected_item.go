// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmProtectedItem() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmProtectedItemCreateUpdate,
        Read: resourceArmProtectedItemRead,
        Update: resourceArmProtectedItemCreateUpdate,
        Delete: resourceArmProtectedItemDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "container_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "fabric_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "vault_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "backup_management_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(backup.Invalid),
                    string(backup.AzureIaasVM),
                    string(backup.MAB),
                    string(backup.DPM),
                    string(backup.AzureBackupServer),
                    string(backup.AzureSql),
                }, false),
                Default: string(backup.Invalid),
            },

            "e_tag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "last_recovery_point": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "policy_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "source_resource_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "workload_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(backup.Invalid),
                    string(backup.VM),
                    string(backup.FileFolder),
                    string(backup.AzureSqlDb),
                    string(backup.SQLDB),
                    string(backup.Exchange),
                    string(backup.Sharepoint),
                    string(backup.DPMUnknown),
                }, false),
                Default: string(backup.Invalid),
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmProtectedItemCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).protectedItemsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    containerName := d.Get("container_name").(string)
    fabricName := d.Get("fabric_name").(string)
    vaultName := d.Get("vault_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, vaultName, fabricName, containerName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Protected Item %q (Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", name, containerName, fabricName, resourceGroup, vaultName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_protected_item", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    name := d.Get("name").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    backupManagementType := d.Get("backup_management_type").(string)
    eTag := d.Get("e_tag").(string)
    lastRecoveryPoint := d.Get("last_recovery_point").(string)
    policyId := d.Get("policy_id").(string)
    sourceResourceId := d.Get("source_resource_id").(string)
    type := d.Get("type").(string)
    workloadType := d.Get("workload_type").(string)
    t := d.Get("tags").(map[string]interface{})

    resourceProtectedItem := backup.ProtectedItemResource{
        ETag: utils.String(eTag),
        ID: utils.String(id),
        Location: utils.String(location),
        Name: utils.String(name),
        ProtectedItem: &backup.ProtectedItem{
            BackupManagementType: backup.ManagementType(backupManagementType),
            LastRecoveryPoint: convertStringToDate(lastRecoveryPoint),
            PolicyID: utils.String(policyId),
            SourceResourceID: utils.String(sourceResourceId),
            WorkloadType: backup.DataSourceType(workloadType),
        },
        Tags: tags.Expand(t),
        Type: utils.String(type),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, vaultName, fabricName, containerName, name, resourceProtectedItem); err != nil {
        return fmt.Errorf("Error creating Protected Item %q (Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", name, containerName, fabricName, resourceGroup, vaultName, err)
    }


    resp, err := client.Get(ctx, resourceGroup, vaultName, fabricName, containerName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Protected Item %q (Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", name, containerName, fabricName, resourceGroup, vaultName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Protected Item %q (Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q) ID", name, containerName, fabricName, resourceGroup, vaultName)
    }
    d.SetId(*resp.ID)

    return resourceArmProtectedItemRead(d, meta)
}

func resourceArmProtectedItemRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).protectedItemsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    vaultName := id.Path["vaults"]
    fabricName := id.Path["backupFabrics"]
    containerName := id.Path["protectionContainers"]
    name := id.Path["protectedItems"]

    resp, err := client.Get(ctx, resourceGroup, vaultName, fabricName, containerName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Protected Item %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Protected Item %q (Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", name, containerName, fabricName, resourceGroup, vaultName, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    d.Set("container_name", containerName)
    d.Set("fabric_name", fabricName)
    d.Set("vault_name", vaultName)

    return nil
}


func resourceArmProtectedItemDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).protectedItemsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    vaultName := id.Path["vaults"]
    fabricName := id.Path["backupFabrics"]
    containerName := id.Path["protectionContainers"]
    name := id.Path["protectedItems"]

    if _, err := client.Delete(ctx, resourceGroup, vaultName, fabricName, containerName, name); err != nil {
        return fmt.Errorf("Error deleting Protected Item %q (Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", name, containerName, fabricName, resourceGroup, vaultName, err)
    }

    return nil
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}
