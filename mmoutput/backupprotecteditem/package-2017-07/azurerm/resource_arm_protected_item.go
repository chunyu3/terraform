// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmProtectedItem() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmProtectedItemCreateUpdate,
        Read: resourceArmProtectedItemRead,
        Update: resourceArmProtectedItemCreateUpdate,
        Delete: resourceArmProtectedItemDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "container_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "fabric_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "protected_item_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "vault_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "backup_management_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(backup.Invalid),
                    string(backup.AzureIaasVM),
                    string(backup.MAB),
                    string(backup.DPM),
                    string(backup.AzureBackupServer),
                    string(backup.AzureSql),
                    string(backup.AzureStorage),
                    string(backup.AzureWorkload),
                    string(backup.DefaultBackup),
                }, false),
                Default: string(backup.Invalid),
            },

            "backup_set_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "container_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "create_mode": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(backup.Invalid),
                    string(backup.Default),
                    string(backup.Recover),
                }, false),
                Default: string(backup.Invalid),
            },

            "deferred_delete_time_in_utc": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "deferred_delete_time_remaining": {
                Type: schema.TypeString,
                Optional: true,
            },

            "e_tag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "is_deferred_delete_schedule_upcoming": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "is_rehydrate": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "is_scheduled_for_deferred_delete": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "last_recovery_point": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "policy_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "source_resource_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "workload_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(backup.Invalid),
                    string(backup.VM),
                    string(backup.FileFolder),
                    string(backup.AzureSqlDb),
                    string(backup.SQLDB),
                    string(backup.Exchange),
                    string(backup.Sharepoint),
                    string(backup.VMwareVM),
                    string(backup.SystemState),
                    string(backup.Client),
                    string(backup.GenericDataSource),
                    string(backup.SQLDataBase),
                    string(backup.AzureFileShare),
                    string(backup.SAPHanaDatabase),
                    string(backup.SAPAseDatabase),
                }, false),
                Default: string(backup.Invalid),
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmProtectedItemCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).protectedItemsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    containerName := d.Get("container_name").(string)
    fabricName := d.Get("fabric_name").(string)
    protectedItemName := d.Get("protected_item_name").(string)
    vaultName := d.Get("vault_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, vaultName, resourceGroup, fabricName, containerName, protectedItemName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Protected Item (Protected Item Name %q / Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", protectedItemName, containerName, fabricName, resourceGroup, vaultName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_protected_item", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    backupManagementType := d.Get("backup_management_type").(string)
    backupSetName := d.Get("backup_set_name").(string)
    containerName := d.Get("container_name").(string)
    createMode := d.Get("create_mode").(string)
    deferredDeleteTimeInUtc := d.Get("deferred_delete_time_in_utc").(string)
    deferredDeleteTimeRemaining := d.Get("deferred_delete_time_remaining").(string)
    eTag := d.Get("e_tag").(string)
    isDeferredDeleteScheduleUpcoming := d.Get("is_deferred_delete_schedule_upcoming").(bool)
    isRehydrate := d.Get("is_rehydrate").(bool)
    isScheduledForDeferredDelete := d.Get("is_scheduled_for_deferred_delete").(bool)
    lastRecoveryPoint := d.Get("last_recovery_point").(string)
    policyId := d.Get("policy_id").(string)
    sourceResourceId := d.Get("source_resource_id").(string)
    workloadType := d.Get("workload_type").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := backup.ProtectedItemResource{
        ETag: utils.String(eTag),
        Location: utils.String(location),
        ProtectedItem: &backup.ProtectedItem{
            BackupManagementType: backup.ManagementType(backupManagementType),
            BackupSetName: utils.String(backupSetName),
            ContainerName: utils.String(containerName),
            CreateMode: backup.CreateMode(createMode),
            DeferredDeleteTimeInUtc: convertStringToDate(deferredDeleteTimeInUtc),
            DeferredDeleteTimeRemaining: utils.String(deferredDeleteTimeRemaining),
            IsDeferredDeleteScheduleUpcoming: utils.Bool(isDeferredDeleteScheduleUpcoming),
            IsRehydrate: utils.Bool(isRehydrate),
            IsScheduledForDeferredDelete: utils.Bool(isScheduledForDeferredDelete),
            LastRecoveryPoint: convertStringToDate(lastRecoveryPoint),
            PolicyID: utils.String(policyId),
            SourceResourceID: utils.String(sourceResourceId),
            WorkloadType: backup.DataSourceType(workloadType),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, vaultName, resourceGroup, fabricName, containerName, protectedItemName, parameters); err != nil {
        return fmt.Errorf("Error creating Protected Item (Protected Item Name %q / Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", protectedItemName, containerName, fabricName, resourceGroup, vaultName, err)
    }


    resp, err := client.Get(ctx, vaultName, resourceGroup, fabricName, containerName, protectedItemName)
    if err != nil {
        return fmt.Errorf("Error retrieving Protected Item (Protected Item Name %q / Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", protectedItemName, containerName, fabricName, resourceGroup, vaultName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Protected Item (Protected Item Name %q / Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q) ID", protectedItemName, containerName, fabricName, resourceGroup, vaultName)
    }
    d.SetId(*resp.ID)

    return resourceArmProtectedItemRead(d, meta)
}

func resourceArmProtectedItemRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).protectedItemsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    vaultName := id.Path["vaults"]
    resourceGroup := id.ResourceGroup
    fabricName := id.Path["backupFabrics"]
    containerName := id.Path["protectionContainers"]
    protectedItemName := id.Path["protectedItems"]

    resp, err := client.Get(ctx, vaultName, resourceGroup, fabricName, containerName, protectedItemName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Protected Item %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Protected Item (Protected Item Name %q / Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", protectedItemName, containerName, fabricName, resourceGroup, vaultName, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if protectedItem := resp.ProtectedItem; protectedItem != nil {
        d.Set("backup_management_type", string(protectedItem.BackupManagementType))
        d.Set("backup_set_name", protectedItem.BackupSetName)
        d.Set("container_name", protectedItem.ContainerName)
        d.Set("create_mode", string(protectedItem.CreateMode))
        d.Set("deferred_delete_time_in_utc", (protectedItem.DeferredDeleteTimeInUtc).String())
        d.Set("deferred_delete_time_remaining", protectedItem.DeferredDeleteTimeRemaining)
        d.Set("is_deferred_delete_schedule_upcoming", protectedItem.IsDeferredDeleteScheduleUpcoming)
        d.Set("is_rehydrate", protectedItem.IsRehydrate)
        d.Set("is_scheduled_for_deferred_delete", protectedItem.IsScheduledForDeferredDelete)
        d.Set("last_recovery_point", (protectedItem.LastRecoveryPoint).String())
        d.Set("policy_id", protectedItem.PolicyID)
        d.Set("source_resource_id", protectedItem.SourceResourceID)
        d.Set("workload_type", string(protectedItem.WorkloadType))
    }
    d.Set("container_name", containerName)
    d.Set("e_tag", resp.ETag)
    d.Set("fabric_name", fabricName)
    d.Set("protected_item_name", protectedItemName)
    d.Set("type", resp.Type)
    d.Set("vault_name", vaultName)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmProtectedItemDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).protectedItemsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    vaultName := id.Path["vaults"]
    resourceGroup := id.ResourceGroup
    fabricName := id.Path["backupFabrics"]
    containerName := id.Path["protectionContainers"]
    protectedItemName := id.Path["protectedItems"]

    if _, err := client.Delete(ctx, vaultName, resourceGroup, fabricName, containerName, protectedItemName); err != nil {
        return fmt.Errorf("Error deleting Protected Item (Protected Item Name %q / Container Name %q / Fabric Name %q / Resource Group %q / Vault Name %q): %+v", protectedItemName, containerName, fabricName, resourceGroup, vaultName, err)
    }

    return nil
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}
