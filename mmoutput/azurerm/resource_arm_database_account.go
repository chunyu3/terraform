// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDatabaseAccount() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDatabaseAccountCreateUpdate,
        Read: resourceArmDatabaseAccountRead,
        Update: resourceArmDatabaseAccountCreateUpdate,
        Delete: resourceArmDatabaseAccountDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "database_account_offer_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "locations": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "failover_priority": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "is_zone_redundant": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "location_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "capabilities": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "connector_offer": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(cosmosdb.Small),
                }, false),
                Default: string(cosmosdb.Small),
            },

            "consistency_policy": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "default_consistency_level": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(cosmosdb.Eventual),
                                string(cosmosdb.Session),
                                string(cosmosdb.BoundedStaleness),
                                string(cosmosdb.Strong),
                                string(cosmosdb.ConsistentPrefix),
                            }, false),
                        },
                        "max_interval_in_seconds": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "max_staleness_prefix": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "enable_automatic_failover": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enable_cassandra_connector": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "enable_multiple_write_locations": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "ip_range_filter": {
                Type: schema.TypeString,
                Optional: true,
            },

            "is_virtual_network_filter_enabled": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(cosmosdb.GlobalDocumentDB),
                    string(cosmosdb.MongoDB),
                    string(cosmosdb.Parse),
                }, false),
                Default: string(cosmosdb.GlobalDocumentDB),
            },

            "virtual_network_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "ignore_missing_vnet_service_endpoint": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                    },
                },
            },

            "document_endpoint": {
                Type: schema.TypeString,
                Computed: true,
            },

            "failover_policies": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "failover_priority": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "location_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "read_locations": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "document_endpoint": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "failover_priority": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "is_zone_redundant": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "location_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "provisioning_state": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "write_locations": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "document_endpoint": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "failover_priority": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "is_zone_redundant": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "location_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "provisioning_state": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmDatabaseAccountCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databaseAccountsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        resp, err := client.Get(ctx, resourceGroup, accountName)
        if err != nil {
            if !utils.ResponseWasNotFound(resp.Response) {
                return fmt.Errorf("Error checking for present of existing Database Account (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
            }
        }
        if !utils.ResponseWasNotFound(resp.Response) {
            return tf.ImportAsExistsError("azurerm_database_account", *resp.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    capabilities := d.Get("capabilities").([]interface{})
    connectorOffer := d.Get("connector_offer").(string)
    consistencyPolicy := d.Get("consistency_policy").([]interface{})
    databaseAccountOfferType := d.Get("database_account_offer_type").(string)
    enableAutomaticFailover := d.Get("enable_automatic_failover").(bool)
    enableCassandraConnector := d.Get("enable_cassandra_connector").(bool)
    enableMultipleWriteLocations := d.Get("enable_multiple_write_locations").(bool)
    ipRangeFilter := d.Get("ip_range_filter").(string)
    isVirtualNetworkFilterEnabled := d.Get("is_virtual_network_filter_enabled").(bool)
    kind := d.Get("kind").(string)
    locations := d.Get("locations").([]interface{})
    virtualNetworkRules := d.Get("virtual_network_rules").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    createUpdateParameters := cosmosdb.DatabaseAccountCreateUpdateParameters{
        Kind: cosmosdb.DatabaseAccountKind(kind),
        Location: utils.String(location),
        DatabaseAccountCreateUpdateProperties: &cosmosdb.DatabaseAccountCreateUpdateProperties{
            Capabilities: expandArmDatabaseAccountCapability(capabilities),
            ConnectorOffer: cosmosdb.ConnectorOffer(connectorOffer),
            ConsistencyPolicy: expandArmDatabaseAccountConsistencyPolicy(consistencyPolicy),
            DatabaseAccountOfferType: utils.String(databaseAccountOfferType),
            EnableAutomaticFailover: utils.Bool(enableAutomaticFailover),
            EnableCassandraConnector: utils.Bool(enableCassandraConnector),
            EnableMultipleWriteLocations: utils.Bool(enableMultipleWriteLocations),
            IpRangeFilter: utils.String(ipRangeFilter),
            IsVirtualNetworkFilterEnabled: utils.Bool(isVirtualNetworkFilterEnabled),
            Locations: expandArmDatabaseAccountLocation(locations),
            VirtualNetworkRules: expandArmDatabaseAccountVirtualNetworkRule(virtualNetworkRules),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, accountName, createUpdateParameters)
    if err != nil {
        return fmt.Errorf("Error creating Database Account (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Database Account (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName)
    if err != nil {
        return fmt.Errorf("Error retrieving Database Account (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Database Account (Account Name %q / Resource Group %q) ID", accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmDatabaseAccountRead(d, meta)
}

func resourceArmDatabaseAccountRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databaseAccountsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["databaseAccounts"]

    resp, err := client.Get(ctx, resourceGroup, accountName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Database Account %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Database Account (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("account_name", accountName)
    if databaseAccountCreateUpdateProperties := resp.DatabaseAccountCreateUpdateProperties; databaseAccountCreateUpdateProperties != nil {
        if err := d.Set("capabilities", flattenArmDatabaseAccountCapability(databaseAccountCreateUpdateProperties.Capabilities)); err != nil {
            return fmt.Errorf("Error setting `capabilities`: %+v", err)
        }
        d.Set("connector_offer", string(databaseAccountCreateUpdateProperties.ConnectorOffer))
        if err := d.Set("consistency_policy", flattenArmDatabaseAccountConsistencyPolicy(databaseAccountCreateUpdateProperties.ConsistencyPolicy)); err != nil {
            return fmt.Errorf("Error setting `consistency_policy`: %+v", err)
        }
        d.Set("database_account_offer_type", databaseAccountCreateUpdateProperties.DatabaseAccountOfferType)
        d.Set("document_endpoint", databaseAccountCreateUpdateProperties.DocumentEndpoint)
        d.Set("enable_automatic_failover", databaseAccountCreateUpdateProperties.EnableAutomaticFailover)
        d.Set("enable_cassandra_connector", databaseAccountCreateUpdateProperties.EnableCassandraConnector)
        d.Set("enable_multiple_write_locations", databaseAccountCreateUpdateProperties.EnableMultipleWriteLocations)
        if err := d.Set("failover_policies", flattenArmDatabaseAccountFailoverPolicy(databaseAccountCreateUpdateProperties.FailoverPolicies)); err != nil {
            return fmt.Errorf("Error setting `failover_policies`: %+v", err)
        }
        d.Set("ip_range_filter", databaseAccountCreateUpdateProperties.IpRangeFilter)
        d.Set("is_virtual_network_filter_enabled", databaseAccountCreateUpdateProperties.IsVirtualNetworkFilterEnabled)
        d.Set("provisioning_state", databaseAccountCreateUpdateProperties.ProvisioningState)
        if err := d.Set("read_locations", flattenArmDatabaseAccountLocation(databaseAccountCreateUpdateProperties.ReadLocations)); err != nil {
            return fmt.Errorf("Error setting `read_locations`: %+v", err)
        }
        if err := d.Set("virtual_network_rules", flattenArmDatabaseAccountVirtualNetworkRule(databaseAccountCreateUpdateProperties.VirtualNetworkRules)); err != nil {
            return fmt.Errorf("Error setting `virtual_network_rules`: %+v", err)
        }
        if err := d.Set("write_locations", flattenArmDatabaseAccountLocation(databaseAccountCreateUpdateProperties.WriteLocations)); err != nil {
            return fmt.Errorf("Error setting `write_locations`: %+v", err)
        }
    }
    d.Set("kind", string(resp.Kind))
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmDatabaseAccountDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databaseAccountsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["databaseAccounts"]

    future, err := client.Delete(ctx, resourceGroup, accountName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Database Account (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Database Account (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmDatabaseAccountCapability(input []interface{}) *[]cosmosdb.Capability {
    results := make([]cosmosdb.Capability, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)

        result := cosmosdb.Capability{
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmDatabaseAccountConsistencyPolicy(input []interface{}) *cosmosdb.ConsistencyPolicy {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    defaultConsistencyLevel := v["default_consistency_level"].(string)
    maxStalenessPrefix := v["max_staleness_prefix"].(int)
    maxIntervalInSeconds := v["max_interval_in_seconds"].(int)

    result := cosmosdb.ConsistencyPolicy{
        DefaultConsistencyLevel: cosmosdb.DefaultConsistencyLevel(defaultConsistencyLevel),
        MaxIntervalInSeconds: utils.Int32(int32(maxIntervalInSeconds)),
        MaxStalenessPrefix: utils.Int64(int64(maxStalenessPrefix)),
    }
    return &result
}

func expandArmDatabaseAccountLocation(input []interface{}) *[]cosmosdb.Location {
    results := make([]cosmosdb.Location, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        locationName := v["location_name"].(string)
        failoverPriority := v["failover_priority"].(int)
        isZoneRedundant := v["is_zone_redundant"].(bool)

        result := cosmosdb.Location{
            FailoverPriority: utils.Int32(int32(failoverPriority)),
            IsZoneRedundant: utils.Bool(isZoneRedundant),
            LocationName: utils.String(locationName),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmDatabaseAccountVirtualNetworkRule(input []interface{}) *[]cosmosdb.VirtualNetworkRule {
    results := make([]cosmosdb.VirtualNetworkRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        ignoreMissingVnetServiceEndpoint := v["ignore_missing_vnet_service_endpoint"].(bool)

        result := cosmosdb.VirtualNetworkRule{
            ID: utils.String(id),
            IgnoreMissingVnetServiceEndpoint: utils.Bool(ignoreMissingVnetServiceEndpoint),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmDatabaseAccountCapability(input *[]cosmosdb.Capability) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }

        results = append(results, v)
    }

    return results
}

func flattenArmDatabaseAccountConsistencyPolicy(input *cosmosdb.ConsistencyPolicy) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["default_consistency_level"] = string(input.DefaultConsistencyLevel)
    if maxIntervalInSeconds := input.MaxIntervalInSeconds; maxIntervalInSeconds != nil {
        result["max_interval_in_seconds"] = int(*maxIntervalInSeconds)
    }
    if maxStalenessPrefix := input.MaxStalenessPrefix; maxStalenessPrefix != nil {
        result["max_staleness_prefix"] = int(*maxStalenessPrefix)
    }

    return []interface{}{result}
}

func flattenArmDatabaseAccountFailoverPolicy(input *[]cosmosdb.FailoverPolicy) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}

func flattenArmDatabaseAccountLocation(input *[]cosmosdb.Location) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}

func flattenArmDatabaseAccountVirtualNetworkRule(input *[]cosmosdb.VirtualNetworkRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if ignoreMissingVnetServiceEndpoint := item.IgnoreMissingVnetServiceEndpoint; ignoreMissingVnetServiceEndpoint != nil {
            v["ignore_missing_vnet_service_endpoint"] = *ignoreMissingVnetServiceEndpoint
        }

        results = append(results, v)
    }

    return results
}
