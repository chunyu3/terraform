// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmFrontDoor() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmFrontDoorCreateUpdate,
        Read: resourceArmFrontDoorRead,
        Update: resourceArmFrontDoorCreateUpdate,
        Delete: resourceArmFrontDoorDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "front_door_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "backend_pools": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "backends": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "address": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "backend_host_header": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "enabled_state": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(frontdoor.Enabled),
                                            string(frontdoor.Disabled),
                                        }, false),
                                        Default: string(frontdoor.Enabled),
                                    },
                                    "http_port": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "https_port": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "priority": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "weight": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "health_probe_settings": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "load_balancing_settings": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "resource_state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(frontdoor.Creating),
                                string(frontdoor.Enabling),
                                string(frontdoor.Enabled),
                                string(frontdoor.Disabling),
                                string(frontdoor.Disabled),
                                string(frontdoor.Deleting),
                            }, false),
                            Default: string(frontdoor.Creating),
                        },
                    },
                },
            },

            "backend_pools_settings": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "enforce_certificate_name_check": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(frontdoor.Enabled),
                                string(frontdoor.Disabled),
                            }, false),
                            Default: string(frontdoor.Enabled),
                        },
                    },
                },
            },

            "enabled_state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(frontdoor.Enabled),
                    string(frontdoor.Disabled),
                }, false),
                Default: string(frontdoor.Enabled),
            },

            "friendly_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "frontend_endpoints": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "host_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "resource_state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(frontdoor.Creating),
                                string(frontdoor.Enabling),
                                string(frontdoor.Enabled),
                                string(frontdoor.Disabling),
                                string(frontdoor.Disabled),
                                string(frontdoor.Deleting),
                            }, false),
                            Default: string(frontdoor.Creating),
                        },
                        "session_affinity_enabled_state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(frontdoor.Enabled),
                                string(frontdoor.Disabled),
                            }, false),
                            Default: string(frontdoor.Enabled),
                        },
                        "session_affinity_ttl_seconds": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "web_application_firewall_policy_link": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "health_probe_settings": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "interval_in_seconds": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "path": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "protocol": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(frontdoor.Http),
                                string(frontdoor.Https),
                            }, false),
                            Default: string(frontdoor.Http),
                        },
                        "resource_state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(frontdoor.Creating),
                                string(frontdoor.Enabling),
                                string(frontdoor.Enabled),
                                string(frontdoor.Disabling),
                                string(frontdoor.Disabled),
                                string(frontdoor.Deleting),
                            }, false),
                            Default: string(frontdoor.Creating),
                        },
                    },
                },
            },

            "load_balancing_settings": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "additional_latency_milliseconds": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "resource_state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(frontdoor.Creating),
                                string(frontdoor.Enabling),
                                string(frontdoor.Enabled),
                                string(frontdoor.Disabling),
                                string(frontdoor.Disabled),
                                string(frontdoor.Deleting),
                            }, false),
                            Default: string(frontdoor.Creating),
                        },
                        "sample_size": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "successful_samples_required": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "resource_state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(frontdoor.Creating),
                    string(frontdoor.Enabling),
                    string(frontdoor.Enabled),
                    string(frontdoor.Disabling),
                    string(frontdoor.Disabled),
                    string(frontdoor.Deleting),
                }, false),
                Default: string(frontdoor.Creating),
            },

            "routing_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "accepted_protocols": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                                ValidateFunc: validation.StringInSlice([]string{
                                    string(frontdoor.Http),
                                    string(frontdoor.Https),
                               }, false),
                            },
                        },
                        "enabled_state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(frontdoor.Enabled),
                                string(frontdoor.Disabled),
                            }, false),
                            Default: string(frontdoor.Enabled),
                        },
                        "frontend_endpoints": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "patterns_to_match": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "resource_state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(frontdoor.Creating),
                                string(frontdoor.Enabling),
                                string(frontdoor.Enabled),
                                string(frontdoor.Disabling),
                                string(frontdoor.Disabled),
                                string(frontdoor.Deleting),
                            }, false),
                            Default: string(frontdoor.Creating),
                        },
                    },
                },
            },

            "cname": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmFrontDoorCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).frontDoorsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    frontDoorName := d.Get("front_door_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        resp, err := client.Get(ctx, resourceGroup, frontDoorName)
        if err != nil {
            if !utils.ResponseWasNotFound(resp.Response) {
                return fmt.Errorf("Error checking for present of existing Front Door (Front Door Name %q / Resource Group %q): %+v", frontDoorName, resourceGroup, err)
            }
        }
        if !utils.ResponseWasNotFound(resp.Response) {
            return tf.ImportAsExistsError("azurerm_front_door", *resp.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    backendPools := d.Get("backend_pools").([]interface{})
    backendPoolsSettings := d.Get("backend_pools_settings").([]interface{})
    enabledState := d.Get("enabled_state").(string)
    friendlyName := d.Get("friendly_name").(string)
    frontendEndpoints := d.Get("frontend_endpoints").([]interface{})
    healthProbeSettings := d.Get("health_probe_settings").([]interface{})
    loadBalancingSettings := d.Get("load_balancing_settings").([]interface{})
    resourceState := d.Get("resource_state").(string)
    routingRules := d.Get("routing_rules").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    frontDoorParameters := frontdoor.{
        Location: utils.String(location),
        Properties: &frontdoor.Properties{
            BackendPools: expandArmFrontDoorBackendPool(backendPools),
            BackendPoolsSettings: expandArmFrontDoorBackendPoolsSettings(backendPoolsSettings),
            EnabledState: frontdoor.EnabledState(enabledState),
            FriendlyName: utils.String(friendlyName),
            FrontendEndpoints: expandArmFrontDoorFrontendEndpoint(frontendEndpoints),
            HealthProbeSettings: expandArmFrontDoorHealthProbeSettingsModel(healthProbeSettings),
            LoadBalancingSettings: expandArmFrontDoorLoadBalancingSettingsModel(loadBalancingSettings),
            ResourceState: frontdoor.ResourceState(resourceState),
            RoutingRules: expandArmFrontDoorRoutingRule(routingRules),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, frontDoorName, frontDoorParameters)
    if err != nil {
        return fmt.Errorf("Error creating Front Door (Front Door Name %q / Resource Group %q): %+v", frontDoorName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Front Door (Front Door Name %q / Resource Group %q): %+v", frontDoorName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, frontDoorName)
    if err != nil {
        return fmt.Errorf("Error retrieving Front Door (Front Door Name %q / Resource Group %q): %+v", frontDoorName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Front Door (Front Door Name %q / Resource Group %q) ID", frontDoorName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmFrontDoorRead(d, meta)
}

func resourceArmFrontDoorRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).frontDoorsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    frontDoorName := id.Path["frontDoors"]

    resp, err := client.Get(ctx, resourceGroup, frontDoorName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Front Door %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Front Door (Front Door Name %q / Resource Group %q): %+v", frontDoorName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if properties := resp.Properties; properties != nil {
        if err := d.Set("backend_pools", flattenArmFrontDoorBackendPool(properties.BackendPools)); err != nil {
            return fmt.Errorf("Error setting `backend_pools`: %+v", err)
        }
        if err := d.Set("backend_pools_settings", flattenArmFrontDoorBackendPoolsSettings(properties.BackendPoolsSettings)); err != nil {
            return fmt.Errorf("Error setting `backend_pools_settings`: %+v", err)
        }
        d.Set("cname", properties.Cname)
        d.Set("enabled_state", string(properties.EnabledState))
        d.Set("friendly_name", properties.FriendlyName)
        if err := d.Set("frontend_endpoints", flattenArmFrontDoorFrontendEndpoint(properties.FrontendEndpoints)); err != nil {
            return fmt.Errorf("Error setting `frontend_endpoints`: %+v", err)
        }
        if err := d.Set("health_probe_settings", flattenArmFrontDoorHealthProbeSettingsModel(properties.HealthProbeSettings)); err != nil {
            return fmt.Errorf("Error setting `health_probe_settings`: %+v", err)
        }
        if err := d.Set("load_balancing_settings", flattenArmFrontDoorLoadBalancingSettingsModel(properties.LoadBalancingSettings)); err != nil {
            return fmt.Errorf("Error setting `load_balancing_settings`: %+v", err)
        }
        d.Set("provisioning_state", properties.ProvisioningState)
        d.Set("resource_state", string(properties.ResourceState))
        if err := d.Set("routing_rules", flattenArmFrontDoorRoutingRule(properties.RoutingRules)); err != nil {
            return fmt.Errorf("Error setting `routing_rules`: %+v", err)
        }
    }
    d.Set("front_door_name", frontDoorName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmFrontDoorDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).frontDoorsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    frontDoorName := id.Path["frontDoors"]

    future, err := client.Delete(ctx, resourceGroup, frontDoorName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Front Door (Front Door Name %q / Resource Group %q): %+v", frontDoorName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Front Door (Front Door Name %q / Resource Group %q): %+v", frontDoorName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmFrontDoorBackendPool(input []interface{}) *[]frontdoor.BackendPool {
    results := make([]frontdoor.BackendPool, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        backends := v["backends"].([]interface{})
        loadBalancingSettings := v["load_balancing_settings"].([]interface{})
        healthProbeSettings := v["health_probe_settings"].([]interface{})
        resourceState := v["resource_state"].(string)
        name := v["name"].(string)

        result := frontdoor.BackendPool{
            ID: utils.String(id),
            Name: utils.String(name),
            BackendPoolProperties: &frontdoor.BackendPoolProperties{
                Backends: expandArmFrontDoorBackend(backends),
                HealthProbeSettings: expandArmFrontDoorSubResource(healthProbeSettings),
                LoadBalancingSettings: expandArmFrontDoorSubResource(loadBalancingSettings),
                ResourceState: frontdoor.ResourceState(resourceState),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFrontDoorBackendPoolsSettings(input []interface{}) *frontdoor.BackendPoolsSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    enforceCertificateNameCheck := v["enforce_certificate_name_check"].(string)

    result := frontdoor.BackendPoolsSettings{
        EnforceCertificateNameCheck: frontdoor.EnforceCertificateNameCheckEnabledState(enforceCertificateNameCheck),
    }
    return &result
}

func expandArmFrontDoorFrontendEndpoint(input []interface{}) *[]frontdoor.FrontendEndpoint {
    results := make([]frontdoor.FrontendEndpoint, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        hostName := v["host_name"].(string)
        sessionAffinityEnabledState := v["session_affinity_enabled_state"].(string)
        sessionAffinityTtlSeconds := v["session_affinity_ttl_seconds"].(int)
        webApplicationFirewallPolicyLink := v["web_application_firewall_policy_link"].([]interface{})
        resourceState := v["resource_state"].(string)
        name := v["name"].(string)

        result := frontdoor.FrontendEndpoint{
            ID: utils.String(id),
            Name: utils.String(name),
            FrontendEndpointProperties: &frontdoor.FrontendEndpointProperties{
                HostName: utils.String(hostName),
                ResourceState: frontdoor.ResourceState(resourceState),
                SessionAffinityEnabledState: frontdoor.SessionAffinityEnabledState(sessionAffinityEnabledState),
                SessionAffinityTtlSeconds: utils.Int(sessionAffinityTtlSeconds),
                WebApplicationFirewallPolicyLink: expandArmFrontDoorFrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink(webApplicationFirewallPolicyLink),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFrontDoorHealthProbeSettingsModel(input []interface{}) *[]frontdoor.HealthProbeSettingsModel {
    results := make([]frontdoor.HealthProbeSettingsModel, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        path := v["path"].(string)
        protocol := v["protocol"].(string)
        intervalInSeconds := v["interval_in_seconds"].(int)
        resourceState := v["resource_state"].(string)
        name := v["name"].(string)

        result := frontdoor.HealthProbeSettingsModel{
            ID: utils.String(id),
            Name: utils.String(name),
            HealthProbeSettingsProperties: &frontdoor.HealthProbeSettingsProperties{
                IntervalInSeconds: utils.Int(intervalInSeconds),
                Path: utils.String(path),
                Protocol: frontdoor.Protocol(protocol),
                ResourceState: frontdoor.ResourceState(resourceState),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFrontDoorLoadBalancingSettingsModel(input []interface{}) *[]frontdoor.LoadBalancingSettingsModel {
    results := make([]frontdoor.LoadBalancingSettingsModel, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        sampleSize := v["sample_size"].(int)
        successfulSamplesRequired := v["successful_samples_required"].(int)
        additionalLatencyMilliseconds := v["additional_latency_milliseconds"].(int)
        resourceState := v["resource_state"].(string)
        name := v["name"].(string)

        result := frontdoor.LoadBalancingSettingsModel{
            ID: utils.String(id),
            Name: utils.String(name),
            LoadBalancingSettingsProperties: &frontdoor.LoadBalancingSettingsProperties{
                AdditionalLatencyMilliseconds: utils.Int(additionalLatencyMilliseconds),
                ResourceState: frontdoor.ResourceState(resourceState),
                SampleSize: utils.Int(sampleSize),
                SuccessfulSamplesRequired: utils.Int(successfulSamplesRequired),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFrontDoorRoutingRule(input []interface{}) *[]frontdoor.RoutingRule {
    results := make([]frontdoor.RoutingRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        frontendEndpoints := v["frontend_endpoints"].([]interface{})
        acceptedProtocols := v["accepted_protocols"].([]interface{})
        patternsToMatch := v["patterns_to_match"].([]interface{})
        enabledState := v["enabled_state"].(string)
        resourceState := v["resource_state"].(string)
        name := v["name"].(string)

        result := frontdoor.RoutingRule{
            ID: utils.String(id),
            Name: utils.String(name),
            RoutingRuleProperties: &frontdoor.RoutingRuleProperties{
                AcceptedProtocols: expandArmFrontDoor(acceptedProtocols),
                EnabledState: frontdoor.RoutingRuleEnabledState(enabledState),
                FrontendEndpoints: expandArmFrontDoorSubResource(frontendEndpoints),
                PatternsToMatch: utils.ExpandStringSlice(patternsToMatch),
                ResourceState: frontdoor.ResourceState(resourceState),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFrontDoorBackend(input []interface{}) *[]frontdoor.Backend {
    results := make([]frontdoor.Backend, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        address := v["address"].(string)
        httpPort := v["http_port"].(int)
        httpsPort := v["https_port"].(int)
        enabledState := v["enabled_state"].(string)
        priority := v["priority"].(int)
        weight := v["weight"].(int)
        backendHostHeader := v["backend_host_header"].(string)

        result := frontdoor.Backend{
            Address: utils.String(address),
            BackendHostHeader: utils.String(backendHostHeader),
            EnabledState: frontdoor.BackendEnabledState(enabledState),
            HttpPort: utils.Int(httpPort),
            HttpsPort: utils.Int(httpsPort),
            Priority: utils.Int(priority),
            Weight: utils.Int(weight),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFrontDoorSubResource(input []interface{}) *frontdoor.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := frontdoor.SubResource{
        ID: utils.String(id),
    }
    return &result
}

func expandArmFrontDoorFrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink(input []interface{}) *frontdoor.FrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := frontdoor.FrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink{
        ID: utils.String(id),
    }
    return &result
}

func expandArmFrontDoor(input []interface{}) *[]frontdoor. {
    results := make([]frontdoor., 0)
    for _, item := range input {
        v := item.(string)
        result := frontdoor.(v)
        results = append(results, result)
    }
    return &results
}

func expandArmFrontDoorSubResource(input []interface{}) *[]frontdoor.SubResource {
    results := make([]frontdoor.SubResource, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)

        result := frontdoor.SubResource{
            ID: utils.String(id),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmFrontDoorBackendPool(input *[]frontdoor.BackendPool) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if backendPoolProperties := item.BackendPoolProperties; backendPoolProperties != nil {
            v["backends"] = flattenArmFrontDoorBackend(backendPoolProperties.Backends)
            v["health_probe_settings"] = flattenArmFrontDoorSubResource(backendPoolProperties.HealthProbeSettings)
            v["load_balancing_settings"] = flattenArmFrontDoorSubResource(backendPoolProperties.LoadBalancingSettings)
            v["resource_state"] = string(backendPoolProperties.ResourceState)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmFrontDoorBackendPoolsSettings(input *frontdoor.BackendPoolsSettings) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["enforce_certificate_name_check"] = string(input.EnforceCertificateNameCheck)

    return []interface{}{result}
}

func flattenArmFrontDoorFrontendEndpoint(input *[]frontdoor.FrontendEndpoint) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if frontendEndpointProperties := item.FrontendEndpointProperties; frontendEndpointProperties != nil {
            if hostName := frontendEndpointProperties.HostName; hostName != nil {
                v["host_name"] = *hostName
            }
            v["resource_state"] = string(frontendEndpointProperties.ResourceState)
            v["session_affinity_enabled_state"] = string(frontendEndpointProperties.SessionAffinityEnabledState)
            if sessionAffinityTtlSeconds := frontendEndpointProperties.SessionAffinityTtlSeconds; sessionAffinityTtlSeconds != nil {
                v["session_affinity_ttl_seconds"] = *sessionAffinityTtlSeconds
            }
            v["web_application_firewall_policy_link"] = flattenArmFrontDoorFrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink(frontendEndpointProperties.WebApplicationFirewallPolicyLink)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmFrontDoorHealthProbeSettingsModel(input *[]frontdoor.HealthProbeSettingsModel) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if healthProbeSettingsProperties := item.HealthProbeSettingsProperties; healthProbeSettingsProperties != nil {
            if intervalInSeconds := healthProbeSettingsProperties.IntervalInSeconds; intervalInSeconds != nil {
                v["interval_in_seconds"] = *intervalInSeconds
            }
            if path := healthProbeSettingsProperties.Path; path != nil {
                v["path"] = *path
            }
            v["protocol"] = string(healthProbeSettingsProperties.Protocol)
            v["resource_state"] = string(healthProbeSettingsProperties.ResourceState)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmFrontDoorLoadBalancingSettingsModel(input *[]frontdoor.LoadBalancingSettingsModel) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if loadBalancingSettingsProperties := item.LoadBalancingSettingsProperties; loadBalancingSettingsProperties != nil {
            if additionalLatencyMilliseconds := loadBalancingSettingsProperties.AdditionalLatencyMilliseconds; additionalLatencyMilliseconds != nil {
                v["additional_latency_milliseconds"] = *additionalLatencyMilliseconds
            }
            v["resource_state"] = string(loadBalancingSettingsProperties.ResourceState)
            if sampleSize := loadBalancingSettingsProperties.SampleSize; sampleSize != nil {
                v["sample_size"] = *sampleSize
            }
            if successfulSamplesRequired := loadBalancingSettingsProperties.SuccessfulSamplesRequired; successfulSamplesRequired != nil {
                v["successful_samples_required"] = *successfulSamplesRequired
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmFrontDoorRoutingRule(input *[]frontdoor.RoutingRule) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if routingRuleProperties := item.RoutingRuleProperties; routingRuleProperties != nil {
            v["accepted_protocols"] = flattenArmFrontDoor(string(routingRuleProperties.AcceptedProtocols))
            v["enabled_state"] = string(routingRuleProperties.EnabledState)
            v["frontend_endpoints"] = flattenArmFrontDoorSubResource(routingRuleProperties.FrontendEndpoints)
            v["patterns_to_match"] = utils.FlattenStringSlice(routingRuleProperties.PatternsToMatch)
            v["resource_state"] = string(routingRuleProperties.ResourceState)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmFrontDoorBackend(input *[]frontdoor.Backend) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if address := item.Address; address != nil {
            v["address"] = *address
        }
        if backendHostHeader := item.BackendHostHeader; backendHostHeader != nil {
            v["backend_host_header"] = *backendHostHeader
        }
        v["enabled_state"] = string(item.EnabledState)
        if httpPort := item.HttpPort; httpPort != nil {
            v["http_port"] = *httpPort
        }
        if httpsPort := item.HttpsPort; httpsPort != nil {
            v["https_port"] = *httpsPort
        }
        if priority := item.Priority; priority != nil {
            v["priority"] = *priority
        }
        if weight := item.Weight; weight != nil {
            v["weight"] = *weight
        }

        results = append(results, v)
    }

    return results
}

func flattenArmFrontDoorSubResource(input *frontdoor.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}

func flattenArmFrontDoorFrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink(input *frontdoor.FrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}

func flattenArmFrontDoor(input *[]frontdoor.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}

func flattenArmFrontDoorSubResource(input *[]frontdoor.SubResource) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }

        results = append(results, v)
    }

    return results
}
