// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmContainer() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmContainerCreateUpdate,
        Read: resourceArmContainerRead,
        Update: resourceArmContainerCreateUpdate,
        Delete: resourceArmContainerDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "container_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "data_format": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(databoxedge.BlockBlob),
                    string(databoxedge.PageBlob),
                    string(databoxedge.AzureFile),
                }, false),
            },

            "device_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "storage_account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "container_status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "created_date_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "refresh_details": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "error_manifest_file": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "in_progress_refresh_job_id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "last_completed_refresh_job_time_in_utc": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "last_job": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmContainerCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).containersClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("container_name").(string)
    deviceName := d.Get("device_name").(string)
    storageAccountName := d.Get("storage_account_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, deviceName, storageAccountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Container (Container Name %q / Resource Group %q / Storage Account Name %q / Device Name %q): %+v", name, resourceGroupName, storageAccountName, deviceName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_container", *existing.ID)
        }
    }

    dataFormat := d.Get("data_format").(string)

    container := databoxedge.Container{
        ContainerProperties: &databoxedge.ContainerProperties{
            DataFormat: databoxedge.AzureContainerDataFormat(dataFormat),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroupName, deviceName, storageAccountName, name, container)
    if err != nil {
        return fmt.Errorf("Error creating Container (Container Name %q / Resource Group %q / Storage Account Name %q / Device Name %q): %+v", name, resourceGroupName, storageAccountName, deviceName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Container (Container Name %q / Resource Group %q / Storage Account Name %q / Device Name %q): %+v", name, resourceGroupName, storageAccountName, deviceName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, deviceName, storageAccountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Container (Container Name %q / Resource Group %q / Storage Account Name %q / Device Name %q): %+v", name, resourceGroupName, storageAccountName, deviceName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Container (Container Name %q / Resource Group %q / Storage Account Name %q / Device Name %q) ID", name, resourceGroupName, storageAccountName, deviceName)
    }
    d.SetId(*resp.ID)

    return resourceArmContainerRead(d, meta)
}

func resourceArmContainerRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).containersClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    deviceName := id.Path["dataBoxEdgeDevices"]
    storageAccountName := id.Path["storageAccounts"]
    name := id.Path["containers"]

    resp, err := client.Get(ctx, resourceGroupName, deviceName, storageAccountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Container %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Container (Container Name %q / Resource Group %q / Storage Account Name %q / Device Name %q): %+v", name, resourceGroupName, storageAccountName, deviceName, err)
    }


    d.Set("resource_group", resourceGroupName)
    d.Set("container_name", name)
    if containerProperties := resp.ContainerProperties; containerProperties != nil {
        d.Set("container_status", string(containerProperties.ContainerStatus))
        d.Set("created_date_time", (containerProperties.CreatedDateTime).String())
        d.Set("data_format", string(containerProperties.DataFormat))
        if err := d.Set("refresh_details", flattenArmContainerRefreshDetails(containerProperties.RefreshDetails)); err != nil {
            return fmt.Errorf("Error setting `refresh_details`: %+v", err)
        }
    }
    d.Set("device_name", deviceName)
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    d.Set("storage_account_name", storageAccountName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmContainerDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).containersClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    deviceName := id.Path["dataBoxEdgeDevices"]
    storageAccountName := id.Path["storageAccounts"]
    name := id.Path["containers"]

    future, err := client.Delete(ctx, resourceGroupName, deviceName, storageAccountName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Container (Container Name %q / Resource Group %q / Storage Account Name %q / Device Name %q): %+v", name, resourceGroupName, storageAccountName, deviceName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Container (Container Name %q / Resource Group %q / Storage Account Name %q / Device Name %q): %+v", name, resourceGroupName, storageAccountName, deviceName, err)
        }
    }

    return nil
}


func flattenArmContainerRefreshDetails(input *databoxedge.RefreshDetails) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if errorManifestFile := input.ErrorManifestFile; errorManifestFile != nil {
        result["error_manifest_file"] = *errorManifestFile
    }
    if inProgressRefreshJobId := input.InProgressRefreshJobID; inProgressRefreshJobId != nil {
        result["in_progress_refresh_job_id"] = *inProgressRefreshJobId
    }
    if lastCompletedRefreshJobTimeInUtc := input.LastCompletedRefreshJobTimeInUTC; lastCompletedRefreshJobTimeInUtc != nil {
        result["last_completed_refresh_job_time_in_utc"] = (*lastCompletedRefreshJobTimeInUtc).String()
    }
    if lastJob := input.LastJob; lastJob != nil {
        result["last_job"] = *lastJob
    }

    return []interface{}{result}
}
