// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPrediction() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPredictionCreateUpdate,
        Read: resourceArmPredictionRead,
        Update: resourceArmPredictionCreateUpdate,
        Delete: resourceArmPredictionDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "auto_analyze": {
                Type: schema.TypeBool,
                Required: true,
            },

            "hub_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "mappings": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "grade": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "reason": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "score": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "negative_outcome_expression": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "positive_outcome_expression": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "primary_profile_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "scope_expression": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "score_label": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "status": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(customerinsights.New),
                    string(customerinsights.Provisioning),
                    string(customerinsights.ProvisioningFailed),
                    string(customerinsights.PendingDiscovering),
                    string(customerinsights.Discovering),
                    string(customerinsights.PendingFeaturing),
                    string(customerinsights.Featuring),
                    string(customerinsights.FeaturingFailed),
                    string(customerinsights.PendingTraining),
                    string(customerinsights.Training),
                    string(customerinsights.TrainingFailed),
                    string(customerinsights.Evaluating),
                    string(customerinsights.EvaluatingFailed),
                    string(customerinsights.PendingModelConfirmation),
                    string(customerinsights.Active),
                    string(customerinsights.Deleted),
                    string(customerinsights.HumanIntervention),
                    string(customerinsights.Failed),
                }, false),
            },

            "description": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "display_name": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "grades": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "grade_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "max_score_threshold": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "min_score_threshold": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "involved_interaction_types": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "involved_kpi_types": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "involved_relationships": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "prediction_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmPredictionCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).predictionsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    hubName := d.Get("hub_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, hubName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Prediction %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_prediction", *existing.ID)
        }
    }

    autoAnalyze := d.Get("auto_analyze").(bool)
    description := d.Get("description").(map[string]interface{})
    displayName := d.Get("display_name").(map[string]interface{})
    grades := d.Get("grades").([]interface{})
    involvedInteractionTypes := d.Get("involved_interaction_types").([]interface{})
    involvedKpiTypes := d.Get("involved_kpi_types").([]interface{})
    involvedRelationships := d.Get("involved_relationships").([]interface{})
    mappings := d.Get("mappings").([]interface{})
    negativeOutcomeExpression := d.Get("negative_outcome_expression").(string)
    positiveOutcomeExpression := d.Get("positive_outcome_expression").(string)
    predictionName := d.Get("prediction_name").(string)
    primaryProfileType := d.Get("primary_profile_type").(string)
    scopeExpression := d.Get("scope_expression").(string)
    scoreLabel := d.Get("score_label").(string)
    status := d.Get("status").(string)

    parameters := customerinsights.PredictionModelStatus{
        Prediction: &customerinsights.Prediction{
            AutoAnalyze: utils.Bool(autoAnalyze),
            Description: utils.ExpandKeyValuePairs(description),
            DisplayName: utils.ExpandKeyValuePairs(displayName),
            Grades: expandArmPredictionPrediction_gradesItem(grades),
            InvolvedInteractionTypes: utils.ExpandStringSlice(involvedInteractionTypes),
            InvolvedKpiTypes: utils.ExpandStringSlice(involvedKpiTypes),
            InvolvedRelationships: utils.ExpandStringSlice(involvedRelationships),
            Mappings: expandArmPredictionPrediction_mappings(mappings),
            NegativeOutcomeExpression: utils.String(negativeOutcomeExpression),
            PositiveOutcomeExpression: utils.String(positiveOutcomeExpression),
            PredictionName: utils.String(predictionName),
            PrimaryProfileType: utils.String(primaryProfileType),
            ScopeExpression: utils.String(scopeExpression),
            ScoreLabel: utils.String(scoreLabel),
        },
        Status: customerinsights.PredictionModelLifeCycle(status),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, hubName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Prediction %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Prediction %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, hubName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Prediction %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Prediction %q (Hub Name %q / Resource Group %q) ID", name, hubName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmPredictionRead(d, meta)
}

func resourceArmPredictionRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).predictionsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    name := id.Path["predictions"]

    resp, err := client.Get(ctx, resourceGroup, hubName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Prediction %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Prediction %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("hub_name", hubName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmPredictionDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).predictionsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    name := id.Path["predictions"]

    future, err := client.Delete(ctx, resourceGroup, hubName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Prediction %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Prediction %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmPredictionPrediction_gradesItem(input []interface{}) *[]customerinsights.Prediction_gradesItem {
    results := make([]customerinsights.Prediction_gradesItem, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        gradeName := v["grade_name"].(string)
        minScoreThreshold := v["min_score_threshold"].(int)
        maxScoreThreshold := v["max_score_threshold"].(int)

        result := customerinsights.Prediction_gradesItem{
            GradeName: utils.String(gradeName),
            MaxScoreThreshold: utils.Int(maxScoreThreshold),
            MinScoreThreshold: utils.Int(minScoreThreshold),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmPredictionPrediction_mappings(input []interface{}) *customerinsights.Prediction_mappings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    score := v["score"].(string)
    grade := v["grade"].(string)
    reason := v["reason"].(string)

    result := customerinsights.Prediction_mappings{
        Grade: utils.String(grade),
        Reason: utils.String(reason),
        Score: utils.String(score),
    }
    return &result
}
