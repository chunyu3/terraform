// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmView() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmViewCreateUpdate,
        Read: resourceArmViewRead,
        Update: resourceArmViewCreateUpdate,
        Delete: resourceArmViewDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "definition": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "hub_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "view_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "display_name": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "user_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "changed": {
                Type: schema.TypeString,
                Computed: true,
            },

            "created": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tenant_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "view_name": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmViewCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).viewsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    hubName := d.Get("hub_name").(string)
    viewName := d.Get("view_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, hubName, viewName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing View (View Name %q / Hub Name %q / Resource Group %q): %+v", viewName, hubName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_view", *existing.ID)
        }
    }

    definition := d.Get("definition").(string)
    displayName := d.Get("display_name").(map[string]interface{})
    userId := d.Get("user_id").(string)

    parameters := customerinsights.ViewResourceFormat{
        View: &customerinsights.View{
            Definition: utils.String(definition),
            DisplayName: utils.ExpandKeyValuePairs(displayName),
            UserID: utils.String(userId),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, hubName, viewName, parameters); err != nil {
        return fmt.Errorf("Error creating View (View Name %q / Hub Name %q / Resource Group %q): %+v", viewName, hubName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, hubName, viewName)
    if err != nil {
        return fmt.Errorf("Error retrieving View (View Name %q / Hub Name %q / Resource Group %q): %+v", viewName, hubName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read View (View Name %q / Hub Name %q / Resource Group %q) ID", viewName, hubName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmViewRead(d, meta)
}

func resourceArmViewRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).viewsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    viewName := id.Path["views"]

    resp, err := client.Get(ctx, resourceGroup, hubName, viewName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] View %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading View (View Name %q / Hub Name %q / Resource Group %q): %+v", viewName, hubName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if view := resp.View; view != nil {
        d.Set("changed", (view.Changed).String())
        d.Set("created", (view.Created).String())
        d.Set("definition", view.Definition)
        d.Set("display_name", utils.FlattenKeyValuePairs(view.DisplayName))
        d.Set("tenant_id", view.TenantID)
        d.Set("user_id", view.UserID)
        d.Set("view_name", view.ViewName)
    }
    d.Set("hub_name", hubName)
    d.Set("type", resp.Type)
    d.Set("view_name", viewName)

    return nil
}


func resourceArmViewDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).viewsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    viewName := id.Path["views"]

    if _, err := client.Delete(ctx, resourceGroup, hubName, viewName); err != nil {
        return fmt.Errorf("Error deleting View (View Name %q / Hub Name %q / Resource Group %q): %+v", viewName, hubName, resourceGroup, err)
    }

    return nil
}
