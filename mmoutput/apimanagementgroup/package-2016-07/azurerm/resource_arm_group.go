// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmGroupCreate,
        Read: resourceArmGroupRead,
        Update: resourceArmGroupUpdate,
        Delete: resourceArmGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "group_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "external_id": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "type": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.Custom),
                    string(apimanagement.System),
                    string(apimanagement.External),
                }, false),
                Default: string(apimanagement.Custom),
            },

            "built_in": {
                Type: schema.TypeBool,
                Computed: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmGroupCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).groupsClient
    ctx, cancel := timeouts.ForCreate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    groupID := d.Get("group_id").(string)
    name := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, name, groupID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Group (Group %q / Service Name %q / Resource Group %q): %+v", groupID, name, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_group", *existing.ID)
        }
    }

    description := d.Get("description").(string)
    externalID := d.Get("external_id").(string)
    name := d.Get("name").(string)
    type := d.Get("type").(string)

    parameters := apimanagement.GroupUpdateParameters{
        Description: utils.String(description),
        ExternalID: utils.String(externalID),
        Name: utils.String(name),
        Type: apimanagement.GroupTypeContract(type),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroupName, name, groupID, parameters); err != nil {
        return fmt.Errorf("Error creating Group (Group %q / Service Name %q / Resource Group %q): %+v", groupID, name, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, name, groupID)
    if err != nil {
        return fmt.Errorf("Error retrieving Group (Group %q / Service Name %q / Resource Group %q): %+v", groupID, name, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Group (Group %q / Service Name %q / Resource Group %q) ID", groupID, name, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmGroupRead(d, meta)
}

func resourceArmGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).groupsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["service"]
    groupID := id.Path["groups"]

    resp, err := client.Get(ctx, resourceGroupName, name, groupID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Group (Group %q / Service Name %q / Resource Group %q): %+v", groupID, name, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    d.Set("built_in", resp.BuiltIn)
    d.Set("description", resp.Description)
    d.Set("external_id", resp.ExternalID)
    d.Set("group_id", groupID)
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    d.Set("service_name", name)
    d.Set("type", string(resp.Type))

    return nil
}

func resourceArmGroupUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).groupsClient
    ctx, cancel := timeouts.ForUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

      resourceGroupName := d.Get("resource_group").(string)
    description := d.Get("description").(string)
    externalID := d.Get("external_id").(string)
    groupID := d.Get("group_id").(string)
    name := d.Get("name").(string)
    name := d.Get("service_name").(string)
    type := d.Get("type").(string)

    parameters := apimanagement.GroupUpdateParameters{
        Description: utils.String(description),
        ExternalID: utils.String(externalID),
        Name: utils.String(name),
        Type: apimanagement.GroupTypeContract(type),
    }


    if _, err := client.Update(ctx, resourceGroupName, name, groupID, parameters); err != nil {
        return fmt.Errorf("Error updating Group (Group %q / Service Name %q / Resource Group %q): %+v", groupID, name, resourceGroupName, err)
    }

    return resourceArmGroupRead(d, meta)
}

func resourceArmGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).groupsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["service"]
    groupID := id.Path["groups"]

    if _, err := client.Delete(ctx, resourceGroupName, name, groupID); err != nil {
        return fmt.Errorf("Error deleting Group (Group %q / Service Name %q / Resource Group %q): %+v", groupID, name, resourceGroupName, err)
    }

    return nil
}
