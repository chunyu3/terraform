// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAssignment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAssignmentCreateUpdate,
        Read: resourceArmAssignmentRead,
        Update: resourceArmAssignmentCreateUpdate,
        Delete: resourceArmAssignmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "identity": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(blueprint.None),
                                string(blueprint.SystemAssigned),
                                string(blueprint.UserAssigned),
                            }, false),
                        },
                        "principal_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tenant_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "parameters": {
                Type: schema.TypeMap,
                Required: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "resource_groups": {
                Type: schema.TypeMap,
                Required: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "blueprint_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "display_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "locks": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "mode": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(blueprint.None),
                                string(blueprint.AllResources),
                            }, false),
                            Default: string(blueprint.None),
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmAssignmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assignmentsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Assignment %q: %+v", name, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_assignment", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    blueprintId := d.Get("blueprint_id").(string)
    description := d.Get("description").(string)
    displayName := d.Get("display_name").(string)
    identity := d.Get("identity").([]interface{})
    locks := d.Get("locks").([]interface{})
    parameters := d.Get("parameters").(map[string]interface{})
    resourceGroups := d.Get("resource_groups").(map[string]interface{})

    assignment := blueprint.Assignment{
        Identity: expandArmAssignmentManagedServiceIdentity(identity),
        Location: utils.String(location),
        AssignmentProperties: &blueprint.AssignmentProperties{
            BlueprintID: utils.String(blueprintId),
            Description: utils.String(description),
            DisplayName: utils.String(displayName),
            Locks: expandArmAssignmentAssignmentLockSettings(locks),
            Parameters: utils.ExpandKeyValuePairs(parameters),
            ResourceGroups: utils.ExpandKeyValuePairs(resourceGroups),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, name, assignment); err != nil {
        return fmt.Errorf("Error creating Assignment %q: %+v", name, err)
    }


    resp, err := client.Get(ctx, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Assignment %q: %+v", name, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Assignment %q ID", name)
    }
    d.SetId(*resp.ID)

    return resourceArmAssignmentRead(d, meta)
}

func resourceArmAssignmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assignmentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["blueprintAssignments"]

    resp, err := client.Get(ctx, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Assignment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Assignment %q: %+v", name, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmAssignmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assignmentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["blueprintAssignments"]

    if _, err := client.Delete(ctx, name); err != nil {
        return fmt.Errorf("Error deleting Assignment %q: %+v", name, err)
    }

    return nil
}

func expandArmAssignmentManagedServiceIdentity(input []interface{}) *blueprint.ManagedServiceIdentity {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)
    principalId := v["principal_id"].(string)
    tenantId := v["tenant_id"].(string)

    result := blueprint.ManagedServiceIdentity{
        PrincipalID: utils.String(principalId),
        TenantID: utils.String(tenantId),
        Type: blueprint.ManagedServiceIdentityType(type),
    }
    return &result
}

func expandArmAssignmentAssignmentLockSettings(input []interface{}) *blueprint.AssignmentLockSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    mode := v["mode"].(string)

    result := blueprint.AssignmentLockSettings{
        Mode: blueprint.AssignmentLockMode(mode),
    }
    return &result
}
