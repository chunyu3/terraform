// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmExtension() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmExtensionCreateUpdate,
        Read: resourceArmExtensionRead,
        Update: resourceArmExtensionCreateUpdate,
        Delete: resourceArmExtensionDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "cluster_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "extension_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "primary_key": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "workspace_id": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },
        },
    }
}

func resourceArmExtensionCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).extensionClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    clusterName := d.Get("cluster_name").(string)
    extensionName := d.Get("extension_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, clusterName, extensionName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Extension (Extension Name %q / Cluster Name %q / Resource Group %q): %+v", extensionName, clusterName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_extension", *existing.ID)
        }
    }

    primaryKey := d.Get("primary_key").(string)
    workspaceId := d.Get("workspace_id").(string)

    parameters := hdinsight.Extension{
        PrimaryKey: utils.String(primaryKey),
        WorkspaceID: utils.String(workspaceId),
    }


    if _, err := client.Create(ctx, resourceGroup, clusterName, extensionName, parameters); err != nil {
        return fmt.Errorf("Error creating Extension (Extension Name %q / Cluster Name %q / Resource Group %q): %+v", extensionName, clusterName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, clusterName, extensionName)
    if err != nil {
        return fmt.Errorf("Error retrieving Extension (Extension Name %q / Cluster Name %q / Resource Group %q): %+v", extensionName, clusterName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Extension (Extension Name %q / Cluster Name %q / Resource Group %q) ID", extensionName, clusterName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmExtensionRead(d, meta)
}

func resourceArmExtensionRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).extensionClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    clusterName := id.Path["clusters"]
    extensionName := id.Path["extensions"]

    resp, err := client.Get(ctx, resourceGroup, clusterName, extensionName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Extension %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Extension (Extension Name %q / Cluster Name %q / Resource Group %q): %+v", extensionName, clusterName, resourceGroup, err)
    }


    d.Set("resource_group", resourceGroup)
    d.Set("cluster_name", clusterName)
    d.Set("extension_name", extensionName)
    d.Set("primary_key", resp.PrimaryKey)
    d.Set("workspace_id", resp.WorkspaceID)

    return nil
}


func resourceArmExtensionDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).extensionClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    clusterName := id.Path["clusters"]
    extensionName := id.Path["extensions"]

    if _, err := client.Delete(ctx, resourceGroup, clusterName, extensionName); err != nil {
        return fmt.Errorf("Error deleting Extension (Extension Name %q / Cluster Name %q / Resource Group %q): %+v", extensionName, clusterName, resourceGroup, err)
    }

    return nil
}
