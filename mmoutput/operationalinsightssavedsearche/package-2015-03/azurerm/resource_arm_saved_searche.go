// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmSavedSearche() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmSavedSearcheCreateUpdate,
        Read: resourceArmSavedSearcheRead,
        Update: resourceArmSavedSearcheCreateUpdate,
        Delete: resourceArmSavedSearcheDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "category": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "display_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "query": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "saved_search_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "e_tag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "version": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "value": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },
        },
    }
}

func resourceArmSavedSearcheCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).savedSearchesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    savedSearchID := d.Get("saved_search_id").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, savedSearchID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Saved Searche %q (Saved Search %q / Resource Group %q): %+v", name, savedSearchID, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_saved_searche", *existing.ID)
        }
    }

    category := d.Get("category").(string)
    displayName := d.Get("display_name").(string)
    eTag := d.Get("e_tag").(string)
    query := d.Get("query").(string)
    t := d.Get("tags").([]interface{})
    version := d.Get("version").(int)

    parameters := operationalinsights.SavedSearch{
        ETag: utils.String(eTag),
        SavedSearchProperties: &operationalinsights.SavedSearchProperties{
            Category: utils.String(category),
            DisplayName: utils.String(displayName),
            Query: utils.String(query),
            Tags: expandArmSavedSearcheTag(tags),
            Version: utils.Int64(int64(version)),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, savedSearchID, parameters); err != nil {
        return fmt.Errorf("Error creating Saved Searche %q (Saved Search %q / Resource Group %q): %+v", name, savedSearchID, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, savedSearchID)
    if err != nil {
        return fmt.Errorf("Error retrieving Saved Searche %q (Saved Search %q / Resource Group %q): %+v", name, savedSearchID, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Saved Searche %q (Saved Search %q / Resource Group %q) ID", name, savedSearchID, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmSavedSearcheRead(d, meta)
}

func resourceArmSavedSearcheRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).savedSearchesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    name := id.Path["workspaces"]
    savedSearchID := id.Path["savedSearches"]

    resp, err := client.Get(ctx, resourceGroup, name, savedSearchID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Saved Searche %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Saved Searche %q (Saved Search %q / Resource Group %q): %+v", name, savedSearchID, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if savedSearchProperties := resp.SavedSearchProperties; savedSearchProperties != nil {
        d.Set("category", savedSearchProperties.Category)
        d.Set("display_name", savedSearchProperties.DisplayName)
        d.Set("query", savedSearchProperties.Query)
        if err := d.Set("tags", flattenArmSavedSearcheTag(savedSearchProperties.Tags)); err != nil {
            return fmt.Errorf("Error setting `tags`: %+v", err)
        }
        d.Set("version", int(*savedSearchProperties.Version))
    }
    d.Set("e_tag", resp.ETag)
    d.Set("saved_search_id", savedSearchID)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmSavedSearcheDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).savedSearchesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    name := id.Path["workspaces"]
    savedSearchID := id.Path["savedSearches"]

    if _, err := client.Delete(ctx, resourceGroup, name, savedSearchID); err != nil {
        return fmt.Errorf("Error deleting Saved Searche %q (Saved Search %q / Resource Group %q): %+v", name, savedSearchID, resourceGroup, err)
    }

    return nil
}

func expandArmSavedSearcheTag(input []interface{}) *[]operationalinsights.Tag {
    results := make([]operationalinsights.Tag, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        value := v["value"].(string)

        result := operationalinsights.Tag{
            Name: utils.String(name),
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmSavedSearcheTag(input *[]operationalinsights.Tag) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if value := item.Value; value != nil {
            v["value"] = *value
        }

        results = append(results, v)
    }

    return results
}
