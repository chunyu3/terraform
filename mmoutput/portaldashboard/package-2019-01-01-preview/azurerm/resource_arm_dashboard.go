// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDashboard() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDashboardCreate,
        Read: resourceArmDashboardRead,
        Update: resourceArmDashboardUpdate,
        Delete: resourceArmDashboardDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "dashboard_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "lenses": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "metadata": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmDashboardCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).dashboardsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    dashboardName := d.Get("dashboard_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, dashboardName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Dashboard (Dashboard Name %q / Resource Group %q): %+v", dashboardName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_dashboard", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    lenses := d.Get("lenses").(map[string]interface{})
    metadata := d.Get("metadata").(map[string]interface{})
    t := d.Get("tags").(map[string]interface{})

    dashboard := portal.Dashboard{
        Location: utils.String(location),
        DashboardProperties: &portal.DashboardProperties{
            Lenses: utils.ExpandKeyValuePairs(lenses),
            Metadata: utils.ExpandKeyValuePairs(metadata),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, dashboardName, dashboard); err != nil {
        return fmt.Errorf("Error creating Dashboard (Dashboard Name %q / Resource Group %q): %+v", dashboardName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, dashboardName)
    if err != nil {
        return fmt.Errorf("Error retrieving Dashboard (Dashboard Name %q / Resource Group %q): %+v", dashboardName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Dashboard (Dashboard Name %q / Resource Group %q) ID", dashboardName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmDashboardRead(d, meta)
}

func resourceArmDashboardRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).dashboardsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    dashboardName := id.Path["dashboards"]

    resp, err := client.Get(ctx, resourceGroup, dashboardName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Dashboard %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Dashboard (Dashboard Name %q / Resource Group %q): %+v", dashboardName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("dashboard_name", dashboardName)
    if dashboardProperties := resp.DashboardProperties; dashboardProperties != nil {
        d.Set("lenses", utils.FlattenKeyValuePairs(dashboardProperties.Lenses))
        d.Set("metadata", utils.FlattenKeyValuePairs(dashboardProperties.Metadata))
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmDashboardUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).dashboardsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    dashboardName := d.Get("dashboard_name").(string)
    lenses := d.Get("lenses").(map[string]interface{})
    metadata := d.Get("metadata").(map[string]interface{})
    t := d.Get("tags").(map[string]interface{})

    dashboard := portal.Dashboard{
        Location: utils.String(location),
        DashboardProperties: &portal.DashboardProperties{
            Lenses: utils.ExpandKeyValuePairs(lenses),
            Metadata: utils.ExpandKeyValuePairs(metadata),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, dashboardName, dashboard); err != nil {
        return fmt.Errorf("Error updating Dashboard (Dashboard Name %q / Resource Group %q): %+v", dashboardName, resourceGroup, err)
    }

    return resourceArmDashboardRead(d, meta)
}

func resourceArmDashboardDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).dashboardsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    dashboardName := id.Path["dashboards"]

    if _, err := client.Delete(ctx, resourceGroup, dashboardName); err != nil {
        return fmt.Errorf("Error deleting Dashboard (Dashboard Name %q / Resource Group %q): %+v", dashboardName, resourceGroup, err)
    }

    return nil
}
