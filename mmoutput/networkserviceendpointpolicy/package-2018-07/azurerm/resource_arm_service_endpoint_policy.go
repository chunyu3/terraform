// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmServiceEndpointPolicy() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmServiceEndpointPolicyCreate,
        Read: resourceArmServiceEndpointPolicyRead,
        Update: resourceArmServiceEndpointPolicyUpdate,
        Delete: resourceArmServiceEndpointPolicyDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "service_endpoint_policy_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "resource_guid": {
                Type: schema.TypeString,
                Optional: true,
            },

            "service_endpoint_policy_definitions": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "description": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "service": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "service_resources": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmServiceEndpointPolicyCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serviceEndpointPoliciesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    serviceEndpointPolicyName := d.Get("service_endpoint_policy_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serviceEndpointPolicyName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Service Endpoint Policy (Service Endpoint Policy Name %q / Resource Group %q): %+v", serviceEndpointPolicyName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_service_endpoint_policy", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    etag := d.Get("etag").(string)
    resourceGuid := d.Get("resource_guid").(string)
    serviceEndpointPolicyDefinitions := d.Get("service_endpoint_policy_definitions").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := network.ServiceEndpointPolicy{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        ServiceEndpointPolicyPropertiesFormat: &network.ServiceEndpointPolicyPropertiesFormat{
            ResourceGuid: utils.String(resourceGuid),
            ServiceEndpointPolicyDefinitions: expandArmServiceEndpointPolicyServiceEndpointPolicyDefinition(serviceEndpointPolicyDefinitions),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, serviceEndpointPolicyName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Service Endpoint Policy (Service Endpoint Policy Name %q / Resource Group %q): %+v", serviceEndpointPolicyName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Service Endpoint Policy (Service Endpoint Policy Name %q / Resource Group %q): %+v", serviceEndpointPolicyName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serviceEndpointPolicyName)
    if err != nil {
        return fmt.Errorf("Error retrieving Service Endpoint Policy (Service Endpoint Policy Name %q / Resource Group %q): %+v", serviceEndpointPolicyName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Service Endpoint Policy (Service Endpoint Policy Name %q / Resource Group %q) ID", serviceEndpointPolicyName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmServiceEndpointPolicyRead(d, meta)
}

func resourceArmServiceEndpointPolicyRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serviceEndpointPoliciesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceEndpointPolicyName := id.Path["serviceEndpointPolicies"]

    resp, err := client.Get(ctx, resourceGroup, serviceEndpointPolicyName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Service Endpoint Policy %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Service Endpoint Policy (Service Endpoint Policy Name %q / Resource Group %q): %+v", serviceEndpointPolicyName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("etag", resp.Etag)
    if serviceEndpointPolicyPropertiesFormat := resp.ServiceEndpointPolicyPropertiesFormat; serviceEndpointPolicyPropertiesFormat != nil {
        d.Set("provisioning_state", serviceEndpointPolicyPropertiesFormat.ProvisioningState)
        d.Set("resource_guid", serviceEndpointPolicyPropertiesFormat.ResourceGuid)
        if err := d.Set("service_endpoint_policy_definitions", flattenArmServiceEndpointPolicyServiceEndpointPolicyDefinition(serviceEndpointPolicyPropertiesFormat.ServiceEndpointPolicyDefinitions)); err != nil {
            return fmt.Errorf("Error setting `service_endpoint_policy_definitions`: %+v", err)
        }
    }
    d.Set("service_endpoint_policy_name", serviceEndpointPolicyName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmServiceEndpointPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serviceEndpointPoliciesClient
    ctx := meta.(*ArmClient).StopContext

    id := d.Get("id").(string)
    resourceGroup := d.Get("resource_group").(string)
    etag := d.Get("etag").(string)
    resourceGuid := d.Get("resource_guid").(string)
    serviceEndpointPolicyDefinitions := d.Get("service_endpoint_policy_definitions").([]interface{})
    serviceEndpointPolicyName := d.Get("service_endpoint_policy_name").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := network.ServiceEndpointPolicy{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        ServiceEndpointPolicyPropertiesFormat: &network.ServiceEndpointPolicyPropertiesFormat{
            ResourceGuid: utils.String(resourceGuid),
            ServiceEndpointPolicyDefinitions: expandArmServiceEndpointPolicyServiceEndpointPolicyDefinition(serviceEndpointPolicyDefinitions),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, serviceEndpointPolicyName, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Service Endpoint Policy (Service Endpoint Policy Name %q / Resource Group %q): %+v", serviceEndpointPolicyName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Service Endpoint Policy (Service Endpoint Policy Name %q / Resource Group %q): %+v", serviceEndpointPolicyName, resourceGroup, err)
    }

    return resourceArmServiceEndpointPolicyRead(d, meta)
}

func resourceArmServiceEndpointPolicyDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serviceEndpointPoliciesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceEndpointPolicyName := id.Path["serviceEndpointPolicies"]

    future, err := client.Delete(ctx, resourceGroup, serviceEndpointPolicyName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Service Endpoint Policy (Service Endpoint Policy Name %q / Resource Group %q): %+v", serviceEndpointPolicyName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Service Endpoint Policy (Service Endpoint Policy Name %q / Resource Group %q): %+v", serviceEndpointPolicyName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmServiceEndpointPolicyServiceEndpointPolicyDefinition(input []interface{}) *[]network.ServiceEndpointPolicyDefinition {
    results := make([]network.ServiceEndpointPolicyDefinition, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        description := v["description"].(string)
        service := v["service"].(string)
        serviceResources := v["service_resources"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ServiceEndpointPolicyDefinition{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ServiceEndpointPolicyDefinitionPropertiesFormat: &network.ServiceEndpointPolicyDefinitionPropertiesFormat{
                Description: utils.String(description),
                Service: utils.String(service),
                ServiceResources: utils.ExpandStringSlice(serviceResources),
            },
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmServiceEndpointPolicyServiceEndpointPolicyDefinition(input *[]network.ServiceEndpointPolicyDefinition) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if serviceEndpointPolicyDefinitionPropertiesFormat := item.ServiceEndpointPolicyDefinitionPropertiesFormat; serviceEndpointPolicyDefinitionPropertiesFormat != nil {
            if description := serviceEndpointPolicyDefinitionPropertiesFormat.Description; description != nil {
                v["description"] = *description
            }
            if service := serviceEndpointPolicyDefinitionPropertiesFormat.Service; service != nil {
                v["service"] = *service
            }
            v["service_resources"] = utils.FlattenStringSlice(serviceEndpointPolicyDefinitionPropertiesFormat.ServiceResources)
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }

        results = append(results, v)
    }

    return results
}
