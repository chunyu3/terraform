// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmWorkflowAccessKey() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmWorkflowAccessKeyCreateUpdate,
        Read: resourceArmWorkflowAccessKeyRead,
        Update: resourceArmWorkflowAccessKeyCreateUpdate,
        Delete: resourceArmWorkflowAccessKeyDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "workflow_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "key_type": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(logic.NotSpecified),
                    string(logic.Primary),
                    string(logic.Secondary),
                }, false),
                Default: string(logic.NotSpecified),
            },

            "not_after": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "not_before": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmWorkflowAccessKeyCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workflowAccessKeysClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    workflowName := d.Get("workflow_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, workflowName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Workflow Access Key %q (Workflow Name %q / Resource Group %q): %+v", name, workflowName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_workflow_access_key", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    keyType := d.Get("key_type").(string)
    notAfter := d.Get("not_after").(string)
    notBefore := d.Get("not_before").(string)

    workflowAccesskey := logic.WorkflowAccessKey{
        ID: utils.String(id),
        KeyType: logic.KeyType(keyType),
        WorkflowAccessKeyProperties: &logic.WorkflowAccessKeyProperties{
            NotAfter: convertStringToDate(notAfter),
            NotBefore: convertStringToDate(notBefore),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, workflowName, name, workflowAccesskey); err != nil {
        return fmt.Errorf("Error creating Workflow Access Key %q (Workflow Name %q / Resource Group %q): %+v", name, workflowName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, workflowName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Workflow Access Key %q (Workflow Name %q / Resource Group %q): %+v", name, workflowName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Workflow Access Key %q (Workflow Name %q / Resource Group %q) ID", name, workflowName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmWorkflowAccessKeyRead(d, meta)
}

func resourceArmWorkflowAccessKeyRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workflowAccessKeysClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    workflowName := id.Path["workflows"]
    name := id.Path["accessKeys"]

    resp, err := client.Get(ctx, resourceGroup, workflowName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Workflow Access Key %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Workflow Access Key %q (Workflow Name %q / Resource Group %q): %+v", name, workflowName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)
    d.Set("workflow_name", workflowName)

    return nil
}


func resourceArmWorkflowAccessKeyDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workflowAccessKeysClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    workflowName := id.Path["workflows"]
    name := id.Path["accessKeys"]

    if _, err := client.Delete(ctx, resourceGroup, workflowName, name); err != nil {
        return fmt.Errorf("Error deleting Workflow Access Key %q (Workflow Name %q / Resource Group %q): %+v", name, workflowName, resourceGroup, err)
    }

    return nil
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}
