// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmReplicationRecoveryServicesProvider() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmReplicationRecoveryServicesProviderCreateUpdate,
        Read: resourceArmReplicationRecoveryServicesProviderRead,
        Update: resourceArmReplicationRecoveryServicesProviderCreateUpdate,
        Delete: resourceArmReplicationRecoveryServicesProviderDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "authentication_identity_input": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "aad_authority": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "application_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "audience": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "object_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "tenant_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "fabric_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "machine_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_access_identity_input": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "aad_authority": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "application_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "audience": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "object_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "tenant_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "resource_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmReplicationRecoveryServicesProviderCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).replicationRecoveryServicesProvidersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    fabricName := d.Get("fabric_name").(string)
    resourceName := d.Get("resource_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, resourceName, fabricName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Replication Recovery Services Provider %q (Fabric Name %q / Resource Group %q / Resource Name %q): %+v", name, fabricName, resourceGroup, resourceName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_replication_recovery_services_provider", *existing.ID)
        }
    }

    authenticationIdentityInput := d.Get("authentication_identity_input").([]interface{})
    machineName := d.Get("machine_name").(string)
    resourceAccessIdentityInput := d.Get("resource_access_identity_input").([]interface{})

    addProviderInput := recoveryservicessiterecovery.AddRecoveryServicesProviderInput{
        AddRecoveryServicesProviderInputProperties: &recoveryservicessiterecovery.AddRecoveryServicesProviderInputProperties{
            AuthenticationIdentityInput: expandArmReplicationRecoveryServicesProviderIdentityProviderInput(authenticationIdentityInput),
            MachineName: utils.String(machineName),
            ResourceAccessIdentityInput: expandArmReplicationRecoveryServicesProviderIdentityProviderInput(resourceAccessIdentityInput),
        },
    }


    future, err := client.Create(ctx, resourceGroup, resourceName, fabricName, name, addProviderInput)
    if err != nil {
        return fmt.Errorf("Error creating Replication Recovery Services Provider %q (Fabric Name %q / Resource Group %q / Resource Name %q): %+v", name, fabricName, resourceGroup, resourceName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Replication Recovery Services Provider %q (Fabric Name %q / Resource Group %q / Resource Name %q): %+v", name, fabricName, resourceGroup, resourceName, err)
    }


    resp, err := client.Get(ctx, resourceGroup, resourceName, fabricName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Replication Recovery Services Provider %q (Fabric Name %q / Resource Group %q / Resource Name %q): %+v", name, fabricName, resourceGroup, resourceName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Replication Recovery Services Provider %q (Fabric Name %q / Resource Group %q / Resource Name %q) ID", name, fabricName, resourceGroup, resourceName)
    }
    d.SetId(*resp.ID)

    return resourceArmReplicationRecoveryServicesProviderRead(d, meta)
}

func resourceArmReplicationRecoveryServicesProviderRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).replicationRecoveryServicesProvidersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    resourceName := id.Path["vaults"]
    fabricName := id.Path["replicationFabrics"]
    name := id.Path["replicationRecoveryServicesProviders"]

    resp, err := client.Get(ctx, resourceGroup, resourceName, fabricName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Replication Recovery Services Provider %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Replication Recovery Services Provider %q (Fabric Name %q / Resource Group %q / Resource Name %q): %+v", name, fabricName, resourceGroup, resourceName, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("fabric_name", fabricName)
    d.Set("resource_name", resourceName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmReplicationRecoveryServicesProviderDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).replicationRecoveryServicesProvidersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    resourceName := id.Path["vaults"]
    fabricName := id.Path["replicationFabrics"]
    name := id.Path["replicationRecoveryServicesProviders"]

    future, err := client.Delete(ctx, resourceGroup, resourceName, fabricName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Replication Recovery Services Provider %q (Fabric Name %q / Resource Group %q / Resource Name %q): %+v", name, fabricName, resourceGroup, resourceName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Replication Recovery Services Provider %q (Fabric Name %q / Resource Group %q / Resource Name %q): %+v", name, fabricName, resourceGroup, resourceName, err)
        }
    }

    return nil
}

func expandArmReplicationRecoveryServicesProviderIdentityProviderInput(input []interface{}) *recoveryservicessiterecovery.IdentityProviderInput {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    tenantId := v["tenant_id"].(string)
    applicationId := v["application_id"].(string)
    objectId := v["object_id"].(string)
    audience := v["audience"].(string)
    aadAuthority := v["aad_authority"].(string)

    result := recoveryservicessiterecovery.IdentityProviderInput{
        AadAuthority: utils.String(aadAuthority),
        ApplicationID: utils.String(applicationId),
        Audience: utils.String(audience),
        ObjectID: utils.String(objectId),
        TenantID: utils.String(tenantId),
    }
    return &result
}
