// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmConnector() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmConnectorCreateUpdate,
        Read: resourceArmConnectorRead,
        Update: resourceArmConnectorCreateUpdate,
        Delete: resourceArmConnectorDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "connector_properties": {
                Type: schema.TypeMap,
                Required: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "connector_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(customerinsights.None),
                    string(customerinsights.CRM),
                    string(customerinsights.AzureBlob),
                    string(customerinsights.Salesforce),
                    string(customerinsights.ExchangeOnline),
                    string(customerinsights.Outbound),
                }, false),
            },

            "hub_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "connector_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "display_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "is_internal": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmConnectorCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectorsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    hubName := d.Get("hub_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, hubName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Connector %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_connector", *existing.ID)
        }
    }

    connectorName := d.Get("connector_name").(string)
    connectorProperties := d.Get("connector_properties").(map[string]interface{})
    connectorType := d.Get("connector_type").(string)
    description := d.Get("description").(string)
    displayName := d.Get("display_name").(string)
    isInternal := d.Get("is_internal").(bool)

    parameters := customerinsights.ConnectorResourceFormat{
        Connector: &customerinsights.Connector{
            ConnectorName: utils.String(connectorName),
            ConnectorProperties: utils.ExpandKeyValuePairs(connectorProperties),
            ConnectorType: customerinsights.ConnectorTypes(connectorType),
            Description: utils.String(description),
            DisplayName: utils.String(displayName),
            IsInternal: utils.Bool(isInternal),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, hubName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Connector %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Connector %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, hubName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Connector %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Connector %q (Hub Name %q / Resource Group %q) ID", name, hubName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmConnectorRead(d, meta)
}

func resourceArmConnectorRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectorsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    name := id.Path["connectors"]

    resp, err := client.Get(ctx, resourceGroup, hubName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Connector %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Connector %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("hub_name", hubName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmConnectorDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).connectorsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    name := id.Path["connectors"]

    future, err := client.Delete(ctx, resourceGroup, hubName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Connector %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Connector %q (Hub Name %q / Resource Group %q): %+v", name, hubName, resourceGroup, err)
        }
    }

    return nil
}
