// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmGalleryApplication() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmGalleryApplicationCreateUpdate,
        Read: resourceArmGalleryApplicationRead,
        Update: resourceArmGalleryApplicationCreateUpdate,
        Delete: resourceArmGalleryApplicationDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "gallery_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "supported_ostype": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(compute.Windows),
                    string(compute.Linux),
                }, false),
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "end_of_life_date": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "eula": {
                Type: schema.TypeString,
                Optional: true,
            },

            "privacy_statement_uri": {
                Type: schema.TypeString,
                Optional: true,
            },

            "release_note_uri": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmGalleryApplicationCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).galleryApplicationsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    galleryName := d.Get("gallery_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, galleryName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Gallery Application %q (Gallery Name %q / Resource Group %q): %+v", name, galleryName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_gallery_application", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    description := d.Get("description").(string)
    endOfLifeDate := d.Get("end_of_life_date").(string)
    eula := d.Get("eula").(string)
    privacyStatementUri := d.Get("privacy_statement_uri").(string)
    releaseNoteUri := d.Get("release_note_uri").(string)
    supportedOstype := d.Get("supported_ostype").(string)
    t := d.Get("tags").(map[string]interface{})

    galleryApplication := compute.GalleryApplication{
        Location: utils.String(location),
        GalleryApplicationProperties: &compute.GalleryApplicationProperties{
            Description: utils.String(description),
            EndOfLifeDate: convertStringToDate(endOfLifeDate),
            Eula: utils.String(eula),
            PrivacyStatementUri: utils.String(privacyStatementUri),
            ReleaseNoteUri: utils.String(releaseNoteUri),
            SupportedOstype: compute.OperatingSystemTypes(supportedOstype),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, galleryName, name, galleryApplication)
    if err != nil {
        return fmt.Errorf("Error creating Gallery Application %q (Gallery Name %q / Resource Group %q): %+v", name, galleryName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Gallery Application %q (Gallery Name %q / Resource Group %q): %+v", name, galleryName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, galleryName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Gallery Application %q (Gallery Name %q / Resource Group %q): %+v", name, galleryName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Gallery Application %q (Gallery Name %q / Resource Group %q) ID", name, galleryName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmGalleryApplicationRead(d, meta)
}

func resourceArmGalleryApplicationRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).galleryApplicationsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    galleryName := id.Path["galleries"]
    name := id.Path["applications"]

    resp, err := client.Get(ctx, resourceGroup, galleryName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Gallery Application %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Gallery Application %q (Gallery Name %q / Resource Group %q): %+v", name, galleryName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if galleryApplicationProperties := resp.GalleryApplicationProperties; galleryApplicationProperties != nil {
        d.Set("description", galleryApplicationProperties.Description)
        d.Set("end_of_life_date", (galleryApplicationProperties.EndOfLifeDate).String())
        d.Set("eula", galleryApplicationProperties.Eula)
        d.Set("privacy_statement_uri", galleryApplicationProperties.PrivacyStatementUri)
        d.Set("release_note_uri", galleryApplicationProperties.ReleaseNoteUri)
        d.Set("supported_ostype", string(galleryApplicationProperties.SupportedOstype))
    }
    d.Set("gallery_name", galleryName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmGalleryApplicationDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).galleryApplicationsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    galleryName := id.Path["galleries"]
    name := id.Path["applications"]

    future, err := client.Delete(ctx, resourceGroup, galleryName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Gallery Application %q (Gallery Name %q / Resource Group %q): %+v", name, galleryName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Gallery Application %q (Gallery Name %q / Resource Group %q): %+v", name, galleryName, resourceGroup, err)
        }
    }

    return nil
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}
