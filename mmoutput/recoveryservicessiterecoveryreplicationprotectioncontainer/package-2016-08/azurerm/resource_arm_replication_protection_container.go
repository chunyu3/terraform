// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmReplicationProtectionContainer() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmReplicationProtectionContainerCreateUpdate,
        Read: resourceArmReplicationProtectionContainerRead,
        Update: resourceArmReplicationProtectionContainerCreateUpdate,
        Delete: resourceArmReplicationProtectionContainerDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "fabric_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "protection_container_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "fabric_friendly_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "fabric_specific_details": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "instance_type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "fabric_type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "friendly_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "pairing_status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "protected_item_count": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "role": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmReplicationProtectionContainerCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).replicationProtectionContainersClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    fabricName := d.Get("fabric_name").(string)
    protectionContainerName := d.Get("protection_container_name").(string)
    resourceName := d.Get("resource_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceName, resourceGroup, fabricName, protectionContainerName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Replication Protection Container (Protection Container Name %q / Fabric Name %q / Resource Group %q / Resource Name %q): %+v", protectionContainerName, fabricName, resourceGroup, resourceName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_replication_protection_container", *existing.ID)
        }
    }


    creationInput := recoveryservicessiterecovery.CreateProtectionContainerInput{
    }


    future, err := client.Create(ctx, resourceName, resourceGroup, fabricName, protectionContainerName, creationInput)
    if err != nil {
        return fmt.Errorf("Error creating Replication Protection Container (Protection Container Name %q / Fabric Name %q / Resource Group %q / Resource Name %q): %+v", protectionContainerName, fabricName, resourceGroup, resourceName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Replication Protection Container (Protection Container Name %q / Fabric Name %q / Resource Group %q / Resource Name %q): %+v", protectionContainerName, fabricName, resourceGroup, resourceName, err)
    }


    resp, err := client.Get(ctx, resourceName, resourceGroup, fabricName, protectionContainerName)
    if err != nil {
        return fmt.Errorf("Error retrieving Replication Protection Container (Protection Container Name %q / Fabric Name %q / Resource Group %q / Resource Name %q): %+v", protectionContainerName, fabricName, resourceGroup, resourceName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Replication Protection Container (Protection Container Name %q / Fabric Name %q / Resource Group %q / Resource Name %q) ID", protectionContainerName, fabricName, resourceGroup, resourceName)
    }
    d.SetId(*resp.ID)

    return resourceArmReplicationProtectionContainerRead(d, meta)
}

func resourceArmReplicationProtectionContainerRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).replicationProtectionContainersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceName := id.Path["vaults"]
    resourceGroup := id.ResourceGroup
    fabricName := id.Path["replicationFabrics"]
    protectionContainerName := id.Path["replicationProtectionContainers"]

    resp, err := client.Get(ctx, resourceName, resourceGroup, fabricName, protectionContainerName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Replication Protection Container %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Replication Protection Container (Protection Container Name %q / Fabric Name %q / Resource Group %q / Resource Name %q): %+v", protectionContainerName, fabricName, resourceGroup, resourceName, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if createProtectionContainerInputProperties := resp.CreateProtectionContainerInputProperties; createProtectionContainerInputProperties != nil {
        d.Set("fabric_friendly_name", createProtectionContainerInputProperties.FabricFriendlyName)
        if err := d.Set("fabric_specific_details", flattenArmReplicationProtectionContainerProtectionContainerFabricSpecificDetails(createProtectionContainerInputProperties.FabricSpecificDetails)); err != nil {
            return fmt.Errorf("Error setting `fabric_specific_details`: %+v", err)
        }
        d.Set("fabric_type", createProtectionContainerInputProperties.FabricType)
        d.Set("friendly_name", createProtectionContainerInputProperties.FriendlyName)
        d.Set("pairing_status", createProtectionContainerInputProperties.PairingStatus)
        d.Set("protected_item_count", int(*createProtectionContainerInputProperties.ProtectedItemCount))
        d.Set("role", createProtectionContainerInputProperties.Role)
    }
    d.Set("fabric_name", fabricName)
    d.Set("protection_container_name", protectionContainerName)
    d.Set("resource_name", resourceName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmReplicationProtectionContainerDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).replicationProtectionContainersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceName := id.Path["vaults"]
    resourceGroup := id.ResourceGroup
    fabricName := id.Path["replicationFabrics"]
    protectionContainerName := id.Path["replicationProtectionContainers"]

    future, err := client.Delete(ctx, resourceName, resourceGroup, fabricName, protectionContainerName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Replication Protection Container (Protection Container Name %q / Fabric Name %q / Resource Group %q / Resource Name %q): %+v", protectionContainerName, fabricName, resourceGroup, resourceName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Replication Protection Container (Protection Container Name %q / Fabric Name %q / Resource Group %q / Resource Name %q): %+v", protectionContainerName, fabricName, resourceGroup, resourceName, err)
        }
    }

    return nil
}


func flattenArmReplicationProtectionContainerProtectionContainerFabricSpecificDetails(input *recoveryservicessiterecovery.ProtectionContainerFabricSpecificDetails) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})


    return []interface{}{result}
}
