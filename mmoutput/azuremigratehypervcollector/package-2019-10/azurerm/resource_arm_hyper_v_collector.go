// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmHyperVCollector() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmHyperVCollectorCreateUpdate,
        Read: resourceArmHyperVCollectorRead,
        Update: resourceArmHyperVCollectorCreateUpdate,
        Delete: resourceArmHyperVCollectorDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "project_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "agent_properties": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "spn_details": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "application_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "audience": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "authority": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "object_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "tenant_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "discovery_site_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "e_tag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmHyperVCollectorCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).hyperVCollectorsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    projectName := d.Get("project_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, projectName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Hyper V Collector %q (Project Name %q / Resource Group %q): %+v", name, projectName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_hyper_v_collector", *existing.ID)
        }
    }

    agentProperties := d.Get("agent_properties").([]interface{})
    discoverySiteId := d.Get("discovery_site_id").(string)
    eTag := d.Get("e_tag").(string)

    collectorBody := azuremigrate.HyperVCollector{
        ETag: utils.String(eTag),
        CollectorProperties: &azuremigrate.CollectorProperties{
            AgentProperties: expandArmHyperVCollectorCollectorAgentProperties(agentProperties),
            DiscoverySiteID: utils.String(discoverySiteId),
        },
    }


    if _, err := client.Create(ctx, resourceGroup, projectName, name, collectorBody); err != nil {
        return fmt.Errorf("Error creating Hyper V Collector %q (Project Name %q / Resource Group %q): %+v", name, projectName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, projectName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Hyper V Collector %q (Project Name %q / Resource Group %q): %+v", name, projectName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Hyper V Collector %q (Project Name %q / Resource Group %q) ID", name, projectName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmHyperVCollectorRead(d, meta)
}

func resourceArmHyperVCollectorRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).hyperVCollectorsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    projectName := id.Path["assessmentProjects"]
    name := id.Path["hypervcollectors"]

    resp, err := client.Get(ctx, resourceGroup, projectName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Hyper V Collector %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Hyper V Collector %q (Project Name %q / Resource Group %q): %+v", name, projectName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("project_name", projectName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmHyperVCollectorDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).hyperVCollectorsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    projectName := id.Path["assessmentProjects"]
    name := id.Path["hypervcollectors"]

    if _, err := client.Delete(ctx, resourceGroup, projectName, name); err != nil {
        return fmt.Errorf("Error deleting Hyper V Collector %q (Project Name %q / Resource Group %q): %+v", name, projectName, resourceGroup, err)
    }

    return nil
}

func expandArmHyperVCollectorCollectorAgentProperties(input []interface{}) *azuremigrate.CollectorAgentProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    spnDetails := v["spn_details"].([]interface{})

    result := azuremigrate.CollectorAgentProperties{
        SpnDetails: expandArmHyperVCollectorCollectorBodyAgentSpnProperties(spnDetails),
    }
    return &result
}

func expandArmHyperVCollectorCollectorBodyAgentSpnProperties(input []interface{}) *azuremigrate.CollectorBodyAgentSpnProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    authority := v["authority"].(string)
    applicationId := v["application_id"].(string)
    audience := v["audience"].(string)
    objectId := v["object_id"].(string)
    tenantId := v["tenant_id"].(string)

    result := azuremigrate.CollectorBodyAgentSpnProperties{
        ApplicationID: utils.String(applicationId),
        Audience: utils.String(audience),
        Authority: utils.String(authority),
        ObjectID: utils.String(objectId),
        TenantID: utils.String(tenantId),
    }
    return &result
}
