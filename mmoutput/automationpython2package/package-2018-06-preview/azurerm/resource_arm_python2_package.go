// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPython2Package() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPython2PackageCreate,
        Read: resourceArmPython2PackageRead,
        Update: resourceArmPython2PackageUpdate,
        Delete: resourceArmPython2PackageDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "automation_account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "content_link": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "content_hash": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "algorithm": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "value": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                },
                            },
                        },
                        "uri": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "version": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "activity_count": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "creation_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "description": {
                Type: schema.TypeString,
                Computed: true,
            },

            "error": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "code": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "message": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "is_composite": {
                Type: schema.TypeBool,
                Computed: true,
            },

            "is_global": {
                Type: schema.TypeBool,
                Computed: true,
            },

            "last_modified_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "size_in_bytes": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "version": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmPython2PackageCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).python2PackageClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    automationAccountName := d.Get("automation_account_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, automationAccountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Python2 Package %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_python2_package", *existing.ID)
        }
    }

    contentLink := d.Get("content_link").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := automation.PythonPackageUpdateParameters{
        PythonPackageCreateProperties: &automation.PythonPackageCreateProperties{
            ContentLink: expandArmPython2PackageContentLink(contentLink),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, automationAccountName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Python2 Package %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, automationAccountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Python2 Package %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Python2 Package %q (Automation Account Name %q / Resource Group %q) ID", name, automationAccountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmPython2PackageRead(d, meta)
}

func resourceArmPython2PackageRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).python2PackageClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    automationAccountName := id.Path["automationAccounts"]
    name := id.Path["python2Packages"]

    resp, err := client.Get(ctx, resourceGroup, automationAccountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Python2 Package %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Python2 Package %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if pythonPackageCreateProperties := resp.PythonPackageCreateProperties; pythonPackageCreateProperties != nil {
        d.Set("activity_count", int(*pythonPackageCreateProperties.ActivityCount))
        if err := d.Set("content_link", flattenArmPython2PackageContentLink(pythonPackageCreateProperties.ContentLink)); err != nil {
            return fmt.Errorf("Error setting `content_link`: %+v", err)
        }
        d.Set("creation_time", (pythonPackageCreateProperties.CreationTime).String())
        d.Set("description", pythonPackageCreateProperties.Description)
        if err := d.Set("error", flattenArmPython2PackageModuleErrorInfo(pythonPackageCreateProperties.Error)); err != nil {
            return fmt.Errorf("Error setting `error`: %+v", err)
        }
        d.Set("is_composite", pythonPackageCreateProperties.IsComposite)
        d.Set("is_global", pythonPackageCreateProperties.IsGlobal)
        d.Set("last_modified_time", (pythonPackageCreateProperties.LastModifiedTime).String())
        d.Set("provisioning_state", string(pythonPackageCreateProperties.ProvisioningState))
        d.Set("size_in_bytes", int(*pythonPackageCreateProperties.SizeInBytes))
        d.Set("version", pythonPackageCreateProperties.Version)
    }
    d.Set("automation_account_name", automationAccountName)
    d.Set("etag", resp.Etag)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmPython2PackageUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).python2PackageClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    automationAccountName := d.Get("automation_account_name").(string)
    contentLink := d.Get("content_link").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := automation.PythonPackageUpdateParameters{
        PythonPackageCreateProperties: &automation.PythonPackageCreateProperties{
            ContentLink: expandArmPython2PackageContentLink(contentLink),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, automationAccountName, name, parameters); err != nil {
        return fmt.Errorf("Error updating Python2 Package %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }

    return resourceArmPython2PackageRead(d, meta)
}

func resourceArmPython2PackageDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).python2PackageClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    automationAccountName := id.Path["automationAccounts"]
    name := id.Path["python2Packages"]

    if _, err := client.Delete(ctx, resourceGroup, automationAccountName, name); err != nil {
        return fmt.Errorf("Error deleting Python2 Package %q (Automation Account Name %q / Resource Group %q): %+v", name, automationAccountName, resourceGroup, err)
    }

    return nil
}

func expandArmPython2PackageContentLink(input []interface{}) *automation.ContentLink {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    uri := v["uri"].(string)
    contentHash := v["content_hash"].([]interface{})
    version := v["version"].(string)

    result := automation.ContentLink{
        ContentHash: expandArmPython2PackageContentHash(contentHash),
        URI: utils.String(uri),
        Version: utils.String(version),
    }
    return &result
}

func expandArmPython2PackageContentHash(input []interface{}) *automation.ContentHash {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    algorithm := v["algorithm"].(string)
    value := v["value"].(string)

    result := automation.ContentHash{
        Algorithm: utils.String(algorithm),
        Value: utils.String(value),
    }
    return &result
}


func flattenArmPython2PackageContentLink(input *automation.ContentLink) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["content_hash"] = flattenArmPython2PackageContentHash(input.ContentHash)
    if uri := input.URI; uri != nil {
        result["uri"] = *uri
    }
    if version := input.Version; version != nil {
        result["version"] = *version
    }

    return []interface{}{result}
}

func flattenArmPython2PackageModuleErrorInfo(input *automation.ModuleErrorInfo) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if code := input.Code; code != nil {
        result["code"] = *code
    }
    if message := input.Message; message != nil {
        result["message"] = *message
    }

    return []interface{}{result}
}

func flattenArmPython2PackageContentHash(input *automation.ContentHash) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if algorithm := input.Algorithm; algorithm != nil {
        result["algorithm"] = *algorithm
    }
    if value := input.Value; value != nil {
        result["value"] = *value
    }

    return []interface{}{result}
}
