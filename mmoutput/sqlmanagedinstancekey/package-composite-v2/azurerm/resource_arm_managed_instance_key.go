// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmManagedInstanceKey() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmManagedInstanceKeyCreateUpdate,
        Read: resourceArmManagedInstanceKeyRead,
        Update: resourceArmManagedInstanceKeyCreateUpdate,
        Delete: resourceArmManagedInstanceKeyDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "key_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "managed_instance_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "server_key_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(sql.ServiceManaged),
                    string(sql.AzureKeyVault),
                }, false),
            },

            "uri": {
                Type: schema.TypeString,
                Optional: true,
            },

            "creation_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "kind": {
                Type: schema.TypeString,
                Computed: true,
            },

            "thumbprint": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmManagedInstanceKeyCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedInstanceKeysClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    keyName := d.Get("key_name").(string)
    managedInstanceName := d.Get("managed_instance_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, managedInstanceName, keyName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Managed Instance Key (Key Name %q / Managed Instance Name %q / Resource Group %q): %+v", keyName, managedInstanceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_managed_instance_key", *existing.ID)
        }
    }

    serverKeyType := d.Get("server_key_type").(string)
    uri := d.Get("uri").(string)

    parameters := sql.ManagedInstanceKey{
        ManagedInstanceKeyProperties: &sql.ManagedInstanceKeyProperties{
            ServerKeyType: sql.ServerKeyType(serverKeyType),
            Uri: utils.String(uri),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, managedInstanceName, keyName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Managed Instance Key (Key Name %q / Managed Instance Name %q / Resource Group %q): %+v", keyName, managedInstanceName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Managed Instance Key (Key Name %q / Managed Instance Name %q / Resource Group %q): %+v", keyName, managedInstanceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, managedInstanceName, keyName)
    if err != nil {
        return fmt.Errorf("Error retrieving Managed Instance Key (Key Name %q / Managed Instance Name %q / Resource Group %q): %+v", keyName, managedInstanceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Managed Instance Key (Key Name %q / Managed Instance Name %q / Resource Group %q) ID", keyName, managedInstanceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmManagedInstanceKeyRead(d, meta)
}

func resourceArmManagedInstanceKeyRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedInstanceKeysClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    managedInstanceName := id.Path["managedInstances"]
    keyName := id.Path["keys"]

    resp, err := client.Get(ctx, resourceGroup, managedInstanceName, keyName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Managed Instance Key %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Managed Instance Key (Key Name %q / Managed Instance Name %q / Resource Group %q): %+v", keyName, managedInstanceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if managedInstanceKeyProperties := resp.ManagedInstanceKeyProperties; managedInstanceKeyProperties != nil {
        d.Set("creation_date", (managedInstanceKeyProperties.CreationDate).String())
        d.Set("server_key_type", string(managedInstanceKeyProperties.ServerKeyType))
        d.Set("thumbprint", managedInstanceKeyProperties.Thumbprint)
        d.Set("uri", managedInstanceKeyProperties.Uri)
    }
    d.Set("key_name", keyName)
    d.Set("kind", resp.Kind)
    d.Set("managed_instance_name", managedInstanceName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmManagedInstanceKeyDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedInstanceKeysClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    managedInstanceName := id.Path["managedInstances"]
    keyName := id.Path["keys"]

    future, err := client.Delete(ctx, resourceGroup, managedInstanceName, keyName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Managed Instance Key (Key Name %q / Managed Instance Name %q / Resource Group %q): %+v", keyName, managedInstanceName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Managed Instance Key (Key Name %q / Managed Instance Name %q / Resource Group %q): %+v", keyName, managedInstanceName, resourceGroup, err)
        }
    }

    return nil
}
