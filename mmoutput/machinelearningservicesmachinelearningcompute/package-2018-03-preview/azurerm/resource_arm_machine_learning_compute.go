// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmMachineLearningCompute() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmMachineLearningComputeCreateUpdate,
        Read: resourceArmMachineLearningComputeRead,
        Update: resourceArmMachineLearningComputeCreateUpdate,
        Delete: resourceArmMachineLearningComputeDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "workspace_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "compute_location": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "resource_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "created_on": {
                Type: schema.TypeString,
                Computed: true,
            },

            "identity": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "principal_id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "tenant_id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "modified_on": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_errors": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "error": {
                            Type: schema.TypeList,
                            Computed: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "code": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "details": {
                                        Type: schema.TypeList,
                                        Computed: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "code": {
                                                    Type: schema.TypeString,
                                                    Computed: true,
                                                },
                                                "message": {
                                                    Type: schema.TypeString,
                                                    Computed: true,
                                                },
                                            },
                                        },
                                    },
                                    "message": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmMachineLearningComputeCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).machineLearningComputeClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    workspaceName := d.Get("workspace_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, workspaceName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Machine Learning Compute %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_machine_learning_compute", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    computeLocation := d.Get("compute_location").(string)
    description := d.Get("description").(string)
    resourceId := d.Get("resource_id").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := machinelearningservices.ComputeResource{
        Location: utils.String(location),
        Compute: &machinelearningservices.Compute{
            ComputeLocation: utils.String(computeLocation),
            Description: utils.String(description),
            ResourceID: utils.String(resourceId),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, workspaceName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Machine Learning Compute %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Machine Learning Compute %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, workspaceName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Machine Learning Compute %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Machine Learning Compute %q (Workspace Name %q / Resource Group %q) ID", name, workspaceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmMachineLearningComputeRead(d, meta)
}

func resourceArmMachineLearningComputeRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).machineLearningComputeClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    workspaceName := id.Path["workspaces"]
    name := id.Path["computes"]

    resp, err := client.Get(ctx, resourceGroup, workspaceName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Machine Learning Compute %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Machine Learning Compute %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if compute := resp.Compute; compute != nil {
        d.Set("compute_location", compute.ComputeLocation)
        d.Set("created_on", (compute.CreatedOn).String())
        d.Set("description", compute.Description)
        d.Set("modified_on", (compute.ModifiedOn).String())
        if err := d.Set("provisioning_errors", flattenArmMachineLearningComputeMachineLearningServiceError(compute.ProvisioningErrors)); err != nil {
            return fmt.Errorf("Error setting `provisioning_errors`: %+v", err)
        }
        d.Set("provisioning_state", string(compute.ProvisioningState))
        d.Set("resource_id", compute.ResourceID)
    }
    if err := d.Set("identity", flattenArmMachineLearningComputeIdentity(resp.Identity)); err != nil {
        return fmt.Errorf("Error setting `identity`: %+v", err)
    }
    d.Set("type", resp.Type)
    d.Set("workspace_name", workspaceName)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmMachineLearningComputeDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).machineLearningComputeClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    workspaceName := id.Path["workspaces"]
    name := id.Path["computes"]

    future, err := client.Delete(ctx, resourceGroup, workspaceName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Machine Learning Compute %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Machine Learning Compute %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
        }
    }

    return nil
}


func flattenArmMachineLearningComputeMachineLearningServiceError(input *[]machinelearningservices.MachineLearningServiceError) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["error"] = flattenArmMachineLearningComputeErrorResponse(item.Error)

        results = append(results, v)
    }

    return results
}

func flattenArmMachineLearningComputeIdentity(input *machinelearningservices.Identity) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if principalId := input.PrincipalID; principalId != nil {
        result["principal_id"] = *principalId
    }
    if tenantId := input.TenantID; tenantId != nil {
        result["tenant_id"] = *tenantId
    }
    result["type"] = string(input.Type)

    return []interface{}{result}
}

func flattenArmMachineLearningComputeErrorResponse(input *machinelearningservices.ErrorResponse) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if code := input.Code; code != nil {
        result["code"] = *code
    }
    result["details"] = flattenArmMachineLearningComputeErrorDetail(input.Details)
    if message := input.Message; message != nil {
        result["message"] = *message
    }

    return []interface{}{result}
}

func flattenArmMachineLearningComputeErrorDetail(input *[]machinelearningservices.ErrorDetail) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if code := item.Code; code != nil {
            v["code"] = *code
        }
        if message := item.Message; message != nil {
            v["message"] = *message
        }

        results = append(results, v)
    }

    return results
}
