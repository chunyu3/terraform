// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPublishedBlueprint() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPublishedBlueprintCreateUpdate,
        Read: resourceArmPublishedBlueprintRead,
        Update: resourceArmPublishedBlueprintCreateUpdate,
        Delete: resourceArmPublishedBlueprintDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "scope": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "version_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "blueprint_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "change_notes": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "display_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "parameters": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "resource_groups": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "target_scope": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(blueprint.subscription),
                    string(blueprint.managementGroup),
                }, false),
                Default: string(blueprint.subscription),
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmPublishedBlueprintCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).publishedBlueprintsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    scope := d.Get("scope").(string)
    versionID := d.Get("version_id").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, scope, name, versionID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Published Blueprint %q (Version %q / Scope %q): %+v", name, versionID, scope, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_published_blueprint", *existing.ID)
        }
    }

    blueprintName := d.Get("blueprint_name").(string)
    changeNotes := d.Get("change_notes").(string)
    description := d.Get("description").(string)
    displayName := d.Get("display_name").(string)
    parameters := d.Get("parameters").(map[string]interface{})
    resourceGroups := d.Get("resource_groups").(map[string]interface{})
    targetScope := d.Get("target_scope").(string)

    publishedBlueprint := blueprint.PublishedBlueprint{
        PublishedBlueprintProperties: &blueprint.PublishedBlueprintProperties{
            BlueprintName: utils.String(blueprintName),
            ChangeNotes: utils.String(changeNotes),
            Description: utils.String(description),
            DisplayName: utils.String(displayName),
            Parameters: utils.ExpandKeyValuePairs(parameters),
            ResourceGroups: utils.ExpandKeyValuePairs(resourceGroups),
            TargetScope: blueprint.TargetScope(targetScope),
        },
    }


    if _, err := client.Create(ctx, scope, name, versionID, publishedBlueprint); err != nil {
        return fmt.Errorf("Error creating Published Blueprint %q (Version %q / Scope %q): %+v", name, versionID, scope, err)
    }


    resp, err := client.Get(ctx, scope, name, versionID)
    if err != nil {
        return fmt.Errorf("Error retrieving Published Blueprint %q (Version %q / Scope %q): %+v", name, versionID, scope, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Published Blueprint %q (Version %q / Scope %q) ID", name, versionID, scope)
    }
    d.SetId(*resp.ID)

    return resourceArmPublishedBlueprintRead(d, meta)
}

func resourceArmPublishedBlueprintRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).publishedBlueprintsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["blueprints"]
    versionID := id.Path["versions"]

    resp, err := client.Get(ctx, scope, name, versionID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Published Blueprint %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Published Blueprint %q (Version %q / Scope %q): %+v", name, versionID, scope, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("scope", scope)
    d.Set("type", resp.Type)
    d.Set("version_id", versionID)

    return nil
}


func resourceArmPublishedBlueprintDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).publishedBlueprintsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    name := id.Path["blueprints"]
    versionID := id.Path["versions"]

    if _, err := client.Delete(ctx, scope, name, versionID); err != nil {
        return fmt.Errorf("Error deleting Published Blueprint %q (Version %q / Scope %q): %+v", name, versionID, scope, err)
    }

    return nil
}
