// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmRegistrationAssignment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmRegistrationAssignmentCreateUpdate,
        Read: resourceArmRegistrationAssignmentRead,
        Update: resourceArmRegistrationAssignmentCreateUpdate,
        Delete: resourceArmRegistrationAssignmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "registration_assignment_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "registration_definition_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "scope": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "registration_definition": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "authorizations": {
                            Type: schema.TypeList,
                            Computed: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "principal_id": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "role_definition_id": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                },
                            },
                        },
                        "description": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "managed_by_tenant_id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "managed_by_tenant_name": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "managee_tenant_id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "managee_tenant_name": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "plan": {
                            Type: schema.TypeList,
                            Computed: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "name": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "product": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "publisher": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "version": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                },
                            },
                        },
                        "provisioning_state": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "registration_definition_name": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmRegistrationAssignmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).registrationAssignmentsClient
    ctx := meta.(*ArmClient).StopContext

    registrationAssignmentID := d.Get("registration_assignment_id").(string)
    scope := d.Get("scope").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, scope, registrationAssignmentID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_registration_assignment", *existing.ID)
        }
    }

    registrationDefinitionId := d.Get("registration_definition_id").(string)

    requestBody := managedservices.RegistrationAssignment{
        RegistrationAssignmentProperties: &managedservices.RegistrationAssignmentProperties{
            RegistrationDefinitionID: utils.String(registrationDefinitionId),
        },
    }


    future, err := client.CreateOrUpdate(ctx, scope, registrationAssignmentID, requestBody)
    if err != nil {
        return fmt.Errorf("Error creating Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
    }


    resp, err := client.Get(ctx, scope, registrationAssignmentID)
    if err != nil {
        return fmt.Errorf("Error retrieving Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Registration Assignment (Registration Assignment %q / Scope %q) ID", registrationAssignmentID, scope)
    }
    d.SetId(*resp.ID)

    return resourceArmRegistrationAssignmentRead(d, meta)
}

func resourceArmRegistrationAssignmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).registrationAssignmentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    registrationAssignmentID := id.Path["registrationAssignments"]

    resp, err := client.Get(ctx, scope, registrationAssignmentID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Registration Assignment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
    }


    d.Set("name", resp.Name)
    if registrationAssignmentProperties := resp.RegistrationAssignmentProperties; registrationAssignmentProperties != nil {
        d.Set("provisioning_state", string(registrationAssignmentProperties.ProvisioningState))
        if err := d.Set("registration_definition", flattenArmRegistrationAssignmentRegistrationAssignmentProperties_registrationDefinition(registrationAssignmentProperties.RegistrationDefinition)); err != nil {
            return fmt.Errorf("Error setting `registration_definition`: %+v", err)
        }
        d.Set("registration_definition_id", registrationAssignmentProperties.RegistrationDefinitionID)
    }
    d.Set("registration_assignment_id", registrationAssignmentID)
    d.Set("scope", scope)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmRegistrationAssignmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).registrationAssignmentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    registrationAssignmentID := id.Path["registrationAssignments"]

    future, err := client.Delete(ctx, scope, registrationAssignmentID)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Registration Assignment (Registration Assignment %q / Scope %q): %+v", registrationAssignmentID, scope, err)
        }
    }

    return nil
}


func flattenArmRegistrationAssignmentRegistrationAssignmentProperties_registrationDefinition(input *managedservices.RegistrationAssignmentProperties_registrationDefinition) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if registrationAssignmentPropertiesRegistrationdefinitionProperties := input.RegistrationAssignmentProperties_registrationDefinition_properties; registrationAssignmentPropertiesRegistrationdefinitionProperties != nil {
        result["authorizations"] = flattenArmRegistrationAssignmentAuthorization(registrationAssignmentPropertiesRegistrationdefinitionProperties.Authorizations)
        if description := registrationAssignmentPropertiesRegistrationdefinitionProperties.Description; description != nil {
            result["description"] = *description
        }
        if managedByTenantId := registrationAssignmentPropertiesRegistrationdefinitionProperties.ManagedByTenantID; managedByTenantId != nil {
            result["managed_by_tenant_id"] = *managedByTenantId
        }
        if managedByTenantName := registrationAssignmentPropertiesRegistrationdefinitionProperties.ManagedByTenantName; managedByTenantName != nil {
            result["managed_by_tenant_name"] = *managedByTenantName
        }
        if manageeTenantId := registrationAssignmentPropertiesRegistrationdefinitionProperties.ManageeTenantID; manageeTenantId != nil {
            result["managee_tenant_id"] = *manageeTenantId
        }
        if manageeTenantName := registrationAssignmentPropertiesRegistrationdefinitionProperties.ManageeTenantName; manageeTenantName != nil {
            result["managee_tenant_name"] = *manageeTenantName
        }
        result["provisioning_state"] = string(registrationAssignmentPropertiesRegistrationdefinitionProperties.ProvisioningState)
        if registrationDefinitionName := registrationAssignmentPropertiesRegistrationdefinitionProperties.RegistrationDefinitionName; registrationDefinitionName != nil {
            result["registration_definition_name"] = *registrationDefinitionName
        }
    }
    result["plan"] = flattenArmRegistrationAssignmentPlan(input.Plan)
    if type := input.Type; type != nil {
        result["type"] = *type
    }

    return []interface{}{result}
}

func flattenArmRegistrationAssignmentAuthorization(input *[]managedservices.Authorization) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if principalId := item.PrincipalID; principalId != nil {
            v["principal_id"] = *principalId
        }
        if roleDefinitionId := item.RoleDefinitionID; roleDefinitionId != nil {
            v["role_definition_id"] = *roleDefinitionId
        }

        results = append(results, v)
    }

    return results
}

func flattenArmRegistrationAssignmentPlan(input *managedservices.Plan) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if product := input.Product; product != nil {
        result["product"] = *product
    }
    if publisher := input.Publisher; publisher != nil {
        result["publisher"] = *publisher
    }
    if version := input.Version; version != nil {
        result["version"] = *version
    }

    return []interface{}{result}
}
