// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmManagedInstance() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmManagedInstanceCreate,
        Read: resourceArmManagedInstanceRead,
        Update: resourceArmManagedInstanceUpdate,
        Delete: resourceArmManagedInstanceDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "managed_instance_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "administrator_login": {
                Type: schema.TypeString,
                Optional: true,
            },

            "administrator_login_password": {
                Type: schema.TypeString,
                Optional: true,
            },

            "collation": {
                Type: schema.TypeString,
                Optional: true,
            },

            "dns_zone_partner": {
                Type: schema.TypeString,
                Optional: true,
            },

            "identity": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(sql.SystemAssigned),
                            }, false),
                            Default: string(sql.SystemAssigned),
                        },
                    },
                },
            },

            "instance_pool_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "license_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(sql.LicenseIncluded),
                    string(sql.BasePrice),
                }, false),
                Default: string(sql.LicenseIncluded),
            },

            "managed_instance_create_mode": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(sql.Default),
                    string(sql.PointInTimeRestore),
                }, false),
                Default: string(sql.Default),
            },

            "proxy_override": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(sql.Proxy),
                    string(sql.Redirect),
                    string(sql.Default),
                }, false),
                Default: string(sql.Proxy),
            },

            "public_data_endpoint_enabled": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "restore_point_in_time": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "capacity": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "family": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "size": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "source_managed_instance_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "storage_size_in_gb": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "subnet_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "timezone_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "v_cores": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "dns_zone": {
                Type: schema.TypeString,
                Computed: true,
            },

            "fully_qualified_domain_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmManagedInstanceCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedInstancesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    managedInstanceName := d.Get("managed_instance_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, managedInstanceName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Managed Instance (Managed Instance Name %q / Resource Group %q): %+v", managedInstanceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_managed_instance", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    administratorLogin := d.Get("administrator_login").(string)
    administratorLoginPassword := d.Get("administrator_login_password").(string)
    collation := d.Get("collation").(string)
    dnsZonePartner := d.Get("dns_zone_partner").(string)
    identity := d.Get("identity").([]interface{})
    instancePoolId := d.Get("instance_pool_id").(string)
    licenseType := d.Get("license_type").(string)
    managedInstanceCreateMode := d.Get("managed_instance_create_mode").(string)
    proxyOverride := d.Get("proxy_override").(string)
    publicDataEndpointEnabled := d.Get("public_data_endpoint_enabled").(bool)
    restorePointInTime := d.Get("restore_point_in_time").(string)
    sku := d.Get("sku").([]interface{})
    sourceManagedInstanceId := d.Get("source_managed_instance_id").(string)
    storageSizeInGb := d.Get("storage_size_in_gb").(int)
    subnetId := d.Get("subnet_id").(string)
    timezoneId := d.Get("timezone_id").(string)
    vCores := d.Get("v_cores").(int)
    t := d.Get("tags").(map[string]interface{})

    parameters := sql.ManagedInstance{
        Identity: expandArmManagedInstanceResourceIdentity(identity),
        Location: utils.String(location),
        ManagedInstanceProperties: &sql.ManagedInstanceProperties{
            AdministratorLogin: utils.String(administratorLogin),
            AdministratorLoginPassword: utils.String(administratorLoginPassword),
            Collation: utils.String(collation),
            DnsZonePartner: utils.String(dnsZonePartner),
            InstancePoolID: utils.String(instancePoolId),
            LicenseType: sql.ManagedInstanceLicenseType(licenseType),
            ManagedInstanceCreateMode: sql.ManagedServerCreateMode(managedInstanceCreateMode),
            ProxyOverride: sql.ManagedInstanceProxyOverride(proxyOverride),
            PublicDataEndpointEnabled: utils.Bool(publicDataEndpointEnabled),
            RestorePointInTime: convertStringToDate(restorePointInTime),
            SourceManagedInstanceID: utils.String(sourceManagedInstanceId),
            StorageSizeInGb: utils.Int32(int32(storageSizeInGb)),
            SubnetID: utils.String(subnetId),
            TimezoneID: utils.String(timezoneId),
            VCores: utils.Int32(int32(vCores)),
        },
        Sku: expandArmManagedInstanceSku(sku),
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, managedInstanceName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Managed Instance (Managed Instance Name %q / Resource Group %q): %+v", managedInstanceName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Managed Instance (Managed Instance Name %q / Resource Group %q): %+v", managedInstanceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, managedInstanceName)
    if err != nil {
        return fmt.Errorf("Error retrieving Managed Instance (Managed Instance Name %q / Resource Group %q): %+v", managedInstanceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Managed Instance (Managed Instance Name %q / Resource Group %q) ID", managedInstanceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmManagedInstanceRead(d, meta)
}

func resourceArmManagedInstanceRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedInstancesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    managedInstanceName := id.Path["managedInstances"]

    resp, err := client.Get(ctx, resourceGroup, managedInstanceName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Managed Instance %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Managed Instance (Managed Instance Name %q / Resource Group %q): %+v", managedInstanceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if managedInstanceProperties := resp.ManagedInstanceProperties; managedInstanceProperties != nil {
        d.Set("administrator_login", managedInstanceProperties.AdministratorLogin)
        d.Set("administrator_login_password", managedInstanceProperties.AdministratorLoginPassword)
        d.Set("collation", managedInstanceProperties.Collation)
        d.Set("dns_zone", managedInstanceProperties.DnsZone)
        d.Set("dns_zone_partner", managedInstanceProperties.DnsZonePartner)
        d.Set("fully_qualified_domain_name", managedInstanceProperties.FullyQualifiedDomainName)
        d.Set("instance_pool_id", managedInstanceProperties.InstancePoolID)
        d.Set("license_type", string(managedInstanceProperties.LicenseType))
        d.Set("managed_instance_create_mode", string(managedInstanceProperties.ManagedInstanceCreateMode))
        d.Set("proxy_override", string(managedInstanceProperties.ProxyOverride))
        d.Set("public_data_endpoint_enabled", managedInstanceProperties.PublicDataEndpointEnabled)
        d.Set("restore_point_in_time", (managedInstanceProperties.RestorePointInTime).String())
        d.Set("source_managed_instance_id", managedInstanceProperties.SourceManagedInstanceID)
        d.Set("state", managedInstanceProperties.State)
        d.Set("storage_size_in_gb", int(*managedInstanceProperties.StorageSizeInGb))
        d.Set("subnet_id", managedInstanceProperties.SubnetID)
        d.Set("timezone_id", managedInstanceProperties.TimezoneID)
        d.Set("v_cores", int(*managedInstanceProperties.VCores))
    }
    if err := d.Set("identity", flattenArmManagedInstanceResourceIdentity(resp.Identity)); err != nil {
        return fmt.Errorf("Error setting `identity`: %+v", err)
    }
    d.Set("managed_instance_name", managedInstanceName)
    if err := d.Set("sku", flattenArmManagedInstanceSku(resp.Sku)); err != nil {
        return fmt.Errorf("Error setting `sku`: %+v", err)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmManagedInstanceUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedInstancesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    administratorLogin := d.Get("administrator_login").(string)
    administratorLoginPassword := d.Get("administrator_login_password").(string)
    collation := d.Get("collation").(string)
    dnsZonePartner := d.Get("dns_zone_partner").(string)
    identity := d.Get("identity").([]interface{})
    instancePoolId := d.Get("instance_pool_id").(string)
    licenseType := d.Get("license_type").(string)
    managedInstanceCreateMode := d.Get("managed_instance_create_mode").(string)
    managedInstanceName := d.Get("managed_instance_name").(string)
    proxyOverride := d.Get("proxy_override").(string)
    publicDataEndpointEnabled := d.Get("public_data_endpoint_enabled").(bool)
    restorePointInTime := d.Get("restore_point_in_time").(string)
    sku := d.Get("sku").([]interface{})
    sourceManagedInstanceId := d.Get("source_managed_instance_id").(string)
    storageSizeInGb := d.Get("storage_size_in_gb").(int)
    subnetId := d.Get("subnet_id").(string)
    timezoneId := d.Get("timezone_id").(string)
    vCores := d.Get("v_cores").(int)
    t := d.Get("tags").(map[string]interface{})

    parameters := sql.ManagedInstance{
        Identity: expandArmManagedInstanceResourceIdentity(identity),
        Location: utils.String(location),
        ManagedInstanceProperties: &sql.ManagedInstanceProperties{
            AdministratorLogin: utils.String(administratorLogin),
            AdministratorLoginPassword: utils.String(administratorLoginPassword),
            Collation: utils.String(collation),
            DnsZonePartner: utils.String(dnsZonePartner),
            InstancePoolID: utils.String(instancePoolId),
            LicenseType: sql.ManagedInstanceLicenseType(licenseType),
            ManagedInstanceCreateMode: sql.ManagedServerCreateMode(managedInstanceCreateMode),
            ProxyOverride: sql.ManagedInstanceProxyOverride(proxyOverride),
            PublicDataEndpointEnabled: utils.Bool(publicDataEndpointEnabled),
            RestorePointInTime: convertStringToDate(restorePointInTime),
            SourceManagedInstanceID: utils.String(sourceManagedInstanceId),
            StorageSizeInGb: utils.Int32(int32(storageSizeInGb)),
            SubnetID: utils.String(subnetId),
            TimezoneID: utils.String(timezoneId),
            VCores: utils.Int32(int32(vCores)),
        },
        Sku: expandArmManagedInstanceSku(sku),
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, managedInstanceName, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Managed Instance (Managed Instance Name %q / Resource Group %q): %+v", managedInstanceName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Managed Instance (Managed Instance Name %q / Resource Group %q): %+v", managedInstanceName, resourceGroup, err)
    }

    return resourceArmManagedInstanceRead(d, meta)
}

func resourceArmManagedInstanceDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedInstancesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    managedInstanceName := id.Path["managedInstances"]

    future, err := client.Delete(ctx, resourceGroup, managedInstanceName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Managed Instance (Managed Instance Name %q / Resource Group %q): %+v", managedInstanceName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Managed Instance (Managed Instance Name %q / Resource Group %q): %+v", managedInstanceName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmManagedInstanceResourceIdentity(input []interface{}) *sql.ResourceIdentity {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)

    result := sql.ResourceIdentity{
        Type: sql.IdentityType(type),
    }
    return &result
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}

func expandArmManagedInstanceSku(input []interface{}) *sql.Sku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    tier := v["tier"].(string)
    size := v["size"].(string)
    family := v["family"].(string)
    capacity := v["capacity"].(int)

    result := sql.Sku{
        Capacity: utils.Int32(int32(capacity)),
        Family: utils.String(family),
        Name: utils.String(name),
        Size: utils.String(size),
        Tier: utils.String(tier),
    }
    return &result
}


func flattenArmManagedInstanceResourceIdentity(input *sql.ResourceIdentity) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["type"] = string(input.Type)

    return []interface{}{result}
}

func flattenArmManagedInstanceSku(input *sql.Sku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if capacity := input.Capacity; capacity != nil {
        result["capacity"] = int(*capacity)
    }
    if family := input.Family; family != nil {
        result["family"] = *family
    }
    if size := input.Size; size != nil {
        result["size"] = *size
    }
    if tier := input.Tier; tier != nil {
        result["tier"] = *tier
    }

    return []interface{}{result}
}
