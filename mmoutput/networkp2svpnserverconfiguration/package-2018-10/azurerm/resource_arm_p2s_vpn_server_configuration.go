// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmP2sVpnServerConfiguration() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmP2sVpnServerConfigurationCreateUpdate,
        Read: resourceArmP2sVpnServerConfigurationRead,
        Update: resourceArmP2sVpnServerConfigurationCreateUpdate,
        Delete: resourceArmP2sVpnServerConfigurationDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "p2svpn_server_configuration_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "virtual_wan_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
            },

            "p2svpn_server_config_radius_client_root_certificates": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "thumbprint": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "p2svpn_server_config_radius_server_root_certificates": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "public_cert_data": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "p2svpn_server_config_vpn_client_revoked_certificates": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "thumbprint": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "p2svpn_server_config_vpn_client_root_certificates": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "public_cert_data": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "radius_server_address": {
                Type: schema.TypeString,
                Optional: true,
            },

            "radius_server_secret": {
                Type: schema.TypeString,
                Optional: true,
            },

            "vpn_client_ipsec_policies": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "dh_group": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.None),
                                string(network.DHGroup1),
                                string(network.DHGroup2),
                                string(network.DHGroup14),
                                string(network.DHGroup2048),
                                string(network.ECP256),
                                string(network.ECP384),
                                string(network.DHGroup24),
                            }, false),
                        },
                        "ike_encryption": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.DES),
                                string(network.DES3),
                                string(network.AES128),
                                string(network.AES192),
                                string(network.AES256),
                                string(network.GCMAES256),
                                string(network.GCMAES128),
                            }, false),
                        },
                        "ike_integrity": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.MD5),
                                string(network.SHA1),
                                string(network.SHA256),
                                string(network.SHA384),
                                string(network.GCMAES256),
                                string(network.GCMAES128),
                            }, false),
                        },
                        "ipsec_encryption": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.None),
                                string(network.DES),
                                string(network.DES3),
                                string(network.AES128),
                                string(network.AES192),
                                string(network.AES256),
                                string(network.GCMAES128),
                                string(network.GCMAES192),
                                string(network.GCMAES256),
                            }, false),
                        },
                        "ipsec_integrity": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.MD5),
                                string(network.SHA1),
                                string(network.SHA256),
                                string(network.GCMAES128),
                                string(network.GCMAES192),
                                string(network.GCMAES256),
                            }, false),
                        },
                        "pfs_group": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.None),
                                string(network.PFS1),
                                string(network.PFS2),
                                string(network.PFS2048),
                                string(network.ECP256),
                                string(network.ECP384),
                                string(network.PFS24),
                                string(network.PFS14),
                                string(network.PFSMM),
                            }, false),
                        },
                        "sa_data_size_kilobytes": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "sa_life_time_seconds": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                    },
                },
            },

            "vpn_protocols": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                    ValidateFunc: validation.StringInSlice([]string{
                        string(network.IkeV2),
                        string(network.OpenVPN),
                   }, false),
                },
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "p2svpn_gateways": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmP2sVpnServerConfigurationCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).p2sVpnServerConfigurationsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    p2svpnServerConfigurationName := d.Get("p2svpn_server_configuration_name").(string)
    virtualWanName := d.Get("virtual_wan_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, virtualWanName, p2svpnServerConfigurationName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing P2s Vpn Server Configuration (P2svpn Server Configuration Name %q / Virtual Wan Name %q / Resource Group %q): %+v", p2svpnServerConfigurationName, virtualWanName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_p2s_vpn_server_configuration", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    name := d.Get("name").(string)
    name := d.Get("name").(string)
    etag := d.Get("etag").(string)
    p2svpnServerConfigRadiusClientRootCertificates := d.Get("p2svpn_server_config_radius_client_root_certificates").([]interface{})
    p2svpnServerConfigRadiusServerRootCertificates := d.Get("p2svpn_server_config_radius_server_root_certificates").([]interface{})
    p2svpnServerConfigVpnClientRevokedCertificates := d.Get("p2svpn_server_config_vpn_client_revoked_certificates").([]interface{})
    p2svpnServerConfigVpnClientRootCertificates := d.Get("p2svpn_server_config_vpn_client_root_certificates").([]interface{})
    radiusServerAddress := d.Get("radius_server_address").(string)
    radiusServerSecret := d.Get("radius_server_secret").(string)
    vpnClientIpsecPolicies := d.Get("vpn_client_ipsec_policies").([]interface{})
    vpnProtocols := d.Get("vpn_protocols").([]interface{})

    p2svpnServerConfigurationParameters := network.P2SVpnServerConfiguration{
        ID: utils.String(id),
        Name: utils.String(name),
        Name: utils.String(name),
        P2SVpnServerConfigurationProperties: &network.P2SVpnServerConfigurationProperties{
            Etag: utils.String(etag),
            Name: utils.String(name),
            P2svpnServerConfigRadiusClientRootCertificates: expandArmP2sVpnServerConfigurationP2SVpnServerConfigRadiusClientRootCertificate(p2svpnServerConfigRadiusClientRootCertificates),
            P2svpnServerConfigRadiusServerRootCertificates: expandArmP2sVpnServerConfigurationP2SVpnServerConfigRadiusServerRootCertificate(p2svpnServerConfigRadiusServerRootCertificates),
            P2svpnServerConfigVpnClientRevokedCertificates: expandArmP2sVpnServerConfigurationP2SVpnServerConfigVpnClientRevokedCertificate(p2svpnServerConfigVpnClientRevokedCertificates),
            P2svpnServerConfigVpnClientRootCertificates: expandArmP2sVpnServerConfigurationP2SVpnServerConfigVpnClientRootCertificate(p2svpnServerConfigVpnClientRootCertificates),
            RadiusServerAddress: utils.String(radiusServerAddress),
            RadiusServerSecret: utils.String(radiusServerSecret),
            VpnClientIpsecPolicies: expandArmP2sVpnServerConfigurationIpsecPolicy(vpnClientIpsecPolicies),
            VpnProtocols: expandArmP2sVpnServerConfiguration(vpnProtocols),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, virtualWanName, p2svpnServerConfigurationName, p2svpnServerConfigurationParameters)
    if err != nil {
        return fmt.Errorf("Error creating P2s Vpn Server Configuration (P2svpn Server Configuration Name %q / Virtual Wan Name %q / Resource Group %q): %+v", p2svpnServerConfigurationName, virtualWanName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of P2s Vpn Server Configuration (P2svpn Server Configuration Name %q / Virtual Wan Name %q / Resource Group %q): %+v", p2svpnServerConfigurationName, virtualWanName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, virtualWanName, p2svpnServerConfigurationName)
    if err != nil {
        return fmt.Errorf("Error retrieving P2s Vpn Server Configuration (P2svpn Server Configuration Name %q / Virtual Wan Name %q / Resource Group %q): %+v", p2svpnServerConfigurationName, virtualWanName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read P2s Vpn Server Configuration (P2svpn Server Configuration Name %q / Virtual Wan Name %q / Resource Group %q) ID", p2svpnServerConfigurationName, virtualWanName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmP2sVpnServerConfigurationRead(d, meta)
}

func resourceArmP2sVpnServerConfigurationRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).p2sVpnServerConfigurationsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    virtualWanName := id.Path["virtualWans"]
    p2svpnServerConfigurationName := id.Path["p2sVpnServerConfigurations"]

    resp, err := client.Get(ctx, resourceGroup, virtualWanName, p2svpnServerConfigurationName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] P2s Vpn Server Configuration %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading P2s Vpn Server Configuration (P2svpn Server Configuration Name %q / Virtual Wan Name %q / Resource Group %q): %+v", p2svpnServerConfigurationName, virtualWanName, resourceGroup, err)
    }


    if p2SVpnServerConfigurationProperties := resp.P2SVpnServerConfigurationProperties; p2SVpnServerConfigurationProperties != nil {
        d.Set("name", p2SVpnServerConfigurationProperties.Name)
        d.Set("etag", p2SVpnServerConfigurationProperties.Etag)
        if err := d.Set("p2svpn_gateways", flattenArmP2sVpnServerConfigurationSubResource(p2SVpnServerConfigurationProperties.P2svpnGateways)); err != nil {
            return fmt.Errorf("Error setting `p2svpn_gateways`: %+v", err)
        }
        if err := d.Set("p2svpn_server_config_radius_client_root_certificates", flattenArmP2sVpnServerConfigurationP2SVpnServerConfigRadiusClientRootCertificate(p2SVpnServerConfigurationProperties.P2svpnServerConfigRadiusClientRootCertificates)); err != nil {
            return fmt.Errorf("Error setting `p2svpn_server_config_radius_client_root_certificates`: %+v", err)
        }
        if err := d.Set("p2svpn_server_config_radius_server_root_certificates", flattenArmP2sVpnServerConfigurationP2SVpnServerConfigRadiusServerRootCertificate(p2SVpnServerConfigurationProperties.P2svpnServerConfigRadiusServerRootCertificates)); err != nil {
            return fmt.Errorf("Error setting `p2svpn_server_config_radius_server_root_certificates`: %+v", err)
        }
        if err := d.Set("p2svpn_server_config_vpn_client_revoked_certificates", flattenArmP2sVpnServerConfigurationP2SVpnServerConfigVpnClientRevokedCertificate(p2SVpnServerConfigurationProperties.P2svpnServerConfigVpnClientRevokedCertificates)); err != nil {
            return fmt.Errorf("Error setting `p2svpn_server_config_vpn_client_revoked_certificates`: %+v", err)
        }
        if err := d.Set("p2svpn_server_config_vpn_client_root_certificates", flattenArmP2sVpnServerConfigurationP2SVpnServerConfigVpnClientRootCertificate(p2SVpnServerConfigurationProperties.P2svpnServerConfigVpnClientRootCertificates)); err != nil {
            return fmt.Errorf("Error setting `p2svpn_server_config_vpn_client_root_certificates`: %+v", err)
        }
        d.Set("provisioning_state", p2SVpnServerConfigurationProperties.ProvisioningState)
        d.Set("radius_server_address", p2SVpnServerConfigurationProperties.RadiusServerAddress)
        d.Set("radius_server_secret", p2SVpnServerConfigurationProperties.RadiusServerSecret)
        if err := d.Set("vpn_client_ipsec_policies", flattenArmP2sVpnServerConfigurationIpsecPolicy(p2SVpnServerConfigurationProperties.VpnClientIpsecPolicies)); err != nil {
            return fmt.Errorf("Error setting `vpn_client_ipsec_policies`: %+v", err)
        }
        if err := d.Set("vpn_protocols", flattenArmP2sVpnServerConfiguration(string(p2SVpnServerConfigurationProperties.VpnProtocols))); err != nil {
            return fmt.Errorf("Error setting `vpn_protocols`: %+v", err)
        }
    }
    d.Set("name", resp.Name)
    d.Set("name", resp.Name)
    d.Set("name", resp.Name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("etag", resp.Etag)
    d.Set("etag", resp.Etag)
    d.Set("etag", resp.Etag)
    d.Set("etag", resp.Etag)
    d.Set("p2svpn_server_configuration_name", p2svpnServerConfigurationName)
    d.Set("virtual_wan_name", virtualWanName)

    return nil
}


func resourceArmP2sVpnServerConfigurationDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).p2sVpnServerConfigurationsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    virtualWanName := id.Path["virtualWans"]
    p2svpnServerConfigurationName := id.Path["p2sVpnServerConfigurations"]

    future, err := client.Delete(ctx, resourceGroup, virtualWanName, p2svpnServerConfigurationName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting P2s Vpn Server Configuration (P2svpn Server Configuration Name %q / Virtual Wan Name %q / Resource Group %q): %+v", p2svpnServerConfigurationName, virtualWanName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting P2s Vpn Server Configuration (P2svpn Server Configuration Name %q / Virtual Wan Name %q / Resource Group %q): %+v", p2svpnServerConfigurationName, virtualWanName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmP2sVpnServerConfigurationP2SVpnServerConfigRadiusClientRootCertificate(input []interface{}) *[]network.P2SVpnServerConfigRadiusClientRootCertificate {
    results := make([]network.P2SVpnServerConfigRadiusClientRootCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        thumbprint := v["thumbprint"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.P2SVpnServerConfigRadiusClientRootCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat: &network.P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat{
                Thumbprint: utils.String(thumbprint),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmP2sVpnServerConfigurationP2SVpnServerConfigRadiusServerRootCertificate(input []interface{}) *[]network.P2SVpnServerConfigRadiusServerRootCertificate {
    results := make([]network.P2SVpnServerConfigRadiusServerRootCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        publicCertData := v["public_cert_data"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.P2SVpnServerConfigRadiusServerRootCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            P2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat: &network.P2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat{
                PublicCertData: utils.String(publicCertData),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmP2sVpnServerConfigurationP2SVpnServerConfigVpnClientRevokedCertificate(input []interface{}) *[]network.P2SVpnServerConfigVpnClientRevokedCertificate {
    results := make([]network.P2SVpnServerConfigVpnClientRevokedCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        thumbprint := v["thumbprint"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.P2SVpnServerConfigVpnClientRevokedCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            P2SVpnServerConfigVpnClientRevokedCertificatePropertiesFormat: &network.P2SVpnServerConfigVpnClientRevokedCertificatePropertiesFormat{
                Thumbprint: utils.String(thumbprint),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmP2sVpnServerConfigurationP2SVpnServerConfigVpnClientRootCertificate(input []interface{}) *[]network.P2SVpnServerConfigVpnClientRootCertificate {
    results := make([]network.P2SVpnServerConfigVpnClientRootCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        publicCertData := v["public_cert_data"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.P2SVpnServerConfigVpnClientRootCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            P2SVpnServerConfigVpnClientRootCertificatePropertiesFormat: &network.P2SVpnServerConfigVpnClientRootCertificatePropertiesFormat{
                PublicCertData: utils.String(publicCertData),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmP2sVpnServerConfigurationIpsecPolicy(input []interface{}) *[]network.IpsecPolicy {
    results := make([]network.IpsecPolicy, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        saLifeTimeSeconds := v["sa_life_time_seconds"].(int)
        saDataSizeKilobytes := v["sa_data_size_kilobytes"].(int)
        ipsecEncryption := v["ipsec_encryption"].(string)
        ipsecIntegrity := v["ipsec_integrity"].(string)
        ikeEncryption := v["ike_encryption"].(string)
        ikeIntegrity := v["ike_integrity"].(string)
        dhGroup := v["dh_group"].(string)
        pfsGroup := v["pfs_group"].(string)

        result := network.IpsecPolicy{
            DhGroup: network.DhGroup(dhGroup),
            IkeEncryption: network.IkeEncryption(ikeEncryption),
            IkeIntegrity: network.IkeIntegrity(ikeIntegrity),
            IpsecEncryption: network.IpsecEncryption(ipsecEncryption),
            IpsecIntegrity: network.IpsecIntegrity(ipsecIntegrity),
            PfsGroup: network.PfsGroup(pfsGroup),
            SaDataSizeKilobytes: utils.Int32(int32(saDataSizeKilobytes)),
            SaLifeTimeSeconds: utils.Int32(int32(saLifeTimeSeconds)),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmP2sVpnServerConfiguration(input []interface{}) *[]network. {
    results := make([]network., 0)
    for _, item := range input {
        v := item.(string)
        result := network.(v)
        results = append(results, result)
    }
    return &results
}


func flattenArmP2sVpnServerConfigurationSubResource(input *[]network.SubResource) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}

func flattenArmP2sVpnServerConfigurationP2SVpnServerConfigRadiusClientRootCertificate(input *[]network.P2SVpnServerConfigRadiusClientRootCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if p2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat := item.P2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat; p2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat != nil {
            if thumbprint := p2SVpnServerConfigRadiusClientRootCertificatePropertiesFormat.Thumbprint; thumbprint != nil {
                v["thumbprint"] = *thumbprint
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmP2sVpnServerConfigurationP2SVpnServerConfigRadiusServerRootCertificate(input *[]network.P2SVpnServerConfigRadiusServerRootCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if p2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat := item.P2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat; p2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat != nil {
            if publicCertData := p2SVpnServerConfigRadiusServerRootCertificatePropertiesFormat.PublicCertData; publicCertData != nil {
                v["public_cert_data"] = *publicCertData
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmP2sVpnServerConfigurationP2SVpnServerConfigVpnClientRevokedCertificate(input *[]network.P2SVpnServerConfigVpnClientRevokedCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if p2SVpnServerConfigVpnClientRevokedCertificatePropertiesFormat := item.P2SVpnServerConfigVpnClientRevokedCertificatePropertiesFormat; p2SVpnServerConfigVpnClientRevokedCertificatePropertiesFormat != nil {
            if thumbprint := p2SVpnServerConfigVpnClientRevokedCertificatePropertiesFormat.Thumbprint; thumbprint != nil {
                v["thumbprint"] = *thumbprint
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmP2sVpnServerConfigurationP2SVpnServerConfigVpnClientRootCertificate(input *[]network.P2SVpnServerConfigVpnClientRootCertificate) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if etag := item.Etag; etag != nil {
            v["etag"] = *etag
        }
        if p2SVpnServerConfigVpnClientRootCertificatePropertiesFormat := item.P2SVpnServerConfigVpnClientRootCertificatePropertiesFormat; p2SVpnServerConfigVpnClientRootCertificatePropertiesFormat != nil {
            if publicCertData := p2SVpnServerConfigVpnClientRootCertificatePropertiesFormat.PublicCertData; publicCertData != nil {
                v["public_cert_data"] = *publicCertData
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmP2sVpnServerConfigurationIpsecPolicy(input *[]network.IpsecPolicy) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["dh_group"] = string(item.DhGroup)
        v["ike_encryption"] = string(item.IkeEncryption)
        v["ike_integrity"] = string(item.IkeIntegrity)
        v["ipsec_encryption"] = string(item.IpsecEncryption)
        v["ipsec_integrity"] = string(item.IpsecIntegrity)
        v["pfs_group"] = string(item.PfsGroup)
        if saDataSizeKilobytes := item.SaDataSizeKilobytes; saDataSizeKilobytes != nil {
            v["sa_data_size_kilobytes"] = int(*saDataSizeKilobytes)
        }
        if saLifeTimeSeconds := item.SaLifeTimeSeconds; saLifeTimeSeconds != nil {
            v["sa_life_time_seconds"] = int(*saLifeTimeSeconds)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmP2sVpnServerConfiguration(input *[]network.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}
