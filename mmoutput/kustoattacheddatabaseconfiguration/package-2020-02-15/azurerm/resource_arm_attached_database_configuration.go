// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAttachedDatabaseConfiguration() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAttachedDatabaseConfigurationCreateUpdate,
        Read: resourceArmAttachedDatabaseConfigurationRead,
        Update: resourceArmAttachedDatabaseConfigurationCreateUpdate,
        Delete: resourceArmAttachedDatabaseConfigurationDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "attached_database_configuration_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "cluster_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "attached_database_names": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },
        },
    }
}

func resourceArmAttachedDatabaseConfigurationCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).attachedDatabaseConfigurationsClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("attached_database_configuration_name").(string)
    clusterName := d.Get("cluster_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, clusterName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Attached Database Configuration (Attached Database Configuration Name %q / Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_attached_database_configuration", *existing.ID)
        }
    }


    parameters := kusto.AttachedDatabaseConfiguration{
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroupName, clusterName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Attached Database Configuration (Attached Database Configuration Name %q / Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Attached Database Configuration (Attached Database Configuration Name %q / Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, clusterName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Attached Database Configuration (Attached Database Configuration Name %q / Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Attached Database Configuration (Attached Database Configuration Name %q / Cluster Name %q / Resource Group %q) ID", name, clusterName, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmAttachedDatabaseConfigurationRead(d, meta)
}

func resourceArmAttachedDatabaseConfigurationRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).attachedDatabaseConfigurationsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    clusterName := id.Path["clusters"]
    name := id.Path["attachedDatabaseConfigurations"]

    resp, err := client.Get(ctx, resourceGroupName, clusterName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Attached Database Configuration %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Attached Database Configuration (Attached Database Configuration Name %q / Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    d.Set("attached_database_configuration_name", name)
    if attachedDatabaseConfigurationProperties := resp.AttachedDatabaseConfigurationProperties; attachedDatabaseConfigurationProperties != nil {
        d.Set("attached_database_names", utils.FlattenStringSlice(attachedDatabaseConfigurationProperties.AttachedDatabaseNames))
    }
    d.Set("cluster_name", clusterName)

    return nil
}


func resourceArmAttachedDatabaseConfigurationDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).attachedDatabaseConfigurationsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    clusterName := id.Path["clusters"]
    name := id.Path["attachedDatabaseConfigurations"]

    future, err := client.Delete(ctx, resourceGroupName, clusterName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Attached Database Configuration (Attached Database Configuration Name %q / Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroupName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Attached Database Configuration (Attached Database Configuration Name %q / Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroupName, err)
        }
    }

    return nil
}
