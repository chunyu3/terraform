// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAuthorizationServer() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAuthorizationServerCreate,
        Read: resourceArmAuthorizationServerRead,
        Update: resourceArmAuthorizationServerUpdate,
        Delete: resourceArmAuthorizationServerDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "authorization_endpoint": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "authsid": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "client_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "client_registration_endpoint": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "display_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "grant_types": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                    ValidateFunc: validation.StringInSlice([]string{
                        string(apimanagement.authorizationCode),
                        string(apimanagement.implicit),
                        string(apimanagement.resourceOwnerPassword),
                        string(apimanagement.clientCredentials),
                   }, false),
                },
            },

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "authorization_methods": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                    ValidateFunc: validation.StringInSlice([]string{
                        string(apimanagement.HEAD),
                        string(apimanagement.OPTIONS),
                        string(apimanagement.TRACE),
                        string(apimanagement.GET),
                        string(apimanagement.POST),
                        string(apimanagement.PUT),
                        string(apimanagement.PATCH),
                        string(apimanagement.DELETE),
                   }, false),
                },
            },

            "bearer_token_sending_methods": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                    ValidateFunc: validation.StringInSlice([]string{
                        string(apimanagement.authorizationHeader),
                        string(apimanagement.query),
                   }, false),
                },
            },

            "client_authentication_method": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                    ValidateFunc: validation.StringInSlice([]string{
                        string(apimanagement.Basic),
                        string(apimanagement.Body),
                   }, false),
                },
            },

            "client_secret": {
                Type: schema.TypeString,
                Optional: true,
            },

            "default_scope": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "resource_owner_password": {
                Type: schema.TypeString,
                Optional: true,
            },

            "resource_owner_username": {
                Type: schema.TypeString,
                Optional: true,
            },

            "support_state": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "token_body_parameters": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "value": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "token_endpoint": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmAuthorizationServerCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).authorizationServerClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    authsid := d.Get("authsid").(string)
    serviceName := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serviceName, authsid)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Authorization Server (Authsid %q / Service Name %q / Resource Group %q): %+v", authsid, serviceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_authorization_server", *existing.ID)
        }
    }

    authorizationEndpoint := d.Get("authorization_endpoint").(string)
    authorizationMethods := d.Get("authorization_methods").([]interface{})
    bearerTokenSendingMethods := d.Get("bearer_token_sending_methods").([]interface{})
    clientAuthenticationMethod := d.Get("client_authentication_method").([]interface{})
    clientId := d.Get("client_id").(string)
    clientRegistrationEndpoint := d.Get("client_registration_endpoint").(string)
    clientSecret := d.Get("client_secret").(string)
    defaultScope := d.Get("default_scope").(string)
    description := d.Get("description").(string)
    displayName := d.Get("display_name").(string)
    grantTypes := d.Get("grant_types").([]interface{})
    resourceOwnerPassword := d.Get("resource_owner_password").(string)
    resourceOwnerUsername := d.Get("resource_owner_username").(string)
    supportState := d.Get("support_state").(bool)
    tokenBodyParameters := d.Get("token_body_parameters").([]interface{})
    tokenEndpoint := d.Get("token_endpoint").(string)

    parameters := apimanagement.AuthorizationServerContract{
        AuthorizationServerContractProperties: &apimanagement.AuthorizationServerContractProperties{
            AuthorizationEndpoint: utils.String(authorizationEndpoint),
            AuthorizationMethods: expandArmAuthorizationServer(authorizationMethods),
            BearerTokenSendingMethods: expandArmAuthorizationServer(bearerTokenSendingMethods),
            ClientAuthenticationMethod: expandArmAuthorizationServer(clientAuthenticationMethod),
            ClientID: utils.String(clientId),
            ClientRegistrationEndpoint: utils.String(clientRegistrationEndpoint),
            ClientSecret: utils.String(clientSecret),
            DefaultScope: utils.String(defaultScope),
            Description: utils.String(description),
            DisplayName: utils.String(displayName),
            GrantTypes: expandArmAuthorizationServer(grantTypes),
            ResourceOwnerPassword: utils.String(resourceOwnerPassword),
            ResourceOwnerUsername: utils.String(resourceOwnerUsername),
            SupportState: utils.Bool(supportState),
            TokenBodyParameters: expandArmAuthorizationServerTokenBodyParameterContract(tokenBodyParameters),
            TokenEndpoint: utils.String(tokenEndpoint),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, serviceName, authsid, parameters); err != nil {
        return fmt.Errorf("Error creating Authorization Server (Authsid %q / Service Name %q / Resource Group %q): %+v", authsid, serviceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serviceName, authsid)
    if err != nil {
        return fmt.Errorf("Error retrieving Authorization Server (Authsid %q / Service Name %q / Resource Group %q): %+v", authsid, serviceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Authorization Server (Authsid %q / Service Name %q / Resource Group %q) ID", authsid, serviceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAuthorizationServerRead(d, meta)
}

func resourceArmAuthorizationServerRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).authorizationServerClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    authsid := id.Path["authorizationServers"]

    resp, err := client.Get(ctx, resourceGroup, serviceName, authsid)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Authorization Server %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Authorization Server (Authsid %q / Service Name %q / Resource Group %q): %+v", authsid, serviceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if authorizationServerContractProperties := resp.AuthorizationServerContractProperties; authorizationServerContractProperties != nil {
        d.Set("authorization_endpoint", authorizationServerContractProperties.AuthorizationEndpoint)
        if err := d.Set("authorization_methods", flattenArmAuthorizationServer(string(authorizationServerContractProperties.AuthorizationMethods))); err != nil {
            return fmt.Errorf("Error setting `authorization_methods`: %+v", err)
        }
        if err := d.Set("bearer_token_sending_methods", flattenArmAuthorizationServer(string(authorizationServerContractProperties.BearerTokenSendingMethods))); err != nil {
            return fmt.Errorf("Error setting `bearer_token_sending_methods`: %+v", err)
        }
        if err := d.Set("client_authentication_method", flattenArmAuthorizationServer(string(authorizationServerContractProperties.ClientAuthenticationMethod))); err != nil {
            return fmt.Errorf("Error setting `client_authentication_method`: %+v", err)
        }
        d.Set("client_id", authorizationServerContractProperties.ClientID)
        d.Set("client_registration_endpoint", authorizationServerContractProperties.ClientRegistrationEndpoint)
        d.Set("client_secret", authorizationServerContractProperties.ClientSecret)
        d.Set("default_scope", authorizationServerContractProperties.DefaultScope)
        d.Set("description", authorizationServerContractProperties.Description)
        d.Set("display_name", authorizationServerContractProperties.DisplayName)
        if err := d.Set("grant_types", flattenArmAuthorizationServer(string(authorizationServerContractProperties.GrantTypes))); err != nil {
            return fmt.Errorf("Error setting `grant_types`: %+v", err)
        }
        d.Set("resource_owner_password", authorizationServerContractProperties.ResourceOwnerPassword)
        d.Set("resource_owner_username", authorizationServerContractProperties.ResourceOwnerUsername)
        d.Set("support_state", authorizationServerContractProperties.SupportState)
        if err := d.Set("token_body_parameters", flattenArmAuthorizationServerTokenBodyParameterContract(authorizationServerContractProperties.TokenBodyParameters)); err != nil {
            return fmt.Errorf("Error setting `token_body_parameters`: %+v", err)
        }
        d.Set("token_endpoint", authorizationServerContractProperties.TokenEndpoint)
    }
    d.Set("authsid", authsid)
    d.Set("service_name", serviceName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmAuthorizationServerUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).authorizationServerClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    authorizationEndpoint := d.Get("authorization_endpoint").(string)
    authorizationMethods := d.Get("authorization_methods").([]interface{})
    authsid := d.Get("authsid").(string)
    bearerTokenSendingMethods := d.Get("bearer_token_sending_methods").([]interface{})
    clientAuthenticationMethod := d.Get("client_authentication_method").([]interface{})
    clientId := d.Get("client_id").(string)
    clientRegistrationEndpoint := d.Get("client_registration_endpoint").(string)
    clientSecret := d.Get("client_secret").(string)
    defaultScope := d.Get("default_scope").(string)
    description := d.Get("description").(string)
    displayName := d.Get("display_name").(string)
    grantTypes := d.Get("grant_types").([]interface{})
    resourceOwnerPassword := d.Get("resource_owner_password").(string)
    resourceOwnerUsername := d.Get("resource_owner_username").(string)
    serviceName := d.Get("service_name").(string)
    supportState := d.Get("support_state").(bool)
    tokenBodyParameters := d.Get("token_body_parameters").([]interface{})
    tokenEndpoint := d.Get("token_endpoint").(string)

    parameters := apimanagement.AuthorizationServerContract{
        AuthorizationServerContractProperties: &apimanagement.AuthorizationServerContractProperties{
            AuthorizationEndpoint: utils.String(authorizationEndpoint),
            AuthorizationMethods: expandArmAuthorizationServer(authorizationMethods),
            BearerTokenSendingMethods: expandArmAuthorizationServer(bearerTokenSendingMethods),
            ClientAuthenticationMethod: expandArmAuthorizationServer(clientAuthenticationMethod),
            ClientID: utils.String(clientId),
            ClientRegistrationEndpoint: utils.String(clientRegistrationEndpoint),
            ClientSecret: utils.String(clientSecret),
            DefaultScope: utils.String(defaultScope),
            Description: utils.String(description),
            DisplayName: utils.String(displayName),
            GrantTypes: expandArmAuthorizationServer(grantTypes),
            ResourceOwnerPassword: utils.String(resourceOwnerPassword),
            ResourceOwnerUsername: utils.String(resourceOwnerUsername),
            SupportState: utils.Bool(supportState),
            TokenBodyParameters: expandArmAuthorizationServerTokenBodyParameterContract(tokenBodyParameters),
            TokenEndpoint: utils.String(tokenEndpoint),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, serviceName, authsid, parameters); err != nil {
        return fmt.Errorf("Error updating Authorization Server (Authsid %q / Service Name %q / Resource Group %q): %+v", authsid, serviceName, resourceGroup, err)
    }

    return resourceArmAuthorizationServerRead(d, meta)
}

func resourceArmAuthorizationServerDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).authorizationServerClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    authsid := id.Path["authorizationServers"]

    if _, err := client.Delete(ctx, resourceGroup, serviceName, authsid); err != nil {
        return fmt.Errorf("Error deleting Authorization Server (Authsid %q / Service Name %q / Resource Group %q): %+v", authsid, serviceName, resourceGroup, err)
    }

    return nil
}

func expandArmAuthorizationServer(input []interface{}) *[]apimanagement. {
    results := make([]apimanagement., 0)
    for _, item := range input {
        v := item.(string)
        result := apimanagement.(v)
        results = append(results, result)
    }
    return &results
}

func expandArmAuthorizationServerTokenBodyParameterContract(input []interface{}) *[]apimanagement.TokenBodyParameterContract {
    results := make([]apimanagement.TokenBodyParameterContract, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        value := v["value"].(string)

        result := apimanagement.TokenBodyParameterContract{
            Name: utils.String(name),
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmAuthorizationServer(input *[]apimanagement.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}

func flattenArmAuthorizationServerTokenBodyParameterContract(input *[]apimanagement.TokenBodyParameterContract) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if value := item.Value; value != nil {
            v["value"] = *value
        }

        results = append(results, v)
    }

    return results
}
