// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmLabAccount() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmLabAccountCreate,
        Read: resourceArmLabAccountRead,
        Update: resourceArmLabAccountUpdate,
        Delete: resourceArmLabAccountDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "lab_creation_parameters": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "max_users_in_lab": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "enabled_region_selection": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "environment_setting_creation_parameters": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "resource_setting_creation_parameters": {
                            Type: schema.TypeList,
                            Required: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "gallery_image_resource_id": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "reference_vm_creation_parameters": {
                                        Type: schema.TypeList,
                                        Required: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "password": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                                "user_name": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                            },
                                        },
                                    },
                                    "location": azure.SchemaLocation(),
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "size": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(labservices.Basic),
                                            string(labservices.Standard),
                                            string(labservices.Performance),
                                        }, false),
                                        Default: string(labservices.Basic),
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "unique_identifier": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmLabAccountCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labAccountsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Lab Account %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_lab_account", *existing.ID)
        }
    }

    name := d.Get("name").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    enabledRegionSelection := d.Get("enabled_region_selection").(bool)
    environmentSettingCreationParameters := d.Get("environment_setting_creation_parameters").([]interface{})
    labCreationParameters := d.Get("lab_creation_parameters").([]interface{})
    uniqueIdentifier := d.Get("unique_identifier").(string)
    t := d.Get("tags").(map[string]interface{})

    labAccount := labservices.LabAccountFragment{
        EnvironmentSettingCreationParameters: expandArmLabAccountEnvironmentSettingCreationParameters(environmentSettingCreationParameters),
        LabCreationParameters: expandArmLabAccountLabCreationParameters(labCreationParameters),
        Location: utils.String(location),
        Name: utils.String(name),
        LabAccountPropertiesFragment: &labservices.LabAccountPropertiesFragment{
            EnabledRegionSelection: utils.Bool(enabledRegionSelection),
            UniqueIdentifier: utils.String(uniqueIdentifier),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, labAccount); err != nil {
        return fmt.Errorf("Error creating Lab Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Lab Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Lab Account %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmLabAccountRead(d, meta)
}

func resourceArmLabAccountRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labAccountsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["labaccounts"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Lab Account %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Lab Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmLabAccountUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labAccountsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    enabledRegionSelection := d.Get("enabled_region_selection").(bool)
    environmentSettingCreationParameters := d.Get("environment_setting_creation_parameters").([]interface{})
    labCreationParameters := d.Get("lab_creation_parameters").([]interface{})
    uniqueIdentifier := d.Get("unique_identifier").(string)
    t := d.Get("tags").(map[string]interface{})

    labAccount := labservices.LabAccountFragment{
        EnvironmentSettingCreationParameters: expandArmLabAccountEnvironmentSettingCreationParameters(environmentSettingCreationParameters),
        LabCreationParameters: expandArmLabAccountLabCreationParameters(labCreationParameters),
        Name: utils.String(name),
        LabAccountPropertiesFragment: &labservices.LabAccountPropertiesFragment{
            EnabledRegionSelection: utils.Bool(enabledRegionSelection),
            UniqueIdentifier: utils.String(uniqueIdentifier),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, labAccount); err != nil {
        return fmt.Errorf("Error updating Lab Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmLabAccountRead(d, meta)
}

func resourceArmLabAccountDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labAccountsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["labaccounts"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Lab Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Lab Account %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmLabAccountEnvironmentSettingCreationParameters(input []interface{}) *labservices.EnvironmentSettingCreationParameters {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    resourceSettingCreationParameters := v["resource_setting_creation_parameters"].([]interface{})

    result := labservices.EnvironmentSettingCreationParameters{
        ResourceSettingCreationParameters: expandArmLabAccountResourceSettingCreationParameters(resourceSettingCreationParameters),
    }
    return &result
}

func expandArmLabAccountLabCreationParameters(input []interface{}) *labservices.LabCreationParameters {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    maxUsersInLab := v["max_users_in_lab"].(int)

    result := labservices.LabCreationParameters{
        MaxUsersInLab: utils.Int32(int32(maxUsersInLab)),
    }
    return &result
}

func expandArmLabAccountResourceSettingCreationParameters(input []interface{}) *labservices.ResourceSettingCreationParameters {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    location := azure.NormalizeLocation(v["location"].(string))
    name := v["name"].(string)
    galleryImageResourceId := v["gallery_image_resource_id"].(string)
    size := v["size"].(string)
    referenceVmCreationParameters := v["reference_vm_creation_parameters"].([]interface{})

    result := labservices.ResourceSettingCreationParameters{
        GalleryImageResourceID: utils.String(galleryImageResourceId),
        Location: utils.String(location),
        Name: utils.String(name),
        ReferenceVMCreationParameters: expandArmLabAccountReferenceVmCreationParameters(referenceVmCreationParameters),
        Size: labservices.ManagedLabVmSize(size),
    }
    return &result
}

func expandArmLabAccountReferenceVmCreationParameters(input []interface{}) *labservices.ReferenceVmCreationParameters {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    userName := v["user_name"].(string)
    password := v["password"].(string)

    result := labservices.ReferenceVmCreationParameters{
        Password: utils.String(password),
        UserName: utils.String(userName),
    }
    return &result
}
