// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmSyncGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmSyncGroupCreateUpdate,
        Read: resourceArmSyncGroupRead,
        Update: resourceArmSyncGroupCreateUpdate,
        Delete: resourceArmSyncGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "storage_sync_service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "sync_group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "unique_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "sync_group_status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmSyncGroupCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).syncGroupsClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    storageSyncServiceName := d.Get("storage_sync_service_name").(string)
    name := d.Get("sync_group_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, storageSyncServiceName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Sync Group (Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, storageSyncServiceName, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_sync_group", *existing.ID)
        }
    }

    uniqueID := d.Get("unique_id").(string)

    parameters := storagesync.SyncGroup{
        SyncGroupProperties: &storagesync.SyncGroupProperties{
            UniqueID: utils.String(uniqueID),
        },
    }


    if _, err := client.Create(ctx, resourceGroupName, storageSyncServiceName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Sync Group (Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, storageSyncServiceName, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, storageSyncServiceName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Sync Group (Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, storageSyncServiceName, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Sync Group (Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q) ID", name, storageSyncServiceName, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmSyncGroupRead(d, meta)
}

func resourceArmSyncGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).syncGroupsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    storageSyncServiceName := id.Path["storageSyncServices"]
    name := id.Path["syncGroups"]

    resp, err := client.Get(ctx, resourceGroupName, storageSyncServiceName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Sync Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Sync Group (Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, storageSyncServiceName, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    d.Set("storage_sync_service_name", storageSyncServiceName)
    d.Set("sync_group_name", name)
    if syncGroupProperties := resp.SyncGroupProperties; syncGroupProperties != nil {
        d.Set("sync_group_status", syncGroupProperties.SyncGroupStatus)
        d.Set("unique_id", syncGroupProperties.UniqueID)
    }
    d.Set("type", resp.Type)

    return nil
}


func resourceArmSyncGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).syncGroupsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    storageSyncServiceName := id.Path["storageSyncServices"]
    name := id.Path["syncGroups"]

    if _, err := client.Delete(ctx, resourceGroupName, storageSyncServiceName, name); err != nil {
        return fmt.Errorf("Error deleting Sync Group (Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, storageSyncServiceName, resourceGroupName, err)
    }

    return nil
}
