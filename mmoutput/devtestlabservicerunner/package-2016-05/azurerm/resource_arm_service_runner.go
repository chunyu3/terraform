// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmServiceRunner() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmServiceRunnerCreateUpdate,
        Read: resourceArmServiceRunnerRead,
        Update: resourceArmServiceRunnerCreateUpdate,
        Delete: resourceArmServiceRunnerDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "identity": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "client_secret_url": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "principal_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tenant_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmServiceRunnerCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serviceRunnersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Service Runner %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_service_runner", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    identity := d.Get("identity").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    serviceRunner := devtestlab.ServiceRunner{
        Identity: expandArmServiceRunnerIdentityProperties(identity),
        Location: utils.String(location),
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, name, serviceRunner); err != nil {
        return fmt.Errorf("Error creating Service Runner %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Service Runner %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Service Runner %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmServiceRunnerRead(d, meta)
}

func resourceArmServiceRunnerRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serviceRunnersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["labs"]
    name := id.Path["servicerunners"]

    resp, err := client.Get(ctx, resourceGroup, name, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Service Runner %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Service Runner %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if err := d.Set("identity", flattenArmServiceRunnerIdentityProperties(resp.Identity)); err != nil {
        return fmt.Errorf("Error setting `identity`: %+v", err)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmServiceRunnerDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serviceRunnersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["labs"]
    name := id.Path["servicerunners"]

    if _, err := client.Delete(ctx, resourceGroup, name, name); err != nil {
        return fmt.Errorf("Error deleting Service Runner %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}

func expandArmServiceRunnerIdentityProperties(input []interface{}) *devtestlab.IdentityProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)
    principalId := v["principal_id"].(string)
    tenantId := v["tenant_id"].(string)
    clientSecretUrl := v["client_secret_url"].(string)

    result := devtestlab.IdentityProperties{
        ClientSecretURL: utils.String(clientSecretUrl),
        PrincipalID: utils.String(principalId),
        TenantID: utils.String(tenantId),
        Type: utils.String(type),
    }
    return &result
}


func flattenArmServiceRunnerIdentityProperties(input *devtestlab.IdentityProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if clientSecretUrl := input.ClientSecretURL; clientSecretUrl != nil {
        result["client_secret_url"] = *clientSecretUrl
    }
    if principalId := input.PrincipalID; principalId != nil {
        result["principal_id"] = *principalId
    }
    if tenantId := input.TenantID; tenantId != nil {
        result["tenant_id"] = *tenantId
    }
    if type := input.Type; type != nil {
        result["type"] = *type
    }

    return []interface{}{result}
}
