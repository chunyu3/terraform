// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmGroupCreateUpdate,
        Read: resourceArmGroupRead,
        Update: resourceArmGroupCreateUpdate,
        Delete: resourceArmGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "project_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "e_tag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "machines": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "operation_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuremigrate.Add),
                    string(azuremigrate.Remove),
                }, false),
                Default: string(azuremigrate.Add),
            },

            "are_assessments_running": {
                Type: schema.TypeBool,
                Computed: true,
            },

            "assessments": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "created_timestamp": {
                Type: schema.TypeString,
                Computed: true,
            },

            "group_status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "machine_count": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "updated_timestamp": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmGroupCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).groupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    projectName := d.Get("project_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, projectName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Group %q (Project Name %q / Resource Group %q): %+v", name, projectName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_group", *existing.ID)
        }
    }

    eTag := d.Get("e_tag").(string)
    machines := d.Get("machines").([]interface{})
    operationType := d.Get("operation_type").(string)

    group := azuremigrate.Group{
        ETag: utils.String(eTag),
        GroupBodyProperties: &azuremigrate.GroupBodyProperties{
            Machines: utils.ExpandStringSlice(machines),
            OperationType: azuremigrate.GroupUpdateOperation(operationType),
        },
    }


    if _, err := client.Create(ctx, resourceGroup, projectName, name, group); err != nil {
        return fmt.Errorf("Error creating Group %q (Project Name %q / Resource Group %q): %+v", name, projectName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, projectName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Group %q (Project Name %q / Resource Group %q): %+v", name, projectName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Group %q (Project Name %q / Resource Group %q) ID", name, projectName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmGroupRead(d, meta)
}

func resourceArmGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).groupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    projectName := id.Path["assessmentProjects"]
    name := id.Path["groups"]

    resp, err := client.Get(ctx, resourceGroup, projectName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Group %q (Project Name %q / Resource Group %q): %+v", name, projectName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if groupBodyProperties := resp.GroupBodyProperties; groupBodyProperties != nil {
        d.Set("are_assessments_running", groupBodyProperties.AreAssessmentsRunning)
        d.Set("assessments", utils.FlattenStringSlice(groupBodyProperties.Assessments))
        d.Set("created_timestamp", (groupBodyProperties.CreatedTimestamp).String())
        d.Set("group_status", string(groupBodyProperties.GroupStatus))
        d.Set("machine_count", int(*groupBodyProperties.MachineCount))
        d.Set("updated_timestamp", (groupBodyProperties.UpdatedTimestamp).String())
    }
    d.Set("e_tag", resp.ETag)
    d.Set("project_name", projectName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).groupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    projectName := id.Path["assessmentProjects"]
    name := id.Path["groups"]

    if _, err := client.Delete(ctx, resourceGroup, projectName, name); err != nil {
        return fmt.Errorf("Error deleting Group %q (Project Name %q / Resource Group %q): %+v", name, projectName, resourceGroup, err)
    }

    return nil
}
