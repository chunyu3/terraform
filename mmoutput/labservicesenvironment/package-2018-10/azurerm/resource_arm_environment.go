// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmEnvironment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmEnvironmentCreate,
        Read: resourceArmEnvironmentRead,
        Update: resourceArmEnvironmentUpdate,
        Delete: resourceArmEnvironmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "environment_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "environment_setting_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "lab_account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "lab_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "password": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "resource_sets": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "resource_setting_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "vm_resource_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "unique_identifier": {
                Type: schema.TypeString,
                Optional: true,
            },

            "username": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "claimed_by_user_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "claimed_by_user_object_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "claimed_by_user_principal_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "is_claimed": {
                Type: schema.TypeBool,
                Computed: true,
            },

            "last_known_power_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "latest_operation_result": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "error_code": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "error_message": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "http_method": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "operation_url": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "request_uri": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "status": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "network_interface": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "private_ip_address": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "rdp_authority": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "ssh_authority": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "username": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "password_last_reset": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "total_usage": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmEnvironmentCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).environmentsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    environmentSettingName := d.Get("environment_setting_name").(string)
    labAccountName := d.Get("lab_account_name").(string)
    labName := d.Get("lab_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, labAccountName, labName, environmentSettingName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Environment %q (Environment Setting Name %q / Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", name, environmentSettingName, labName, labAccountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_environment", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    environmentId := d.Get("environment_id").(string)
    password := d.Get("password").(string)
    resourceSets := d.Get("resource_sets").([]interface{})
    uniqueIdentifier := d.Get("unique_identifier").(string)
    username := d.Get("username").(string)
    t := d.Get("tags").(map[string]interface{})

    environment := labservices.EnvironmentFragment{
        EnvironmentID: utils.String(environmentId),
        Location: utils.String(location),
        Password: utils.String(password),
        EnvironmentPropertiesFragment: &labservices.EnvironmentPropertiesFragment{
            ResourceSets: expandArmEnvironmentResourceSetFragment(resourceSets),
            UniqueIdentifier: utils.String(uniqueIdentifier),
        },
        Tags: tags.Expand(t),
        Username: utils.String(username),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, labAccountName, labName, environmentSettingName, name, environment); err != nil {
        return fmt.Errorf("Error creating Environment %q (Environment Setting Name %q / Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", name, environmentSettingName, labName, labAccountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, labAccountName, labName, environmentSettingName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Environment %q (Environment Setting Name %q / Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", name, environmentSettingName, labName, labAccountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Environment %q (Environment Setting Name %q / Lab Name %q / Lab Account Name %q / Resource Group %q) ID", name, environmentSettingName, labName, labAccountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmEnvironmentRead(d, meta)
}

func resourceArmEnvironmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).environmentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    labAccountName := id.Path["labaccounts"]
    labName := id.Path["labs"]
    environmentSettingName := id.Path["environmentsettings"]
    name := id.Path["environments"]

    resp, err := client.Get(ctx, resourceGroup, labAccountName, labName, environmentSettingName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Environment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Environment %q (Environment Setting Name %q / Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", name, environmentSettingName, labName, labAccountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if environmentPropertiesFragment := resp.EnvironmentPropertiesFragment; environmentPropertiesFragment != nil {
        d.Set("claimed_by_user_name", environmentPropertiesFragment.ClaimedByUserName)
        d.Set("claimed_by_user_object_id", environmentPropertiesFragment.ClaimedByUserObjectID)
        d.Set("claimed_by_user_principal_id", environmentPropertiesFragment.ClaimedByUserPrincipalID)
        d.Set("is_claimed", environmentPropertiesFragment.IsClaimed)
        d.Set("last_known_power_state", environmentPropertiesFragment.LastKnownPowerState)
        if err := d.Set("latest_operation_result", flattenArmEnvironmentLatestOperationResult(environmentPropertiesFragment.LatestOperationResult)); err != nil {
            return fmt.Errorf("Error setting `latest_operation_result`: %+v", err)
        }
        if err := d.Set("network_interface", flattenArmEnvironmentNetworkInterface(environmentPropertiesFragment.NetworkInterface)); err != nil {
            return fmt.Errorf("Error setting `network_interface`: %+v", err)
        }
        d.Set("password_last_reset", (environmentPropertiesFragment.PasswordLastReset).String())
        d.Set("provisioning_state", environmentPropertiesFragment.ProvisioningState)
        if err := d.Set("resource_sets", flattenArmEnvironmentResourceSetFragment(environmentPropertiesFragment.ResourceSets)); err != nil {
            return fmt.Errorf("Error setting `resource_sets`: %+v", err)
        }
        d.Set("total_usage", environmentPropertiesFragment.TotalUsage)
        d.Set("unique_identifier", environmentPropertiesFragment.UniqueIdentifier)
    }
    d.Set("environment_setting_name", environmentSettingName)
    d.Set("lab_account_name", labAccountName)
    d.Set("lab_name", labName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmEnvironmentUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).environmentsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    environmentId := d.Get("environment_id").(string)
    environmentSettingName := d.Get("environment_setting_name").(string)
    labAccountName := d.Get("lab_account_name").(string)
    labName := d.Get("lab_name").(string)
    password := d.Get("password").(string)
    resourceSets := d.Get("resource_sets").([]interface{})
    uniqueIdentifier := d.Get("unique_identifier").(string)
    username := d.Get("username").(string)
    t := d.Get("tags").(map[string]interface{})

    environment := labservices.EnvironmentFragment{
        EnvironmentID: utils.String(environmentId),
        Password: utils.String(password),
        EnvironmentPropertiesFragment: &labservices.EnvironmentPropertiesFragment{
            ResourceSets: expandArmEnvironmentResourceSetFragment(resourceSets),
            UniqueIdentifier: utils.String(uniqueIdentifier),
        },
        Tags: tags.Expand(t),
        Username: utils.String(username),
    }


    if _, err := client.Update(ctx, resourceGroup, labAccountName, labName, environmentSettingName, name, environment); err != nil {
        return fmt.Errorf("Error updating Environment %q (Environment Setting Name %q / Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", name, environmentSettingName, labName, labAccountName, resourceGroup, err)
    }

    return resourceArmEnvironmentRead(d, meta)
}

func resourceArmEnvironmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).environmentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    labAccountName := id.Path["labaccounts"]
    labName := id.Path["labs"]
    environmentSettingName := id.Path["environmentsettings"]
    name := id.Path["environments"]

    future, err := client.Delete(ctx, resourceGroup, labAccountName, labName, environmentSettingName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Environment %q (Environment Setting Name %q / Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", name, environmentSettingName, labName, labAccountName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Environment %q (Environment Setting Name %q / Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", name, environmentSettingName, labName, labAccountName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmEnvironmentResourceSetFragment(input []interface{}) *labservices.ResourceSetFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    vmResourceId := v["vm_resource_id"].(string)
    resourceSettingId := v["resource_setting_id"].(string)

    result := labservices.ResourceSetFragment{
        ResourceSettingID: utils.String(resourceSettingId),
        VMResourceID: utils.String(vmResourceId),
    }
    return &result
}


func flattenArmEnvironmentLatestOperationResult(input *labservices.LatestOperationResult) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if errorCode := input.ErrorCode; errorCode != nil {
        result["error_code"] = *errorCode
    }
    if errorMessage := input.ErrorMessage; errorMessage != nil {
        result["error_message"] = *errorMessage
    }
    if httpMethod := input.HTTPMethod; httpMethod != nil {
        result["http_method"] = *httpMethod
    }
    if operationUrl := input.OperationURL; operationUrl != nil {
        result["operation_url"] = *operationUrl
    }
    if requestUri := input.RequestURI; requestUri != nil {
        result["request_uri"] = *requestUri
    }
    if status := input.Status; status != nil {
        result["status"] = *status
    }

    return []interface{}{result}
}

func flattenArmEnvironmentNetworkInterface(input *labservices.NetworkInterface) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if privateIpAddress := input.PrivateIPAddress; privateIpAddress != nil {
        result["private_ip_address"] = *privateIpAddress
    }
    if rdpAuthority := input.RdpAuthority; rdpAuthority != nil {
        result["rdp_authority"] = *rdpAuthority
    }
    if sshAuthority := input.SSHAuthority; sshAuthority != nil {
        result["ssh_authority"] = *sshAuthority
    }
    if username := input.Username; username != nil {
        result["username"] = *username
    }

    return []interface{}{result}
}

func flattenArmEnvironmentResourceSetFragment(input *labservices.ResourceSetFragment) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if resourceSettingId := input.ResourceSettingID; resourceSettingId != nil {
        result["resource_setting_id"] = *resourceSettingId
    }
    if vmResourceId := input.VMResourceID; vmResourceId != nil {
        result["vm_resource_id"] = *vmResourceId
    }

    return []interface{}{result}
}
