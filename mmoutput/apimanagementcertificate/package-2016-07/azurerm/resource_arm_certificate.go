// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmCertificate() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmCertificateCreateUpdate,
        Read: resourceArmCertificateRead,
        Update: resourceArmCertificateCreateUpdate,
        Delete: resourceArmCertificateDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "certificate_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "data": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "password": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },
        },
    }
}

func resourceArmCertificateCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).certificatesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    certificateID := d.Get("certificate_id").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, certificateID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Certificate %q (Certificate %q / Resource Group %q): %+v", name, certificateID, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_certificate", *existing.ID)
        }
    }

    data := d.Get("data").(string)
    password := d.Get("password").(string)

    parameters := apimanagement.CertificateCreateOrUpdateParameters{
        Data: utils.String(data),
        Password: utils.String(password),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, certificateID, parameters); err != nil {
        return fmt.Errorf("Error creating Certificate %q (Certificate %q / Resource Group %q): %+v", name, certificateID, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, certificateID)
    if err != nil {
        return fmt.Errorf("Error retrieving Certificate %q (Certificate %q / Resource Group %q): %+v", name, certificateID, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Certificate %q (Certificate %q / Resource Group %q) ID", name, certificateID, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmCertificateRead(d, meta)
}

func resourceArmCertificateRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).certificatesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    certificateID := id.Path["certificates"]

    resp, err := client.Get(ctx, resourceGroup, name, certificateID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Certificate %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Certificate %q (Certificate %q / Resource Group %q): %+v", name, certificateID, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    d.Set("certificate_id", certificateID)

    return nil
}


func resourceArmCertificateDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).certificatesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["service"]
    certificateID := id.Path["certificates"]

    if _, err := client.Delete(ctx, resourceGroup, name, certificateID); err != nil {
        return fmt.Errorf("Error deleting Certificate %q (Certificate %q / Resource Group %q): %+v", name, certificateID, resourceGroup, err)
    }

    return nil
}
