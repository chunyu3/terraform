// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmWorkloadClassifier() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmWorkloadClassifierCreateUpdate,
        Read: resourceArmWorkloadClassifierRead,
        Update: resourceArmWorkloadClassifierCreateUpdate,
        Delete: resourceArmWorkloadClassifierDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "database_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "member_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "server_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "workload_group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "context": {
                Type: schema.TypeString,
                Optional: true,
            },

            "end_time": {
                Type: schema.TypeString,
                Optional: true,
            },

            "importance": {
                Type: schema.TypeString,
                Optional: true,
            },

            "label": {
                Type: schema.TypeString,
                Optional: true,
            },

            "start_time": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmWorkloadClassifierCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workloadClassifiersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    databaseName := d.Get("database_name").(string)
    serverName := d.Get("server_name").(string)
    workloadGroupName := d.Get("workload_group_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serverName, databaseName, workloadGroupName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Workload Classifier %q (Workload Group Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", name, workloadGroupName, databaseName, serverName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_workload_classifier", *existing.ID)
        }
    }

    context := d.Get("context").(string)
    endTime := d.Get("end_time").(string)
    importance := d.Get("importance").(string)
    label := d.Get("label").(string)
    memberName := d.Get("member_name").(string)
    startTime := d.Get("start_time").(string)

    parameters := sql.WorkloadClassifier{
        WorkloadClassifierProperties: &sql.WorkloadClassifierProperties{
            Context: utils.String(context),
            EndTime: utils.String(endTime),
            Importance: utils.String(importance),
            Label: utils.String(label),
            MemberName: utils.String(memberName),
            StartTime: utils.String(startTime),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, serverName, databaseName, workloadGroupName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Workload Classifier %q (Workload Group Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", name, workloadGroupName, databaseName, serverName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Workload Classifier %q (Workload Group Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", name, workloadGroupName, databaseName, serverName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serverName, databaseName, workloadGroupName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Workload Classifier %q (Workload Group Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", name, workloadGroupName, databaseName, serverName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Workload Classifier %q (Workload Group Name %q / Database Name %q / Server Name %q / Resource Group %q) ID", name, workloadGroupName, databaseName, serverName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmWorkloadClassifierRead(d, meta)
}

func resourceArmWorkloadClassifierRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workloadClassifiersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    databaseName := id.Path["databases"]
    workloadGroupName := id.Path["workloadGroups"]
    name := id.Path["workloadClassifiers"]

    resp, err := client.Get(ctx, resourceGroup, serverName, databaseName, workloadGroupName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Workload Classifier %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Workload Classifier %q (Workload Group Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", name, workloadGroupName, databaseName, serverName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if workloadClassifierProperties := resp.WorkloadClassifierProperties; workloadClassifierProperties != nil {
        d.Set("context", workloadClassifierProperties.Context)
        d.Set("end_time", workloadClassifierProperties.EndTime)
        d.Set("importance", workloadClassifierProperties.Importance)
        d.Set("label", workloadClassifierProperties.Label)
        d.Set("member_name", workloadClassifierProperties.MemberName)
        d.Set("start_time", workloadClassifierProperties.StartTime)
    }
    d.Set("database_name", databaseName)
    d.Set("server_name", serverName)
    d.Set("type", resp.Type)
    d.Set("workload_group_name", workloadGroupName)

    return nil
}


func resourceArmWorkloadClassifierDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).workloadClassifiersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    databaseName := id.Path["databases"]
    workloadGroupName := id.Path["workloadGroups"]
    name := id.Path["workloadClassifiers"]

    future, err := client.Delete(ctx, resourceGroup, serverName, databaseName, workloadGroupName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Workload Classifier %q (Workload Group Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", name, workloadGroupName, databaseName, serverName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Workload Classifier %q (Workload Group Name %q / Database Name %q / Server Name %q / Resource Group %q): %+v", name, workloadGroupName, databaseName, serverName, resourceGroup, err)
        }
    }

    return nil
}
