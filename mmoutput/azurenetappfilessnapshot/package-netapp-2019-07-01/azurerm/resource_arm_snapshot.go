// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmSnapshot() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmSnapshotCreate,
        Read: resourceArmSnapshotRead,
        Update: resourceArmSnapshotUpdate,
        Delete: resourceArmSnapshotDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "pool_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "snapshot_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "volume_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "file_system_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "created": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "snapshot_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmSnapshotCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).snapshotsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    poolName := d.Get("pool_name").(string)
    snapshotName := d.Get("snapshot_name").(string)
    volumeName := d.Get("volume_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName, poolName, volumeName, snapshotName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Snapshot (Snapshot Name %q / Volume Name %q / Pool Name %q / Account Name %q / Resource Group %q): %+v", snapshotName, volumeName, poolName, accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_snapshot", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    fileSystemId := d.Get("file_system_id").(string)
    t := d.Get("tags").(map[string]interface{})

    body := azurenetappfiles.Snapshot{
        Location: utils.String(location),
        SnapshotProperties: &azurenetappfiles.SnapshotProperties{
            FileSystemID: utils.String(fileSystemId),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Create(ctx, resourceGroup, accountName, poolName, volumeName, snapshotName, body)
    if err != nil {
        return fmt.Errorf("Error creating Snapshot (Snapshot Name %q / Volume Name %q / Pool Name %q / Account Name %q / Resource Group %q): %+v", snapshotName, volumeName, poolName, accountName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Snapshot (Snapshot Name %q / Volume Name %q / Pool Name %q / Account Name %q / Resource Group %q): %+v", snapshotName, volumeName, poolName, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, poolName, volumeName, snapshotName)
    if err != nil {
        return fmt.Errorf("Error retrieving Snapshot (Snapshot Name %q / Volume Name %q / Pool Name %q / Account Name %q / Resource Group %q): %+v", snapshotName, volumeName, poolName, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Snapshot (Snapshot Name %q / Volume Name %q / Pool Name %q / Account Name %q / Resource Group %q) ID", snapshotName, volumeName, poolName, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmSnapshotRead(d, meta)
}

func resourceArmSnapshotRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).snapshotsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["netAppAccounts"]
    poolName := id.Path["capacityPools"]
    volumeName := id.Path["volumes"]
    snapshotName := id.Path["snapshots"]

    resp, err := client.Get(ctx, resourceGroup, accountName, poolName, volumeName, snapshotName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Snapshot %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Snapshot (Snapshot Name %q / Volume Name %q / Pool Name %q / Account Name %q / Resource Group %q): %+v", snapshotName, volumeName, poolName, accountName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("account_name", accountName)
    if snapshotProperties := resp.SnapshotProperties; snapshotProperties != nil {
        d.Set("created", (snapshotProperties.Created).String())
        d.Set("file_system_id", snapshotProperties.FileSystemID)
        d.Set("provisioning_state", snapshotProperties.ProvisioningState)
        d.Set("snapshot_id", snapshotProperties.SnapshotID)
    }
    d.Set("pool_name", poolName)
    d.Set("snapshot_name", snapshotName)
    d.Set("type", resp.Type)
    d.Set("volume_name", volumeName)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmSnapshotUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).snapshotsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    fileSystemId := d.Get("file_system_id").(string)
    poolName := d.Get("pool_name").(string)
    snapshotName := d.Get("snapshot_name").(string)
    volumeName := d.Get("volume_name").(string)
    t := d.Get("tags").(map[string]interface{})

    body := azurenetappfiles.Snapshot{
        Location: utils.String(location),
        SnapshotProperties: &azurenetappfiles.SnapshotProperties{
            FileSystemID: utils.String(fileSystemId),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, accountName, poolName, volumeName, snapshotName, body); err != nil {
        return fmt.Errorf("Error updating Snapshot (Snapshot Name %q / Volume Name %q / Pool Name %q / Account Name %q / Resource Group %q): %+v", snapshotName, volumeName, poolName, accountName, resourceGroup, err)
    }

    return resourceArmSnapshotRead(d, meta)
}

func resourceArmSnapshotDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).snapshotsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["netAppAccounts"]
    poolName := id.Path["capacityPools"]
    volumeName := id.Path["volumes"]
    snapshotName := id.Path["snapshots"]

    future, err := client.Delete(ctx, resourceGroup, accountName, poolName, volumeName, snapshotName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Snapshot (Snapshot Name %q / Volume Name %q / Pool Name %q / Account Name %q / Resource Group %q): %+v", snapshotName, volumeName, poolName, accountName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Snapshot (Snapshot Name %q / Volume Name %q / Pool Name %q / Account Name %q / Resource Group %q): %+v", snapshotName, volumeName, poolName, accountName, resourceGroup, err)
        }
    }

    return nil
}
