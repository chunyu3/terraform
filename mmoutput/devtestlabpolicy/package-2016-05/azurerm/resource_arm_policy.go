// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPolicy() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPolicyCreate,
        Read: resourceArmPolicyRead,
        Update: resourceArmPolicyUpdate,
        Delete: resourceArmPolicyDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "lab_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "policy_set_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "evaluator_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(devtestlab.AllowedValuesPolicy),
                    string(devtestlab.MaxValuePolicy),
                }, false),
                Default: string(devtestlab.AllowedValuesPolicy),
            },

            "fact_data": {
                Type: schema.TypeString,
                Optional: true,
            },

            "fact_name": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(devtestlab.UserOwnedLabVmCount),
                    string(devtestlab.UserOwnedLabPremiumVmCount),
                    string(devtestlab.LabVmCount),
                    string(devtestlab.LabPremiumVmCount),
                    string(devtestlab.LabVmSize),
                    string(devtestlab.GalleryImage),
                    string(devtestlab.UserOwnedLabVmCountInSubnet),
                    string(devtestlab.LabTargetCost),
                }, false),
                Default: string(devtestlab.UserOwnedLabVmCount),
            },

            "location": azure.SchemaLocation(),

            "status": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(devtestlab.Enabled),
                    string(devtestlab.Disabled),
                }, false),
                Default: string(devtestlab.Enabled),
            },

            "tags": tags.Schema(),

            "threshold": {
                Type: schema.TypeString,
                Optional: true,
            },

            "unique_identifier": {
                Type: schema.TypeString,
                Optional: true,
            },

            "created_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmPolicyCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).policiesClient
    ctx, cancel := timeouts.ForCreate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    labName := d.Get("lab_name").(string)
    name := d.Get("name").(string)
    name := d.Get("policy_set_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, labName, name, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Policy (Name %q / Policy Set Name %q / Lab Name %q / Resource Group %q): %+v", name, name, labName, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_policy", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    description := d.Get("description").(string)
    evaluatorType := d.Get("evaluator_type").(string)
    factData := d.Get("fact_data").(string)
    factName := d.Get("fact_name").(string)
    status := d.Get("status").(string)
    threshold := d.Get("threshold").(string)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    tags := d.Get("tags").(map[string]interface{})

    policy := devtestlab.PolicyFragment{
        Location: utils.String(location),
        PolicyPropertiesFragment: &devtestlab.PolicyPropertiesFragment{
            Description: utils.String(description),
            EvaluatorType: devtestlab.PolicyEvaluatorType(evaluatorType),
            FactData: utils.String(factData),
            FactName: devtestlab.PolicyFactName(factName),
            Status: devtestlab.PolicyStatus(status),
            Threshold: utils.String(threshold),
            UniqueIdentifier: utils.String(uniqueIdentifier),
        },
        Tags: tags.Expand(tags),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroupName, labName, name, name, policy); err != nil {
        return fmt.Errorf("Error creating Policy (Name %q / Policy Set Name %q / Lab Name %q / Resource Group %q): %+v", name, name, labName, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, labName, name, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Policy (Name %q / Policy Set Name %q / Lab Name %q / Resource Group %q): %+v", name, name, labName, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Policy (Name %q / Policy Set Name %q / Lab Name %q / Resource Group %q) ID", name, name, labName, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmPolicyRead(d, meta)
}

func resourceArmPolicyRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).policiesClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    labName := id.Path["labs"]
    name := id.Path["policysets"]
    name := id.Path["policies"]

    resp, err := client.Get(ctx, resourceGroupName, labName, name, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Policy %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Policy (Name %q / Policy Set Name %q / Lab Name %q / Resource Group %q): %+v", name, name, labName, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if policyPropertiesFragment := resp.PolicyPropertiesFragment; policyPropertiesFragment != nil {
        d.Set("created_date", (policyPropertiesFragment.CreatedDate).String())
        d.Set("description", policyPropertiesFragment.Description)
        d.Set("evaluator_type", string(policyPropertiesFragment.EvaluatorType))
        d.Set("fact_data", policyPropertiesFragment.FactData)
        d.Set("fact_name", string(policyPropertiesFragment.FactName))
        d.Set("provisioning_state", policyPropertiesFragment.ProvisioningState)
        d.Set("status", string(policyPropertiesFragment.Status))
        d.Set("threshold", policyPropertiesFragment.Threshold)
        d.Set("unique_identifier", policyPropertiesFragment.UniqueIdentifier)
    }
    d.Set("id", resp.ID)
    d.Set("lab_name", labName)
    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("policy_set_name", name)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmPolicyUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).policiesClient
    ctx, cancel := timeouts.ForUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

      resourceGroupName := d.Get("resource_group").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    description := d.Get("description").(string)
    evaluatorType := d.Get("evaluator_type").(string)
    factData := d.Get("fact_data").(string)
    factName := d.Get("fact_name").(string)
    labName := d.Get("lab_name").(string)
    name := d.Get("name").(string)
    name := d.Get("policy_set_name").(string)
    status := d.Get("status").(string)
    threshold := d.Get("threshold").(string)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    tags := d.Get("tags").(map[string]interface{})

    policy := devtestlab.PolicyFragment{
        Location: utils.String(location),
        PolicyPropertiesFragment: &devtestlab.PolicyPropertiesFragment{
            Description: utils.String(description),
            EvaluatorType: devtestlab.PolicyEvaluatorType(evaluatorType),
            FactData: utils.String(factData),
            FactName: devtestlab.PolicyFactName(factName),
            Status: devtestlab.PolicyStatus(status),
            Threshold: utils.String(threshold),
            UniqueIdentifier: utils.String(uniqueIdentifier),
        },
        Tags: tags.Expand(tags),
    }


    if _, err := client.Update(ctx, resourceGroupName, labName, name, name, policy); err != nil {
        return fmt.Errorf("Error updating Policy (Name %q / Policy Set Name %q / Lab Name %q / Resource Group %q): %+v", name, name, labName, resourceGroupName, err)
    }

    return resourceArmPolicyRead(d, meta)
}

func resourceArmPolicyDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).policiesClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    labName := id.Path["labs"]
    name := id.Path["policysets"]
    name := id.Path["policies"]

    if _, err := client.Delete(ctx, resourceGroupName, labName, name, name); err != nil {
        return fmt.Errorf("Error deleting Policy (Name %q / Policy Set Name %q / Lab Name %q / Resource Group %q): %+v", name, name, labName, resourceGroupName, err)
    }

    return nil
}
