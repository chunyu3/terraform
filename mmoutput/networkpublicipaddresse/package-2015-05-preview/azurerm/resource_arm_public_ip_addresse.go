// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPublicIpAddresse() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPublicIpAddresseCreateUpdate,
        Read: resourceArmPublicIpAddresseRead,
        Update: resourceArmPublicIpAddresseCreateUpdate,
        Delete: resourceArmPublicIpAddresseDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "public_ipallocation_method": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.Static),
                    string(network.Dynamic),
                }, false),
            },

            "dns_settings": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "domain_name_label": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "fqdn": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "reverse_fqdn": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "idle_timeout_in_minutes": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "ip_address": {
                Type: schema.TypeString,
                Optional: true,
            },

            "ip_configuration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "resource_guid": {
                Type: schema.TypeString,
                Optional: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmPublicIpAddresseCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).publicIpAddressesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Public Ip Addresse %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_public_ip_addresse", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    dnsSettings := d.Get("dns_settings").([]interface{})
    etag := d.Get("etag").(string)
    idleTimeoutInMinutes := d.Get("idle_timeout_in_minutes").(int)
    ipAddress := d.Get("ip_address").(string)
    ipConfiguration := d.Get("ip_configuration").([]interface{})
    publicIpallocationMethod := d.Get("public_ipallocation_method").(string)
    resourceGuid := d.Get("resource_guid").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := network.PublicIpAddress{
        Etag: utils.String(etag),
        Location: utils.String(location),
        PublicIpAddressPropertiesFormat: &network.PublicIpAddressPropertiesFormat{
            DNSSettings: expandArmPublicIpAddressePublicIpAddressDnsSettings(dnsSettings),
            IdleTimeoutInMinutes: utils.Int32(int32(idleTimeoutInMinutes)),
            IPAddress: utils.String(ipAddress),
            IPConfiguration: expandArmPublicIpAddresseSubResource(ipConfiguration),
            PublicIPAllocationMethod: network.IpAllocationMethod(publicIpallocationMethod),
            ResourceGUID: utils.String(resourceGuid),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Public Ip Addresse %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Public Ip Addresse %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Public Ip Addresse %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Public Ip Addresse %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmPublicIpAddresseRead(d, meta)
}

func resourceArmPublicIpAddresseRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).publicIpAddressesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["publicIPAddresses"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Public Ip Addresse %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Public Ip Addresse %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if publicIpAddressPropertiesFormat := resp.PublicIpAddressPropertiesFormat; publicIpAddressPropertiesFormat != nil {
        if err := d.Set("dns_settings", flattenArmPublicIpAddressePublicIpAddressDnsSettings(publicIpAddressPropertiesFormat.DNSSettings)); err != nil {
            return fmt.Errorf("Error setting `dns_settings`: %+v", err)
        }
        d.Set("idle_timeout_in_minutes", int(*publicIpAddressPropertiesFormat.IdleTimeoutInMinutes))
        d.Set("ip_address", publicIpAddressPropertiesFormat.IPAddress)
        if err := d.Set("ip_configuration", flattenArmPublicIpAddresseSubResource(publicIpAddressPropertiesFormat.IPConfiguration)); err != nil {
            return fmt.Errorf("Error setting `ip_configuration`: %+v", err)
        }
        d.Set("provisioning_state", publicIpAddressPropertiesFormat.ProvisioningState)
        d.Set("public_ipallocation_method", string(publicIpAddressPropertiesFormat.PublicIPAllocationMethod))
        d.Set("resource_guid", publicIpAddressPropertiesFormat.ResourceGUID)
    }
    d.Set("etag", resp.Etag)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmPublicIpAddresseDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).publicIpAddressesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["publicIPAddresses"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Public Ip Addresse %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Public Ip Addresse %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmPublicIpAddressePublicIpAddressDnsSettings(input []interface{}) *network.PublicIpAddressDnsSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    domainNameLabel := v["domain_name_label"].(string)
    fqdn := v["fqdn"].(string)
    reverseFqdn := v["reverse_fqdn"].(string)

    result := network.PublicIpAddressDnsSettings{
        DomainNameLabel: utils.String(domainNameLabel),
        Fqdn: utils.String(fqdn),
        ReverseFqdn: utils.String(reverseFqdn),
    }
    return &result
}

func expandArmPublicIpAddresseSubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(id),
    }
    return &result
}


func flattenArmPublicIpAddressePublicIpAddressDnsSettings(input *network.PublicIpAddressDnsSettings) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if domainNameLabel := input.DomainNameLabel; domainNameLabel != nil {
        result["domain_name_label"] = *domainNameLabel
    }
    if fqdn := input.Fqdn; fqdn != nil {
        result["fqdn"] = *fqdn
    }
    if reverseFqdn := input.ReverseFqdn; reverseFqdn != nil {
        result["reverse_fqdn"] = *reverseFqdn
    }

    return []interface{}{result}
}

func flattenArmPublicIpAddresseSubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}
