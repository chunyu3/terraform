// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDatabasePrincipalAssignment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDatabasePrincipalAssignmentCreateUpdate,
        Read: resourceArmDatabasePrincipalAssignmentRead,
        Update: resourceArmDatabasePrincipalAssignmentCreateUpdate,
        Delete: resourceArmDatabasePrincipalAssignmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "cluster_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "database_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "principal_assignment_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),
        },
    }
}

func resourceArmDatabasePrincipalAssignmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasePrincipalAssignmentsClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    clusterName := d.Get("cluster_name").(string)
    databaseName := d.Get("database_name").(string)
    name := d.Get("principal_assignment_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, clusterName, databaseName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Database Principal Assignment (Principal Assignment Name %q / Database Name %q / Cluster Name %q / Resource Group %q): %+v", name, databaseName, clusterName, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_database_principal_assignment", *existing.ID)
        }
    }


    parameters := kusto.DatabasePrincipalAssignment{
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroupName, clusterName, databaseName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Database Principal Assignment (Principal Assignment Name %q / Database Name %q / Cluster Name %q / Resource Group %q): %+v", name, databaseName, clusterName, resourceGroupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Database Principal Assignment (Principal Assignment Name %q / Database Name %q / Cluster Name %q / Resource Group %q): %+v", name, databaseName, clusterName, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, clusterName, databaseName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Database Principal Assignment (Principal Assignment Name %q / Database Name %q / Cluster Name %q / Resource Group %q): %+v", name, databaseName, clusterName, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Database Principal Assignment (Principal Assignment Name %q / Database Name %q / Cluster Name %q / Resource Group %q) ID", name, databaseName, clusterName, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmDatabasePrincipalAssignmentRead(d, meta)
}

func resourceArmDatabasePrincipalAssignmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasePrincipalAssignmentsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    clusterName := id.Path["clusters"]
    databaseName := id.Path["databases"]
    name := id.Path["principalAssignments"]

    resp, err := client.Get(ctx, resourceGroupName, clusterName, databaseName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Database Principal Assignment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Database Principal Assignment (Principal Assignment Name %q / Database Name %q / Cluster Name %q / Resource Group %q): %+v", name, databaseName, clusterName, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    d.Set("cluster_name", clusterName)
    d.Set("database_name", databaseName)
    d.Set("principal_assignment_name", name)

    return nil
}


func resourceArmDatabasePrincipalAssignmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasePrincipalAssignmentsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    clusterName := id.Path["clusters"]
    databaseName := id.Path["databases"]
    name := id.Path["principalAssignments"]

    future, err := client.Delete(ctx, resourceGroupName, clusterName, databaseName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Database Principal Assignment (Principal Assignment Name %q / Database Name %q / Cluster Name %q / Resource Group %q): %+v", name, databaseName, clusterName, resourceGroupName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Database Principal Assignment (Principal Assignment Name %q / Database Name %q / Cluster Name %q / Resource Group %q): %+v", name, databaseName, clusterName, resourceGroupName, err)
        }
    }

    return nil
}
