// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmApi() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmApiCreate,
        Read: resourceArmApiRead,
        Update: resourceArmApiUpdate,
        Delete: resourceArmApiDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "api_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "path": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "api_revision": {
                Type: schema.TypeString,
                Optional: true,
            },

            "api_revision_description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "api_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.SoapToRest),
                    string(apimanagement.SoapPassThrough),
                }, false),
                Default: string(apimanagement.SoapToRest),
            },

            "api_version": {
                Type: schema.TypeString,
                Optional: true,
            },

            "api_version_description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "api_version_set": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "description": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "version_header_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "version_query_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "versioning_scheme": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(apimanagement.Segment),
                                string(apimanagement.Query),
                                string(apimanagement.Header),
                            }, false),
                            Default: string(apimanagement.Segment),
                        },
                    },
                },
            },

            "api_version_set_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "authentication_settings": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "o_auth2": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "authorization_server_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "scope": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "openid": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "bearer_token_sending_methods": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                            ValidateFunc: validation.StringInSlice([]string{
                                                string(apimanagement.authorizationHeader),
                                                string(apimanagement.query),
                                           }, false),
                                        },
                                    },
                                    "openid_provider_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "subscription_key_required": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                    },
                },
            },

            "content_format": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.wadl-xml),
                    string(apimanagement.wadl-link-json),
                    string(apimanagement.swagger-json),
                    string(apimanagement.swagger-link-json),
                    string(apimanagement.wsdl),
                    string(apimanagement.wsdl-link),
                }, false),
                Default: string(apimanagement.wadl-xml),
            },

            "content_value": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "display_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "protocols": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                    ValidateFunc: validation.StringInSlice([]string{
                        string(apimanagement.http),
                        string(apimanagement.https),
                   }, false),
                },
            },

            "service_url": {
                Type: schema.TypeString,
                Optional: true,
            },

            "subscription_key_parameter_names": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "header": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "query": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.http),
                    string(apimanagement.soap),
                }, false),
                Default: string(apimanagement.http),
            },

            "wsdl_selector": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "wsdl_endpoint_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "wsdl_service_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "is_current": {
                Type: schema.TypeBool,
                Computed: true,
            },

            "is_online": {
                Type: schema.TypeBool,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmApiCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    apiID := d.Get("api_id").(string)
    serviceName := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serviceName, apiID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Api (Api %q / Service Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_api", *existing.ID)
        }
    }

    apiRevision := d.Get("api_revision").(string)
    apiRevisionDescription := d.Get("api_revision_description").(string)
    apiType := d.Get("api_type").(string)
    apiVersion := d.Get("api_version").(string)
    apiVersionDescription := d.Get("api_version_description").(string)
    apiVersionSet := d.Get("api_version_set").([]interface{})
    apiVersionSetId := d.Get("api_version_set_id").(string)
    authenticationSettings := d.Get("authentication_settings").([]interface{})
    contentFormat := d.Get("content_format").(string)
    contentValue := d.Get("content_value").(string)
    description := d.Get("description").(string)
    displayName := d.Get("display_name").(string)
    path := d.Get("path").(string)
    protocols := d.Get("protocols").([]interface{})
    serviceUrl := d.Get("service_url").(string)
    subscriptionKeyParameterNames := d.Get("subscription_key_parameter_names").([]interface{})
    type := d.Get("type").(string)
    wsdlSelector := d.Get("wsdl_selector").([]interface{})

    parameters := apimanagement.ApiCreateOrUpdateParameter{
        ApiCreateOrUpdateProperties: &apimanagement.ApiCreateOrUpdateProperties{
            ApiRevision: utils.String(apiRevision),
            ApiRevisionDescription: utils.String(apiRevisionDescription),
            ApiType: apimanagement.SoapApiType(apiType),
            ApiVersion: utils.String(apiVersion),
            ApiVersionDescription: utils.String(apiVersionDescription),
            ApiVersionSet: expandArmApiApiVersionSetContractDetails(apiVersionSet),
            ApiVersionSetID: utils.String(apiVersionSetId),
            AuthenticationSettings: expandArmApiAuthenticationSettingsContract(authenticationSettings),
            ContentFormat: apimanagement.ContentFormat(contentFormat),
            ContentValue: utils.String(contentValue),
            Description: utils.String(description),
            DisplayName: utils.String(displayName),
            Path: utils.String(path),
            Protocols: expandArmApi(protocols),
            ServiceURL: utils.String(serviceUrl),
            SubscriptionKeyParameterNames: expandArmApiSubscriptionKeyParameterNamesContract(subscriptionKeyParameterNames),
            Type: apimanagement.ApiType(type),
            WsdlSelector: expandArmApiApiCreateOrUpdateProperties_wsdlSelector(wsdlSelector),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, serviceName, apiID, parameters); err != nil {
        return fmt.Errorf("Error creating Api (Api %q / Service Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serviceName, apiID)
    if err != nil {
        return fmt.Errorf("Error retrieving Api (Api %q / Service Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Api (Api %q / Service Name %q / Resource Group %q) ID", apiID, serviceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmApiRead(d, meta)
}

func resourceArmApiRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    apiID := id.Path["apis"]

    resp, err := client.Get(ctx, resourceGroup, serviceName, apiID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Api %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Api (Api %q / Service Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("api_id", apiID)
    if apiCreateOrUpdateProperties := resp.ApiCreateOrUpdateProperties; apiCreateOrUpdateProperties != nil {
        d.Set("api_revision", apiCreateOrUpdateProperties.ApiRevision)
        d.Set("api_revision_description", apiCreateOrUpdateProperties.ApiRevisionDescription)
        d.Set("api_version", apiCreateOrUpdateProperties.ApiVersion)
        d.Set("api_version_description", apiCreateOrUpdateProperties.ApiVersionDescription)
        if err := d.Set("api_version_set", flattenArmApiApiVersionSetContractDetails(apiCreateOrUpdateProperties.ApiVersionSet)); err != nil {
            return fmt.Errorf("Error setting `api_version_set`: %+v", err)
        }
        d.Set("api_version_set_id", apiCreateOrUpdateProperties.ApiVersionSetID)
        if err := d.Set("authentication_settings", flattenArmApiAuthenticationSettingsContract(apiCreateOrUpdateProperties.AuthenticationSettings)); err != nil {
            return fmt.Errorf("Error setting `authentication_settings`: %+v", err)
        }
        d.Set("description", apiCreateOrUpdateProperties.Description)
        d.Set("display_name", apiCreateOrUpdateProperties.DisplayName)
        d.Set("is_current", apiCreateOrUpdateProperties.IsCurrent)
        d.Set("is_online", apiCreateOrUpdateProperties.IsOnline)
        d.Set("path", apiCreateOrUpdateProperties.Path)
        if err := d.Set("protocols", flattenArmApi(string(apiCreateOrUpdateProperties.Protocols))); err != nil {
            return fmt.Errorf("Error setting `protocols`: %+v", err)
        }
        d.Set("service_url", apiCreateOrUpdateProperties.ServiceURL)
        if err := d.Set("subscription_key_parameter_names", flattenArmApiSubscriptionKeyParameterNamesContract(apiCreateOrUpdateProperties.SubscriptionKeyParameterNames)); err != nil {
            return fmt.Errorf("Error setting `subscription_key_parameter_names`: %+v", err)
        }
        d.Set("type", string(apiCreateOrUpdateProperties.Type))
    }
    d.Set("service_name", serviceName)
    d.Set("type", resp.Type)
    d.Set("type", resp.Type)
    d.Set("type", resp.Type)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmApiUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    apiID := d.Get("api_id").(string)
    apiRevision := d.Get("api_revision").(string)
    apiRevisionDescription := d.Get("api_revision_description").(string)
    apiType := d.Get("api_type").(string)
    apiVersion := d.Get("api_version").(string)
    apiVersionDescription := d.Get("api_version_description").(string)
    apiVersionSet := d.Get("api_version_set").([]interface{})
    apiVersionSetId := d.Get("api_version_set_id").(string)
    authenticationSettings := d.Get("authentication_settings").([]interface{})
    contentFormat := d.Get("content_format").(string)
    contentValue := d.Get("content_value").(string)
    description := d.Get("description").(string)
    displayName := d.Get("display_name").(string)
    path := d.Get("path").(string)
    protocols := d.Get("protocols").([]interface{})
    serviceName := d.Get("service_name").(string)
    serviceUrl := d.Get("service_url").(string)
    subscriptionKeyParameterNames := d.Get("subscription_key_parameter_names").([]interface{})
    type := d.Get("type").(string)
    wsdlSelector := d.Get("wsdl_selector").([]interface{})

    parameters := apimanagement.ApiCreateOrUpdateParameter{
        ApiCreateOrUpdateProperties: &apimanagement.ApiCreateOrUpdateProperties{
            ApiRevision: utils.String(apiRevision),
            ApiRevisionDescription: utils.String(apiRevisionDescription),
            ApiType: apimanagement.SoapApiType(apiType),
            ApiVersion: utils.String(apiVersion),
            ApiVersionDescription: utils.String(apiVersionDescription),
            ApiVersionSet: expandArmApiApiVersionSetContractDetails(apiVersionSet),
            ApiVersionSetID: utils.String(apiVersionSetId),
            AuthenticationSettings: expandArmApiAuthenticationSettingsContract(authenticationSettings),
            ContentFormat: apimanagement.ContentFormat(contentFormat),
            ContentValue: utils.String(contentValue),
            Description: utils.String(description),
            DisplayName: utils.String(displayName),
            Path: utils.String(path),
            Protocols: expandArmApi(protocols),
            ServiceURL: utils.String(serviceUrl),
            SubscriptionKeyParameterNames: expandArmApiSubscriptionKeyParameterNamesContract(subscriptionKeyParameterNames),
            Type: apimanagement.ApiType(type),
            WsdlSelector: expandArmApiApiCreateOrUpdateProperties_wsdlSelector(wsdlSelector),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, serviceName, apiID, parameters); err != nil {
        return fmt.Errorf("Error updating Api (Api %q / Service Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
    }

    return resourceArmApiRead(d, meta)
}

func resourceArmApiDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    apiID := id.Path["apis"]

    if _, err := client.Delete(ctx, resourceGroup, serviceName, apiID); err != nil {
        return fmt.Errorf("Error deleting Api (Api %q / Service Name %q / Resource Group %q): %+v", apiID, serviceName, resourceGroup, err)
    }

    return nil
}

func expandArmApiApiVersionSetContractDetails(input []interface{}) *apimanagement.ApiVersionSetContractDetails {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    description := v["description"].(string)
    versioningScheme := v["versioning_scheme"].(string)
    versionQueryName := v["version_query_name"].(string)
    versionHeaderName := v["version_header_name"].(string)

    result := apimanagement.ApiVersionSetContractDetails{
        Description: utils.String(description),
        ID: utils.String(id),
        VersionHeaderName: utils.String(versionHeaderName),
        VersionQueryName: utils.String(versionQueryName),
        VersioningScheme: apimanagement.(versioningScheme),
    }
    return &result
}

func expandArmApiAuthenticationSettingsContract(input []interface{}) *apimanagement.AuthenticationSettingsContract {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    oAuth2 := v["o_auth2"].([]interface{})
    openid := v["openid"].([]interface{})
    subscriptionKeyRequired := v["subscription_key_required"].(bool)

    result := apimanagement.AuthenticationSettingsContract{
        OAuth2: expandArmApiOAuth2AuthenticationSettingsContract(oAuth2),
        Openid: expandArmApiOpenIdAuthenticationSettingsContract(openid),
        SubscriptionKeyRequired: utils.Bool(subscriptionKeyRequired),
    }
    return &result
}

func expandArmApi(input []interface{}) *[]apimanagement. {
    results := make([]apimanagement., 0)
    for _, item := range input {
        v := item.(string)
        result := apimanagement.(v)
        results = append(results, result)
    }
    return &results
}

func expandArmApiSubscriptionKeyParameterNamesContract(input []interface{}) *apimanagement.SubscriptionKeyParameterNamesContract {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    header := v["header"].(string)
    query := v["query"].(string)

    result := apimanagement.SubscriptionKeyParameterNamesContract{
        Header: utils.String(header),
        Query: utils.String(query),
    }
    return &result
}

func expandArmApiApiCreateOrUpdateProperties_wsdlSelector(input []interface{}) *apimanagement.ApiCreateOrUpdateProperties_wsdlSelector {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    wsdlServiceName := v["wsdl_service_name"].(string)
    wsdlEndpointName := v["wsdl_endpoint_name"].(string)

    result := apimanagement.ApiCreateOrUpdateProperties_wsdlSelector{
        WsdlEndpointName: utils.String(wsdlEndpointName),
        WsdlServiceName: utils.String(wsdlServiceName),
    }
    return &result
}

func expandArmApiOAuth2AuthenticationSettingsContract(input []interface{}) *apimanagement.OAuth2AuthenticationSettingsContract {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    authorizationServerId := v["authorization_server_id"].(string)
    scope := v["scope"].(string)

    result := apimanagement.OAuth2AuthenticationSettingsContract{
        AuthorizationServerID: utils.String(authorizationServerId),
        Scope: utils.String(scope),
    }
    return &result
}

func expandArmApiOpenIdAuthenticationSettingsContract(input []interface{}) *apimanagement.OpenIdAuthenticationSettingsContract {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    openidProviderId := v["openid_provider_id"].(string)
    bearerTokenSendingMethods := v["bearer_token_sending_methods"].([]interface{})

    result := apimanagement.OpenIdAuthenticationSettingsContract{
        BearerTokenSendingMethods: expandArmApi(bearerTokenSendingMethods),
        OpenidProviderID: utils.String(openidProviderId),
    }
    return &result
}


func flattenArmApiApiVersionSetContractDetails(input *apimanagement.ApiVersionSetContractDetails) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if description := input.Description; description != nil {
        result["description"] = *description
    }
    if versionHeaderName := input.VersionHeaderName; versionHeaderName != nil {
        result["version_header_name"] = *versionHeaderName
    }
    if versionQueryName := input.VersionQueryName; versionQueryName != nil {
        result["version_query_name"] = *versionQueryName
    }
    result["versioning_scheme"] = string(input.VersioningScheme)

    return []interface{}{result}
}

func flattenArmApiAuthenticationSettingsContract(input *apimanagement.AuthenticationSettingsContract) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["o_auth2"] = flattenArmApiOAuth2AuthenticationSettingsContract(input.OAuth2)
    result["openid"] = flattenArmApiOpenIdAuthenticationSettingsContract(input.Openid)
    if subscriptionKeyRequired := input.SubscriptionKeyRequired; subscriptionKeyRequired != nil {
        result["subscription_key_required"] = *subscriptionKeyRequired
    }

    return []interface{}{result}
}

func flattenArmApi(input *[]apimanagement.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}

func flattenArmApiSubscriptionKeyParameterNamesContract(input *apimanagement.SubscriptionKeyParameterNamesContract) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if header := input.Header; header != nil {
        result["header"] = *header
    }
    if query := input.Query; query != nil {
        result["query"] = *query
    }

    return []interface{}{result}
}

func flattenArmApiOAuth2AuthenticationSettingsContract(input *apimanagement.OAuth2AuthenticationSettingsContract) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if authorizationServerId := input.AuthorizationServerID; authorizationServerId != nil {
        result["authorization_server_id"] = *authorizationServerId
    }
    if scope := input.Scope; scope != nil {
        result["scope"] = *scope
    }

    return []interface{}{result}
}

func flattenArmApiOpenIdAuthenticationSettingsContract(input *apimanagement.OpenIdAuthenticationSettingsContract) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["bearer_token_sending_methods"] = flattenArmApi(string(input.BearerTokenSendingMethods))
    if openidProviderId := input.OpenidProviderID; openidProviderId != nil {
        result["openid_provider_id"] = *openidProviderId
    }

    return []interface{}{result}
}
