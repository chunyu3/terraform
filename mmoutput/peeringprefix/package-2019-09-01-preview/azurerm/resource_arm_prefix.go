// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPrefix() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPrefixCreateUpdate,
        Read: resourceArmPrefixRead,
        Update: resourceArmPrefixCreateUpdate,
        Delete: resourceArmPrefixDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "peering_service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "prefix_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "prefix": {
                Type: schema.TypeString,
                Optional: true,
            },

            "error_message": {
                Type: schema.TypeString,
                Computed: true,
            },

            "events": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "event_description": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "event_level": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "event_summary": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "event_timestamp": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "event_type": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "learned_type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "prefix_validation_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmPrefixCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).prefixesClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    peeringServiceName := d.Get("peering_service_name").(string)
    name := d.Get("prefix_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, peeringServiceName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Prefix (Prefix Name %q / Peering Service Name %q / Resource Group %q): %+v", name, peeringServiceName, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_prefix", *existing.ID)
        }
    }

    prefix := d.Get("prefix").(string)

    peeringServicePrefix := peering.ServicePrefix{
        ServicePrefixProperties: &peering.ServicePrefixProperties{
            Prefix: utils.String(prefix),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroupName, peeringServiceName, name, peeringServicePrefix); err != nil {
        return fmt.Errorf("Error creating Prefix (Prefix Name %q / Peering Service Name %q / Resource Group %q): %+v", name, peeringServiceName, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, peeringServiceName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Prefix (Prefix Name %q / Peering Service Name %q / Resource Group %q): %+v", name, peeringServiceName, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Prefix (Prefix Name %q / Peering Service Name %q / Resource Group %q) ID", name, peeringServiceName, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmPrefixRead(d, meta)
}

func resourceArmPrefixRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).prefixesClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    peeringServiceName := id.Path["peeringServices"]
    name := id.Path["prefixes"]

    resp, err := client.Get(ctx, resourceGroupName, peeringServiceName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Prefix %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Prefix (Prefix Name %q / Peering Service Name %q / Resource Group %q): %+v", name, peeringServiceName, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    if servicePrefixProperties := resp.ServicePrefixProperties; servicePrefixProperties != nil {
        d.Set("error_message", servicePrefixProperties.ErrorMessage)
        if err := d.Set("events", flattenArmPrefixServicePrefixEvent(servicePrefixProperties.Events)); err != nil {
            return fmt.Errorf("Error setting `events`: %+v", err)
        }
        d.Set("learned_type", string(servicePrefixProperties.LearnedType))
        d.Set("prefix", servicePrefixProperties.Prefix)
        d.Set("prefix_validation_state", string(servicePrefixProperties.PrefixValidationState))
        d.Set("provisioning_state", string(servicePrefixProperties.ProvisioningState))
    }
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    d.Set("peering_service_name", peeringServiceName)
    d.Set("prefix_name", name)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmPrefixDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).prefixesClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    peeringServiceName := id.Path["peeringServices"]
    name := id.Path["prefixes"]

    if _, err := client.Delete(ctx, resourceGroupName, peeringServiceName, name); err != nil {
        return fmt.Errorf("Error deleting Prefix (Prefix Name %q / Peering Service Name %q / Resource Group %q): %+v", name, peeringServiceName, resourceGroupName, err)
    }

    return nil
}


func flattenArmPrefixServicePrefixEvent(input *[]peering.ServicePrefixEvent) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if eventDescription := item.EventDescription; eventDescription != nil {
            v["event_description"] = *eventDescription
        }
        if eventLevel := item.EventLevel; eventLevel != nil {
            v["event_level"] = *eventLevel
        }
        if eventSummary := item.EventSummary; eventSummary != nil {
            v["event_summary"] = *eventSummary
        }
        if eventTimestamp := item.EventTimestamp; eventTimestamp != nil {
            v["event_timestamp"] = (*eventTimestamp).String()
        }
        if eventType := item.EventType; eventType != nil {
            v["event_type"] = *eventType
        }

        results = append(results, v)
    }

    return results
}
