// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmVirtualNetworkPeering() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmVirtualNetworkPeeringCreateUpdate,
        Read: resourceArmVirtualNetworkPeeringRead,
        Update: resourceArmVirtualNetworkPeeringCreateUpdate,
        Delete: resourceArmVirtualNetworkPeeringDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "virtual_network_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "virtual_network_peering_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "allow_forwarded_traffic": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "allow_gateway_transit": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "allow_virtual_network_access": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "peering_state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.Initiated),
                    string(network.Connected),
                    string(network.Disconnected),
                }, false),
                Default: string(network.Initiated),
            },

            "remote_virtual_network": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "use_remote_gateways": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmVirtualNetworkPeeringCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkPeeringsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    virtualNetworkName := d.Get("virtual_network_name").(string)
    virtualNetworkPeeringName := d.Get("virtual_network_peering_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, virtualNetworkName, virtualNetworkPeeringName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Virtual Network Peering (Virtual Network Peering Name %q / Virtual Network Name %q / Resource Group %q): %+v", virtualNetworkPeeringName, virtualNetworkName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_virtual_network_peering", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    name := d.Get("name").(string)
    allowForwardedTraffic := d.Get("allow_forwarded_traffic").(bool)
    allowGatewayTransit := d.Get("allow_gateway_transit").(bool)
    allowVirtualNetworkAccess := d.Get("allow_virtual_network_access").(bool)
    etag := d.Get("etag").(string)
    peeringState := d.Get("peering_state").(string)
    remoteVirtualNetwork := d.Get("remote_virtual_network").([]interface{})
    useRemoteGateways := d.Get("use_remote_gateways").(bool)

    virtualNetworkPeeringParameters := network.VirtualNetworkPeering{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Name: utils.String(name),
        VirtualNetworkPeeringPropertiesFormat: &network.VirtualNetworkPeeringPropertiesFormat{
            AllowForwardedTraffic: utils.Bool(allowForwardedTraffic),
            AllowGatewayTransit: utils.Bool(allowGatewayTransit),
            AllowVirtualNetworkAccess: utils.Bool(allowVirtualNetworkAccess),
            PeeringState: network.VirtualNetworkPeeringState(peeringState),
            RemoteVirtualNetwork: expandArmVirtualNetworkPeeringSubResource(remoteVirtualNetwork),
            UseRemoteGateways: utils.Bool(useRemoteGateways),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, virtualNetworkName, virtualNetworkPeeringName, virtualNetworkPeeringParameters)
    if err != nil {
        return fmt.Errorf("Error creating Virtual Network Peering (Virtual Network Peering Name %q / Virtual Network Name %q / Resource Group %q): %+v", virtualNetworkPeeringName, virtualNetworkName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Virtual Network Peering (Virtual Network Peering Name %q / Virtual Network Name %q / Resource Group %q): %+v", virtualNetworkPeeringName, virtualNetworkName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, virtualNetworkName, virtualNetworkPeeringName)
    if err != nil {
        return fmt.Errorf("Error retrieving Virtual Network Peering (Virtual Network Peering Name %q / Virtual Network Name %q / Resource Group %q): %+v", virtualNetworkPeeringName, virtualNetworkName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Virtual Network Peering (Virtual Network Peering Name %q / Virtual Network Name %q / Resource Group %q) ID", virtualNetworkPeeringName, virtualNetworkName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmVirtualNetworkPeeringRead(d, meta)
}

func resourceArmVirtualNetworkPeeringRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkPeeringsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    virtualNetworkName := id.Path["virtualNetworks"]
    virtualNetworkPeeringName := id.Path["virtualNetworkPeerings"]

    resp, err := client.Get(ctx, resourceGroup, virtualNetworkName, virtualNetworkPeeringName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Virtual Network Peering %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Virtual Network Peering (Virtual Network Peering Name %q / Virtual Network Name %q / Resource Group %q): %+v", virtualNetworkPeeringName, virtualNetworkName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if virtualNetworkPeeringPropertiesFormat := resp.VirtualNetworkPeeringPropertiesFormat; virtualNetworkPeeringPropertiesFormat != nil {
        d.Set("allow_forwarded_traffic", virtualNetworkPeeringPropertiesFormat.AllowForwardedTraffic)
        d.Set("allow_gateway_transit", virtualNetworkPeeringPropertiesFormat.AllowGatewayTransit)
        d.Set("allow_virtual_network_access", virtualNetworkPeeringPropertiesFormat.AllowVirtualNetworkAccess)
        d.Set("peering_state", string(virtualNetworkPeeringPropertiesFormat.PeeringState))
        d.Set("provisioning_state", virtualNetworkPeeringPropertiesFormat.ProvisioningState)
        if err := d.Set("remote_virtual_network", flattenArmVirtualNetworkPeeringSubResource(virtualNetworkPeeringPropertiesFormat.RemoteVirtualNetwork)); err != nil {
            return fmt.Errorf("Error setting `remote_virtual_network`: %+v", err)
        }
        d.Set("use_remote_gateways", virtualNetworkPeeringPropertiesFormat.UseRemoteGateways)
    }
    d.Set("etag", resp.Etag)
    d.Set("virtual_network_name", virtualNetworkName)
    d.Set("virtual_network_peering_name", virtualNetworkPeeringName)

    return nil
}


func resourceArmVirtualNetworkPeeringDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualNetworkPeeringsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    virtualNetworkName := id.Path["virtualNetworks"]
    virtualNetworkPeeringName := id.Path["virtualNetworkPeerings"]

    future, err := client.Delete(ctx, resourceGroup, virtualNetworkName, virtualNetworkPeeringName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Virtual Network Peering (Virtual Network Peering Name %q / Virtual Network Name %q / Resource Group %q): %+v", virtualNetworkPeeringName, virtualNetworkName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Virtual Network Peering (Virtual Network Peering Name %q / Virtual Network Name %q / Resource Group %q): %+v", virtualNetworkPeeringName, virtualNetworkName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmVirtualNetworkPeeringSubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(id),
    }
    return &result
}


func flattenArmVirtualNetworkPeeringSubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}
