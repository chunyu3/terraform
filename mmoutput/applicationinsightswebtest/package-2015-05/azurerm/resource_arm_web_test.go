// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmWebTest() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmWebTestCreateUpdate,
        Read: resourceArmWebTestRead,
        Update: resourceArmWebTestCreateUpdate,
        Delete: resourceArmWebTestDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "kind": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(applicationinsights.ping),
                    string(applicationinsights.multistep),
                }, false),
            },

            "locations": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "synthetic_monitor_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "web_test_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "configuration": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "web_test": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "enabled": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "frequency": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(applicationinsights.ping),
                    string(applicationinsights.multistep),
                }, false),
                Default: string(applicationinsights.ping),
            },

            "retry_enabled": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "timeout": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmWebTestCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).webTestsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    webTestName := d.Get("web_test_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, webTestName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Web Test (Web Test Name %q / Resource Group %q): %+v", webTestName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_web_test", *existing.ID)
        }
    }

    name := d.Get("name").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    configuration := d.Get("configuration").([]interface{})
    description := d.Get("description").(string)
    enabled := d.Get("enabled").(bool)
    frequency := d.Get("frequency").(int)
    kind := d.Get("kind").(string)
    kind := d.Get("kind").(string)
    locations := d.Get("locations").([]interface{})
    retryEnabled := d.Get("retry_enabled").(bool)
    syntheticMonitorId := d.Get("synthetic_monitor_id").(string)
    timeout := d.Get("timeout").(int)
    t := d.Get("tags").(map[string]interface{})

    webTestDefinition := applicationinsights.WebTest{
        Kind: applicationinsights.WebTestKind(kind),
        Location: utils.String(location),
        WebTestProperties: &applicationinsights.WebTestProperties{
            Configuration: expandArmWebTestWebTestProperties_Configuration(configuration),
            Description: utils.String(description),
            Enabled: utils.Bool(enabled),
            Frequency: utils.Int32(int32(frequency)),
            Kind: applicationinsights.WebTestKind(kind),
            Locations: expandArmWebTestWebTestGeolocation(locations),
            Name: utils.String(name),
            RetryEnabled: utils.Bool(retryEnabled),
            SyntheticMonitorID: utils.String(syntheticMonitorId),
            Timeout: utils.Int32(int32(timeout)),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, webTestName, webTestDefinition); err != nil {
        return fmt.Errorf("Error creating Web Test (Web Test Name %q / Resource Group %q): %+v", webTestName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, webTestName)
    if err != nil {
        return fmt.Errorf("Error retrieving Web Test (Web Test Name %q / Resource Group %q): %+v", webTestName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Web Test (Web Test Name %q / Resource Group %q) ID", webTestName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmWebTestRead(d, meta)
}

func resourceArmWebTestRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).webTestsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    webTestName := id.Path["webtests"]

    resp, err := client.Get(ctx, resourceGroup, webTestName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Web Test %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Web Test (Web Test Name %q / Resource Group %q): %+v", webTestName, resourceGroup, err)
    }


    if webTestProperties := resp.WebTestProperties; webTestProperties != nil {
        d.Set("name", webTestProperties.Name)
        if err := d.Set("configuration", flattenArmWebTestWebTestProperties_Configuration(webTestProperties.Configuration)); err != nil {
            return fmt.Errorf("Error setting `configuration`: %+v", err)
        }
        d.Set("description", webTestProperties.Description)
        d.Set("enabled", webTestProperties.Enabled)
        d.Set("frequency", int(*webTestProperties.Frequency))
        d.Set("kind", string(webTestProperties.Kind))
        if err := d.Set("locations", flattenArmWebTestWebTestGeolocation(webTestProperties.Locations)); err != nil {
            return fmt.Errorf("Error setting `locations`: %+v", err)
        }
        d.Set("provisioning_state", webTestProperties.ProvisioningState)
        d.Set("retry_enabled", webTestProperties.RetryEnabled)
        d.Set("synthetic_monitor_id", webTestProperties.SyntheticMonitorID)
        d.Set("timeout", int(*webTestProperties.Timeout))
    }
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("kind", string(resp.Kind))
    d.Set("type", resp.Type)
    d.Set("web_test_name", webTestName)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmWebTestDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).webTestsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    webTestName := id.Path["webtests"]

    if _, err := client.Delete(ctx, resourceGroup, webTestName); err != nil {
        return fmt.Errorf("Error deleting Web Test (Web Test Name %q / Resource Group %q): %+v", webTestName, resourceGroup, err)
    }

    return nil
}

func expandArmWebTestWebTestProperties_Configuration(input []interface{}) *applicationinsights.WebTestProperties_Configuration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    webTest := v["web_test"].(string)

    result := applicationinsights.WebTestProperties_Configuration{
        WebTest: utils.String(webTest),
    }
    return &result
}

func expandArmWebTestWebTestGeolocation(input []interface{}) *[]applicationinsights.WebTestGeolocation {
    results := make([]applicationinsights.WebTestGeolocation, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)

        result := applicationinsights.WebTestGeolocation{
            ID: utils.String(id),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmWebTestWebTestProperties_Configuration(input *applicationinsights.WebTestProperties_Configuration) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if webTest := input.WebTest; webTest != nil {
        result["web_test"] = *webTest
    }

    return []interface{}{result}
}

func flattenArmWebTestWebTestGeolocation(input *[]applicationinsights.WebTestGeolocation) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }

        results = append(results, v)
    }

    return results
}
