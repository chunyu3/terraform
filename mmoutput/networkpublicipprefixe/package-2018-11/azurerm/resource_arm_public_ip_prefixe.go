// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPublicIPPrefixe() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPublicIPPrefixeCreateUpdate,
        Read: resourceArmPublicIPPrefixeRead,
        Update: resourceArmPublicIPPrefixeCreateUpdate,
        Delete: resourceArmPublicIPPrefixeDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "public_ip_prefix_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "ip_prefix": {
                Type: schema.TypeString,
                Optional: true,
            },

            "ip_tags": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "ip_tag_type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "prefix_length": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "public_ip_address_version": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(network.IPv4),
                    string(network.IPv6),
                }, false),
                Default: string(network.IPv4),
            },

            "public_ip_addresses": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "resource_guid": {
                Type: schema.TypeString,
                Optional: true,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Standard),
                            }, false),
                            Default: string(network.Standard),
                        },
                    },
                },
            },

            "zones": {
                Type: schema.TypeList,
                Optional: true,
                ForceNew: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "load_balancer_frontend_ip_configuration": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmPublicIPPrefixeCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).publicIPPrefixesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    publicIpPrefixName := d.Get("public_ip_prefix_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, publicIpPrefixName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Public Ip Prefixe (Public Ip Prefix Name %q / Resource Group %q): %+v", publicIpPrefixName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_public_ip_prefixe", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    etag := d.Get("etag").(string)
    ipPrefix := d.Get("ip_prefix").(string)
    ipTags := d.Get("ip_tags").([]interface{})
    prefixLength := d.Get("prefix_length").(int)
    publicIpAddressVersion := d.Get("public_ip_address_version").(string)
    publicIpAddresses := d.Get("public_ip_addresses").([]interface{})
    resourceGuid := d.Get("resource_guid").(string)
    sku := d.Get("sku").([]interface{})
    zones := d.Get("zones").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := network.PublicIPPrefix{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        PublicIPPrefixPropertiesFormat: &network.PublicIPPrefixPropertiesFormat{
            IpPrefix: utils.String(ipPrefix),
            IpTags: expandArmPublicIPPrefixeIpTag(ipTags),
            PrefixLength: utils.Int32(int32(prefixLength)),
            PublicIpAddressVersion: network.IPVersion(publicIpAddressVersion),
            PublicIpAddresses: expandArmPublicIPPrefixeReferencedPublicIpAddress(publicIpAddresses),
            ResourceGuid: utils.String(resourceGuid),
        },
        Sku: expandArmPublicIPPrefixePublicIPPrefixSku(sku),
        Tags: tags.Expand(t),
        Zones: utils.ExpandStringSlice(zones),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, publicIpPrefixName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Public Ip Prefixe (Public Ip Prefix Name %q / Resource Group %q): %+v", publicIpPrefixName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Public Ip Prefixe (Public Ip Prefix Name %q / Resource Group %q): %+v", publicIpPrefixName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, publicIpPrefixName)
    if err != nil {
        return fmt.Errorf("Error retrieving Public Ip Prefixe (Public Ip Prefix Name %q / Resource Group %q): %+v", publicIpPrefixName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Public Ip Prefixe (Public Ip Prefix Name %q / Resource Group %q) ID", publicIpPrefixName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmPublicIPPrefixeRead(d, meta)
}

func resourceArmPublicIPPrefixeRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).publicIPPrefixesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    publicIpPrefixName := id.Path["publicIPPrefixes"]

    resp, err := client.Get(ctx, resourceGroup, publicIpPrefixName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Public Ip Prefixe %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Public Ip Prefixe (Public Ip Prefix Name %q / Resource Group %q): %+v", publicIpPrefixName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("etag", resp.Etag)
    if publicIPPrefixPropertiesFormat := resp.PublicIPPrefixPropertiesFormat; publicIPPrefixPropertiesFormat != nil {
        d.Set("ip_prefix", publicIPPrefixPropertiesFormat.IpPrefix)
        if err := d.Set("ip_tags", flattenArmPublicIPPrefixeIpTag(publicIPPrefixPropertiesFormat.IpTags)); err != nil {
            return fmt.Errorf("Error setting `ip_tags`: %+v", err)
        }
        if err := d.Set("load_balancer_frontend_ip_configuration", flattenArmPublicIPPrefixeSubResource(publicIPPrefixPropertiesFormat.LoadBalancerFrontendIpConfiguration)); err != nil {
            return fmt.Errorf("Error setting `load_balancer_frontend_ip_configuration`: %+v", err)
        }
        d.Set("prefix_length", int(*publicIPPrefixPropertiesFormat.PrefixLength))
        d.Set("provisioning_state", publicIPPrefixPropertiesFormat.ProvisioningState)
        d.Set("public_ip_address_version", string(publicIPPrefixPropertiesFormat.PublicIpAddressVersion))
        if err := d.Set("public_ip_addresses", flattenArmPublicIPPrefixeReferencedPublicIpAddress(publicIPPrefixPropertiesFormat.PublicIpAddresses)); err != nil {
            return fmt.Errorf("Error setting `public_ip_addresses`: %+v", err)
        }
        d.Set("resource_guid", publicIPPrefixPropertiesFormat.ResourceGuid)
    }
    d.Set("public_ip_prefix_name", publicIpPrefixName)
    if err := d.Set("sku", flattenArmPublicIPPrefixePublicIPPrefixSku(resp.Sku)); err != nil {
        return fmt.Errorf("Error setting `sku`: %+v", err)
    }
    d.Set("type", resp.Type)
    d.Set("zones", utils.FlattenStringSlice(resp.Zones))

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmPublicIPPrefixeDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).publicIPPrefixesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    publicIpPrefixName := id.Path["publicIPPrefixes"]

    future, err := client.Delete(ctx, resourceGroup, publicIpPrefixName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Public Ip Prefixe (Public Ip Prefix Name %q / Resource Group %q): %+v", publicIpPrefixName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Public Ip Prefixe (Public Ip Prefix Name %q / Resource Group %q): %+v", publicIpPrefixName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmPublicIPPrefixeIpTag(input []interface{}) *[]network.IpTag {
    results := make([]network.IpTag, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        ipTagType := v["ip_tag_type"].(string)
        tag := v["tag"].(string)

        result := network.IpTag{
            IpTagType: utils.String(ipTagType),
            Tag: utils.String(tag),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmPublicIPPrefixeReferencedPublicIpAddress(input []interface{}) *[]network.ReferencedPublicIpAddress {
    results := make([]network.ReferencedPublicIpAddress, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)

        result := network.ReferencedPublicIpAddress{
            ID: utils.String(id),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmPublicIPPrefixePublicIPPrefixSku(input []interface{}) *network.PublicIPPrefixSku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)

    result := network.PublicIPPrefixSku{
        Name: network.PublicIPPrefixSkuName(name),
    }
    return &result
}


func flattenArmPublicIPPrefixeIpTag(input *[]network.IpTag) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if ipTagType := item.IpTagType; ipTagType != nil {
            v["ip_tag_type"] = *ipTagType
        }
        if tag := item.Tag; tag != nil {
            v["tag"] = *tag
        }

        results = append(results, v)
    }

    return results
}

func flattenArmPublicIPPrefixeSubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})


    return []interface{}{result}
}

func flattenArmPublicIPPrefixeReferencedPublicIpAddress(input *[]network.ReferencedPublicIpAddress) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }

        results = append(results, v)
    }

    return results
}

func flattenArmPublicIPPrefixePublicIPPrefixSku(input *network.PublicIPPrefixSku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["name"] = string(input.Name)

    return []interface{}{result}
}
