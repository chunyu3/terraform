---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_application_gateway"
sidebar_current: "docs-azurerm-resource-application-gateway"
description: |-
  Manage Azure ApplicationGateway instance.
---

# azurerm_application_gateway

Manage Azure ApplicationGateway instance.


## Argument Reference

The following arguments are supported:

* `resource_group` - (Required) The name of the resource group. Changing this forces a new resource to be created.

* `location` - (Required) Resource location Changing this forces a new resource to be created.

* `application_gateway_name` - (Required) The name of the ApplicationGateway. Changing this forces a new resource to be created.

* `backend_address_pools` - (Optional) One or more `backend_address_pool` block defined below.

* `backend_http_settings_collection` - (Optional) One or more `backend_http_settings_collection` block defined below.

* `etag` - (Optional) Gets a unique read-only string that changes whenever the resource is updated Changing this forces a new resource to be created.

* `frontend_ipconfigurations` - (Optional) One or more `frontend_ipconfiguration` block defined below.

* `frontend_ports` - (Optional) One or more `frontend_port` block defined below.

* `gateway_ipconfigurations` - (Optional) One or more `gateway_ipconfiguration` block defined below.

* `http_listeners` - (Optional) One or more `http_listener` block defined below.

* `request_routing_rules` - (Optional) One or more `request_routing_rule` block defined below.

* `resource_guid` - (Optional) Gets or sets resource guid property of the ApplicationGateway resource

* `sku` - (Optional) One `sku` block defined below.

* `ssl_certificates` - (Optional) One or more `ssl_certificate` block defined below.

* `tags` - (Optional) Resource tags Changing this forces a new resource to be created.

---

The `backend_address_pool` block supports the following:

* `id` - (Optional) Resource Id

* `backend_ipconfigurations` - (Optional) One or more `backend_ipconfiguration` block defined below.

* `backend_addresses` - (Optional) One or more `backend_address` block defined below.

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated


---

The `backend_ipconfiguration` block supports the following:

* `id` - (Optional) Resource Id

---

The `backend_address` block supports the following:

* `fqdn` - (Optional) Gets or sets the dns name

* `ip_address` - (Optional) Gets or sets the ip address

---

The `backend_http_settings_collection` block supports the following:

* `id` - (Optional) Resource Id

* `port` - (Optional) Gets or sets the port

* `protocol` - (Optional) Gets or sets the protocol Defaults to `Http`.

* `cookie_based_affinity` - (Optional) Gets or sets the cookie affinity Defaults to `Enabled`.

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated

---

The `frontend_ipconfiguration` block supports the following:

* `id` - (Optional) Resource Id

* `private_ip_address` - (Optional) Gets or sets the privateIPAddress of the Network Interface IP Configuration

* `private_ipallocation_method` - (Optional) Gets or sets PrivateIP allocation method (Static/Dynamic) Defaults to `Static`.

* `subnet` - (Optional) One `subnet` block defined below.

* `public_ip_address` - (Optional) One `public_ip_address` block defined below.

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated


---

The `subnet` block supports the following:

* `id` - (Optional) Resource Id

---

The `public_ip_address` block supports the following:

* `id` - (Optional) Resource Id

---

The `frontend_port` block supports the following:

* `id` - (Optional) Resource Id

* `port` - (Optional) Gets or sets the frontend port

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated

---

The `gateway_ipconfiguration` block supports the following:

* `id` - (Optional) Resource Id

* `subnet` - (Optional) One `subnet` block defined below.

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated


---

The `subnet` block supports the following:

* `id` - (Optional) Resource Id

---

The `http_listener` block supports the following:

* `id` - (Optional) Resource Id

* `frontend_ipconfiguration` - (Optional) One `frontend_ipconfiguration` block defined below.

* `frontend_port` - (Optional) One `frontend_port` block defined below.

* `protocol` - (Optional) Gets or sets the protocol Defaults to `Http`.

* `ssl_certificate` - (Optional) One `ssl_certificate` block defined below.

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated


---

The `frontend_ipconfiguration` block supports the following:

* `id` - (Optional) Resource Id

---

The `frontend_port` block supports the following:

* `id` - (Optional) Resource Id

---

The `ssl_certificate` block supports the following:

* `id` - (Optional) Resource Id

---

The `request_routing_rule` block supports the following:

* `id` - (Optional) Resource Id

* `rule_type` - (Optional) Gets or sets the rule type Defaults to `Basic`.

* `backend_address_pool` - (Optional) One `backend_address_pool` block defined below.

* `backend_http_settings` - (Optional) One `backend_http_setting` block defined below.

* `http_listener` - (Optional) One `http_listener` block defined below.

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated


---

The `backend_address_pool` block supports the following:

* `id` - (Optional) Resource Id

---

The `backend_http_setting` block supports the following:

* `id` - (Optional) Resource Id

---

The `http_listener` block supports the following:

* `id` - (Optional) Resource Id

---

The `sku` block supports the following:

* `name` - (Optional) Gets or sets name of application gateway SKU Defaults to `Standard_Small`.

* `tier` - (Optional) Gets or sets tier of application gateway Defaults to `Standard`.

* `capacity` - (Optional) Gets or sets capacity (instance count) of application gateway

---

The `ssl_certificate` block supports the following:

* `id` - (Optional) Resource Id

* `data` - (Optional) Gets or sets the certificate data

* `password` - (Optional) Gets or sets the certificate password

* `public_cert_data` - (Optional) Gets or sets the certificate public data

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated

## Attributes Reference

The following attributes are exported:

* `operational_state` - Gets operational state of application gateway resource

* `provisioning_state` - Gets or sets Provisioning state of the ApplicationGateway resource Updating/Deleting/Failed

* `id` - Resource Id

* `name` - Resource name

* `type` - Resource type
