// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmApplicationGateway() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmApplicationGatewayCreateUpdate,
        Read: resourceArmApplicationGatewayRead,
        Update: resourceArmApplicationGatewayCreateUpdate,
        Delete: resourceArmApplicationGatewayDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "backend_address_pools": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "backend_addresses": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "fqdn": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "ip_address": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "backend_ipconfigurations": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "backend_http_settings_collection": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "cookie_based_affinity": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Enabled),
                                string(network.Disabled),
                            }, false),
                            Default: string(network.Enabled),
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "protocol": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Http),
                                string(network.Https),
                            }, false),
                            Default: string(network.Http),
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "frontend_ipconfigurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_ipallocation_method": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Static),
                                string(network.Dynamic),
                            }, false),
                            Default: string(network.Static),
                        },
                        "public_ip_address": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "frontend_ports": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "gateway_ipconfigurations": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "subnet": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "http_listeners": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "frontend_ipconfiguration": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "frontend_port": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "protocol": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Http),
                                string(network.Https),
                            }, false),
                            Default: string(network.Http),
                        },
                        "ssl_certificate": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "request_routing_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "backend_address_pool": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "backend_http_settings": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "http_listener": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "rule_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Basic),
                            }, false),
                            Default: string(network.Basic),
                        },
                    },
                },
            },

            "resource_guid": {
                Type: schema.TypeString,
                Optional: true,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "capacity": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Standard_Small),
                                string(network.Standard_Medium),
                                string(network.Standard_Large),
                            }, false),
                            Default: string(network.Standard_Small),
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.Standard),
                            }, false),
                            Default: string(network.Standard),
                        },
                    },
                },
            },

            "ssl_certificates": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "password": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "public_cert_data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmApplicationGatewayCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationGatewaysClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_application_gateway", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    backendAddressPools := d.Get("backend_address_pools").([]interface{})
    backendHttpSettingsCollection := d.Get("backend_http_settings_collection").([]interface{})
    etag := d.Get("etag").(string)
    frontendIpconfigurations := d.Get("frontend_ipconfigurations").([]interface{})
    frontendPorts := d.Get("frontend_ports").([]interface{})
    gatewayIpconfigurations := d.Get("gateway_ipconfigurations").([]interface{})
    httpListeners := d.Get("http_listeners").([]interface{})
    requestRoutingRules := d.Get("request_routing_rules").([]interface{})
    resourceGuid := d.Get("resource_guid").(string)
    sku := d.Get("sku").([]interface{})
    sslCertificates := d.Get("ssl_certificates").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := network.ApplicationGateway{
        Etag: utils.String(etag),
        Location: utils.String(location),
        ApplicationGatewayPropertiesFormat: &network.ApplicationGatewayPropertiesFormat{
            BackendAddressPools: expandArmApplicationGatewayApplicationGatewayBackendAddressPool(backendAddressPools),
            BackendHTTPSettingsCollection: expandArmApplicationGatewayApplicationGatewayBackendHttpSettings(backendHttpSettingsCollection),
            FrontendIPConfigurations: expandArmApplicationGatewayApplicationGatewayFrontendIPConfiguration(frontendIpconfigurations),
            FrontendPorts: expandArmApplicationGatewayApplicationGatewayFrontendPort(frontendPorts),
            GatewayIPConfigurations: expandArmApplicationGatewayApplicationGatewayIPConfiguration(gatewayIpconfigurations),
            HTTPListeners: expandArmApplicationGatewayApplicationGatewayHttpListener(httpListeners),
            RequestRoutingRules: expandArmApplicationGatewayApplicationGatewayRequestRoutingRule(requestRoutingRules),
            ResourceGUID: utils.String(resourceGuid),
            Sku: expandArmApplicationGatewayApplicationGatewaySku(sku),
            SslCertificates: expandArmApplicationGatewayApplicationGatewaySslCertificate(sslCertificates),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Application Gateway %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmApplicationGatewayRead(d, meta)
}

func resourceArmApplicationGatewayRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationGatewaysClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["applicationGateways"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Application Gateway %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmApplicationGatewayDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationGatewaysClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["applicationGateways"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Application Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmApplicationGatewayApplicationGatewayBackendAddressPool(input []interface{}) *[]network.ApplicationGatewayBackendAddressPool {
    results := make([]network.ApplicationGatewayBackendAddressPool, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        backendIpconfigurations := v["backend_ipconfigurations"].([]interface{})
        backendAddresses := v["backend_addresses"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayBackendAddressPool{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayBackendAddressPoolPropertiesFormat: &network.ApplicationGatewayBackendAddressPoolPropertiesFormat{
                BackendAddresses: expandArmApplicationGatewayApplicationGatewayBackendAddress(backendAddresses),
                BackendIPConfigurations: expandArmApplicationGatewaySubResource(backendIpconfigurations),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayBackendHttpSettings(input []interface{}) *[]network.ApplicationGatewayBackendHttpSettings {
    results := make([]network.ApplicationGatewayBackendHttpSettings, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        port := v["port"].(int)
        protocol := v["protocol"].(string)
        cookieBasedAffinity := v["cookie_based_affinity"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayBackendHttpSettings{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayBackendHttpSettingsPropertiesFormat: &network.ApplicationGatewayBackendHttpSettingsPropertiesFormat{
                CookieBasedAffinity: network.ApplicationGatewayCookieBasedAffinity(cookieBasedAffinity),
                Port: utils.Int32(int32(port)),
                Protocol: network.ApplicationGatewayProtocol(protocol),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayFrontendIPConfiguration(input []interface{}) *[]network.ApplicationGatewayFrontendIPConfiguration {
    results := make([]network.ApplicationGatewayFrontendIPConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        privateIpAddress := v["private_ip_address"].(string)
        privateIpallocationMethod := v["private_ipallocation_method"].(string)
        subnet := v["subnet"].([]interface{})
        publicIpAddress := v["public_ip_address"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayFrontendIPConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayFrontendIPConfigurationPropertiesFormat: &network.ApplicationGatewayFrontendIPConfigurationPropertiesFormat{
                PrivateIPAddress: utils.String(privateIpAddress),
                PrivateIPAllocationMethod: network.IpAllocationMethod(privateIpallocationMethod),
                PublicIPAddress: expandArmApplicationGatewaySubResource(publicIpAddress),
                Subnet: expandArmApplicationGatewaySubResource(subnet),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayFrontendPort(input []interface{}) *[]network.ApplicationGatewayFrontendPort {
    results := make([]network.ApplicationGatewayFrontendPort, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        port := v["port"].(int)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayFrontendPort{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayFrontendPortPropertiesFormat: &network.ApplicationGatewayFrontendPortPropertiesFormat{
                Port: utils.Int32(int32(port)),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayIPConfiguration(input []interface{}) *[]network.ApplicationGatewayIPConfiguration {
    results := make([]network.ApplicationGatewayIPConfiguration, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        subnet := v["subnet"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayIPConfiguration{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayIPConfigurationPropertiesFormat: &network.ApplicationGatewayIPConfigurationPropertiesFormat{
                Subnet: expandArmApplicationGatewaySubResource(subnet),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayHttpListener(input []interface{}) *[]network.ApplicationGatewayHttpListener {
    results := make([]network.ApplicationGatewayHttpListener, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        frontendIpconfiguration := v["frontend_ipconfiguration"].([]interface{})
        frontendPort := v["frontend_port"].([]interface{})
        protocol := v["protocol"].(string)
        sslCertificate := v["ssl_certificate"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayHttpListener{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayHttpListenerPropertiesFormat: &network.ApplicationGatewayHttpListenerPropertiesFormat{
                FrontendIPConfiguration: expandArmApplicationGatewaySubResource(frontendIpconfiguration),
                FrontendPort: expandArmApplicationGatewaySubResource(frontendPort),
                Protocol: network.ApplicationGatewayProtocol(protocol),
                SslCertificate: expandArmApplicationGatewaySubResource(sslCertificate),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayRequestRoutingRule(input []interface{}) *[]network.ApplicationGatewayRequestRoutingRule {
    results := make([]network.ApplicationGatewayRequestRoutingRule, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        ruleType := v["rule_type"].(string)
        backendAddressPool := v["backend_address_pool"].([]interface{})
        backendHttpSettings := v["backend_http_settings"].([]interface{})
        httpListener := v["http_listener"].([]interface{})
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewayRequestRoutingRule{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewayRequestRoutingRulePropertiesFormat: &network.ApplicationGatewayRequestRoutingRulePropertiesFormat{
                BackendAddressPool: expandArmApplicationGatewaySubResource(backendAddressPool),
                BackendHTTPSettings: expandArmApplicationGatewaySubResource(backendHttpSettings),
                HTTPListener: expandArmApplicationGatewaySubResource(httpListener),
                RuleType: network.ApplicationGatewayRequestRoutingRuleType(ruleType),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewaySku(input []interface{}) *network.ApplicationGatewaySku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    tier := v["tier"].(string)
    capacity := v["capacity"].(int)

    result := network.ApplicationGatewaySku{
        Capacity: utils.Int32(int32(capacity)),
        Name: network.ApplicationGatewaySkuName(name),
        Tier: network.ApplicationGatewayTier(tier),
    }
    return &result
}

func expandArmApplicationGatewayApplicationGatewaySslCertificate(input []interface{}) *[]network.ApplicationGatewaySslCertificate {
    results := make([]network.ApplicationGatewaySslCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        data := v["data"].(string)
        password := v["password"].(string)
        publicCertData := v["public_cert_data"].(string)
        name := v["name"].(string)
        etag := v["etag"].(string)

        result := network.ApplicationGatewaySslCertificate{
            Etag: utils.String(etag),
            ID: utils.String(id),
            Name: utils.String(name),
            ApplicationGatewaySslCertificatePropertiesFormat: &network.ApplicationGatewaySslCertificatePropertiesFormat{
                Data: utils.String(data),
                Password: utils.String(password),
                PublicCertData: utils.String(publicCertData),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewayApplicationGatewayBackendAddress(input []interface{}) *[]network.ApplicationGatewayBackendAddress {
    results := make([]network.ApplicationGatewayBackendAddress, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        fqdn := v["fqdn"].(string)
        ipAddress := v["ip_address"].(string)

        result := network.ApplicationGatewayBackendAddress{
            Fqdn: utils.String(fqdn),
            IPAddress: utils.String(ipAddress),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewaySubResource(input []interface{}) *[]network.SubResource {
    results := make([]network.SubResource, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)

        result := network.SubResource{
            ID: utils.String(id),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationGatewaySubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(id),
    }
    return &result
}
