// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAccount() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAccountCreate,
        Read: resourceArmAccountRead,
        Update: resourceArmAccountUpdate,
        Delete: resourceArmAccountDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "default_group": {
                Type: schema.TypeString,
                Optional: true,
            },

            "encryption_config": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(datalakestore.UserManaged),
                                string(datalakestore.ServiceManaged),
                            }, false),
                        },
                        "key_vault_meta_info": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "encryption_key_name": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "encryption_key_version": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "key_vault_resource_id": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "encryption_state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(datalakestore.Enabled),
                    string(datalakestore.Disabled),
                }, false),
                Default: string(datalakestore.Enabled),
            },

            "firewall_allow_azure_ips": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(datalakestore.Enabled),
                    string(datalakestore.Disabled),
                }, false),
                Default: string(datalakestore.Enabled),
            },

            "firewall_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "end_ip_address": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "start_ip_address": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "firewall_state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(datalakestore.Enabled),
                    string(datalakestore.Disabled),
                }, false),
                Default: string(datalakestore.Enabled),
            },

            "identity": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "new_tier": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(datalakestore.Consumption),
                    string(datalakestore.Commitment_1TB),
                    string(datalakestore.Commitment_10TB),
                    string(datalakestore.Commitment_100TB),
                    string(datalakestore.Commitment_500TB),
                    string(datalakestore.Commitment_1PB),
                    string(datalakestore.Commitment_5PB),
                }, false),
                Default: string(datalakestore.Consumption),
            },

            "trusted_id_provider_state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(datalakestore.Enabled),
                    string(datalakestore.Disabled),
                }, false),
                Default: string(datalakestore.Enabled),
            },

            "trusted_id_providers": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id_provider": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "virtual_network_rules": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "subnet_id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "account_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "creation_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "current_tier": {
                Type: schema.TypeString,
                Computed: true,
            },

            "encryption_provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "endpoint": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_modified_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmAccountCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Account %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_account", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    defaultGroup := d.Get("default_group").(string)
    encryptionConfig := d.Get("encryption_config").([]interface{})
    encryptionState := d.Get("encryption_state").(string)
    firewallAllowAzureIps := d.Get("firewall_allow_azure_ips").(string)
    firewallRules := d.Get("firewall_rules").([]interface{})
    firewallState := d.Get("firewall_state").(string)
    identity := d.Get("identity").([]interface{})
    newTier := d.Get("new_tier").(string)
    trustedIdProviderState := d.Get("trusted_id_provider_state").(string)
    trustedIdProviders := d.Get("trusted_id_providers").([]interface{})
    virtualNetworkRules := d.Get("virtual_network_rules").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := datalakestore.CreateDataLakeStoreAccountParameters{
        Identity: expandArmAccountEncryptionIdentity(identity),
        Location: utils.String(location),
        CreateDataLakeStoreAccountProperties: &datalakestore.CreateDataLakeStoreAccountProperties{
            DefaultGroup: utils.String(defaultGroup),
            EncryptionConfig: expandArmAccountEncryptionConfig(encryptionConfig),
            EncryptionState: datalakestore.EncryptionState(encryptionState),
            FirewallAllowAzureIps: datalakestore.FirewallAllowAzureIpsState(firewallAllowAzureIps),
            FirewallRules: expandArmAccountCreateFirewallRuleWithAccountParameters(firewallRules),
            FirewallState: datalakestore.FirewallState(firewallState),
            NewTier: datalakestore.TierType(newTier),
            TrustedIDProviderState: datalakestore.TrustedIdProviderState(trustedIdProviderState),
            TrustedIDProviders: expandArmAccountCreateTrustedIdProviderWithAccountParameters(trustedIdProviders),
            VirtualNetworkRules: expandArmAccountCreateVirtualNetworkRuleWithAccountParameters(virtualNetworkRules),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Create(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Account %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAccountRead(d, meta)
}

func resourceArmAccountRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["accounts"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Account %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if createDataLakeStoreAccountProperties := resp.CreateDataLakeStoreAccountProperties; createDataLakeStoreAccountProperties != nil {
        d.Set("account_id", createDataLakeStoreAccountProperties.AccountID)
        d.Set("creation_time", (createDataLakeStoreAccountProperties.CreationTime).String())
        d.Set("current_tier", string(createDataLakeStoreAccountProperties.CurrentTier))
        d.Set("default_group", createDataLakeStoreAccountProperties.DefaultGroup)
        if err := d.Set("encryption_config", flattenArmAccountEncryptionConfig(createDataLakeStoreAccountProperties.EncryptionConfig)); err != nil {
            return fmt.Errorf("Error setting `encryption_config`: %+v", err)
        }
        d.Set("encryption_provisioning_state", string(createDataLakeStoreAccountProperties.EncryptionProvisioningState))
        d.Set("encryption_state", string(createDataLakeStoreAccountProperties.EncryptionState))
        d.Set("endpoint", createDataLakeStoreAccountProperties.Endpoint)
        d.Set("firewall_allow_azure_ips", string(createDataLakeStoreAccountProperties.FirewallAllowAzureIps))
        if err := d.Set("firewall_rules", flattenArmAccountCreateFirewallRuleWithAccountParameters(createDataLakeStoreAccountProperties.FirewallRules)); err != nil {
            return fmt.Errorf("Error setting `firewall_rules`: %+v", err)
        }
        d.Set("firewall_state", string(createDataLakeStoreAccountProperties.FirewallState))
        d.Set("last_modified_time", (createDataLakeStoreAccountProperties.LastModifiedTime).String())
        d.Set("new_tier", string(createDataLakeStoreAccountProperties.NewTier))
        d.Set("provisioning_state", string(createDataLakeStoreAccountProperties.ProvisioningState))
        d.Set("state", string(createDataLakeStoreAccountProperties.State))
        d.Set("trusted_id_provider_state", string(createDataLakeStoreAccountProperties.TrustedIDProviderState))
        if err := d.Set("trusted_id_providers", flattenArmAccountCreateTrustedIdProviderWithAccountParameters(createDataLakeStoreAccountProperties.TrustedIDProviders)); err != nil {
            return fmt.Errorf("Error setting `trusted_id_providers`: %+v", err)
        }
        if err := d.Set("virtual_network_rules", flattenArmAccountCreateVirtualNetworkRuleWithAccountParameters(createDataLakeStoreAccountProperties.VirtualNetworkRules)); err != nil {
            return fmt.Errorf("Error setting `virtual_network_rules`: %+v", err)
        }
    }
    if err := d.Set("identity", flattenArmAccountEncryptionIdentity(resp.Identity)); err != nil {
        return fmt.Errorf("Error setting `identity`: %+v", err)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmAccountUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    defaultGroup := d.Get("default_group").(string)
    encryptionConfig := d.Get("encryption_config").([]interface{})
    encryptionState := d.Get("encryption_state").(string)
    firewallAllowAzureIps := d.Get("firewall_allow_azure_ips").(string)
    firewallRules := d.Get("firewall_rules").([]interface{})
    firewallState := d.Get("firewall_state").(string)
    identity := d.Get("identity").([]interface{})
    newTier := d.Get("new_tier").(string)
    trustedIdProviderState := d.Get("trusted_id_provider_state").(string)
    trustedIdProviders := d.Get("trusted_id_providers").([]interface{})
    virtualNetworkRules := d.Get("virtual_network_rules").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := datalakestore.CreateDataLakeStoreAccountParameters{
        Identity: expandArmAccountEncryptionIdentity(identity),
        Location: utils.String(location),
        CreateDataLakeStoreAccountProperties: &datalakestore.CreateDataLakeStoreAccountProperties{
            DefaultGroup: utils.String(defaultGroup),
            EncryptionConfig: expandArmAccountEncryptionConfig(encryptionConfig),
            EncryptionState: datalakestore.EncryptionState(encryptionState),
            FirewallAllowAzureIps: datalakestore.FirewallAllowAzureIpsState(firewallAllowAzureIps),
            FirewallRules: expandArmAccountCreateFirewallRuleWithAccountParameters(firewallRules),
            FirewallState: datalakestore.FirewallState(firewallState),
            NewTier: datalakestore.TierType(newTier),
            TrustedIDProviderState: datalakestore.TrustedIdProviderState(trustedIdProviderState),
            TrustedIDProviders: expandArmAccountCreateTrustedIdProviderWithAccountParameters(trustedIdProviders),
            VirtualNetworkRules: expandArmAccountCreateVirtualNetworkRuleWithAccountParameters(virtualNetworkRules),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmAccountRead(d, meta)
}

func resourceArmAccountDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["accounts"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Account %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmAccountEncryptionIdentity(input []interface{}) *datalakestore.EncryptionIdentity {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)

    result := datalakestore.EncryptionIdentity{
        Type: utils.String(type),
    }
    return &result
}

func expandArmAccountEncryptionConfig(input []interface{}) *datalakestore.EncryptionConfig {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)
    keyVaultMetaInfo := v["key_vault_meta_info"].([]interface{})

    result := datalakestore.EncryptionConfig{
        KeyVaultMetaInfo: expandArmAccountKeyVaultMetaInfo(keyVaultMetaInfo),
        Type: datalakestore.EncryptionConfigType(type),
    }
    return &result
}

func expandArmAccountCreateFirewallRuleWithAccountParameters(input []interface{}) *[]datalakestore.CreateFirewallRuleWithAccountParameters {
    results := make([]datalakestore.CreateFirewallRuleWithAccountParameters, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        startIpAddress := v["start_ip_address"].(string)
        endIpAddress := v["end_ip_address"].(string)

        result := datalakestore.CreateFirewallRuleWithAccountParameters{
            Name: utils.String(name),
            CreateOrUpdateFirewallRuleProperties: &datalakestore.CreateOrUpdateFirewallRuleProperties{
                EndIpAddress: utils.String(endIpAddress),
                StartIpAddress: utils.String(startIpAddress),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmAccountCreateTrustedIdProviderWithAccountParameters(input []interface{}) *[]datalakestore.CreateTrustedIdProviderWithAccountParameters {
    results := make([]datalakestore.CreateTrustedIdProviderWithAccountParameters, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        idProvider := v["id_provider"].(string)

        result := datalakestore.CreateTrustedIdProviderWithAccountParameters{
            Name: utils.String(name),
            CreateOrUpdateTrustedIdProviderProperties: &datalakestore.CreateOrUpdateTrustedIdProviderProperties{
                IDProvider: utils.String(idProvider),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmAccountCreateVirtualNetworkRuleWithAccountParameters(input []interface{}) *[]datalakestore.CreateVirtualNetworkRuleWithAccountParameters {
    results := make([]datalakestore.CreateVirtualNetworkRuleWithAccountParameters, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        subnetId := v["subnet_id"].(string)

        result := datalakestore.CreateVirtualNetworkRuleWithAccountParameters{
            Name: utils.String(name),
            CreateOrUpdateVirtualNetworkRuleProperties: &datalakestore.CreateOrUpdateVirtualNetworkRuleProperties{
                SubnetID: utils.String(subnetId),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmAccountKeyVaultMetaInfo(input []interface{}) *datalakestore.KeyVaultMetaInfo {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    keyVaultResourceId := v["key_vault_resource_id"].(string)
    encryptionKeyName := v["encryption_key_name"].(string)
    encryptionKeyVersion := v["encryption_key_version"].(string)

    result := datalakestore.KeyVaultMetaInfo{
        EncryptionKeyName: utils.String(encryptionKeyName),
        EncryptionKeyVersion: utils.String(encryptionKeyVersion),
        KeyVaultResourceID: utils.String(keyVaultResourceId),
    }
    return &result
}


func flattenArmAccountEncryptionConfig(input *datalakestore.EncryptionConfig) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["key_vault_meta_info"] = flattenArmAccountKeyVaultMetaInfo(input.KeyVaultMetaInfo)
    result["type"] = string(input.Type)

    return []interface{}{result}
}

func flattenArmAccountCreateFirewallRuleWithAccountParameters(input *[]datalakestore.CreateFirewallRuleWithAccountParameters) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if createOrUpdateFirewallRuleProperties := item.CreateOrUpdateFirewallRuleProperties; createOrUpdateFirewallRuleProperties != nil {
            if endIpAddress := createOrUpdateFirewallRuleProperties.EndIpAddress; endIpAddress != nil {
                v["end_ip_address"] = *endIpAddress
            }
            if startIpAddress := createOrUpdateFirewallRuleProperties.StartIpAddress; startIpAddress != nil {
                v["start_ip_address"] = *startIpAddress
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmAccountCreateTrustedIdProviderWithAccountParameters(input *[]datalakestore.CreateTrustedIdProviderWithAccountParameters) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if createOrUpdateTrustedIdProviderProperties := item.CreateOrUpdateTrustedIdProviderProperties; createOrUpdateTrustedIdProviderProperties != nil {
            if idProvider := createOrUpdateTrustedIdProviderProperties.IDProvider; idProvider != nil {
                v["id_provider"] = *idProvider
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmAccountCreateVirtualNetworkRuleWithAccountParameters(input *[]datalakestore.CreateVirtualNetworkRuleWithAccountParameters) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if createOrUpdateVirtualNetworkRuleProperties := item.CreateOrUpdateVirtualNetworkRuleProperties; createOrUpdateVirtualNetworkRuleProperties != nil {
            if subnetId := createOrUpdateVirtualNetworkRuleProperties.SubnetID; subnetId != nil {
                v["subnet_id"] = *subnetId
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmAccountEncryptionIdentity(input *datalakestore.EncryptionIdentity) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if type := input.Type; type != nil {
        result["type"] = *type
    }

    return []interface{}{result}
}

func flattenArmAccountKeyVaultMetaInfo(input *datalakestore.KeyVaultMetaInfo) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if encryptionKeyName := input.EncryptionKeyName; encryptionKeyName != nil {
        result["encryption_key_name"] = *encryptionKeyName
    }
    if encryptionKeyVersion := input.EncryptionKeyVersion; encryptionKeyVersion != nil {
        result["encryption_key_version"] = *encryptionKeyVersion
    }
    if keyVaultResourceId := input.KeyVaultResourceID; keyVaultResourceId != nil {
        result["key_vault_resource_id"] = *keyVaultResourceId
    }

    return []interface{}{result}
}
