// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAssetFilter() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAssetFilterCreate,
        Read: resourceArmAssetFilterRead,
        Update: resourceArmAssetFilterUpdate,
        Delete: resourceArmAssetFilterDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "asset_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "first_quality": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "bitrate": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                    },
                },
            },

            "presentation_time_range": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "end_timestamp": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "force_end_timestamp": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "live_backoff_duration": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "presentation_window_duration": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "start_timestamp": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "timescale": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "tracks": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "track_selections": {
                            Type: schema.TypeList,
                            Required: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "operation": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(mediaservices.Equal),
                                            string(mediaservices.NotEqual),
                                        }, false),
                                    },
                                    "property": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(mediaservices.Unknown),
                                            string(mediaservices.Type),
                                            string(mediaservices.Name),
                                            string(mediaservices.Language),
                                            string(mediaservices.FourCC),
                                            string(mediaservices.Bitrate),
                                        }, false),
                                    },
                                    "value": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmAssetFilterCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assetFiltersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    assetName := d.Get("asset_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName, assetName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Asset Filter %q (Asset Name %q / Account Name %q / Resource Group %q): %+v", name, assetName, accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_asset_filter", *existing.ID)
        }
    }

    firstQuality := d.Get("first_quality").([]interface{})
    presentationTimeRange := d.Get("presentation_time_range").([]interface{})
    tracks := d.Get("tracks").([]interface{})

    parameters := mediaservices.AssetFilter{
        MediaFilterProperties: &mediaservices.MediaFilterProperties{
            FirstQuality: expandArmAssetFilterFirstQuality(firstQuality),
            PresentationTimeRange: expandArmAssetFilterPresentationTimeRange(presentationTimeRange),
            Tracks: expandArmAssetFilterFilterTrackSelection(tracks),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, accountName, assetName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Asset Filter %q (Asset Name %q / Account Name %q / Resource Group %q): %+v", name, assetName, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, assetName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Asset Filter %q (Asset Name %q / Account Name %q / Resource Group %q): %+v", name, assetName, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Asset Filter %q (Asset Name %q / Account Name %q / Resource Group %q) ID", name, assetName, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAssetFilterRead(d, meta)
}

func resourceArmAssetFilterRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assetFiltersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaServices"]
    assetName := id.Path["assets"]
    name := id.Path["assetFilters"]

    resp, err := client.Get(ctx, resourceGroup, accountName, assetName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Asset Filter %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Asset Filter %q (Asset Name %q / Account Name %q / Resource Group %q): %+v", name, assetName, accountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("account_name", accountName)
    d.Set("asset_name", assetName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmAssetFilterUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assetFiltersClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    assetName := d.Get("asset_name").(string)
    firstQuality := d.Get("first_quality").([]interface{})
    presentationTimeRange := d.Get("presentation_time_range").([]interface{})
    tracks := d.Get("tracks").([]interface{})

    parameters := mediaservices.AssetFilter{
        MediaFilterProperties: &mediaservices.MediaFilterProperties{
            FirstQuality: expandArmAssetFilterFirstQuality(firstQuality),
            PresentationTimeRange: expandArmAssetFilterPresentationTimeRange(presentationTimeRange),
            Tracks: expandArmAssetFilterFilterTrackSelection(tracks),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, accountName, assetName, name, parameters); err != nil {
        return fmt.Errorf("Error updating Asset Filter %q (Asset Name %q / Account Name %q / Resource Group %q): %+v", name, assetName, accountName, resourceGroup, err)
    }

    return resourceArmAssetFilterRead(d, meta)
}

func resourceArmAssetFilterDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).assetFiltersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaServices"]
    assetName := id.Path["assets"]
    name := id.Path["assetFilters"]

    if _, err := client.Delete(ctx, resourceGroup, accountName, assetName, name); err != nil {
        return fmt.Errorf("Error deleting Asset Filter %q (Asset Name %q / Account Name %q / Resource Group %q): %+v", name, assetName, accountName, resourceGroup, err)
    }

    return nil
}

func expandArmAssetFilterFirstQuality(input []interface{}) *mediaservices.FirstQuality {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    bitrate := v["bitrate"].(int)

    result := mediaservices.FirstQuality{
        Bitrate: utils.Int32(int32(bitrate)),
    }
    return &result
}

func expandArmAssetFilterPresentationTimeRange(input []interface{}) *mediaservices.PresentationTimeRange {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    startTimestamp := v["start_timestamp"].(int)
    endTimestamp := v["end_timestamp"].(int)
    presentationWindowDuration := v["presentation_window_duration"].(int)
    liveBackoffDuration := v["live_backoff_duration"].(int)
    timescale := v["timescale"].(int)
    forceEndTimestamp := v["force_end_timestamp"].(bool)

    result := mediaservices.PresentationTimeRange{
        EndTimestamp: utils.Int64(int64(endTimestamp)),
        ForceEndTimestamp: utils.Bool(forceEndTimestamp),
        LiveBackoffDuration: utils.Int64(int64(liveBackoffDuration)),
        PresentationWindowDuration: utils.Int64(int64(presentationWindowDuration)),
        StartTimestamp: utils.Int64(int64(startTimestamp)),
        Timescale: utils.Int64(int64(timescale)),
    }
    return &result
}

func expandArmAssetFilterFilterTrackSelection(input []interface{}) *[]mediaservices.FilterTrackSelection {
    results := make([]mediaservices.FilterTrackSelection, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        trackSelections := v["track_selections"].([]interface{})

        result := mediaservices.FilterTrackSelection{
            TrackSelections: expandArmAssetFilterFilterTrackPropertyCondition(trackSelections),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmAssetFilterFilterTrackPropertyCondition(input []interface{}) *[]mediaservices.FilterTrackPropertyCondition {
    results := make([]mediaservices.FilterTrackPropertyCondition, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        property := v["property"].(string)
        value := v["value"].(string)
        operation := v["operation"].(string)

        result := mediaservices.FilterTrackPropertyCondition{
            Operation: mediaservices.FilterTrackPropertyCompareOperation(operation),
            Property: mediaservices.FilterTrackPropertyType(property),
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}
