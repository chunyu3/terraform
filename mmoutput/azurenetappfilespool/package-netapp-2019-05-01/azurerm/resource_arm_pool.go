// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPool() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPoolCreate,
        Read: resourceArmPoolRead,
        Update: resourceArmPoolUpdate,
        Delete: resourceArmPoolDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "service_level": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azurenetappfiles.Standard),
                    string(azurenetappfiles.Premium),
                    string(azurenetappfiles.Ultra),
                }, false),
            },

            "size": {
                Type: schema.TypeInt,
                Required: true,
            },

            "pool_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmPoolCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).poolsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Pool %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_pool", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    serviceLevel := d.Get("service_level").(string)
    size := d.Get("size").(int)
    t := d.Get("tags").(map[string]interface{})

    body := azurenetappfiles.CapacityPool{
        Location: utils.String(location),
        PoolProperties: &azurenetappfiles.PoolProperties{
            ServiceLevel: azurenetappfiles.ServiceLevel(serviceLevel),
            Size: utils.Int64(int64(size)),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, accountName, name, body)
    if err != nil {
        return fmt.Errorf("Error creating Pool %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Pool %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Pool %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Pool %q (Account Name %q / Resource Group %q) ID", name, accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmPoolRead(d, meta)
}

func resourceArmPoolRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).poolsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["netAppAccounts"]
    name := id.Path["capacityPools"]

    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Pool %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Pool %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("account_name", accountName)
    if poolProperties := resp.PoolProperties; poolProperties != nil {
        d.Set("pool_id", poolProperties.PoolID)
        d.Set("provisioning_state", poolProperties.ProvisioningState)
        d.Set("service_level", string(poolProperties.ServiceLevel))
        d.Set("size", int(*poolProperties.Size))
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmPoolUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).poolsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    serviceLevel := d.Get("service_level").(string)
    size := d.Get("size").(int)
    t := d.Get("tags").(map[string]interface{})

    body := azurenetappfiles.CapacityPool{
        Location: utils.String(location),
        PoolProperties: &azurenetappfiles.PoolProperties{
            ServiceLevel: azurenetappfiles.ServiceLevel(serviceLevel),
            Size: utils.Int64(int64(size)),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, accountName, name, body); err != nil {
        return fmt.Errorf("Error updating Pool %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    return resourceArmPoolRead(d, meta)
}

func resourceArmPoolDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).poolsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["netAppAccounts"]
    name := id.Path["capacityPools"]

    future, err := client.Delete(ctx, resourceGroup, accountName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Pool %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Pool %q (Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
        }
    }

    return nil
}
