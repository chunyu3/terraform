// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmManagedInstanceVulnerabilityAssessment() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmManagedInstanceVulnerabilityAssessmentCreateUpdate,
        Read: resourceArmManagedInstanceVulnerabilityAssessmentRead,
        Update: resourceArmManagedInstanceVulnerabilityAssessmentCreateUpdate,
        Delete: resourceArmManagedInstanceVulnerabilityAssessmentDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "managed_instance_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "storage_container_path": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "recurring_scans": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "email_subscription_admins": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "emails": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "is_enabled": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                    },
                },
            },

            "storage_account_access_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "storage_container_sas_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmManagedInstanceVulnerabilityAssessmentCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedInstanceVulnerabilityAssessmentsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    managedInstanceName := d.Get("managed_instance_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, managedInstanceName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Managed Instance Vulnerability Assessment %q (Managed Instance Name %q / Resource Group %q): %+v", name, managedInstanceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_managed_instance_vulnerability_assessment", *existing.ID)
        }
    }

    recurringScans := d.Get("recurring_scans").([]interface{})
    storageAccountAccessKey := d.Get("storage_account_access_key").(string)
    storageContainerPath := d.Get("storage_container_path").(string)
    storageContainerSasKey := d.Get("storage_container_sas_key").(string)

    parameters := sql.ManagedInstanceVulnerabilityAssessment{
        ManagedInstanceVulnerabilityAssessmentProperties: &sql.ManagedInstanceVulnerabilityAssessmentProperties{
            RecurringScans: expandArmManagedInstanceVulnerabilityAssessmentVulnerabilityAssessmentRecurringScansProperties(recurringScans),
            StorageAccountAccessKey: utils.String(storageAccountAccessKey),
            StorageContainerPath: utils.String(storageContainerPath),
            StorageContainerSasKey: utils.String(storageContainerSasKey),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, managedInstanceName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Managed Instance Vulnerability Assessment %q (Managed Instance Name %q / Resource Group %q): %+v", name, managedInstanceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, managedInstanceName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Managed Instance Vulnerability Assessment %q (Managed Instance Name %q / Resource Group %q): %+v", name, managedInstanceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Managed Instance Vulnerability Assessment %q (Managed Instance Name %q / Resource Group %q) ID", name, managedInstanceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmManagedInstanceVulnerabilityAssessmentRead(d, meta)
}

func resourceArmManagedInstanceVulnerabilityAssessmentRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedInstanceVulnerabilityAssessmentsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    managedInstanceName := id.Path["managedInstances"]
    name := id.Path["vulnerabilityAssessments"]

    resp, err := client.Get(ctx, resourceGroup, managedInstanceName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Managed Instance Vulnerability Assessment %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Managed Instance Vulnerability Assessment %q (Managed Instance Name %q / Resource Group %q): %+v", name, managedInstanceName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("managed_instance_name", managedInstanceName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmManagedInstanceVulnerabilityAssessmentDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).managedInstanceVulnerabilityAssessmentsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    managedInstanceName := id.Path["managedInstances"]
    name := id.Path["vulnerabilityAssessments"]

    if _, err := client.Delete(ctx, resourceGroup, managedInstanceName, name); err != nil {
        return fmt.Errorf("Error deleting Managed Instance Vulnerability Assessment %q (Managed Instance Name %q / Resource Group %q): %+v", name, managedInstanceName, resourceGroup, err)
    }

    return nil
}

func expandArmManagedInstanceVulnerabilityAssessmentVulnerabilityAssessmentRecurringScansProperties(input []interface{}) *sql.VulnerabilityAssessmentRecurringScansProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    isEnabled := v["is_enabled"].(bool)
    emailSubscriptionAdmins := v["email_subscription_admins"].(bool)
    emails := v["emails"].([]interface{})

    result := sql.VulnerabilityAssessmentRecurringScansProperties{
        EmailSubscriptionAdmins: utils.Bool(emailSubscriptionAdmins),
        Emails: utils.ExpandStringSlice(emails),
        IsEnabled: utils.Bool(isEnabled),
    }
    return &result
}
