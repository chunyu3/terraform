// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmVirtualMachine() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmVirtualMachineCreateUpdate,
        Read: resourceArmVirtualMachineRead,
        Update: resourceArmVirtualMachineCreateUpdate,
        Delete: resourceArmVirtualMachineDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "destination_container_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "overwrite_vhds": {
                Type: schema.TypeBool,
                Required: true,
                ForceNew: true,
            },

            "vhd_prefix": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "availability_set": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "diagnostics_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "boot_diagnostics": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "enabled": {
                                        Type: schema.TypeBool,
                                        Optional: true,
                                    },
                                    "storage_uri": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "hardware_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "vm_size": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(compute.Basic_A0),
                                string(compute.Basic_A1),
                                string(compute.Basic_A2),
                                string(compute.Basic_A3),
                                string(compute.Basic_A4),
                                string(compute.Standard_A0),
                                string(compute.Standard_A1),
                                string(compute.Standard_A2),
                                string(compute.Standard_A3),
                                string(compute.Standard_A4),
                                string(compute.Standard_A5),
                                string(compute.Standard_A6),
                                string(compute.Standard_A7),
                                string(compute.Standard_A8),
                                string(compute.Standard_A9),
                                string(compute.Standard_A10),
                                string(compute.Standard_A11),
                                string(compute.Standard_D1),
                                string(compute.Standard_D2),
                                string(compute.Standard_D3),
                                string(compute.Standard_D4),
                                string(compute.Standard_D11),
                                string(compute.Standard_D12),
                                string(compute.Standard_D13),
                                string(compute.Standard_D14),
                                string(compute.Standard_D1_v2),
                                string(compute.Standard_D2_v2),
                                string(compute.Standard_D3_v2),
                                string(compute.Standard_D4_v2),
                                string(compute.Standard_D5_v2),
                                string(compute.Standard_D11_v2),
                                string(compute.Standard_D12_v2),
                                string(compute.Standard_D13_v2),
                                string(compute.Standard_D14_v2),
                                string(compute.Standard_D15_v2),
                                string(compute.Standard_DS1),
                                string(compute.Standard_DS2),
                                string(compute.Standard_DS3),
                                string(compute.Standard_DS4),
                                string(compute.Standard_DS11),
                                string(compute.Standard_DS12),
                                string(compute.Standard_DS13),
                                string(compute.Standard_DS14),
                                string(compute.Standard_DS1_v2),
                                string(compute.Standard_DS2_v2),
                                string(compute.Standard_DS3_v2),
                                string(compute.Standard_DS4_v2),
                                string(compute.Standard_DS5_v2),
                                string(compute.Standard_DS11_v2),
                                string(compute.Standard_DS12_v2),
                                string(compute.Standard_DS13_v2),
                                string(compute.Standard_DS14_v2),
                                string(compute.Standard_DS15_v2),
                                string(compute.Standard_G1),
                                string(compute.Standard_G2),
                                string(compute.Standard_G3),
                                string(compute.Standard_G4),
                                string(compute.Standard_G5),
                                string(compute.Standard_GS1),
                                string(compute.Standard_GS2),
                                string(compute.Standard_GS3),
                                string(compute.Standard_GS4),
                                string(compute.Standard_GS5),
                            }, false),
                            Default: string(compute.Basic_A0),
                        },
                    },
                },
            },

            "identity": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(compute.SystemAssigned),
                            }, false),
                            Default: string(compute.SystemAssigned),
                        },
                    },
                },
            },

            "license_type": {
                Type: schema.TypeString,
                Optional: true,
            },

            "network_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "network_interfaces": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "primary": {
                                        Type: schema.TypeBool,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "os_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "admin_password": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "admin_username": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "computer_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "custom_data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "linux_configuration": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "disable_password_authentication": {
                                        Type: schema.TypeBool,
                                        Optional: true,
                                    },
                                    "ssh": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "public_keys": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    Elem: &schema.Resource{
                                                        Schema: map[string]*schema.Schema{
                                                            "key_data": {
                                                                Type: schema.TypeString,
                                                                Optional: true,
                                                            },
                                                            "path": {
                                                                Type: schema.TypeString,
                                                                Optional: true,
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "secrets": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "source_vault": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "id": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "vault_certificates": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "certificate_store": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "certificate_url": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "windows_configuration": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "additional_unattend_content": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "component_name": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                    ValidateFunc: validation.StringInSlice([]string{
                                                        string(compute.Microsoft-Windows-Shell-Setup),
                                                    }, false),
                                                    Default: string(compute.Microsoft-Windows-Shell-Setup),
                                                },
                                                "content": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "pass_name": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                    ValidateFunc: validation.StringInSlice([]string{
                                                        string(compute.OobeSystem),
                                                    }, false),
                                                    Default: string(compute.OobeSystem),
                                                },
                                                "setting_name": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                    ValidateFunc: validation.StringInSlice([]string{
                                                        string(compute.AutoLogon),
                                                        string(compute.FirstLogonCommands),
                                                    }, false),
                                                    Default: string(compute.AutoLogon),
                                                },
                                            },
                                        },
                                    },
                                    "enable_automatic_updates": {
                                        Type: schema.TypeBool,
                                        Optional: true,
                                    },
                                    "provision_vmagent": {
                                        Type: schema.TypeBool,
                                        Optional: true,
                                    },
                                    "time_zone": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "win_rm": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "listeners": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    Elem: &schema.Resource{
                                                        Schema: map[string]*schema.Schema{
                                                            "certificate_url": {
                                                                Type: schema.TypeString,
                                                                Optional: true,
                                                            },
                                                            "protocol": {
                                                                Type: schema.TypeString,
                                                                Optional: true,
                                                                ValidateFunc: validation.StringInSlice([]string{
                                                                    string(compute.Http),
                                                                    string(compute.Https),
                                                                }, false),
                                                                Default: string(compute.Http),
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "plan": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "product": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "promotion_code": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "publisher": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "storage_profile": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "data_disks": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "create_option": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.FromImage),
                                            string(compute.Empty),
                                            string(compute.Attach),
                                        }, false),
                                    },
                                    "lun": {
                                        Type: schema.TypeInt,
                                        Required: true,
                                    },
                                    "caching": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.None),
                                            string(compute.ReadOnly),
                                            string(compute.ReadWrite),
                                        }, false),
                                        Default: string(compute.None),
                                    },
                                    "disk_size_gb": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "image": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "uri": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "managed_disk": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "id": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "storage_account_type": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                    ValidateFunc: validation.StringInSlice([]string{
                                                        string(compute.Standard_LRS),
                                                        string(compute.Premium_LRS),
                                                    }, false),
                                                    Default: string(compute.Standard_LRS),
                                                },
                                            },
                                        },
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "vhd": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "uri": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "image_reference": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "offer": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "publisher": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "sku": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "version": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "os_disk": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "create_option": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.FromImage),
                                            string(compute.Empty),
                                            string(compute.Attach),
                                        }, false),
                                    },
                                    "caching": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.None),
                                            string(compute.ReadOnly),
                                            string(compute.ReadWrite),
                                        }, false),
                                        Default: string(compute.None),
                                    },
                                    "disk_size_gb": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "encryption_settings": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "disk_encryption_key": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                        Schema: map[string]*schema.Schema{
                                                            "secret_url": {
                                                                Type: schema.TypeString,
                                                                Required: true,
                                                                ValidateFunc: validate.NoEmptyStrings,
                                                            },
                                                            "source_vault": {
                                                                Type: schema.TypeList,
                                                                Required: true,
                                                                MaxItems: 1,
                                                                Elem: &schema.Resource{
                                                                    Schema: map[string]*schema.Schema{
                                                                        "id": {
                                                                            Type: schema.TypeString,
                                                                            Optional: true,
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                },
                                                "enabled": {
                                                    Type: schema.TypeBool,
                                                    Optional: true,
                                                },
                                                "key_encryption_key": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                        Schema: map[string]*schema.Schema{
                                                            "key_url": {
                                                                Type: schema.TypeString,
                                                                Required: true,
                                                                ValidateFunc: validate.NoEmptyStrings,
                                                            },
                                                            "source_vault": {
                                                                Type: schema.TypeList,
                                                                Required: true,
                                                                MaxItems: 1,
                                                                Elem: &schema.Resource{
                                                                    Schema: map[string]*schema.Schema{
                                                                        "id": {
                                                                            Type: schema.TypeString,
                                                                            Optional: true,
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                    "image": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "uri": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "managed_disk": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "id": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "storage_account_type": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                    ValidateFunc: validation.StringInSlice([]string{
                                                        string(compute.Standard_LRS),
                                                        string(compute.Premium_LRS),
                                                    }, false),
                                                    Default: string(compute.Standard_LRS),
                                                },
                                            },
                                        },
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "os_type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(compute.Windows),
                                            string(compute.Linux),
                                        }, false),
                                        Default: string(compute.Windows),
                                    },
                                    "vhd": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "uri": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "resources": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmVirtualMachineCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualMachinesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Virtual Machine %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_virtual_machine", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    availabilitySet := d.Get("availability_set").([]interface{})
    destinationContainerName := d.Get("destination_container_name").(string)
    diagnosticsProfile := d.Get("diagnostics_profile").([]interface{})
    hardwareProfile := d.Get("hardware_profile").([]interface{})
    identity := d.Get("identity").([]interface{})
    licenseType := d.Get("license_type").(string)
    networkProfile := d.Get("network_profile").([]interface{})
    osProfile := d.Get("os_profile").([]interface{})
    overwriteVhds := d.Get("overwrite_vhds").(bool)
    plan := d.Get("plan").([]interface{})
    storageProfile := d.Get("storage_profile").([]interface{})
    vhdPrefix := d.Get("vhd_prefix").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := compute.VirtualMachine{
        DestinationContainerName: utils.String(destinationContainerName),
        Identity: expandArmVirtualMachineVirtualMachineIdentity(identity),
        Location: utils.String(location),
        OverwriteVhds: utils.Bool(overwriteVhds),
        Plan: expandArmVirtualMachinePlan(plan),
        VirtualMachineProperties: &compute.VirtualMachineProperties{
            AvailabilitySet: expandArmVirtualMachineSubResource(availabilitySet),
            DiagnosticsProfile: expandArmVirtualMachineDiagnosticsProfile(diagnosticsProfile),
            HardwareProfile: expandArmVirtualMachineHardwareProfile(hardwareProfile),
            LicenseType: utils.String(licenseType),
            NetworkProfile: expandArmVirtualMachineNetworkProfile(networkProfile),
            OsProfile: expandArmVirtualMachineOSProfile(osProfile),
            StorageProfile: expandArmVirtualMachineStorageProfile(storageProfile),
        },
        Tags: tags.Expand(t),
        VhdPrefix: utils.String(vhdPrefix),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Virtual Machine %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Virtual Machine %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Virtual Machine %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Virtual Machine %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmVirtualMachineRead(d, meta)
}

func resourceArmVirtualMachineRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualMachinesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["virtualMachines"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Virtual Machine %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Virtual Machine %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if err := d.Set("resources", flattenArmVirtualMachineVirtualMachineExtension(resp.Resources)); err != nil {
        return fmt.Errorf("Error setting `resources`: %+v", err)
    }
    d.Set("type", resp.Type)

    return nil
}


func resourceArmVirtualMachineDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).virtualMachinesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["virtualMachines"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Virtual Machine %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Virtual Machine %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmVirtualMachineVirtualMachineIdentity(input []interface{}) *compute.VirtualMachineIdentity {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    type := v["type"].(string)

    result := compute.VirtualMachineIdentity{
        Type: compute.ResourceIdentityType(type),
    }
    return &result
}

func expandArmVirtualMachinePlan(input []interface{}) *compute.Plan {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    publisher := v["publisher"].(string)
    product := v["product"].(string)
    promotionCode := v["promotion_code"].(string)

    result := compute.Plan{
        Name: utils.String(name),
        Product: utils.String(product),
        PromotionCode: utils.String(promotionCode),
        Publisher: utils.String(publisher),
    }
    return &result
}

func expandArmVirtualMachineSubResource(input []interface{}) *compute.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := compute.SubResource{
        ID: utils.String(id),
    }
    return &result
}

func expandArmVirtualMachineDiagnosticsProfile(input []interface{}) *compute.DiagnosticsProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    bootDiagnostics := v["boot_diagnostics"].([]interface{})

    result := compute.DiagnosticsProfile{
        BootDiagnostics: expandArmVirtualMachineBootDiagnostics(bootDiagnostics),
    }
    return &result
}

func expandArmVirtualMachineHardwareProfile(input []interface{}) *compute.HardwareProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    vmSize := v["vm_size"].(string)

    result := compute.HardwareProfile{
        VMSize: compute.VirtualMachineSizeTypes(vmSize),
    }
    return &result
}

func expandArmVirtualMachineNetworkProfile(input []interface{}) *compute.NetworkProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    networkInterfaces := v["network_interfaces"].([]interface{})

    result := compute.NetworkProfile{
        NetworkInterfaces: expandArmVirtualMachineNetworkInterfaceReference(networkInterfaces),
    }
    return &result
}

func expandArmVirtualMachineOSProfile(input []interface{}) *compute.OSProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    computerName := v["computer_name"].(string)
    adminUsername := v["admin_username"].(string)
    adminPassword := v["admin_password"].(string)
    customData := v["custom_data"].(string)
    windowsConfiguration := v["windows_configuration"].([]interface{})
    linuxConfiguration := v["linux_configuration"].([]interface{})
    secrets := v["secrets"].([]interface{})

    result := compute.OSProfile{
        AdminPassword: utils.String(adminPassword),
        AdminUsername: utils.String(adminUsername),
        ComputerName: utils.String(computerName),
        CustomData: utils.String(customData),
        LinuxConfiguration: expandArmVirtualMachineLinuxConfiguration(linuxConfiguration),
        Secrets: expandArmVirtualMachineVaultSecretGroup(secrets),
        WindowsConfiguration: expandArmVirtualMachineWindowsConfiguration(windowsConfiguration),
    }
    return &result
}

func expandArmVirtualMachineStorageProfile(input []interface{}) *compute.StorageProfile {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    imageReference := v["image_reference"].([]interface{})
    osDisk := v["os_disk"].([]interface{})
    dataDisks := v["data_disks"].([]interface{})

    result := compute.StorageProfile{
        DataDisks: expandArmVirtualMachineDataDisk(dataDisks),
        ImageReference: expandArmVirtualMachineImageReference(imageReference),
        OsDisk: expandArmVirtualMachineOSDisk(osDisk),
    }
    return &result
}

func expandArmVirtualMachineBootDiagnostics(input []interface{}) *compute.BootDiagnostics {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    enabled := v["enabled"].(bool)
    storageUri := v["storage_uri"].(string)

    result := compute.BootDiagnostics{
        Enabled: utils.Bool(enabled),
        StorageURI: utils.String(storageUri),
    }
    return &result
}

func expandArmVirtualMachineNetworkInterfaceReference(input []interface{}) *[]compute.NetworkInterfaceReference {
    results := make([]compute.NetworkInterfaceReference, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        primary := v["primary"].(bool)

        result := compute.NetworkInterfaceReference{
            ID: utils.String(id),
            NetworkInterfaceReferenceProperties: &compute.NetworkInterfaceReferenceProperties{
                Primary: utils.Bool(primary),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualMachineLinuxConfiguration(input []interface{}) *compute.LinuxConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    disablePasswordAuthentication := v["disable_password_authentication"].(bool)
    ssh := v["ssh"].([]interface{})

    result := compute.LinuxConfiguration{
        DisablePasswordAuthentication: utils.Bool(disablePasswordAuthentication),
        SSH: expandArmVirtualMachineSshConfiguration(ssh),
    }
    return &result
}

func expandArmVirtualMachineVaultSecretGroup(input []interface{}) *[]compute.VaultSecretGroup {
    results := make([]compute.VaultSecretGroup, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        sourceVault := v["source_vault"].([]interface{})
        vaultCertificates := v["vault_certificates"].([]interface{})

        result := compute.VaultSecretGroup{
            SourceVault: expandArmVirtualMachineSubResource(sourceVault),
            VaultCertificates: expandArmVirtualMachineVaultCertificate(vaultCertificates),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualMachineWindowsConfiguration(input []interface{}) *compute.WindowsConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    provisionVmagent := v["provision_vmagent"].(bool)
    enableAutomaticUpdates := v["enable_automatic_updates"].(bool)
    timeZone := v["time_zone"].(string)
    additionalUnattendContent := v["additional_unattend_content"].([]interface{})
    winRm := v["win_rm"].([]interface{})

    result := compute.WindowsConfiguration{
        AdditionalUnattendContent: expandArmVirtualMachineAdditionalUnattendContent(additionalUnattendContent),
        EnableAutomaticUpdates: utils.Bool(enableAutomaticUpdates),
        ProvisionVMAgent: utils.Bool(provisionVmagent),
        TimeZone: utils.String(timeZone),
        WinRM: expandArmVirtualMachineWinRMConfiguration(winRm),
    }
    return &result
}

func expandArmVirtualMachineDataDisk(input []interface{}) *[]compute.DataDisk {
    results := make([]compute.DataDisk, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        lun := v["lun"].(int)
        name := v["name"].(string)
        vhd := v["vhd"].([]interface{})
        image := v["image"].([]interface{})
        caching := v["caching"].(string)
        createOption := v["create_option"].(string)
        diskSizeGb := v["disk_size_gb"].(int)
        managedDisk := v["managed_disk"].([]interface{})

        result := compute.DataDisk{
            Caching: compute.CachingTypes(caching),
            CreateOption: compute.DiskCreateOptionTypes(createOption),
            DiskSizeGB: utils.Int32(int32(diskSizeGb)),
            Image: expandArmVirtualMachineVirtualHardDisk(image),
            Lun: utils.Int32(int32(lun)),
            ManagedDisk: expandArmVirtualMachineManagedDiskParameters(managedDisk),
            Name: utils.String(name),
            Vhd: expandArmVirtualMachineVirtualHardDisk(vhd),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualMachineImageReference(input []interface{}) *compute.ImageReference {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    publisher := v["publisher"].(string)
    offer := v["offer"].(string)
    sku := v["sku"].(string)
    version := v["version"].(string)

    result := compute.ImageReference{
        ID: utils.String(id),
        Offer: utils.String(offer),
        Publisher: utils.String(publisher),
        Sku: utils.String(sku),
        Version: utils.String(version),
    }
    return &result
}

func expandArmVirtualMachineOSDisk(input []interface{}) *compute.OSDisk {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    osType := v["os_type"].(string)
    encryptionSettings := v["encryption_settings"].([]interface{})
    name := v["name"].(string)
    vhd := v["vhd"].([]interface{})
    image := v["image"].([]interface{})
    caching := v["caching"].(string)
    createOption := v["create_option"].(string)
    diskSizeGb := v["disk_size_gb"].(int)
    managedDisk := v["managed_disk"].([]interface{})

    result := compute.OSDisk{
        Caching: compute.CachingTypes(caching),
        CreateOption: compute.DiskCreateOptionTypes(createOption),
        DiskSizeGB: utils.Int32(int32(diskSizeGb)),
        EncryptionSettings: expandArmVirtualMachineDiskEncryptionSettings(encryptionSettings),
        Image: expandArmVirtualMachineVirtualHardDisk(image),
        ManagedDisk: expandArmVirtualMachineManagedDiskParameters(managedDisk),
        Name: utils.String(name),
        OsType: compute.OperatingSystemTypes(osType),
        Vhd: expandArmVirtualMachineVirtualHardDisk(vhd),
    }
    return &result
}

func expandArmVirtualMachineSshConfiguration(input []interface{}) *compute.SshConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    publicKeys := v["public_keys"].([]interface{})

    result := compute.SshConfiguration{
        PublicKeys: expandArmVirtualMachineSshPublicKey(publicKeys),
    }
    return &result
}

func expandArmVirtualMachineVaultCertificate(input []interface{}) *[]compute.VaultCertificate {
    results := make([]compute.VaultCertificate, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        certificateUrl := v["certificate_url"].(string)
        certificateStore := v["certificate_store"].(string)

        result := compute.VaultCertificate{
            CertificateStore: utils.String(certificateStore),
            CertificateURL: utils.String(certificateUrl),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualMachineAdditionalUnattendContent(input []interface{}) *[]compute.AdditionalUnattendContent {
    results := make([]compute.AdditionalUnattendContent, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        passName := v["pass_name"].(string)
        componentName := v["component_name"].(string)
        settingName := v["setting_name"].(string)
        content := v["content"].(string)

        result := compute.AdditionalUnattendContent{
            ComponentName: compute.ComponentNames(componentName),
            Content: utils.String(content),
            PassName: compute.PassNames(passName),
            SettingName: compute.SettingNames(settingName),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualMachineWinRMConfiguration(input []interface{}) *compute.WinRMConfiguration {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    listeners := v["listeners"].([]interface{})

    result := compute.WinRMConfiguration{
        Listeners: expandArmVirtualMachineWinRMListener(listeners),
    }
    return &result
}

func expandArmVirtualMachineVirtualHardDisk(input []interface{}) *compute.VirtualHardDisk {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    uri := v["uri"].(string)

    result := compute.VirtualHardDisk{
        URI: utils.String(uri),
    }
    return &result
}

func expandArmVirtualMachineManagedDiskParameters(input []interface{}) *compute.ManagedDiskParameters {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    storageAccountType := v["storage_account_type"].(string)

    result := compute.ManagedDiskParameters{
        ID: utils.String(id),
        StorageAccountType: compute.StorageAccountTypes(storageAccountType),
    }
    return &result
}

func expandArmVirtualMachineDiskEncryptionSettings(input []interface{}) *compute.DiskEncryptionSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    diskEncryptionKey := v["disk_encryption_key"].([]interface{})
    keyEncryptionKey := v["key_encryption_key"].([]interface{})
    enabled := v["enabled"].(bool)

    result := compute.DiskEncryptionSettings{
        DiskEncryptionKey: expandArmVirtualMachineKeyVaultSecretReference(diskEncryptionKey),
        Enabled: utils.Bool(enabled),
        KeyEncryptionKey: expandArmVirtualMachineKeyVaultKeyReference(keyEncryptionKey),
    }
    return &result
}

func expandArmVirtualMachineSshPublicKey(input []interface{}) *[]compute.SshPublicKey {
    results := make([]compute.SshPublicKey, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        path := v["path"].(string)
        keyData := v["key_data"].(string)

        result := compute.SshPublicKey{
            KeyData: utils.String(keyData),
            Path: utils.String(path),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualMachineWinRMListener(input []interface{}) *[]compute.WinRMListener {
    results := make([]compute.WinRMListener, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        protocol := v["protocol"].(string)
        certificateUrl := v["certificate_url"].(string)

        result := compute.WinRMListener{
            CertificateURL: utils.String(certificateUrl),
            Protocol: compute.ProtocolTypes(protocol),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmVirtualMachineKeyVaultSecretReference(input []interface{}) *compute.KeyVaultSecretReference {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    secretUrl := v["secret_url"].(string)
    sourceVault := v["source_vault"].([]interface{})

    result := compute.KeyVaultSecretReference{
        SecretURL: utils.String(secretUrl),
        SourceVault: expandArmVirtualMachineSubResource(sourceVault),
    }
    return &result
}

func expandArmVirtualMachineKeyVaultKeyReference(input []interface{}) *compute.KeyVaultKeyReference {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    keyUrl := v["key_url"].(string)
    sourceVault := v["source_vault"].([]interface{})

    result := compute.KeyVaultKeyReference{
        KeyURL: utils.String(keyUrl),
        SourceVault: expandArmVirtualMachineSubResource(sourceVault),
    }
    return &result
}


func flattenArmVirtualMachineVirtualMachineExtension(input *[]compute.VirtualMachineExtension) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if type := item.Type; type != nil {
            v["type"] = *type
        }

        results = append(results, v)
    }

    return results
}
