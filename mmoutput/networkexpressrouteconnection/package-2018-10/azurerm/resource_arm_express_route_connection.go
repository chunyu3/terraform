// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmExpressRouteConnection() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmExpressRouteConnectionCreateUpdate,
        Read: resourceArmExpressRouteConnectionRead,
        Update: resourceArmExpressRouteConnectionCreateUpdate,
        Delete: resourceArmExpressRouteConnectionDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "connection_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "express_route_circuit_peering": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "express_route_gateway_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "authorization_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "routing_weight": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmExpressRouteConnectionCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).expressRouteConnectionsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    connectionName := d.Get("connection_name").(string)
    expressRouteGatewayName := d.Get("express_route_gateway_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, expressRouteGatewayName, connectionName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Express Route Connection (Connection Name %q / Express Route Gateway Name %q / Resource Group %q): %+v", connectionName, expressRouteGatewayName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_express_route_connection", *existing.ID)
        }
    }

    id := d.Get("id").(string)
    name := d.Get("name").(string)
    authorizationKey := d.Get("authorization_key").(string)
    expressRouteCircuitPeering := d.Get("express_route_circuit_peering").([]interface{})
    routingWeight := d.Get("routing_weight").(int)

    putExpressRouteConnectionParameters := network.ExpressRouteConnection{
        ID: utils.String(id),
        Name: utils.String(name),
        ExpressRouteConnectionProperties: &network.ExpressRouteConnectionProperties{
            AuthorizationKey: utils.String(authorizationKey),
            ExpressRouteCircuitPeering: expandArmExpressRouteConnectionExpressRouteCircuitPeeringId(expressRouteCircuitPeering),
            RoutingWeight: utils.Int(routingWeight),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, expressRouteGatewayName, connectionName, putExpressRouteConnectionParameters)
    if err != nil {
        return fmt.Errorf("Error creating Express Route Connection (Connection Name %q / Express Route Gateway Name %q / Resource Group %q): %+v", connectionName, expressRouteGatewayName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Express Route Connection (Connection Name %q / Express Route Gateway Name %q / Resource Group %q): %+v", connectionName, expressRouteGatewayName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, expressRouteGatewayName, connectionName)
    if err != nil {
        return fmt.Errorf("Error retrieving Express Route Connection (Connection Name %q / Express Route Gateway Name %q / Resource Group %q): %+v", connectionName, expressRouteGatewayName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Express Route Connection (Connection Name %q / Express Route Gateway Name %q / Resource Group %q) ID", connectionName, expressRouteGatewayName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmExpressRouteConnectionRead(d, meta)
}

func resourceArmExpressRouteConnectionRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).expressRouteConnectionsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    expressRouteGatewayName := id.Path["expressRouteGateways"]
    connectionName := id.Path["expressRouteConnections"]

    resp, err := client.Get(ctx, resourceGroup, expressRouteGatewayName, connectionName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Express Route Connection %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Express Route Connection (Connection Name %q / Express Route Gateway Name %q / Resource Group %q): %+v", connectionName, expressRouteGatewayName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if expressRouteConnectionProperties := resp.ExpressRouteConnectionProperties; expressRouteConnectionProperties != nil {
        d.Set("authorization_key", expressRouteConnectionProperties.AuthorizationKey)
        if err := d.Set("express_route_circuit_peering", flattenArmExpressRouteConnectionExpressRouteCircuitPeeringId(expressRouteConnectionProperties.ExpressRouteCircuitPeering)); err != nil {
            return fmt.Errorf("Error setting `express_route_circuit_peering`: %+v", err)
        }
        d.Set("provisioning_state", string(expressRouteConnectionProperties.ProvisioningState))
        d.Set("routing_weight", expressRouteConnectionProperties.RoutingWeight)
    }
    d.Set("connection_name", connectionName)
    d.Set("express_route_gateway_name", expressRouteGatewayName)

    return nil
}


func resourceArmExpressRouteConnectionDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).expressRouteConnectionsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    expressRouteGatewayName := id.Path["expressRouteGateways"]
    connectionName := id.Path["expressRouteConnections"]

    future, err := client.Delete(ctx, resourceGroup, expressRouteGatewayName, connectionName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Express Route Connection (Connection Name %q / Express Route Gateway Name %q / Resource Group %q): %+v", connectionName, expressRouteGatewayName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Express Route Connection (Connection Name %q / Express Route Gateway Name %q / Resource Group %q): %+v", connectionName, expressRouteGatewayName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmExpressRouteConnectionExpressRouteCircuitPeeringId(input []interface{}) *network.ExpressRouteCircuitPeeringId {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := network.ExpressRouteCircuitPeeringId{
        ID: utils.String(id),
    }
    return &result
}


func flattenArmExpressRouteConnectionExpressRouteCircuitPeeringId(input *network.ExpressRouteCircuitPeeringId) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}
