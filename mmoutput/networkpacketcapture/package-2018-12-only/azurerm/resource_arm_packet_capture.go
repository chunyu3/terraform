// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPacketCapture() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPacketCaptureCreateUpdate,
        Read: resourceArmPacketCaptureRead,
        Update: resourceArmPacketCaptureCreateUpdate,
        Delete: resourceArmPacketCaptureDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "network_watcher_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "packet_capture_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "storage_location": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "file_path": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "storage_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "storage_path": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "target": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "bytes_to_capture_per_packet": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "filters": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "local_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "local_port": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "protocol": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(network.TCP),
                                string(network.UDP),
                                string(network.Any),
                            }, false),
                            Default: string(network.TCP),
                        },
                        "remote_ip_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "remote_port": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "time_limit_in_seconds": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "total_bytes_per_session": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmPacketCaptureCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).packetCapturesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    networkWatcherName := d.Get("network_watcher_name").(string)
    packetCaptureName := d.Get("packet_capture_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, networkWatcherName, packetCaptureName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Packet Capture (Packet Capture Name %q / Network Watcher Name %q / Resource Group %q): %+v", packetCaptureName, networkWatcherName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_packet_capture", *existing.ID)
        }
    }

    bytesToCapturePerPacket := d.Get("bytes_to_capture_per_packet").(int)
    filters := d.Get("filters").([]interface{})
    storageLocation := d.Get("storage_location").([]interface{})
    target := d.Get("target").(string)
    timeLimitInSeconds := d.Get("time_limit_in_seconds").(int)
    totalBytesPerSession := d.Get("total_bytes_per_session").(int)

    parameters := network.PacketCapture{
        PacketCaptureParameters: &network.PacketCaptureParameters{
            BytesToCapturePerPacket: utils.Int(bytesToCapturePerPacket),
            Filters: expandArmPacketCapturePacketCaptureFilter(filters),
            StorageLocation: expandArmPacketCapturePacketCaptureStorageLocation(storageLocation),
            Target: utils.String(target),
            TimeLimitInSeconds: utils.Int(timeLimitInSeconds),
            TotalBytesPerSession: utils.Int(totalBytesPerSession),
        },
    }


    future, err := client.Create(ctx, resourceGroup, networkWatcherName, packetCaptureName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Packet Capture (Packet Capture Name %q / Network Watcher Name %q / Resource Group %q): %+v", packetCaptureName, networkWatcherName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Packet Capture (Packet Capture Name %q / Network Watcher Name %q / Resource Group %q): %+v", packetCaptureName, networkWatcherName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, networkWatcherName, packetCaptureName)
    if err != nil {
        return fmt.Errorf("Error retrieving Packet Capture (Packet Capture Name %q / Network Watcher Name %q / Resource Group %q): %+v", packetCaptureName, networkWatcherName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Packet Capture (Packet Capture Name %q / Network Watcher Name %q / Resource Group %q) ID", packetCaptureName, networkWatcherName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmPacketCaptureRead(d, meta)
}

func resourceArmPacketCaptureRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).packetCapturesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    networkWatcherName := id.Path["networkWatchers"]
    packetCaptureName := id.Path["packetCaptures"]

    resp, err := client.Get(ctx, resourceGroup, networkWatcherName, packetCaptureName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Packet Capture %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Packet Capture (Packet Capture Name %q / Network Watcher Name %q / Resource Group %q): %+v", packetCaptureName, networkWatcherName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if packetCaptureParameters := resp.PacketCaptureParameters; packetCaptureParameters != nil {
        d.Set("bytes_to_capture_per_packet", packetCaptureParameters.BytesToCapturePerPacket)
        if err := d.Set("filters", flattenArmPacketCapturePacketCaptureFilter(packetCaptureParameters.Filters)); err != nil {
            return fmt.Errorf("Error setting `filters`: %+v", err)
        }
        d.Set("provisioning_state", string(packetCaptureParameters.ProvisioningState))
        if err := d.Set("storage_location", flattenArmPacketCapturePacketCaptureStorageLocation(packetCaptureParameters.StorageLocation)); err != nil {
            return fmt.Errorf("Error setting `storage_location`: %+v", err)
        }
        d.Set("target", packetCaptureParameters.Target)
        d.Set("time_limit_in_seconds", packetCaptureParameters.TimeLimitInSeconds)
        d.Set("total_bytes_per_session", packetCaptureParameters.TotalBytesPerSession)
    }
    d.Set("etag", resp.Etag)
    d.Set("network_watcher_name", networkWatcherName)
    d.Set("packet_capture_name", packetCaptureName)

    return nil
}


func resourceArmPacketCaptureDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).packetCapturesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    networkWatcherName := id.Path["networkWatchers"]
    packetCaptureName := id.Path["packetCaptures"]

    future, err := client.Delete(ctx, resourceGroup, networkWatcherName, packetCaptureName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Packet Capture (Packet Capture Name %q / Network Watcher Name %q / Resource Group %q): %+v", packetCaptureName, networkWatcherName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Packet Capture (Packet Capture Name %q / Network Watcher Name %q / Resource Group %q): %+v", packetCaptureName, networkWatcherName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmPacketCapturePacketCaptureFilter(input []interface{}) *[]network.PacketCaptureFilter {
    results := make([]network.PacketCaptureFilter, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        protocol := v["protocol"].(string)
        localIpAddress := v["local_ip_address"].(string)
        remoteIpAddress := v["remote_ip_address"].(string)
        localPort := v["local_port"].(string)
        remotePort := v["remote_port"].(string)

        result := network.PacketCaptureFilter{
            LocalIpAddress: utils.String(localIpAddress),
            LocalPort: utils.String(localPort),
            Protocol: network.PcProtocol(protocol),
            RemoteIpAddress: utils.String(remoteIpAddress),
            RemotePort: utils.String(remotePort),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmPacketCapturePacketCaptureStorageLocation(input []interface{}) *network.PacketCaptureStorageLocation {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    storageId := v["storage_id"].(string)
    storagePath := v["storage_path"].(string)
    filePath := v["file_path"].(string)

    result := network.PacketCaptureStorageLocation{
        FilePath: utils.String(filePath),
        StorageID: utils.String(storageId),
        StoragePath: utils.String(storagePath),
    }
    return &result
}


func flattenArmPacketCapturePacketCaptureFilter(input *[]network.PacketCaptureFilter) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if localIpAddress := item.LocalIpAddress; localIpAddress != nil {
            v["local_ip_address"] = *localIpAddress
        }
        if localPort := item.LocalPort; localPort != nil {
            v["local_port"] = *localPort
        }
        v["protocol"] = string(item.Protocol)
        if remoteIpAddress := item.RemoteIpAddress; remoteIpAddress != nil {
            v["remote_ip_address"] = *remoteIpAddress
        }
        if remotePort := item.RemotePort; remotePort != nil {
            v["remote_port"] = *remotePort
        }

        results = append(results, v)
    }

    return results
}

func flattenArmPacketCapturePacketCaptureStorageLocation(input *network.PacketCaptureStorageLocation) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if filePath := input.FilePath; filePath != nil {
        result["file_path"] = *filePath
    }
    if storageId := input.StorageID; storageId != nil {
        result["storage_id"] = *storageId
    }
    if storagePath := input.StoragePath; storagePath != nil {
        result["storage_path"] = *storagePath
    }

    return []interface{}{result}
}
