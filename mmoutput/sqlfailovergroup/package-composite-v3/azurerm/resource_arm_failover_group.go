// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmFailoverGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmFailoverGroupCreate,
        Read: resourceArmFailoverGroupRead,
        Update: resourceArmFailoverGroupUpdate,
        Delete: resourceArmFailoverGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "server_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "databases": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "read_only_endpoint": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "failover_policy": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(sql.Disabled),
                                string(sql.Enabled),
                            }, false),
                            Default: string(sql.Disabled),
                        },
                    },
                },
            },

            "read_write_endpoint": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "failover_policy": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(sql.Manual),
                                string(sql.Automatic),
                            }, false),
                        },
                        "failover_with_data_loss_grace_period_minutes": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmFailoverGroupCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).failoverGroupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    serverName := d.Get("server_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serverName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Failover Group %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_failover_group", *existing.ID)
        }
    }

    databases := d.Get("databases").([]interface{})
    readOnlyEndpoint := d.Get("read_only_endpoint").([]interface{})
    readWriteEndpoint := d.Get("read_write_endpoint").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := sql.FailoverGroupUpdate{
        FailoverGroupUpdateProperties: &sql.FailoverGroupUpdateProperties{
            Databases: utils.ExpandStringSlice(databases),
            ReadOnlyEndpoint: expandArmFailoverGroupFailoverGroupReadOnlyEndpoint(readOnlyEndpoint),
            ReadWriteEndpoint: expandArmFailoverGroupFailoverGroupReadWriteEndpoint(readWriteEndpoint),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, serverName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Failover Group %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Failover Group %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serverName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Failover Group %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Failover Group %q (Server Name %q / Resource Group %q) ID", name, serverName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmFailoverGroupRead(d, meta)
}

func resourceArmFailoverGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).failoverGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    name := id.Path["failoverGroups"]

    resp, err := client.Get(ctx, resourceGroup, serverName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Failover Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Failover Group %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("server_name", serverName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmFailoverGroupUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).failoverGroupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    databases := d.Get("databases").([]interface{})
    readOnlyEndpoint := d.Get("read_only_endpoint").([]interface{})
    readWriteEndpoint := d.Get("read_write_endpoint").([]interface{})
    serverName := d.Get("server_name").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := sql.FailoverGroupUpdate{
        FailoverGroupUpdateProperties: &sql.FailoverGroupUpdateProperties{
            Databases: utils.ExpandStringSlice(databases),
            ReadOnlyEndpoint: expandArmFailoverGroupFailoverGroupReadOnlyEndpoint(readOnlyEndpoint),
            ReadWriteEndpoint: expandArmFailoverGroupFailoverGroupReadWriteEndpoint(readWriteEndpoint),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, serverName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Failover Group %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Failover Group %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }

    return resourceArmFailoverGroupRead(d, meta)
}

func resourceArmFailoverGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).failoverGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serverName := id.Path["servers"]
    name := id.Path["failoverGroups"]

    future, err := client.Delete(ctx, resourceGroup, serverName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Failover Group %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Failover Group %q (Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmFailoverGroupFailoverGroupReadOnlyEndpoint(input []interface{}) *sql.FailoverGroupReadOnlyEndpoint {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    failoverPolicy := v["failover_policy"].(string)

    result := sql.FailoverGroupReadOnlyEndpoint{
        FailoverPolicy: sql.ReadOnlyEndpointFailoverPolicy(failoverPolicy),
    }
    return &result
}

func expandArmFailoverGroupFailoverGroupReadWriteEndpoint(input []interface{}) *sql.FailoverGroupReadWriteEndpoint {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    failoverPolicy := v["failover_policy"].(string)
    failoverWithDataLossGracePeriodMinutes := v["failover_with_data_loss_grace_period_minutes"].(int)

    result := sql.FailoverGroupReadWriteEndpoint{
        FailoverPolicy: sql.ReadWriteEndpointFailoverPolicy(failoverPolicy),
        FailoverWithDataLossGracePeriodMinutes: utils.Int32(int32(failoverWithDataLossGracePeriodMinutes)),
    }
    return &result
}
