// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmFormula() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmFormulaCreate,
        Read: resourceArmFormulaRead,
        Update: resourceArmFormulaUpdate,
        Delete: resourceArmFormulaDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "author": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "formula_content": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "allow_claim": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "artifact_deployment_status": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "artifacts_applied": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "deployment_status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "total_artifacts": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "artifacts": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "artifact_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "artifact_title": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "deployment_status_message": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "install_time": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validateRFC3339Date,
                                    },
                                    "parameters": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "name": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "value": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "vm_extension_status_message": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "bulk_creation_parameters": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "instance_count": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "compute_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "created_by_user": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "created_by_user_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "created_date": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "custom_image_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "data_disk_parameters": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "attach_new_data_disk_options": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "disk_name": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "disk_size_gi_b": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                                "disk_type": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                    ValidateFunc: validation.StringInSlice([]string{
                                                        string(devtestlab.Standard),
                                                        string(devtestlab.Premium),
                                                        string(devtestlab.StandardSSD),
                                                    }, false),
                                                    Default: string(devtestlab.Standard),
                                                },
                                            },
                                        },
                                    },
                                    "existing_lab_disk_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "host_caching": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(devtestlab.None),
                                            string(devtestlab.ReadOnly),
                                            string(devtestlab.ReadWrite),
                                        }, false),
                                        Default: string(devtestlab.None),
                                    },
                                },
                            },
                        },
                        "disallow_public_ip_address": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "environment_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "expiration_date": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "fqdn": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "gallery_image_reference": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "offer": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "os_type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "publisher": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "sku": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "version": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "is_authentication_with_ssh_key": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "lab_subnet_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "lab_virtual_network_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "last_known_power_state": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "location": azure.SchemaLocation(),
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "network_interface": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "dns_name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "private_ip_address": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "public_ip_address": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "public_ip_address_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "rdp_authority": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "shared_public_ip_address_configuration": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "inbound_nat_rules": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    Elem: &schema.Resource{
                                                        Schema: map[string]*schema.Schema{
                                                            "backend_port": {
                                                                Type: schema.TypeInt,
                                                                Optional: true,
                                                            },
                                                            "frontend_port": {
                                                                Type: schema.TypeInt,
                                                                Optional: true,
                                                            },
                                                            "transport_protocol": {
                                                                Type: schema.TypeString,
                                                                Optional: true,
                                                                ValidateFunc: validation.StringInSlice([]string{
                                                                    string(devtestlab.Tcp),
                                                                    string(devtestlab.Udp),
                                                                }, false),
                                                                Default: string(devtestlab.Tcp),
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                    "ssh_authority": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "subnet_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "virtual_network_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "notes": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "os_type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "owner_object_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "owner_user_principal_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "password": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "plan_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "schedule_parameters": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "daily_recurrence": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "time": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "hourly_recurrence": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "minute": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "location": azure.SchemaLocation(),
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "notification_settings": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "email_recipient": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "notification_locale": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "status": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                    ValidateFunc: validation.StringInSlice([]string{
                                                        string(devtestlab.Enabled),
                                                        string(devtestlab.Disabled),
                                                    }, false),
                                                    Default: string(devtestlab.Enabled),
                                                },
                                                "time_in_minutes": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                                "webhook_url": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validation.StringInSlice([]string{
                                            string(devtestlab.Enabled),
                                            string(devtestlab.Disabled),
                                        }, false),
                                        Default: string(devtestlab.Enabled),
                                    },
                                    "tags": tags.Schema(),
                                    "target_resource_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "task_type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "time_zone_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "weekly_recurrence": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "time": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "weekdays": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    Elem: &schema.Schema{
                                                        Type: schema.TypeString,
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "size": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "ssh_key": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "storage_type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tags": tags.Schema(),
                        "user_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "virtual_machine_creation_source": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(devtestlab.FromCustomImage),
                                string(devtestlab.FromGalleryImage),
                                string(devtestlab.FromSharedGalleryImage),
                            }, false),
                            Default: string(devtestlab.FromCustomImage),
                        },
                    },
                },
            },

            "os_type": {
                Type: schema.TypeString,
                Optional: true,
            },

            "vm": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "lab_vm_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmFormulaCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).formulasClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Formula %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_formula", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    author := d.Get("author").(string)
    description := d.Get("description").(string)
    formulaContent := d.Get("formula_content").([]interface{})
    osType := d.Get("os_type").(string)
    vm := d.Get("vm").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    formula := devtestlab.FormulaFragment{
        Location: utils.String(location),
        FormulaPropertiesFragment: &devtestlab.FormulaPropertiesFragment{
            Author: utils.String(author),
            Description: utils.String(description),
            FormulaContent: expandArmFormulaLabVirtualMachineCreationParameterFragment(formulaContent),
            OsType: utils.String(osType),
            VM: expandArmFormulaFormulaPropertiesFromVmFragment(vm),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, name, formula)
    if err != nil {
        return fmt.Errorf("Error creating Formula %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Formula %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Formula %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Formula %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmFormulaRead(d, meta)
}

func resourceArmFormulaRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).formulasClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["labs"]
    name := id.Path["formulas"]

    resp, err := client.Get(ctx, resourceGroup, name, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Formula %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Formula %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmFormulaUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).formulasClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    author := d.Get("author").(string)
    description := d.Get("description").(string)
    formulaContent := d.Get("formula_content").([]interface{})
    osType := d.Get("os_type").(string)
    vm := d.Get("vm").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    formula := devtestlab.FormulaFragment{
        FormulaPropertiesFragment: &devtestlab.FormulaPropertiesFragment{
            Author: utils.String(author),
            Description: utils.String(description),
            FormulaContent: expandArmFormulaLabVirtualMachineCreationParameterFragment(formulaContent),
            OsType: utils.String(osType),
            VM: expandArmFormulaFormulaPropertiesFromVmFragment(vm),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, name, formula); err != nil {
        return fmt.Errorf("Error updating Formula %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmFormulaRead(d, meta)
}

func resourceArmFormulaDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).formulasClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["labs"]
    name := id.Path["formulas"]

    if _, err := client.Delete(ctx, resourceGroup, name, name); err != nil {
        return fmt.Errorf("Error deleting Formula %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}

func expandArmFormulaLabVirtualMachineCreationParameterFragment(input []interface{}) *devtestlab.LabVirtualMachineCreationParameterFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    bulkCreationParameters := v["bulk_creation_parameters"].([]interface{})
    notes := v["notes"].(string)
    ownerObjectId := v["owner_object_id"].(string)
    ownerUserPrincipalName := v["owner_user_principal_name"].(string)
    createdByUserId := v["created_by_user_id"].(string)
    createdByUser := v["created_by_user"].(string)
    createdDate := v["created_date"].(string)
    computeId := v["compute_id"].(string)
    customImageId := v["custom_image_id"].(string)
    osType := v["os_type"].(string)
    size := v["size"].(string)
    userName := v["user_name"].(string)
    password := v["password"].(string)
    sshKey := v["ssh_key"].(string)
    isAuthenticationWithSshKey := v["is_authentication_with_ssh_key"].(bool)
    fqdn := v["fqdn"].(string)
    labSubnetName := v["lab_subnet_name"].(string)
    labVirtualNetworkId := v["lab_virtual_network_id"].(string)
    disallowPublicIpAddress := v["disallow_public_ip_address"].(bool)
    artifacts := v["artifacts"].([]interface{})
    artifactDeploymentStatus := v["artifact_deployment_status"].([]interface{})
    galleryImageReference := v["gallery_image_reference"].([]interface{})
    planId := v["plan_id"].(string)
    networkInterface := v["network_interface"].([]interface{})
    expirationDate := v["expiration_date"].(string)
    allowClaim := v["allow_claim"].(bool)
    storageType := v["storage_type"].(string)
    virtualMachineCreationSource := v["virtual_machine_creation_source"].(string)
    environmentId := v["environment_id"].(string)
    dataDiskParameters := v["data_disk_parameters"].([]interface{})
    scheduleParameters := v["schedule_parameters"].([]interface{})
    lastKnownPowerState := v["last_known_power_state"].(string)
    name := v["name"].(string)
    location := azure.NormalizeLocation(v["location"].(string))
    t := v["tags"].(map[string]interface{})

    result := devtestlab.LabVirtualMachineCreationParameterFragment{
        Location: utils.String(location),
        Name: utils.String(name),
        LabVirtualMachineCreationParameterPropertiesFragment: &devtestlab.LabVirtualMachineCreationParameterPropertiesFragment{
            AllowClaim: utils.Bool(allowClaim),
            ArtifactDeploymentStatus: expandArmFormulaArtifactDeploymentStatusPropertiesFragment(artifactDeploymentStatus),
            Artifacts: expandArmFormulaArtifactInstallPropertiesFragment(artifacts),
            BulkCreationParameters: expandArmFormulaBulkCreationParametersFragment(bulkCreationParameters),
            ComputeID: utils.String(computeId),
            CreatedByUser: utils.String(createdByUser),
            CreatedByUserID: utils.String(createdByUserId),
            CreatedDate: convertStringToDate(createdDate),
            CustomImageID: utils.String(customImageId),
            DataDiskParameters: expandArmFormulaDataDiskPropertiesFragment(dataDiskParameters),
            DisallowPublicIPAddress: utils.Bool(disallowPublicIpAddress),
            EnvironmentID: utils.String(environmentId),
            ExpirationDate: convertStringToDate(expirationDate),
            Fqdn: utils.String(fqdn),
            GalleryImageReference: expandArmFormulaGalleryImageReferenceFragment(galleryImageReference),
            IsAuthenticationWithSSHKey: utils.Bool(isAuthenticationWithSshKey),
            LabSubnetName: utils.String(labSubnetName),
            LabVirtualNetworkID: utils.String(labVirtualNetworkId),
            LastKnownPowerState: utils.String(lastKnownPowerState),
            NetworkInterface: expandArmFormulaNetworkInterfacePropertiesFragment(networkInterface),
            Notes: utils.String(notes),
            OsType: utils.String(osType),
            OwnerObjectID: utils.String(ownerObjectId),
            OwnerUserPrincipalName: utils.String(ownerUserPrincipalName),
            Password: utils.String(password),
            PlanID: utils.String(planId),
            ScheduleParameters: expandArmFormulaScheduleCreationParameterFragment(scheduleParameters),
            Size: utils.String(size),
            SSHKey: utils.String(sshKey),
            StorageType: utils.String(storageType),
            UserName: utils.String(userName),
            VirtualMachineCreationSource: devtestlab.VirtualMachineCreationSource(virtualMachineCreationSource),
        },
        Tags: tags.Expand(t),
    }
    return &result
}

func expandArmFormulaFormulaPropertiesFromVmFragment(input []interface{}) *devtestlab.FormulaPropertiesFromVmFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    labVmId := v["lab_vm_id"].(string)

    result := devtestlab.FormulaPropertiesFromVmFragment{
        LabVMID: utils.String(labVmId),
    }
    return &result
}

func expandArmFormulaArtifactDeploymentStatusPropertiesFragment(input []interface{}) *devtestlab.ArtifactDeploymentStatusPropertiesFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    deploymentStatus := v["deployment_status"].(string)
    artifactsApplied := v["artifacts_applied"].(int)
    totalArtifacts := v["total_artifacts"].(int)

    result := devtestlab.ArtifactDeploymentStatusPropertiesFragment{
        ArtifactsApplied: utils.Int32(int32(artifactsApplied)),
        DeploymentStatus: utils.String(deploymentStatus),
        TotalArtifacts: utils.Int32(int32(totalArtifacts)),
    }
    return &result
}

func expandArmFormulaArtifactInstallPropertiesFragment(input []interface{}) *[]devtestlab.ArtifactInstallPropertiesFragment {
    results := make([]devtestlab.ArtifactInstallPropertiesFragment, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        artifactId := v["artifact_id"].(string)
        artifactTitle := v["artifact_title"].(string)
        parameters := v["parameters"].([]interface{})
        status := v["status"].(string)
        deploymentStatusMessage := v["deployment_status_message"].(string)
        vmExtensionStatusMessage := v["vm_extension_status_message"].(string)
        installTime := v["install_time"].(string)

        result := devtestlab.ArtifactInstallPropertiesFragment{
            ArtifactID: utils.String(artifactId),
            ArtifactTitle: utils.String(artifactTitle),
            DeploymentStatusMessage: utils.String(deploymentStatusMessage),
            InstallTime: convertStringToDate(installTime),
            Parameters: expandArmFormulaArtifactParameterPropertiesFragment(parameters),
            Status: utils.String(status),
            VMExtensionStatusMessage: utils.String(vmExtensionStatusMessage),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFormulaBulkCreationParametersFragment(input []interface{}) *devtestlab.BulkCreationParametersFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    instanceCount := v["instance_count"].(int)

    result := devtestlab.BulkCreationParametersFragment{
        InstanceCount: utils.Int32(int32(instanceCount)),
    }
    return &result
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}

func expandArmFormulaDataDiskPropertiesFragment(input []interface{}) *[]devtestlab.DataDiskPropertiesFragment {
    results := make([]devtestlab.DataDiskPropertiesFragment, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        attachNewDataDiskOptions := v["attach_new_data_disk_options"].([]interface{})
        existingLabDiskId := v["existing_lab_disk_id"].(string)
        hostCaching := v["host_caching"].(string)

        result := devtestlab.DataDiskPropertiesFragment{
            AttachNewDataDiskOptions: expandArmFormulaAttachNewDataDiskOptionsFragment(attachNewDataDiskOptions),
            ExistingLabDiskID: utils.String(existingLabDiskId),
            HostCaching: devtestlab.HostCachingOptions(hostCaching),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFormulaGalleryImageReferenceFragment(input []interface{}) *devtestlab.GalleryImageReferenceFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    offer := v["offer"].(string)
    publisher := v["publisher"].(string)
    sku := v["sku"].(string)
    osType := v["os_type"].(string)
    version := v["version"].(string)

    result := devtestlab.GalleryImageReferenceFragment{
        Offer: utils.String(offer),
        OsType: utils.String(osType),
        Publisher: utils.String(publisher),
        Sku: utils.String(sku),
        Version: utils.String(version),
    }
    return &result
}

func expandArmFormulaNetworkInterfacePropertiesFragment(input []interface{}) *devtestlab.NetworkInterfacePropertiesFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    virtualNetworkId := v["virtual_network_id"].(string)
    subnetId := v["subnet_id"].(string)
    publicIpAddressId := v["public_ip_address_id"].(string)
    publicIpAddress := v["public_ip_address"].(string)
    privateIpAddress := v["private_ip_address"].(string)
    dnsName := v["dns_name"].(string)
    rdpAuthority := v["rdp_authority"].(string)
    sshAuthority := v["ssh_authority"].(string)
    sharedPublicIpAddressConfiguration := v["shared_public_ip_address_configuration"].([]interface{})

    result := devtestlab.NetworkInterfacePropertiesFragment{
        DNSName: utils.String(dnsName),
        PrivateIPAddress: utils.String(privateIpAddress),
        PublicIPAddress: utils.String(publicIpAddress),
        PublicIPAddressID: utils.String(publicIpAddressId),
        RdpAuthority: utils.String(rdpAuthority),
        SharedPublicIPAddressConfiguration: expandArmFormulaSharedPublicIpAddressConfigurationFragment(sharedPublicIpAddressConfiguration),
        SSHAuthority: utils.String(sshAuthority),
        SubnetID: utils.String(subnetId),
        VirtualNetworkID: utils.String(virtualNetworkId),
    }
    return &result
}

func expandArmFormulaScheduleCreationParameterFragment(input []interface{}) *[]devtestlab.ScheduleCreationParameterFragment {
    results := make([]devtestlab.ScheduleCreationParameterFragment, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        status := v["status"].(string)
        taskType := v["task_type"].(string)
        weeklyRecurrence := v["weekly_recurrence"].([]interface{})
        dailyRecurrence := v["daily_recurrence"].([]interface{})
        hourlyRecurrence := v["hourly_recurrence"].([]interface{})
        timeZoneId := v["time_zone_id"].(string)
        notificationSettings := v["notification_settings"].([]interface{})
        targetResourceId := v["target_resource_id"].(string)
        name := v["name"].(string)
        location := azure.NormalizeLocation(v["location"].(string))
        t := v["tags"].(map[string]interface{})

        result := devtestlab.ScheduleCreationParameterFragment{
            Location: utils.String(location),
            Name: utils.String(name),
            ScheduleCreationParameterPropertiesFragment: &devtestlab.ScheduleCreationParameterPropertiesFragment{
                DailyRecurrence: expandArmFormulaDayDetailsFragment(dailyRecurrence),
                HourlyRecurrence: expandArmFormulaHourDetailsFragment(hourlyRecurrence),
                NotificationSettings: expandArmFormulaNotificationSettingsFragment(notificationSettings),
                Status: devtestlab.EnableStatus(status),
                TargetResourceID: utils.String(targetResourceId),
                TaskType: utils.String(taskType),
                TimeZoneID: utils.String(timeZoneId),
                WeeklyRecurrence: expandArmFormulaWeekDetailsFragment(weeklyRecurrence),
            },
            Tags: tags.Expand(t),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFormulaArtifactParameterPropertiesFragment(input []interface{}) *[]devtestlab.ArtifactParameterPropertiesFragment {
    results := make([]devtestlab.ArtifactParameterPropertiesFragment, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        value := v["value"].(string)

        result := devtestlab.ArtifactParameterPropertiesFragment{
            Name: utils.String(name),
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFormulaAttachNewDataDiskOptionsFragment(input []interface{}) *devtestlab.AttachNewDataDiskOptionsFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    diskSizeGiB := v["disk_size_gi_b"].(int)
    diskName := v["disk_name"].(string)
    diskType := v["disk_type"].(string)

    result := devtestlab.AttachNewDataDiskOptionsFragment{
        DiskName: utils.String(diskName),
        DiskSizeGiB: utils.Int32(int32(diskSizeGiB)),
        DiskType: devtestlab.StorageType(diskType),
    }
    return &result
}

func expandArmFormulaSharedPublicIpAddressConfigurationFragment(input []interface{}) *devtestlab.SharedPublicIpAddressConfigurationFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    inboundNatRules := v["inbound_nat_rules"].([]interface{})

    result := devtestlab.SharedPublicIpAddressConfigurationFragment{
        InboundNatRules: expandArmFormulaInboundNatRuleFragment(inboundNatRules),
    }
    return &result
}

func expandArmFormulaDayDetailsFragment(input []interface{}) *devtestlab.DayDetailsFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    time := v["time"].(string)

    result := devtestlab.DayDetailsFragment{
        Time: utils.String(time),
    }
    return &result
}

func expandArmFormulaHourDetailsFragment(input []interface{}) *devtestlab.HourDetailsFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    minute := v["minute"].(int)

    result := devtestlab.HourDetailsFragment{
        Minute: utils.Int32(int32(minute)),
    }
    return &result
}

func expandArmFormulaNotificationSettingsFragment(input []interface{}) *devtestlab.NotificationSettingsFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    status := v["status"].(string)
    timeInMinutes := v["time_in_minutes"].(int)
    webhookUrl := v["webhook_url"].(string)
    emailRecipient := v["email_recipient"].(string)
    notificationLocale := v["notification_locale"].(string)

    result := devtestlab.NotificationSettingsFragment{
        EmailRecipient: utils.String(emailRecipient),
        NotificationLocale: utils.String(notificationLocale),
        Status: devtestlab.EnableStatus(status),
        TimeInMinutes: utils.Int32(int32(timeInMinutes)),
        WebhookURL: utils.String(webhookUrl),
    }
    return &result
}

func expandArmFormulaWeekDetailsFragment(input []interface{}) *devtestlab.WeekDetailsFragment {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    weekdays := v["weekdays"].([]interface{})
    time := v["time"].(string)

    result := devtestlab.WeekDetailsFragment{
        Time: utils.String(time),
        Weekdays: utils.ExpandStringSlice(weekdays),
    }
    return &result
}

func expandArmFormulaInboundNatRuleFragment(input []interface{}) *[]devtestlab.InboundNatRuleFragment {
    results := make([]devtestlab.InboundNatRuleFragment, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        transportProtocol := v["transport_protocol"].(string)
        frontendPort := v["frontend_port"].(int)
        backendPort := v["backend_port"].(int)

        result := devtestlab.InboundNatRuleFragment{
            BackendPort: utils.Int32(int32(backendPort)),
            FrontendPort: utils.Int32(int32(frontendPort)),
            TransportProtocol: devtestlab.TransportProtocol(transportProtocol),
        }

        results = append(results, result)
    }
    return &results
}
