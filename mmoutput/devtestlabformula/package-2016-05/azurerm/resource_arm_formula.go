// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmFormula() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmFormulaCreateUpdate,
        Read: resourceArmFormulaRead,
        Update: resourceArmFormulaCreateUpdate,
        Delete: resourceArmFormulaDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "lab_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "author": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "formula_content": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "allow_claim": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "applicable_schedule": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "location": azure.SchemaLocation(),
                                    "tags": tags.Schema(),
                                },
                            },
                        },
                        "artifact_deployment_status": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "artifacts_applied": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                    "deployment_status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "total_artifacts": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "artifacts": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "artifact_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "deployment_status_message": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "install_time": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                        ValidateFunc: validateRFC3339Date,
                                    },
                                    "status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "vm_extension_status_message": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "bulk_creation_parameters": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "instance_count": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "compute_vm": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "data_disk_ids": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                    "network_interface_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "os_disk_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "os_type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "vm_size": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "created_by_user": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "created_by_user_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "created_date": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "custom_image_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "disallow_public_ip_address": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "environment_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "expiration_date": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "fqdn": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "gallery_image_reference": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "offer": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "os_type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "publisher": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "sku": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "version": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "is_authentication_with_ssh_key": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "lab_subnet_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "lab_virtual_network_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "location": azure.SchemaLocation(),
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "network_interface": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "dns_name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "private_ip_address": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "public_ip_address": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "public_ip_address_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "rdp_authority": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "ssh_authority": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "subnet_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "virtual_network_id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "notes": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "os_type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "owner_object_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "owner_user_principal_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "password": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "size": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "ssh_key": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "storage_type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tags": tags.Schema(),
                        "unique_identifier": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "user_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "virtual_machine_creation_source": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(devtestlab.FromCustomImage),
                                string(devtestlab.FromGalleryImage),
                            }, false),
                            Default: string(devtestlab.FromCustomImage),
                        },
                    },
                },
            },

            "os_type": {
                Type: schema.TypeString,
                Optional: true,
            },

            "unique_identifier": {
                Type: schema.TypeString,
                Optional: true,
            },

            "vm": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "lab_vm_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "creation_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmFormulaCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).formulasClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    labName := d.Get("lab_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, labName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Formula %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_formula", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    author := d.Get("author").(string)
    description := d.Get("description").(string)
    formulaContent := d.Get("formula_content").([]interface{})
    osType := d.Get("os_type").(string)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    vm := d.Get("vm").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    formula := devtestlab.Formula{
        Location: utils.String(location),
        FormulaProperties: &devtestlab.FormulaProperties{
            Author: utils.String(author),
            Description: utils.String(description),
            FormulaContent: expandArmFormulaLabVirtualMachineCreationParameter(formulaContent),
            OsType: utils.String(osType),
            UniqueIdentifier: utils.String(uniqueIdentifier),
            Vm: expandArmFormulaFormulaPropertiesFromVm(vm),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, labName, name, formula)
    if err != nil {
        return fmt.Errorf("Error creating Formula %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Formula %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, labName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Formula %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Formula %q (Lab Name %q / Resource Group %q) ID", name, labName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmFormulaRead(d, meta)
}

func resourceArmFormulaRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).formulasClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    labName := id.Path["labs"]
    name := id.Path["formulas"]

    resp, err := client.Get(ctx, resourceGroup, labName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Formula %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Formula %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if formulaProperties := resp.FormulaProperties; formulaProperties != nil {
        d.Set("author", formulaProperties.Author)
        d.Set("creation_date", (formulaProperties.CreationDate).String())
        d.Set("description", formulaProperties.Description)
        if err := d.Set("formula_content", flattenArmFormulaLabVirtualMachineCreationParameter(formulaProperties.FormulaContent)); err != nil {
            return fmt.Errorf("Error setting `formula_content`: %+v", err)
        }
        d.Set("os_type", formulaProperties.OsType)
        d.Set("provisioning_state", formulaProperties.ProvisioningState)
        d.Set("unique_identifier", formulaProperties.UniqueIdentifier)
        if err := d.Set("vm", flattenArmFormulaFormulaPropertiesFromVm(formulaProperties.Vm)); err != nil {
            return fmt.Errorf("Error setting `vm`: %+v", err)
        }
    }
    d.Set("lab_name", labName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmFormulaDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).formulasClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    labName := id.Path["labs"]
    name := id.Path["formulas"]

    if _, err := client.Delete(ctx, resourceGroup, labName, name); err != nil {
        return fmt.Errorf("Error deleting Formula %q (Lab Name %q / Resource Group %q): %+v", name, labName, resourceGroup, err)
    }

    return nil
}

func expandArmFormulaLabVirtualMachineCreationParameter(input []interface{}) *devtestlab.LabVirtualMachineCreationParameter {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    bulkCreationParameters := v["bulk_creation_parameters"].([]interface{})
    notes := v["notes"].(string)
    ownerObjectId := v["owner_object_id"].(string)
    ownerUserPrincipalName := v["owner_user_principal_name"].(string)
    createdByUserId := v["created_by_user_id"].(string)
    createdByUser := v["created_by_user"].(string)
    createdDate := v["created_date"].(string)
    customImageId := v["custom_image_id"].(string)
    osType := v["os_type"].(string)
    size := v["size"].(string)
    userName := v["user_name"].(string)
    password := v["password"].(string)
    sshKey := v["ssh_key"].(string)
    isAuthenticationWithSshKey := v["is_authentication_with_ssh_key"].(bool)
    fqdn := v["fqdn"].(string)
    labSubnetName := v["lab_subnet_name"].(string)
    labVirtualNetworkId := v["lab_virtual_network_id"].(string)
    disallowPublicIpAddress := v["disallow_public_ip_address"].(bool)
    artifacts := v["artifacts"].([]interface{})
    artifactDeploymentStatus := v["artifact_deployment_status"].([]interface{})
    galleryImageReference := v["gallery_image_reference"].([]interface{})
    computeVm := v["compute_vm"].([]interface{})
    networkInterface := v["network_interface"].([]interface{})
    applicableSchedule := v["applicable_schedule"].([]interface{})
    expirationDate := v["expiration_date"].(string)
    allowClaim := v["allow_claim"].(bool)
    storageType := v["storage_type"].(string)
    virtualMachineCreationSource := v["virtual_machine_creation_source"].(string)
    environmentId := v["environment_id"].(string)
    uniqueIdentifier := v["unique_identifier"].(string)
    name := v["name"].(string)
    location := azure.NormalizeLocation(v["location"].(string))
    t := v["tags"].(map[string]interface{})

    result := devtestlab.LabVirtualMachineCreationParameter{
        Location: utils.String(location),
        Name: utils.String(name),
        LabVirtualMachineCreationParameterProperties: &devtestlab.LabVirtualMachineCreationParameterProperties{
            AllowClaim: utils.Bool(allowClaim),
            ApplicableSchedule: expandArmFormulaApplicableSchedule(applicableSchedule),
            ArtifactDeploymentStatus: expandArmFormulaArtifactDeploymentStatusProperties(artifactDeploymentStatus),
            Artifacts: expandArmFormulaArtifactInstallProperties(artifacts),
            BulkCreationParameters: expandArmFormulaBulkCreationParameters(bulkCreationParameters),
            ComputeVm: expandArmFormulaComputeVmProperties(computeVm),
            CreatedByUser: utils.String(createdByUser),
            CreatedByUserID: utils.String(createdByUserId),
            CreatedDate: convertStringToDate(createdDate),
            CustomImageID: utils.String(customImageId),
            DisallowPublicIpAddress: utils.Bool(disallowPublicIpAddress),
            EnvironmentID: utils.String(environmentId),
            ExpirationDate: convertStringToDate(expirationDate),
            Fqdn: utils.String(fqdn),
            GalleryImageReference: expandArmFormulaGalleryImageReference(galleryImageReference),
            IsAuthenticationWithSshKey: utils.Bool(isAuthenticationWithSshKey),
            LabSubnetName: utils.String(labSubnetName),
            LabVirtualNetworkID: utils.String(labVirtualNetworkId),
            NetworkInterface: expandArmFormulaNetworkInterfaceProperties(networkInterface),
            Notes: utils.String(notes),
            OsType: utils.String(osType),
            OwnerObjectID: utils.String(ownerObjectId),
            OwnerUserPrincipalName: utils.String(ownerUserPrincipalName),
            Password: utils.String(password),
            Size: utils.String(size),
            SshKey: utils.String(sshKey),
            StorageType: utils.String(storageType),
            UniqueIdentifier: utils.String(uniqueIdentifier),
            UserName: utils.String(userName),
            VirtualMachineCreationSource: devtestlab.VirtualMachineCreationSource(virtualMachineCreationSource),
        },
        Tags: tags.Expand(t),
    }
    return &result
}

func expandArmFormulaFormulaPropertiesFromVm(input []interface{}) *devtestlab.FormulaPropertiesFromVm {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    labVmId := v["lab_vm_id"].(string)

    result := devtestlab.FormulaPropertiesFromVm{
        LabVmID: utils.String(labVmId),
    }
    return &result
}

func expandArmFormulaApplicableSchedule(input []interface{}) *devtestlab.ApplicableSchedule {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    location := azure.NormalizeLocation(v["location"].(string))
    t := v["tags"].(map[string]interface{})

    result := devtestlab.ApplicableSchedule{
        Location: utils.String(location),
        Tags: tags.Expand(t),
    }
    return &result
}

func expandArmFormulaArtifactDeploymentStatusProperties(input []interface{}) *devtestlab.ArtifactDeploymentStatusProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    deploymentStatus := v["deployment_status"].(string)
    artifactsApplied := v["artifacts_applied"].(int)
    totalArtifacts := v["total_artifacts"].(int)

    result := devtestlab.ArtifactDeploymentStatusProperties{
        ArtifactsApplied: utils.Int32(int32(artifactsApplied)),
        DeploymentStatus: utils.String(deploymentStatus),
        TotalArtifacts: utils.Int32(int32(totalArtifacts)),
    }
    return &result
}

func expandArmFormulaArtifactInstallProperties(input []interface{}) *[]devtestlab.ArtifactInstallProperties {
    results := make([]devtestlab.ArtifactInstallProperties, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        artifactId := v["artifact_id"].(string)
        status := v["status"].(string)
        deploymentStatusMessage := v["deployment_status_message"].(string)
        vmExtensionStatusMessage := v["vm_extension_status_message"].(string)
        installTime := v["install_time"].(string)

        result := devtestlab.ArtifactInstallProperties{
            ArtifactID: utils.String(artifactId),
            DeploymentStatusMessage: utils.String(deploymentStatusMessage),
            InstallTime: convertStringToDate(installTime),
            Status: utils.String(status),
            VmExtensionStatusMessage: utils.String(vmExtensionStatusMessage),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmFormulaBulkCreationParameters(input []interface{}) *devtestlab.BulkCreationParameters {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    instanceCount := v["instance_count"].(int)

    result := devtestlab.BulkCreationParameters{
        InstanceCount: utils.Int32(int32(instanceCount)),
    }
    return &result
}

func expandArmFormulaComputeVmProperties(input []interface{}) *devtestlab.ComputeVmProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    osType := v["os_type"].(string)
    vmSize := v["vm_size"].(string)
    networkInterfaceId := v["network_interface_id"].(string)
    osDiskId := v["os_disk_id"].(string)
    dataDiskIds := v["data_disk_ids"].([]interface{})

    result := devtestlab.ComputeVmProperties{
        DataDiskIds: utils.ExpandStringSlice(dataDiskIds),
        NetworkInterfaceID: utils.String(networkInterfaceId),
        OsDiskID: utils.String(osDiskId),
        OsType: utils.String(osType),
        VmSize: utils.String(vmSize),
    }
    return &result
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}

func expandArmFormulaGalleryImageReference(input []interface{}) *devtestlab.GalleryImageReference {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    offer := v["offer"].(string)
    publisher := v["publisher"].(string)
    sku := v["sku"].(string)
    osType := v["os_type"].(string)
    version := v["version"].(string)

    result := devtestlab.GalleryImageReference{
        Offer: utils.String(offer),
        OsType: utils.String(osType),
        Publisher: utils.String(publisher),
        Sku: utils.String(sku),
        Version: utils.String(version),
    }
    return &result
}

func expandArmFormulaNetworkInterfaceProperties(input []interface{}) *devtestlab.NetworkInterfaceProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    virtualNetworkId := v["virtual_network_id"].(string)
    subnetId := v["subnet_id"].(string)
    publicIpAddressId := v["public_ip_address_id"].(string)
    publicIpAddress := v["public_ip_address"].(string)
    privateIpAddress := v["private_ip_address"].(string)
    dnsName := v["dns_name"].(string)
    rdpAuthority := v["rdp_authority"].(string)
    sshAuthority := v["ssh_authority"].(string)

    result := devtestlab.NetworkInterfaceProperties{
        DnsName: utils.String(dnsName),
        PrivateIpAddress: utils.String(privateIpAddress),
        PublicIpAddress: utils.String(publicIpAddress),
        PublicIpAddressID: utils.String(publicIpAddressId),
        RdpAuthority: utils.String(rdpAuthority),
        SshAuthority: utils.String(sshAuthority),
        SubnetID: utils.String(subnetId),
        VirtualNetworkID: utils.String(virtualNetworkId),
    }
    return &result
}


func flattenArmFormulaLabVirtualMachineCreationParameter(input *devtestlab.LabVirtualMachineCreationParameter) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if name := input.Name; name != nil {
        result["name"] = *name
    }
    if location := input.Location; location != nil {
        result["location"] = azure.NormalizeLocation(*location)
    }
    if labVirtualMachineCreationParameterProperties := input.LabVirtualMachineCreationParameterProperties; labVirtualMachineCreationParameterProperties != nil {
        if allowClaim := labVirtualMachineCreationParameterProperties.AllowClaim; allowClaim != nil {
            result["allow_claim"] = *allowClaim
        }
        result["applicable_schedule"] = flattenArmFormulaApplicableSchedule(labVirtualMachineCreationParameterProperties.ApplicableSchedule)
        result["artifact_deployment_status"] = flattenArmFormulaArtifactDeploymentStatusProperties(labVirtualMachineCreationParameterProperties.ArtifactDeploymentStatus)
        result["artifacts"] = flattenArmFormulaArtifactInstallProperties(labVirtualMachineCreationParameterProperties.Artifacts)
        result["bulk_creation_parameters"] = flattenArmFormulaBulkCreationParameters(labVirtualMachineCreationParameterProperties.BulkCreationParameters)
        result["compute_vm"] = flattenArmFormulaComputeVmProperties(labVirtualMachineCreationParameterProperties.ComputeVm)
        if createdByUser := labVirtualMachineCreationParameterProperties.CreatedByUser; createdByUser != nil {
            result["created_by_user"] = *createdByUser
        }
        if createdByUserId := labVirtualMachineCreationParameterProperties.CreatedByUserID; createdByUserId != nil {
            result["created_by_user_id"] = *createdByUserId
        }
        if createdDate := labVirtualMachineCreationParameterProperties.CreatedDate; createdDate != nil {
            result["created_date"] = (*createdDate).String()
        }
        if customImageId := labVirtualMachineCreationParameterProperties.CustomImageID; customImageId != nil {
            result["custom_image_id"] = *customImageId
        }
        if disallowPublicIpAddress := labVirtualMachineCreationParameterProperties.DisallowPublicIpAddress; disallowPublicIpAddress != nil {
            result["disallow_public_ip_address"] = *disallowPublicIpAddress
        }
        if environmentId := labVirtualMachineCreationParameterProperties.EnvironmentID; environmentId != nil {
            result["environment_id"] = *environmentId
        }
        if expirationDate := labVirtualMachineCreationParameterProperties.ExpirationDate; expirationDate != nil {
            result["expiration_date"] = (*expirationDate).String()
        }
        if fqdn := labVirtualMachineCreationParameterProperties.Fqdn; fqdn != nil {
            result["fqdn"] = *fqdn
        }
        result["gallery_image_reference"] = flattenArmFormulaGalleryImageReference(labVirtualMachineCreationParameterProperties.GalleryImageReference)
        if isAuthenticationWithSshKey := labVirtualMachineCreationParameterProperties.IsAuthenticationWithSshKey; isAuthenticationWithSshKey != nil {
            result["is_authentication_with_ssh_key"] = *isAuthenticationWithSshKey
        }
        if labSubnetName := labVirtualMachineCreationParameterProperties.LabSubnetName; labSubnetName != nil {
            result["lab_subnet_name"] = *labSubnetName
        }
        if labVirtualNetworkId := labVirtualMachineCreationParameterProperties.LabVirtualNetworkID; labVirtualNetworkId != nil {
            result["lab_virtual_network_id"] = *labVirtualNetworkId
        }
        result["network_interface"] = flattenArmFormulaNetworkInterfaceProperties(labVirtualMachineCreationParameterProperties.NetworkInterface)
        if notes := labVirtualMachineCreationParameterProperties.Notes; notes != nil {
            result["notes"] = *notes
        }
        if osType := labVirtualMachineCreationParameterProperties.OsType; osType != nil {
            result["os_type"] = *osType
        }
        if ownerObjectId := labVirtualMachineCreationParameterProperties.OwnerObjectID; ownerObjectId != nil {
            result["owner_object_id"] = *ownerObjectId
        }
        if ownerUserPrincipalName := labVirtualMachineCreationParameterProperties.OwnerUserPrincipalName; ownerUserPrincipalName != nil {
            result["owner_user_principal_name"] = *ownerUserPrincipalName
        }
        if password := labVirtualMachineCreationParameterProperties.Password; password != nil {
            result["password"] = *password
        }
        if size := labVirtualMachineCreationParameterProperties.Size; size != nil {
            result["size"] = *size
        }
        if sshKey := labVirtualMachineCreationParameterProperties.SshKey; sshKey != nil {
            result["ssh_key"] = *sshKey
        }
        if storageType := labVirtualMachineCreationParameterProperties.StorageType; storageType != nil {
            result["storage_type"] = *storageType
        }
        if uniqueIdentifier := labVirtualMachineCreationParameterProperties.UniqueIdentifier; uniqueIdentifier != nil {
            result["unique_identifier"] = *uniqueIdentifier
        }
        if userName := labVirtualMachineCreationParameterProperties.UserName; userName != nil {
            result["user_name"] = *userName
        }
        result["virtual_machine_creation_source"] = string(labVirtualMachineCreationParameterProperties.VirtualMachineCreationSource)
    }

    return []interface{}{result}
}

func flattenArmFormulaFormulaPropertiesFromVm(input *devtestlab.FormulaPropertiesFromVm) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if labVmId := input.LabVmID; labVmId != nil {
        result["lab_vm_id"] = *labVmId
    }

    return []interface{}{result}
}

func flattenArmFormulaApplicableSchedule(input *devtestlab.ApplicableSchedule) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if location := input.Location; location != nil {
        result["location"] = azure.NormalizeLocation(*location)
    }

    return []interface{}{result}
}

func flattenArmFormulaArtifactDeploymentStatusProperties(input *devtestlab.ArtifactDeploymentStatusProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if artifactsApplied := input.ArtifactsApplied; artifactsApplied != nil {
        result["artifacts_applied"] = int(*artifactsApplied)
    }
    if deploymentStatus := input.DeploymentStatus; deploymentStatus != nil {
        result["deployment_status"] = *deploymentStatus
    }
    if totalArtifacts := input.TotalArtifacts; totalArtifacts != nil {
        result["total_artifacts"] = int(*totalArtifacts)
    }

    return []interface{}{result}
}

func flattenArmFormulaArtifactInstallProperties(input *[]devtestlab.ArtifactInstallProperties) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if artifactId := item.ArtifactID; artifactId != nil {
            v["artifact_id"] = *artifactId
        }
        if deploymentStatusMessage := item.DeploymentStatusMessage; deploymentStatusMessage != nil {
            v["deployment_status_message"] = *deploymentStatusMessage
        }
        if installTime := item.InstallTime; installTime != nil {
            v["install_time"] = (*installTime).String()
        }
        if status := item.Status; status != nil {
            v["status"] = *status
        }
        if vmExtensionStatusMessage := item.VmExtensionStatusMessage; vmExtensionStatusMessage != nil {
            v["vm_extension_status_message"] = *vmExtensionStatusMessage
        }

        results = append(results, v)
    }

    return results
}

func flattenArmFormulaBulkCreationParameters(input *devtestlab.BulkCreationParameters) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if instanceCount := input.InstanceCount; instanceCount != nil {
        result["instance_count"] = int(*instanceCount)
    }

    return []interface{}{result}
}

func flattenArmFormulaComputeVmProperties(input *devtestlab.ComputeVmProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["data_disk_ids"] = utils.FlattenStringSlice(input.DataDiskIds)
    if networkInterfaceId := input.NetworkInterfaceID; networkInterfaceId != nil {
        result["network_interface_id"] = *networkInterfaceId
    }
    if osDiskId := input.OsDiskID; osDiskId != nil {
        result["os_disk_id"] = *osDiskId
    }
    if osType := input.OsType; osType != nil {
        result["os_type"] = *osType
    }
    if vmSize := input.VmSize; vmSize != nil {
        result["vm_size"] = *vmSize
    }

    return []interface{}{result}
}

func flattenArmFormulaGalleryImageReference(input *devtestlab.GalleryImageReference) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if offer := input.Offer; offer != nil {
        result["offer"] = *offer
    }
    if osType := input.OsType; osType != nil {
        result["os_type"] = *osType
    }
    if publisher := input.Publisher; publisher != nil {
        result["publisher"] = *publisher
    }
    if sku := input.Sku; sku != nil {
        result["sku"] = *sku
    }
    if version := input.Version; version != nil {
        result["version"] = *version
    }

    return []interface{}{result}
}

func flattenArmFormulaNetworkInterfaceProperties(input *devtestlab.NetworkInterfaceProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if dnsName := input.DnsName; dnsName != nil {
        result["dns_name"] = *dnsName
    }
    if privateIpAddress := input.PrivateIpAddress; privateIpAddress != nil {
        result["private_ip_address"] = *privateIpAddress
    }
    if publicIpAddress := input.PublicIpAddress; publicIpAddress != nil {
        result["public_ip_address"] = *publicIpAddress
    }
    if publicIpAddressId := input.PublicIpAddressID; publicIpAddressId != nil {
        result["public_ip_address_id"] = *publicIpAddressId
    }
    if rdpAuthority := input.RdpAuthority; rdpAuthority != nil {
        result["rdp_authority"] = *rdpAuthority
    }
    if sshAuthority := input.SshAuthority; sshAuthority != nil {
        result["ssh_authority"] = *sshAuthority
    }
    if subnetId := input.SubnetID; subnetId != nil {
        result["subnet_id"] = *subnetId
    }
    if virtualNetworkId := input.VirtualNetworkID; virtualNetworkId != nil {
        result["virtual_network_id"] = *virtualNetworkId
    }

    return []interface{}{result}
}
