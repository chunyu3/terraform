// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmRelationship() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmRelationshipCreateUpdate,
        Read: resourceArmRelationshipRead,
        Update: resourceArmRelationshipCreateUpdate,
        Delete: resourceArmRelationshipDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "hub_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "profile_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "related_profile_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "relationship_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "cardinality": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(customerinsights.OneToOne),
                    string(customerinsights.OneToMany),
                    string(customerinsights.ManyToMany),
                }, false),
                Default: string(customerinsights.OneToOne),
            },

            "description": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "display_name": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "expiry_date_time_utc": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "fields": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "field_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "field_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "array_value_separator": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "enum_valid_values": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "localized_value_names": {
                                        Type: schema.TypeMap,
                                        Optional: true,
                                        Elem: &schema.Schema{Type: schema.TypeString},
                                    },
                                    "value": {
                                        Type: schema.TypeInt,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "is_array": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "is_available_in_graph": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "is_enum": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "is_flag_enum": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "is_image": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "is_localized_string": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "is_name": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "is_required": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "max_length": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "property_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "schema_item_prop_link": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "lookup_mappings": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "field_mappings": {
                            Type: schema.TypeList,
                            Required: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "profile_field_name": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "related_profile_key_property": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "relationship_guid_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "relationship_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tenant_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmRelationshipCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).relationshipsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    hubName := d.Get("hub_name").(string)
    relationshipName := d.Get("relationship_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, hubName, relationshipName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Relationship (Relationship Name %q / Hub Name %q / Resource Group %q): %+v", relationshipName, hubName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_relationship", *existing.ID)
        }
    }

    cardinality := d.Get("cardinality").(string)
    description := d.Get("description").(map[string]interface{})
    displayName := d.Get("display_name").(map[string]interface{})
    expiryDateTimeUtc := d.Get("expiry_date_time_utc").(string)
    fields := d.Get("fields").([]interface{})
    lookupMappings := d.Get("lookup_mappings").([]interface{})
    profileType := d.Get("profile_type").(string)
    relatedProfileType := d.Get("related_profile_type").(string)

    parameters := customerinsights.RelationshipResourceFormat{
        RelationshipDefinition: &customerinsights.RelationshipDefinition{
            Cardinality: customerinsights.CardinalityTypes(cardinality),
            Description: utils.ExpandKeyValuePairs(description),
            DisplayName: utils.ExpandKeyValuePairs(displayName),
            ExpiryDateTimeUtc: convertStringToDate(expiryDateTimeUtc),
            Fields: expandArmRelationshipPropertyDefinition(fields),
            LookupMappings: expandArmRelationshipRelationshipTypeMapping(lookupMappings),
            ProfileType: utils.String(profileType),
            RelatedProfileType: utils.String(relatedProfileType),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, hubName, relationshipName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Relationship (Relationship Name %q / Hub Name %q / Resource Group %q): %+v", relationshipName, hubName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Relationship (Relationship Name %q / Hub Name %q / Resource Group %q): %+v", relationshipName, hubName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, hubName, relationshipName)
    if err != nil {
        return fmt.Errorf("Error retrieving Relationship (Relationship Name %q / Hub Name %q / Resource Group %q): %+v", relationshipName, hubName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Relationship (Relationship Name %q / Hub Name %q / Resource Group %q) ID", relationshipName, hubName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmRelationshipRead(d, meta)
}

func resourceArmRelationshipRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).relationshipsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    relationshipName := id.Path["relationships"]

    resp, err := client.Get(ctx, resourceGroup, hubName, relationshipName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Relationship %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Relationship (Relationship Name %q / Hub Name %q / Resource Group %q): %+v", relationshipName, hubName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if relationshipDefinition := resp.RelationshipDefinition; relationshipDefinition != nil {
        d.Set("cardinality", string(relationshipDefinition.Cardinality))
        d.Set("description", utils.FlattenKeyValuePairs(relationshipDefinition.Description))
        d.Set("display_name", utils.FlattenKeyValuePairs(relationshipDefinition.DisplayName))
        d.Set("expiry_date_time_utc", (relationshipDefinition.ExpiryDateTimeUtc).String())
        if err := d.Set("fields", flattenArmRelationshipPropertyDefinition(relationshipDefinition.Fields)); err != nil {
            return fmt.Errorf("Error setting `fields`: %+v", err)
        }
        if err := d.Set("lookup_mappings", flattenArmRelationshipRelationshipTypeMapping(relationshipDefinition.LookupMappings)); err != nil {
            return fmt.Errorf("Error setting `lookup_mappings`: %+v", err)
        }
        d.Set("profile_type", relationshipDefinition.ProfileType)
        d.Set("provisioning_state", string(relationshipDefinition.ProvisioningState))
        d.Set("related_profile_type", relationshipDefinition.RelatedProfileType)
        d.Set("relationship_guid_id", relationshipDefinition.RelationshipGuidID)
        d.Set("relationship_name", relationshipDefinition.RelationshipName)
        d.Set("tenant_id", relationshipDefinition.TenantID)
    }
    d.Set("hub_name", hubName)
    d.Set("relationship_name", relationshipName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmRelationshipDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).relationshipsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    hubName := id.Path["hubs"]
    relationshipName := id.Path["relationships"]

    future, err := client.Delete(ctx, resourceGroup, hubName, relationshipName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Relationship (Relationship Name %q / Hub Name %q / Resource Group %q): %+v", relationshipName, hubName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Relationship (Relationship Name %q / Hub Name %q / Resource Group %q): %+v", relationshipName, hubName, resourceGroup, err)
        }
    }

    return nil
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}

func expandArmRelationshipPropertyDefinition(input []interface{}) *[]customerinsights.PropertyDefinition {
    results := make([]customerinsights.PropertyDefinition, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        arrayValueSeparator := v["array_value_separator"].(string)
        enumValidValues := v["enum_valid_values"].([]interface{})
        fieldName := v["field_name"].(string)
        fieldType := v["field_type"].(string)
        isArray := v["is_array"].(bool)
        isEnum := v["is_enum"].(bool)
        isFlagEnum := v["is_flag_enum"].(bool)
        isImage := v["is_image"].(bool)
        isLocalizedString := v["is_localized_string"].(bool)
        isName := v["is_name"].(bool)
        isRequired := v["is_required"].(bool)
        propertyId := v["property_id"].(string)
        schemaItemPropLink := v["schema_item_prop_link"].(string)
        maxLength := v["max_length"].(int)
        isAvailableInGraph := v["is_available_in_graph"].(bool)

        result := customerinsights.PropertyDefinition{
            ArrayValueSeparator: utils.String(arrayValueSeparator),
            EnumValidValues: expandArmRelationshipProfileEnumValidValuesFormat(enumValidValues),
            FieldName: utils.String(fieldName),
            FieldType: utils.String(fieldType),
            IsArray: utils.Bool(isArray),
            IsAvailableInGraph: utils.Bool(isAvailableInGraph),
            IsEnum: utils.Bool(isEnum),
            IsFlagEnum: utils.Bool(isFlagEnum),
            IsImage: utils.Bool(isImage),
            IsLocalizedString: utils.Bool(isLocalizedString),
            IsName: utils.Bool(isName),
            IsRequired: utils.Bool(isRequired),
            MaxLength: utils.Int(maxLength),
            PropertyID: utils.String(propertyId),
            SchemaItemPropLink: utils.String(schemaItemPropLink),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmRelationshipRelationshipTypeMapping(input []interface{}) *[]customerinsights.RelationshipTypeMapping {
    results := make([]customerinsights.RelationshipTypeMapping, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        fieldMappings := v["field_mappings"].([]interface{})

        result := customerinsights.RelationshipTypeMapping{
            FieldMappings: expandArmRelationshipRelationshipTypeFieldMapping(fieldMappings),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmRelationshipProfileEnumValidValuesFormat(input []interface{}) *[]customerinsights.ProfileEnumValidValuesFormat {
    results := make([]customerinsights.ProfileEnumValidValuesFormat, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        value := v["value"].(int)
        localizedValueNames := v["localized_value_names"].(map[string]interface{})

        result := customerinsights.ProfileEnumValidValuesFormat{
            LocalizedValueNames: utils.ExpandKeyValuePairs(localizedValueNames),
            Value: utils.Int(value),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmRelationshipRelationshipTypeFieldMapping(input []interface{}) *[]customerinsights.RelationshipTypeFieldMapping {
    results := make([]customerinsights.RelationshipTypeFieldMapping, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        profileFieldName := v["profile_field_name"].(string)
        relatedProfileKeyProperty := v["related_profile_key_property"].(string)

        result := customerinsights.RelationshipTypeFieldMapping{
            ProfileFieldName: utils.String(profileFieldName),
            RelatedProfileKeyProperty: utils.String(relatedProfileKeyProperty),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmRelationshipPropertyDefinition(input *[]customerinsights.PropertyDefinition) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if arrayValueSeparator := item.ArrayValueSeparator; arrayValueSeparator != nil {
            v["array_value_separator"] = *arrayValueSeparator
        }
        v["enum_valid_values"] = flattenArmRelationshipProfileEnumValidValuesFormat(item.EnumValidValues)
        if fieldName := item.FieldName; fieldName != nil {
            v["field_name"] = *fieldName
        }
        if fieldType := item.FieldType; fieldType != nil {
            v["field_type"] = *fieldType
        }
        if isArray := item.IsArray; isArray != nil {
            v["is_array"] = *isArray
        }
        if isAvailableInGraph := item.IsAvailableInGraph; isAvailableInGraph != nil {
            v["is_available_in_graph"] = *isAvailableInGraph
        }
        if isEnum := item.IsEnum; isEnum != nil {
            v["is_enum"] = *isEnum
        }
        if isFlagEnum := item.IsFlagEnum; isFlagEnum != nil {
            v["is_flag_enum"] = *isFlagEnum
        }
        if isImage := item.IsImage; isImage != nil {
            v["is_image"] = *isImage
        }
        if isLocalizedString := item.IsLocalizedString; isLocalizedString != nil {
            v["is_localized_string"] = *isLocalizedString
        }
        if isName := item.IsName; isName != nil {
            v["is_name"] = *isName
        }
        if isRequired := item.IsRequired; isRequired != nil {
            v["is_required"] = *isRequired
        }
        if maxLength := item.MaxLength; maxLength != nil {
            v["max_length"] = *maxLength
        }
        if propertyId := item.PropertyID; propertyId != nil {
            v["property_id"] = *propertyId
        }
        if schemaItemPropLink := item.SchemaItemPropLink; schemaItemPropLink != nil {
            v["schema_item_prop_link"] = *schemaItemPropLink
        }

        results = append(results, v)
    }

    return results
}

func flattenArmRelationshipRelationshipTypeMapping(input *[]customerinsights.RelationshipTypeMapping) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["field_mappings"] = flattenArmRelationshipRelationshipTypeFieldMapping(item.FieldMappings)

        results = append(results, v)
    }

    return results
}

func flattenArmRelationshipProfileEnumValidValuesFormat(input *[]customerinsights.ProfileEnumValidValuesFormat) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["localized_value_names"] = utils.FlattenKeyValuePairs(item.LocalizedValueNames)
        if value := item.Value; value != nil {
            v["value"] = *value
        }

        results = append(results, v)
    }

    return results
}

func flattenArmRelationshipRelationshipTypeFieldMapping(input *[]customerinsights.RelationshipTypeFieldMapping) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if profileFieldName := item.ProfileFieldName; profileFieldName != nil {
            v["profile_field_name"] = *profileFieldName
        }
        if relatedProfileKeyProperty := item.RelatedProfileKeyProperty; relatedProfileKeyProperty != nil {
            v["related_profile_key_property"] = *relatedProfileKeyProperty
        }

        results = append(results, v)
    }

    return results
}
