// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmApp() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAppCreate,
        Read: resourceArmAppRead,
        Update: resourceArmAppUpdate,
        Delete: resourceArmAppDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "app_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "active_deployment_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "persistent_disk": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "mount_path": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "size_in_gb": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "public": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "temporary_disk": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "mount_path": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "size_in_gb": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "created_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "url": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmAppCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).appsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    appName := d.Get("app_name").(string)
    serviceName := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serviceName, appName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing App (App Name %q / Service Name %q / Resource Group %q): %+v", appName, serviceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_app", *existing.ID)
        }
    }

    activeDeploymentName := d.Get("active_deployment_name").(string)
    persistentDisk := d.Get("persistent_disk").([]interface{})
    public := d.Get("public").(bool)
    temporaryDisk := d.Get("temporary_disk").([]interface{})

    appResource := appplatform.AppResource{
        AppResourceProperties: &appplatform.AppResourceProperties{
            ActiveDeploymentName: utils.String(activeDeploymentName),
            PersistentDisk: expandArmAppPersistentDisk(persistentDisk),
            Public: utils.Bool(public),
            TemporaryDisk: expandArmAppTemporaryDisk(temporaryDisk),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, serviceName, appName, appResource)
    if err != nil {
        return fmt.Errorf("Error creating App (App Name %q / Service Name %q / Resource Group %q): %+v", appName, serviceName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of App (App Name %q / Service Name %q / Resource Group %q): %+v", appName, serviceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serviceName, appName)
    if err != nil {
        return fmt.Errorf("Error retrieving App (App Name %q / Service Name %q / Resource Group %q): %+v", appName, serviceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read App (App Name %q / Service Name %q / Resource Group %q) ID", appName, serviceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAppRead(d, meta)
}

func resourceArmAppRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).appsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["Spring"]
    appName := id.Path["apps"]

    resp, err := client.Get(ctx, resourceGroup, serviceName, appName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] App %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading App (App Name %q / Service Name %q / Resource Group %q): %+v", appName, serviceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if appResourceProperties := resp.AppResourceProperties; appResourceProperties != nil {
        d.Set("active_deployment_name", appResourceProperties.ActiveDeploymentName)
        d.Set("created_time", (appResourceProperties.CreatedTime).String())
        if err := d.Set("persistent_disk", flattenArmAppPersistentDisk(appResourceProperties.PersistentDisk)); err != nil {
            return fmt.Errorf("Error setting `persistent_disk`: %+v", err)
        }
        d.Set("provisioning_state", string(appResourceProperties.ProvisioningState))
        d.Set("public", appResourceProperties.Public)
        if err := d.Set("temporary_disk", flattenArmAppTemporaryDisk(appResourceProperties.TemporaryDisk)); err != nil {
            return fmt.Errorf("Error setting `temporary_disk`: %+v", err)
        }
        d.Set("url", appResourceProperties.URL)
    }
    d.Set("app_name", appName)
    d.Set("service_name", serviceName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmAppUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).appsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    activeDeploymentName := d.Get("active_deployment_name").(string)
    appName := d.Get("app_name").(string)
    persistentDisk := d.Get("persistent_disk").([]interface{})
    public := d.Get("public").(bool)
    serviceName := d.Get("service_name").(string)
    temporaryDisk := d.Get("temporary_disk").([]interface{})

    appResource := appplatform.AppResource{
        AppResourceProperties: &appplatform.AppResourceProperties{
            ActiveDeploymentName: utils.String(activeDeploymentName),
            PersistentDisk: expandArmAppPersistentDisk(persistentDisk),
            Public: utils.Bool(public),
            TemporaryDisk: expandArmAppTemporaryDisk(temporaryDisk),
        },
    }


    future, err := client.Update(ctx, resourceGroup, serviceName, appName, appResource)
    if err != nil {
        return fmt.Errorf("Error updating App (App Name %q / Service Name %q / Resource Group %q): %+v", appName, serviceName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of App (App Name %q / Service Name %q / Resource Group %q): %+v", appName, serviceName, resourceGroup, err)
    }

    return resourceArmAppRead(d, meta)
}

func resourceArmAppDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).appsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["Spring"]
    appName := id.Path["apps"]

    if _, err := client.Delete(ctx, resourceGroup, serviceName, appName); err != nil {
        return fmt.Errorf("Error deleting App (App Name %q / Service Name %q / Resource Group %q): %+v", appName, serviceName, resourceGroup, err)
    }

    return nil
}

func expandArmAppPersistentDisk(input []interface{}) *appplatform.PersistentDisk {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    sizeInGb := v["size_in_gb"].(int)
    mountPath := v["mount_path"].(string)

    result := appplatform.PersistentDisk{
        MountPath: utils.String(mountPath),
        SizeInGb: utils.Int32(int32(sizeInGb)),
    }
    return &result
}

func expandArmAppTemporaryDisk(input []interface{}) *appplatform.TemporaryDisk {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    sizeInGb := v["size_in_gb"].(int)
    mountPath := v["mount_path"].(string)

    result := appplatform.TemporaryDisk{
        MountPath: utils.String(mountPath),
        SizeInGb: utils.Int32(int32(sizeInGb)),
    }
    return &result
}


func flattenArmAppPersistentDisk(input *appplatform.PersistentDisk) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if mountPath := input.MountPath; mountPath != nil {
        result["mount_path"] = *mountPath
    }
    if sizeInGb := input.SizeInGb; sizeInGb != nil {
        result["size_in_gb"] = int(*sizeInGb)
    }

    return []interface{}{result}
}

func flattenArmAppTemporaryDisk(input *appplatform.TemporaryDisk) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if mountPath := input.MountPath; mountPath != nil {
        result["mount_path"] = *mountPath
    }
    if sizeInGb := input.SizeInGb; sizeInGb != nil {
        result["size_in_gb"] = int(*sizeInGb)
    }

    return []interface{}{result}
}
