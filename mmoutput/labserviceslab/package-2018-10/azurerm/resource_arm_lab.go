// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmLab() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmLabCreate,
        Read: resourceArmLabRead,
        Update: resourceArmLabUpdate,
        Delete: resourceArmLabDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "lab_account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "lab_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "max_users_in_lab": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "unique_identifier": {
                Type: schema.TypeString,
                Optional: true,
            },

            "usage_quota": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateIso8601Duration(),
            },

            "user_access_mode": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(labservices.Restricted),
                    string(labservices.Open),
                }, false),
                Default: string(labservices.Restricted),
            },

            "created_by_object_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "created_by_user_principal_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "created_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "invitation_code": {
                Type: schema.TypeString,
                Computed: true,
            },

            "latest_operation_result": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "error_code": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "error_message": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "http_method": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "operation_url": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "request_uri": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "status": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "user_quota": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmLabCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    labAccountName := d.Get("lab_account_name").(string)
    labName := d.Get("lab_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, labAccountName, labName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Lab (Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", labName, labAccountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_lab", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    maxUsersInLab := d.Get("max_users_in_lab").(int)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    usageQuota := d.Get("usage_quota").(string)
    userAccessMode := d.Get("user_access_mode").(string)
    t := d.Get("tags").(map[string]interface{})

    lab := labservices.Lab{
        Location: utils.String(location),
        LabProperties: &labservices.LabProperties{
            MaxUsersInLab: utils.Int32(int32(maxUsersInLab)),
            UniqueIdentifier: utils.String(uniqueIdentifier),
            UsageQuota: utils.String(usageQuota),
            UserAccessMode: labservices.LabUserAccessMode(userAccessMode),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, labAccountName, labName, lab); err != nil {
        return fmt.Errorf("Error creating Lab (Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", labName, labAccountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, labAccountName, labName)
    if err != nil {
        return fmt.Errorf("Error retrieving Lab (Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", labName, labAccountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Lab (Lab Name %q / Lab Account Name %q / Resource Group %q) ID", labName, labAccountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmLabRead(d, meta)
}

func resourceArmLabRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    labAccountName := id.Path["labaccounts"]
    labName := id.Path["labs"]

    resp, err := client.Get(ctx, resourceGroup, labAccountName, labName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Lab %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Lab (Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", labName, labAccountName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if labProperties := resp.LabProperties; labProperties != nil {
        d.Set("created_by_object_id", labProperties.CreatedByObjectID)
        d.Set("created_by_user_principal_name", labProperties.CreatedByUserPrincipalName)
        d.Set("created_date", (labProperties.CreatedDate).String())
        d.Set("invitation_code", labProperties.InvitationCode)
        if err := d.Set("latest_operation_result", flattenArmLabLatestOperationResult(labProperties.LatestOperationResult)); err != nil {
            return fmt.Errorf("Error setting `latest_operation_result`: %+v", err)
        }
        d.Set("max_users_in_lab", int(*labProperties.MaxUsersInLab))
        d.Set("provisioning_state", labProperties.ProvisioningState)
        d.Set("unique_identifier", labProperties.UniqueIdentifier)
        d.Set("usage_quota", labProperties.UsageQuota)
        d.Set("user_access_mode", string(labProperties.UserAccessMode))
        d.Set("user_quota", int(*labProperties.UserQuota))
    }
    d.Set("lab_account_name", labAccountName)
    d.Set("lab_name", labName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmLabUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    labAccountName := d.Get("lab_account_name").(string)
    labName := d.Get("lab_name").(string)
    maxUsersInLab := d.Get("max_users_in_lab").(int)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    usageQuota := d.Get("usage_quota").(string)
    userAccessMode := d.Get("user_access_mode").(string)
    t := d.Get("tags").(map[string]interface{})

    lab := labservices.Lab{
        Location: utils.String(location),
        LabProperties: &labservices.LabProperties{
            MaxUsersInLab: utils.Int32(int32(maxUsersInLab)),
            UniqueIdentifier: utils.String(uniqueIdentifier),
            UsageQuota: utils.String(usageQuota),
            UserAccessMode: labservices.LabUserAccessMode(userAccessMode),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, labAccountName, labName, lab); err != nil {
        return fmt.Errorf("Error updating Lab (Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", labName, labAccountName, resourceGroup, err)
    }

    return resourceArmLabRead(d, meta)
}

func resourceArmLabDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).labsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    labAccountName := id.Path["labaccounts"]
    labName := id.Path["labs"]

    future, err := client.Delete(ctx, resourceGroup, labAccountName, labName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Lab (Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", labName, labAccountName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Lab (Lab Name %q / Lab Account Name %q / Resource Group %q): %+v", labName, labAccountName, resourceGroup, err)
        }
    }

    return nil
}


func flattenArmLabLatestOperationResult(input *labservices.LatestOperationResult) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})


    return []interface{}{result}
}
