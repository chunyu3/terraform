// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmGalleryImage() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmGalleryImageCreate,
        Read: resourceArmGalleryImageRead,
        Update: resourceArmGalleryImageUpdate,
        Delete: resourceArmGalleryImageDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "lab_account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "is_enabled": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "is_override": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "is_plan_authorized": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "unique_identifier": {
                Type: schema.TypeString,
                Optional: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmGalleryImageCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).galleryImagesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    labAccountName := d.Get("lab_account_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, labAccountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Gallery Image %q (Lab Account Name %q / Resource Group %q): %+v", name, labAccountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_gallery_image", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    isEnabled := d.Get("is_enabled").(bool)
    isOverride := d.Get("is_override").(bool)
    isPlanAuthorized := d.Get("is_plan_authorized").(bool)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    t := d.Get("tags").(map[string]interface{})

    galleryImage := labservices.GalleryImageFragment{
        Location: utils.String(location),
        GalleryImagePropertiesFragment: &labservices.GalleryImagePropertiesFragment{
            IsEnabled: utils.Bool(isEnabled),
            IsOverride: utils.Bool(isOverride),
            IsPlanAuthorized: utils.Bool(isPlanAuthorized),
            UniqueIdentifier: utils.String(uniqueIdentifier),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, labAccountName, name, galleryImage); err != nil {
        return fmt.Errorf("Error creating Gallery Image %q (Lab Account Name %q / Resource Group %q): %+v", name, labAccountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, labAccountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Gallery Image %q (Lab Account Name %q / Resource Group %q): %+v", name, labAccountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Gallery Image %q (Lab Account Name %q / Resource Group %q) ID", name, labAccountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmGalleryImageRead(d, meta)
}

func resourceArmGalleryImageRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).galleryImagesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    labAccountName := id.Path["labaccounts"]
    name := id.Path["galleryimages"]

    resp, err := client.Get(ctx, resourceGroup, labAccountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Gallery Image %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Gallery Image %q (Lab Account Name %q / Resource Group %q): %+v", name, labAccountName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("lab_account_name", labAccountName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmGalleryImageUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).galleryImagesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    isEnabled := d.Get("is_enabled").(bool)
    isOverride := d.Get("is_override").(bool)
    isPlanAuthorized := d.Get("is_plan_authorized").(bool)
    labAccountName := d.Get("lab_account_name").(string)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    t := d.Get("tags").(map[string]interface{})

    galleryImage := labservices.GalleryImageFragment{
        GalleryImagePropertiesFragment: &labservices.GalleryImagePropertiesFragment{
            IsEnabled: utils.Bool(isEnabled),
            IsOverride: utils.Bool(isOverride),
            IsPlanAuthorized: utils.Bool(isPlanAuthorized),
            UniqueIdentifier: utils.String(uniqueIdentifier),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, labAccountName, name, galleryImage); err != nil {
        return fmt.Errorf("Error updating Gallery Image %q (Lab Account Name %q / Resource Group %q): %+v", name, labAccountName, resourceGroup, err)
    }

    return resourceArmGalleryImageRead(d, meta)
}

func resourceArmGalleryImageDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).galleryImagesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    labAccountName := id.Path["labaccounts"]
    name := id.Path["galleryimages"]

    if _, err := client.Delete(ctx, resourceGroup, labAccountName, name); err != nil {
        return fmt.Errorf("Error deleting Gallery Image %q (Lab Account Name %q / Resource Group %q): %+v", name, labAccountName, resourceGroup, err)
    }

    return nil
}
