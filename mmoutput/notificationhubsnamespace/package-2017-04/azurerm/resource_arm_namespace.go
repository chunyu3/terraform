// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmNamespace() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmNamespaceCreateUpdate,
        Read: resourceArmNamespaceRead,
        Update: resourceArmNamespaceCreateUpdate,
        Delete: resourceArmNamespaceDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "namespace_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "created_at": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "critical": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "data_center": {
                Type: schema.TypeString,
                Optional: true,
            },

            "enabled": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "namespace_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(notificationhubs.Messaging),
                    string(notificationhubs.NotificationHub),
                }, false),
                Default: string(notificationhubs.Messaging),
            },

            "region": {
                Type: schema.TypeString,
                Optional: true,
            },

            "scale_unit": {
                Type: schema.TypeString,
                Optional: true,
            },

            "service_bus_endpoint": {
                Type: schema.TypeString,
                Optional: true,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(notificationhubs.Free),
                                string(notificationhubs.Basic),
                                string(notificationhubs.Standard),
                            }, false),
                        },
                        "capacity": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "family": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "size": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "status": {
                Type: schema.TypeString,
                Optional: true,
            },

            "subscription_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "updated_at": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validateRFC3339Date,
            },

            "metric_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmNamespaceCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).namespacesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    namespaceName := d.Get("namespace_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, namespaceName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_namespace", *existing.ID)
        }
    }

    name := d.Get("name").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    createdAt := d.Get("created_at").(string)
    critical := d.Get("critical").(bool)
    dataCenter := d.Get("data_center").(string)
    enabled := d.Get("enabled").(bool)
    namespaceType := d.Get("namespace_type").(string)
    region := d.Get("region").(string)
    scaleUnit := d.Get("scale_unit").(string)
    serviceBusEndpoint := d.Get("service_bus_endpoint").(string)
    sku := d.Get("sku").([]interface{})
    status := d.Get("status").(string)
    subscriptionId := d.Get("subscription_id").(string)
    updatedAt := d.Get("updated_at").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := notificationhubs.NamespaceCreateOrUpdateParameters{
        Location: utils.String(location),
        NamespaceProperties: &notificationhubs.NamespaceProperties{
            CreatedAt: convertStringToDate(createdAt),
            Critical: utils.Bool(critical),
            DataCenter: utils.String(dataCenter),
            Enabled: utils.Bool(enabled),
            Name: utils.String(name),
            NamespaceType: notificationhubs.NamespaceType(namespaceType),
            Region: utils.String(region),
            ScaleUnit: utils.String(scaleUnit),
            ServiceBusEndpoint: utils.String(serviceBusEndpoint),
            Status: utils.String(status),
            SubscriptionID: utils.String(subscriptionId),
            UpdatedAt: convertStringToDate(updatedAt),
        },
        Sku: expandArmNamespaceSku(sku),
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, namespaceName, parameters); err != nil {
        return fmt.Errorf("Error creating Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, namespaceName)
    if err != nil {
        return fmt.Errorf("Error retrieving Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Namespace (Namespace Name %q / Resource Group %q) ID", namespaceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmNamespaceRead(d, meta)
}

func resourceArmNamespaceRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).namespacesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    namespaceName := id.Path["namespaces"]

    resp, err := client.Get(ctx, resourceGroup, namespaceName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Namespace %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
    }


    if namespaceProperties := resp.NamespaceProperties; namespaceProperties != nil {
        d.Set("name", namespaceProperties.Name)
        d.Set("created_at", (namespaceProperties.CreatedAt).String())
        d.Set("critical", namespaceProperties.Critical)
        d.Set("data_center", namespaceProperties.DataCenter)
        d.Set("enabled", namespaceProperties.Enabled)
        d.Set("metric_id", namespaceProperties.MetricID)
        d.Set("namespace_type", string(namespaceProperties.NamespaceType))
        d.Set("provisioning_state", namespaceProperties.ProvisioningState)
        d.Set("region", namespaceProperties.Region)
        d.Set("scale_unit", namespaceProperties.ScaleUnit)
        d.Set("service_bus_endpoint", namespaceProperties.ServiceBusEndpoint)
        d.Set("status", namespaceProperties.Status)
        d.Set("subscription_id", namespaceProperties.SubscriptionID)
        d.Set("updated_at", (namespaceProperties.UpdatedAt).String())
    }
    d.Set("name", resp.Name)
    d.Set("name", resp.Name)
    d.Set("name", resp.Name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("namespace_name", namespaceName)
    if err := d.Set("sku", flattenArmNamespaceSku(resp.Sku)); err != nil {
        return fmt.Errorf("Error setting `sku`: %+v", err)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmNamespaceDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).namespacesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    namespaceName := id.Path["namespaces"]

    future, err := client.Delete(ctx, resourceGroup, namespaceName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
        }
    }

    return nil
}

func convertStringToDate(input interface{}) *date.Time {
  v := input.(string)

  dateTime, err := date.ParseTime(time.RFC3339, v)
  if err != nil {
      log.Printf("[ERROR] Cannot convert an invalid string to RFC3339 date %q: %+v", v, err)
      return nil
  }

  result := date.Time{
      Time: dateTime,
  }
  return &result
}

func expandArmNamespaceSku(input []interface{}) *notificationhubs.Sku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    tier := v["tier"].(string)
    size := v["size"].(string)
    family := v["family"].(string)
    capacity := v["capacity"].(int)

    result := notificationhubs.Sku{
        Capacity: utils.Int(capacity),
        Family: utils.String(family),
        Name: notificationhubs.SkuName(name),
        Size: utils.String(size),
        Tier: utils.String(tier),
    }
    return &result
}


func flattenArmNamespaceSku(input *notificationhubs.Sku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["name"] = string(input.Name)
    if capacity := input.Capacity; capacity != nil {
        result["capacity"] = *capacity
    }
    if family := input.Family; family != nil {
        result["family"] = *family
    }
    if size := input.Size; size != nil {
        result["size"] = *size
    }
    if tier := input.Tier; tier != nil {
        result["tier"] = *tier
    }

    return []interface{}{result}
}
