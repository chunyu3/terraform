// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmProximityPlacementGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmProximityPlacementGroupCreate,
        Read: resourceArmProximityPlacementGroupRead,
        Update: resourceArmProximityPlacementGroupUpdate,
        Delete: resourceArmProximityPlacementGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "proximity_placement_group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "proximity_placement_group_type": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(compute.Standard),
                    string(compute.Ultra),
                }, false),
                Default: string(compute.Standard),
            },

            "availability_sets": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "virtual_machine_scale_sets": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "virtual_machines": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmProximityPlacementGroupCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).proximityPlacementGroupsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    proximityPlacementGroupName := d.Get("proximity_placement_group_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, proximityPlacementGroupName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Proximity Placement Group (Proximity Placement Group Name %q / Resource Group %q): %+v", proximityPlacementGroupName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_proximity_placement_group", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    proximityPlacementGroupType := d.Get("proximity_placement_group_type").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := compute.ProximityPlacementGroup{
        Location: utils.String(location),
        ProximityPlacementGroupProperties: &compute.ProximityPlacementGroupProperties{
            ProximityPlacementGroupType: compute.ProximityPlacementGroupType(proximityPlacementGroupType),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, proximityPlacementGroupName, parameters); err != nil {
        return fmt.Errorf("Error creating Proximity Placement Group (Proximity Placement Group Name %q / Resource Group %q): %+v", proximityPlacementGroupName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, proximityPlacementGroupName)
    if err != nil {
        return fmt.Errorf("Error retrieving Proximity Placement Group (Proximity Placement Group Name %q / Resource Group %q): %+v", proximityPlacementGroupName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Proximity Placement Group (Proximity Placement Group Name %q / Resource Group %q) ID", proximityPlacementGroupName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmProximityPlacementGroupRead(d, meta)
}

func resourceArmProximityPlacementGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).proximityPlacementGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    proximityPlacementGroupName := id.Path["proximityPlacementGroups"]

    resp, err := client.Get(ctx, resourceGroup, proximityPlacementGroupName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Proximity Placement Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Proximity Placement Group (Proximity Placement Group Name %q / Resource Group %q): %+v", proximityPlacementGroupName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if proximityPlacementGroupProperties := resp.ProximityPlacementGroupProperties; proximityPlacementGroupProperties != nil {
        if err := d.Set("availability_sets", flattenArmProximityPlacementGroupSubResource(proximityPlacementGroupProperties.AvailabilitySets)); err != nil {
            return fmt.Errorf("Error setting `availability_sets`: %+v", err)
        }
        d.Set("proximity_placement_group_type", string(proximityPlacementGroupProperties.ProximityPlacementGroupType))
        if err := d.Set("virtual_machine_scale_sets", flattenArmProximityPlacementGroupSubResource(proximityPlacementGroupProperties.VirtualMachineScaleSets)); err != nil {
            return fmt.Errorf("Error setting `virtual_machine_scale_sets`: %+v", err)
        }
        if err := d.Set("virtual_machines", flattenArmProximityPlacementGroupSubResource(proximityPlacementGroupProperties.VirtualMachines)); err != nil {
            return fmt.Errorf("Error setting `virtual_machines`: %+v", err)
        }
    }
    d.Set("proximity_placement_group_name", proximityPlacementGroupName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmProximityPlacementGroupUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).proximityPlacementGroupsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    proximityPlacementGroupName := d.Get("proximity_placement_group_name").(string)
    proximityPlacementGroupType := d.Get("proximity_placement_group_type").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := compute.ProximityPlacementGroup{
        Location: utils.String(location),
        ProximityPlacementGroupProperties: &compute.ProximityPlacementGroupProperties{
            ProximityPlacementGroupType: compute.ProximityPlacementGroupType(proximityPlacementGroupType),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, proximityPlacementGroupName, parameters); err != nil {
        return fmt.Errorf("Error updating Proximity Placement Group (Proximity Placement Group Name %q / Resource Group %q): %+v", proximityPlacementGroupName, resourceGroup, err)
    }

    return resourceArmProximityPlacementGroupRead(d, meta)
}

func resourceArmProximityPlacementGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).proximityPlacementGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    proximityPlacementGroupName := id.Path["proximityPlacementGroups"]

    if _, err := client.Delete(ctx, resourceGroup, proximityPlacementGroupName); err != nil {
        return fmt.Errorf("Error deleting Proximity Placement Group (Proximity Placement Group Name %q / Resource Group %q): %+v", proximityPlacementGroupName, resourceGroup, err)
    }

    return nil
}


func flattenArmProximityPlacementGroupSubResource(input *[]compute.SubResource) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})


        results = append(results, v)
    }

    return results
}
