// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmNamespace() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmNamespaceCreate,
        Read: resourceArmNamespaceRead,
        Update: resourceArmNamespaceUpdate,
        Delete: resourceArmNamespaceDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "namespace_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "cluster_arm_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "encryption": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "key_source": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(eventhub.Microsoft.KeyVault),
                            }, false),
                            Default: string(eventhub.Microsoft.KeyVault),
                        },
                        "key_vault_properties": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "key_name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "key_vault_uri": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "identity": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "principal_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tenant_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(eventhub.SystemAssigned),
                            }, false),
                            Default: string(eventhub.SystemAssigned),
                        },
                    },
                },
            },

            "is_auto_inflate_enabled": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "kafka_enabled": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "maximum_throughput_units": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "sku": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(eventhub.Basic),
                                string(eventhub.Standard),
                            }, false),
                        },
                        "capacity": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "tier": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(eventhub.Basic),
                                string(eventhub.Standard),
                            }, false),
                            Default: string(eventhub.Basic),
                        },
                    },
                },
            },

            "zone_redundant": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "created_at": {
                Type: schema.TypeString,
                Computed: true,
            },

            "metric_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "service_bus_endpoint": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "updated_at": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmNamespaceCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).namespacesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    namespaceName := d.Get("namespace_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, namespaceName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_namespace", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    clusterArmId := d.Get("cluster_arm_id").(string)
    encryption := d.Get("encryption").([]interface{})
    identity := d.Get("identity").([]interface{})
    isAutoInflateEnabled := d.Get("is_auto_inflate_enabled").(bool)
    kafkaEnabled := d.Get("kafka_enabled").(bool)
    maximumThroughputUnits := d.Get("maximum_throughput_units").(int)
    sku := d.Get("sku").([]interface{})
    zoneRedundant := d.Get("zone_redundant").(bool)
    t := d.Get("tags").(map[string]interface{})

    parameters := eventhub.EHNamespace{
        Location: utils.String(location),
        EHNamespace_properties: &eventhub.EHNamespace_properties{
            ClusterArmID: utils.String(clusterArmId),
            Encryption: expandArmNamespaceEncryption(encryption),
            Identity: expandArmNamespaceIdentity(identity),
            IsAutoInflateEnabled: utils.Bool(isAutoInflateEnabled),
            KafkaEnabled: utils.Bool(kafkaEnabled),
            MaximumThroughputUnits: utils.Int32(int32(maximumThroughputUnits)),
            ZoneRedundant: utils.Bool(zoneRedundant),
        },
        Sku: expandArmNamespaceSku(sku),
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, namespaceName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, namespaceName)
    if err != nil {
        return fmt.Errorf("Error retrieving Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Namespace (Namespace Name %q / Resource Group %q) ID", namespaceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmNamespaceRead(d, meta)
}

func resourceArmNamespaceRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).namespacesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    namespaceName := id.Path["namespaces"]

    resp, err := client.Get(ctx, resourceGroup, namespaceName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Namespace %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if eHNamespaceProperties := resp.EHNamespace_properties; eHNamespaceProperties != nil {
        d.Set("cluster_arm_id", eHNamespaceProperties.ClusterArmID)
        d.Set("created_at", (eHNamespaceProperties.CreatedAt).String())
        if err := d.Set("encryption", flattenArmNamespaceEncryption(eHNamespaceProperties.Encryption)); err != nil {
            return fmt.Errorf("Error setting `encryption`: %+v", err)
        }
        if err := d.Set("identity", flattenArmNamespaceIdentity(eHNamespaceProperties.Identity)); err != nil {
            return fmt.Errorf("Error setting `identity`: %+v", err)
        }
        d.Set("is_auto_inflate_enabled", eHNamespaceProperties.IsAutoInflateEnabled)
        d.Set("kafka_enabled", eHNamespaceProperties.KafkaEnabled)
        d.Set("maximum_throughput_units", int(*eHNamespaceProperties.MaximumThroughputUnits))
        d.Set("metric_id", eHNamespaceProperties.MetricID)
        d.Set("provisioning_state", eHNamespaceProperties.ProvisioningState)
        d.Set("service_bus_endpoint", eHNamespaceProperties.ServiceBusEndpoint)
        d.Set("updated_at", (eHNamespaceProperties.UpdatedAt).String())
        d.Set("zone_redundant", eHNamespaceProperties.ZoneRedundant)
    }
    d.Set("namespace_name", namespaceName)
    if err := d.Set("sku", flattenArmNamespaceSku(resp.Sku)); err != nil {
        return fmt.Errorf("Error setting `sku`: %+v", err)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmNamespaceUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).namespacesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    clusterArmId := d.Get("cluster_arm_id").(string)
    encryption := d.Get("encryption").([]interface{})
    identity := d.Get("identity").([]interface{})
    isAutoInflateEnabled := d.Get("is_auto_inflate_enabled").(bool)
    kafkaEnabled := d.Get("kafka_enabled").(bool)
    maximumThroughputUnits := d.Get("maximum_throughput_units").(int)
    namespaceName := d.Get("namespace_name").(string)
    sku := d.Get("sku").([]interface{})
    zoneRedundant := d.Get("zone_redundant").(bool)
    t := d.Get("tags").(map[string]interface{})

    parameters := eventhub.EHNamespace{
        Location: utils.String(location),
        EHNamespace_properties: &eventhub.EHNamespace_properties{
            ClusterArmID: utils.String(clusterArmId),
            Encryption: expandArmNamespaceEncryption(encryption),
            Identity: expandArmNamespaceIdentity(identity),
            IsAutoInflateEnabled: utils.Bool(isAutoInflateEnabled),
            KafkaEnabled: utils.Bool(kafkaEnabled),
            MaximumThroughputUnits: utils.Int32(int32(maximumThroughputUnits)),
            ZoneRedundant: utils.Bool(zoneRedundant),
        },
        Sku: expandArmNamespaceSku(sku),
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, namespaceName, parameters); err != nil {
        return fmt.Errorf("Error updating Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
    }

    return resourceArmNamespaceRead(d, meta)
}

func resourceArmNamespaceDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).namespacesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    namespaceName := id.Path["namespaces"]

    future, err := client.Delete(ctx, resourceGroup, namespaceName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Namespace (Namespace Name %q / Resource Group %q): %+v", namespaceName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmNamespaceEncryption(input []interface{}) *eventhub.Encryption {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    keyVaultProperties := v["key_vault_properties"].([]interface{})
    keySource := v["key_source"].(string)

    result := eventhub.Encryption{
        KeySource: eventhub.KeySource(keySource),
        KeyVaultProperties: expandArmNamespaceKeyVaultProperties(keyVaultProperties),
    }
    return &result
}

func expandArmNamespaceIdentity(input []interface{}) *eventhub.Identity {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    principalId := v["principal_id"].(string)
    tenantId := v["tenant_id"].(string)
    type := v["type"].(string)

    result := eventhub.Identity{
        PrincipalID: utils.String(principalId),
        TenantID: utils.String(tenantId),
        Type: eventhub.IdentityType(type),
    }
    return &result
}

func expandArmNamespaceSku(input []interface{}) *eventhub.Sku {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    name := v["name"].(string)
    tier := v["tier"].(string)
    capacity := v["capacity"].(int)

    result := eventhub.Sku{
        Capacity: utils.Int32(int32(capacity)),
        Name: eventhub.SkuName(name),
        Tier: eventhub.SkuTier(tier),
    }
    return &result
}

func expandArmNamespaceKeyVaultProperties(input []interface{}) *eventhub.KeyVaultProperties {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    keyName := v["key_name"].(string)
    keyVaultUri := v["key_vault_uri"].(string)

    result := eventhub.KeyVaultProperties{
        KeyName: utils.String(keyName),
        KeyVaultUri: utils.String(keyVaultUri),
    }
    return &result
}


func flattenArmNamespaceEncryption(input *eventhub.Encryption) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["key_source"] = string(input.KeySource)
    result["key_vault_properties"] = flattenArmNamespaceKeyVaultProperties(input.KeyVaultProperties)

    return []interface{}{result}
}

func flattenArmNamespaceIdentity(input *eventhub.Identity) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if principalId := input.PrincipalID; principalId != nil {
        result["principal_id"] = *principalId
    }
    if tenantId := input.TenantID; tenantId != nil {
        result["tenant_id"] = *tenantId
    }
    result["type"] = string(input.Type)

    return []interface{}{result}
}

func flattenArmNamespaceSku(input *eventhub.Sku) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["name"] = string(input.Name)
    if capacity := input.Capacity; capacity != nil {
        result["capacity"] = int(*capacity)
    }
    result["tier"] = string(input.Tier)

    return []interface{}{result}
}

func flattenArmNamespaceKeyVaultProperties(input *eventhub.KeyVaultProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if keyName := input.KeyName; keyName != nil {
        result["key_name"] = *keyName
    }
    if keyVaultUri := input.KeyVaultUri; keyVaultUri != nil {
        result["key_vault_uri"] = *keyVaultUri
    }

    return []interface{}{result}
}
