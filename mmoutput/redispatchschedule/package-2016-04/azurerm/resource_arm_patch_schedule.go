// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPatchSchedule() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPatchScheduleCreateUpdate,
        Read: resourceArmPatchScheduleRead,
        Update: resourceArmPatchScheduleCreateUpdate,
        Delete: resourceArmPatchScheduleDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "schedule_entries": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "day_of_week": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(redis.Monday),
                                string(redis.Tuesday),
                                string(redis.Wednesday),
                                string(redis.Thursday),
                                string(redis.Friday),
                                string(redis.Saturday),
                                string(redis.Sunday),
                                string(redis.Everyday),
                                string(redis.Weekend),
                            }, false),
                        },
                        "start_hour_utc": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "maintenance_window": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateIso8601Duration(),
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmPatchScheduleCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).patchSchedulesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Patch Schedule %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_patch_schedule", *existing.ID)
        }
    }

    scheduleEntries := d.Get("schedule_entries").([]interface{})

    parameters := redis.PatchSchedule{
        ScheduleEntries: &redis.ScheduleEntries{
            ScheduleEntries: expandArmPatchScheduleScheduleEntry(scheduleEntries),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error creating Patch Schedule %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Patch Schedule %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Patch Schedule %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmPatchScheduleRead(d, meta)
}

func resourceArmPatchScheduleRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).patchSchedulesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["Redis"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Patch Schedule %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Patch Schedule %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("type", resp.Type)

    return nil
}


func resourceArmPatchScheduleDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).patchSchedulesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["Redis"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Patch Schedule %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}

func expandArmPatchScheduleScheduleEntry(input []interface{}) *[]redis.ScheduleEntry {
    results := make([]redis.ScheduleEntry, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        dayOfWeek := v["day_of_week"].(string)
        startHourUtc := v["start_hour_utc"].(int)
        maintenanceWindow := v["maintenance_window"].(string)

        result := redis.ScheduleEntry{
            DayOfWeek: redis.DayOfWeek(dayOfWeek),
            MaintenanceWindow: utils.String(maintenanceWindow),
            StartHourUtc: utils.Int32(int32(startHourUtc)),
        }

        results = append(results, result)
    }
    return &results
}
