// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmProduct() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmProductCreate,
        Read: resourceArmProductRead,
        Update: resourceArmProductUpdate,
        Delete: resourceArmProductDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "product_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "approval_required": {
                Type: schema.TypeBool,
                Optional: true,
                ForceNew: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "state": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.NotPublished),
                    string(apimanagement.Published),
                }, false),
                Default: string(apimanagement.NotPublished),
            },

            "subscription_required": {
                Type: schema.TypeBool,
                Optional: true,
                ForceNew: true,
            },

            "subscriptions_limit": {
                Type: schema.TypeInt,
                Optional: true,
                ForceNew: true,
            },

            "terms": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },
        },
    }
}

func resourceArmProductCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).productsClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    productID := d.Get("product_id").(string)
    serviceName := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serviceName, productID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Product (Product %q / Service Name %q / Resource Group %q): %+v", productID, serviceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_product", *existing.ID)
        }
    }

    name := d.Get("name").(string)
    approvalRequired := d.Get("approval_required").(bool)
    description := d.Get("description").(string)
    state := d.Get("state").(string)
    subscriptionRequired := d.Get("subscription_required").(bool)
    subscriptionsLimit := d.Get("subscriptions_limit").(int)
    terms := d.Get("terms").(string)

    parameters := apimanagement.ProductContract{
        ApprovalRequired: utils.Bool(approvalRequired),
        Description: utils.String(description),
        Name: utils.String(name),
        State: apimanagement.ProductStateContract(state),
        SubscriptionRequired: utils.Bool(subscriptionRequired),
        SubscriptionsLimit: utils.Int32(int32(subscriptionsLimit)),
        Terms: utils.String(terms),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, serviceName, productID, parameters); err != nil {
        return fmt.Errorf("Error creating Product (Product %q / Service Name %q / Resource Group %q): %+v", productID, serviceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serviceName, productID)
    if err != nil {
        return fmt.Errorf("Error retrieving Product (Product %q / Service Name %q / Resource Group %q): %+v", productID, serviceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Product (Product %q / Service Name %q / Resource Group %q) ID", productID, serviceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmProductRead(d, meta)
}

func resourceArmProductRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).productsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    productID := id.Path["products"]

    resp, err := client.Get(ctx, resourceGroup, serviceName, productID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Product %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Product (Product %q / Service Name %q / Resource Group %q): %+v", productID, serviceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("approval_required", resp.ApprovalRequired)
    d.Set("description", resp.Description)
    d.Set("product_id", productID)
    d.Set("service_name", serviceName)
    d.Set("state", string(resp.State))
    d.Set("subscription_required", resp.SubscriptionRequired)
    d.Set("subscriptions_limit", int(*resp.SubscriptionsLimit))
    d.Set("terms", resp.Terms)

    return nil
}

func resourceArmProductUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).productsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    approvalRequired := d.Get("approval_required").(bool)
    description := d.Get("description").(string)
    productID := d.Get("product_id").(string)
    serviceName := d.Get("service_name").(string)
    state := d.Get("state").(string)
    subscriptionRequired := d.Get("subscription_required").(bool)
    subscriptionsLimit := d.Get("subscriptions_limit").(int)
    terms := d.Get("terms").(string)

    parameters := apimanagement.ProductContract{
        ApprovalRequired: utils.Bool(approvalRequired),
        Description: utils.String(description),
        Name: utils.String(name),
        State: apimanagement.ProductStateContract(state),
        SubscriptionRequired: utils.Bool(subscriptionRequired),
        SubscriptionsLimit: utils.Int32(int32(subscriptionsLimit)),
        Terms: utils.String(terms),
    }


    if _, err := client.Update(ctx, resourceGroup, serviceName, productID, parameters); err != nil {
        return fmt.Errorf("Error updating Product (Product %q / Service Name %q / Resource Group %q): %+v", productID, serviceName, resourceGroup, err)
    }

    return resourceArmProductRead(d, meta)
}

func resourceArmProductDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).productsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    productID := id.Path["products"]

    if _, err := client.Delete(ctx, resourceGroup, serviceName, productID); err != nil {
        return fmt.Errorf("Error deleting Product (Product %q / Service Name %q / Resource Group %q): %+v", productID, serviceName, resourceGroup, err)
    }

    return nil
}
