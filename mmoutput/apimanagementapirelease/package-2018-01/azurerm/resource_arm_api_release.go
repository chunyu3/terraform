// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmApiRelease() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmApiReleaseCreate,
        Read: resourceArmApiReleaseRead,
        Update: resourceArmApiReleaseUpdate,
        Delete: resourceArmApiReleaseDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "api_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "release_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "api_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "notes": {
                Type: schema.TypeString,
                Optional: true,
            },

            "created_date_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "updated_date_time": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmApiReleaseCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiReleaseClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    apiID := d.Get("api_id").(string)
    releaseID := d.Get("release_id").(string)
    serviceName := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serviceName, apiID, releaseID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Api Release (Release %q / Api %q / Service Name %q / Resource Group %q): %+v", releaseID, apiID, serviceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_api_release", *existing.ID)
        }
    }

    apiId := d.Get("api_id").(string)
    notes := d.Get("notes").(string)

    parameters := apimanagement.ApiReleaseContract{
        ApiReleaseContractProperties: &apimanagement.ApiReleaseContractProperties{
            ApiID: utils.String(apiId),
            Notes: utils.String(notes),
        },
    }


    if _, err := client.Create(ctx, resourceGroup, serviceName, apiID, releaseID, parameters); err != nil {
        return fmt.Errorf("Error creating Api Release (Release %q / Api %q / Service Name %q / Resource Group %q): %+v", releaseID, apiID, serviceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serviceName, apiID, releaseID)
    if err != nil {
        return fmt.Errorf("Error retrieving Api Release (Release %q / Api %q / Service Name %q / Resource Group %q): %+v", releaseID, apiID, serviceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Api Release (Release %q / Api %q / Service Name %q / Resource Group %q) ID", releaseID, apiID, serviceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmApiReleaseRead(d, meta)
}

func resourceArmApiReleaseRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiReleaseClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    apiID := id.Path["apis"]
    releaseID := id.Path["releases"]

    resp, err := client.Get(ctx, resourceGroup, serviceName, apiID, releaseID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Api Release %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Api Release (Release %q / Api %q / Service Name %q / Resource Group %q): %+v", releaseID, apiID, serviceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("api_id", apiID)
    if apiReleaseContractProperties := resp.ApiReleaseContractProperties; apiReleaseContractProperties != nil {
        d.Set("api_id", apiReleaseContractProperties.ApiID)
        d.Set("created_date_time", (apiReleaseContractProperties.CreatedDateTime).String())
        d.Set("notes", apiReleaseContractProperties.Notes)
        d.Set("updated_date_time", (apiReleaseContractProperties.UpdatedDateTime).String())
    }
    d.Set("release_id", releaseID)
    d.Set("service_name", serviceName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmApiReleaseUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiReleaseClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    apiID := d.Get("api_id").(string)
    apiId := d.Get("api_id").(string)
    notes := d.Get("notes").(string)
    releaseID := d.Get("release_id").(string)
    serviceName := d.Get("service_name").(string)

    parameters := apimanagement.ApiReleaseContract{
        ApiReleaseContractProperties: &apimanagement.ApiReleaseContractProperties{
            ApiID: utils.String(apiId),
            Notes: utils.String(notes),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, serviceName, apiID, releaseID, parameters); err != nil {
        return fmt.Errorf("Error updating Api Release (Release %q / Api %q / Service Name %q / Resource Group %q): %+v", releaseID, apiID, serviceName, resourceGroup, err)
    }

    return resourceArmApiReleaseRead(d, meta)
}

func resourceArmApiReleaseDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).apiReleaseClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    apiID := id.Path["apis"]
    releaseID := id.Path["releases"]

    if _, err := client.Delete(ctx, resourceGroup, serviceName, apiID, releaseID); err != nil {
        return fmt.Errorf("Error deleting Api Release (Release %q / Api %q / Service Name %q / Resource Group %q): %+v", releaseID, apiID, serviceName, resourceGroup, err)
    }

    return nil
}
