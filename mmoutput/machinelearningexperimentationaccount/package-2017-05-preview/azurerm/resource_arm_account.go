// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAccount() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAccountCreate,
        Read: resourceArmAccountRead,
        Update: resourceArmAccountUpdate,
        Delete: resourceArmAccountDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "friendly_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "seats": {
                Type: schema.TypeString,
                Optional: true,
            },

            "storage_account_key": {
                Type: schema.TypeString,
                Optional: true,
            },

            "account_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "creation_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "discovery_uri": {
                Type: schema.TypeString,
                Computed: true,
            },

            "key_vault_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "storage_account": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "access_key": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "storage_account_id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "vso_account_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmAccountCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Account %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_account", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    description := d.Get("description").(string)
    friendlyName := d.Get("friendly_name").(string)
    seats := d.Get("seats").(string)
    storageAccountKey := d.Get("storage_account_key").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := machinelearningexperimentation.AccountUpdateParameters{
        Location: utils.String(location),
        AccountPropertiesUpdateParameters: &machinelearningexperimentation.AccountPropertiesUpdateParameters{
            Description: utils.String(description),
            FriendlyName: utils.String(friendlyName),
            Seats: utils.String(seats),
            StorageAccountKey: utils.String(storageAccountKey),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error creating Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Account %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAccountRead(d, meta)
}

func resourceArmAccountRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["accounts"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Account %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if accountPropertiesUpdateParameters := resp.AccountPropertiesUpdateParameters; accountPropertiesUpdateParameters != nil {
        d.Set("account_id", accountPropertiesUpdateParameters.AccountID)
        d.Set("creation_date", (accountPropertiesUpdateParameters.CreationDate).String())
        d.Set("description", accountPropertiesUpdateParameters.Description)
        d.Set("discovery_uri", accountPropertiesUpdateParameters.DiscoveryURI)
        d.Set("friendly_name", accountPropertiesUpdateParameters.FriendlyName)
        d.Set("key_vault_id", accountPropertiesUpdateParameters.KeyVaultID)
        d.Set("provisioning_state", string(accountPropertiesUpdateParameters.ProvisioningState))
        d.Set("seats", accountPropertiesUpdateParameters.Seats)
        if err := d.Set("storage_account", flattenArmAccountStorageAccountProperties(accountPropertiesUpdateParameters.StorageAccount)); err != nil {
            return fmt.Errorf("Error setting `storage_account`: %+v", err)
        }
        d.Set("vso_account_id", accountPropertiesUpdateParameters.VsoAccountID)
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmAccountUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    description := d.Get("description").(string)
    friendlyName := d.Get("friendly_name").(string)
    seats := d.Get("seats").(string)
    storageAccountKey := d.Get("storage_account_key").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := machinelearningexperimentation.AccountUpdateParameters{
        AccountPropertiesUpdateParameters: &machinelearningexperimentation.AccountPropertiesUpdateParameters{
            Description: utils.String(description),
            FriendlyName: utils.String(friendlyName),
            Seats: utils.String(seats),
            StorageAccountKey: utils.String(storageAccountKey),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, name, parameters); err != nil {
        return fmt.Errorf("Error updating Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return resourceArmAccountRead(d, meta)
}

func resourceArmAccountDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["accounts"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}


func flattenArmAccountStorageAccountProperties(input *machinelearningexperimentation.StorageAccountProperties) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if accessKey := input.AccessKey; accessKey != nil {
        result["access_key"] = *accessKey
    }
    if storageAccountId := input.StorageAccountID; storageAccountId != nil {
        result["storage_account_id"] = *storageAccountId
    }

    return []interface{}{result}
}
