// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmBackupScheduleGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmBackupScheduleGroupCreateUpdate,
        Read: resourceArmBackupScheduleGroupRead,
        Update: resourceArmBackupScheduleGroupCreateUpdate,
        Delete: resourceArmBackupScheduleGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "device_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "schedule_group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "start_time": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "hour": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                        "minute": {
                            Type: schema.TypeInt,
                            Required: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmBackupScheduleGroupCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backupScheduleGroupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    deviceName := d.Get("device_name").(string)
    scheduleGroupName := d.Get("schedule_group_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name, deviceName, scheduleGroupName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Backup Schedule Group %q (Resource Group %q / Schedule Group Name %q / Device Name %q): %+v", name, resourceGroup, scheduleGroupName, deviceName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_backup_schedule_group", *existing.ID)
        }
    }

    startTime := d.Get("start_time").([]interface{})

    scheduleGroup := storsimple.BackupScheduleGroup{
        BackupScheduleGroupProperties: &storsimple.BackupScheduleGroupProperties{
            StartTime: expandArmBackupScheduleGroupTime(startTime),
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, deviceName, scheduleGroupName, scheduleGroup)
    if err != nil {
        return fmt.Errorf("Error creating Backup Schedule Group %q (Resource Group %q / Schedule Group Name %q / Device Name %q): %+v", name, resourceGroup, scheduleGroupName, deviceName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Backup Schedule Group %q (Resource Group %q / Schedule Group Name %q / Device Name %q): %+v", name, resourceGroup, scheduleGroupName, deviceName, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name, deviceName, scheduleGroupName)
    if err != nil {
        return fmt.Errorf("Error retrieving Backup Schedule Group %q (Resource Group %q / Schedule Group Name %q / Device Name %q): %+v", name, resourceGroup, scheduleGroupName, deviceName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Backup Schedule Group %q (Resource Group %q / Schedule Group Name %q / Device Name %q) ID", name, resourceGroup, scheduleGroupName, deviceName)
    }
    d.SetId(*resp.ID)

    return resourceArmBackupScheduleGroupRead(d, meta)
}

func resourceArmBackupScheduleGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backupScheduleGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["managers"]
    deviceName := id.Path["devices"]
    scheduleGroupName := id.Path["backupScheduleGroups"]

    resp, err := client.Get(ctx, resourceGroup, name, deviceName, scheduleGroupName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Backup Schedule Group %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Backup Schedule Group %q (Resource Group %q / Schedule Group Name %q / Device Name %q): %+v", name, resourceGroup, scheduleGroupName, deviceName, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("device_name", deviceName)
    d.Set("schedule_group_name", scheduleGroupName)
    if backupScheduleGroupProperties := resp.BackupScheduleGroupProperties; backupScheduleGroupProperties != nil {
        if err := d.Set("start_time", flattenArmBackupScheduleGroupTime(backupScheduleGroupProperties.StartTime)); err != nil {
            return fmt.Errorf("Error setting `start_time`: %+v", err)
        }
    }
    d.Set("type", resp.Type)

    return nil
}


func resourceArmBackupScheduleGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backupScheduleGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["managers"]
    deviceName := id.Path["devices"]
    scheduleGroupName := id.Path["backupScheduleGroups"]

    future, err := client.Delete(ctx, resourceGroup, name, deviceName, scheduleGroupName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Backup Schedule Group %q (Resource Group %q / Schedule Group Name %q / Device Name %q): %+v", name, resourceGroup, scheduleGroupName, deviceName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Backup Schedule Group %q (Resource Group %q / Schedule Group Name %q / Device Name %q): %+v", name, resourceGroup, scheduleGroupName, deviceName, err)
        }
    }

    return nil
}

func expandArmBackupScheduleGroupTime(input []interface{}) *storsimple.Time {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    hour := v["hour"].(int)
    minute := v["minute"].(int)

    result := storsimple.Time{
        Hour: utils.Int32(int32(hour)),
        Minute: utils.Int32(int32(minute)),
    }
    return &result
}


func flattenArmBackupScheduleGroupTime(input *storsimple.Time) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if hour := input.Hour; hour != nil {
        result["hour"] = int(*hour)
    }
    if minute := input.Minute; minute != nil {
        result["minute"] = int(*minute)
    }

    return []interface{}{result}
}
