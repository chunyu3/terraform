// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmBackupPolicy() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmBackupPolicyCreateUpdate,
        Read: resourceArmBackupPolicyRead,
        Update: resourceArmBackupPolicyCreateUpdate,
        Delete: resourceArmBackupPolicyDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "backup_policy_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "device_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "manager_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "volume_ids": {
                Type: schema.TypeList,
                Required: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(storsimple.Series8000),
                }, false),
                Default: string(storsimple.Series8000),
            },

            "backup_policy_creation_type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_backup_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "next_backup_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "scheduled_backup_status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "schedules_count": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "ssm_host_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmBackupPolicyCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backupPoliciesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    backupPolicyName := d.Get("backup_policy_name").(string)
    deviceName := d.Get("device_name").(string)
    managerName := d.Get("manager_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, deviceName, backupPolicyName, resourceGroup, managerName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Backup Policy (Manager Name %q / Resource Group %q / Backup Policy Name %q / Device Name %q): %+v", managerName, resourceGroup, backupPolicyName, deviceName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_backup_policy", *existing.ID)
        }
    }

    kind := d.Get("kind").(string)
    volumeIds := d.Get("volume_ids").([]interface{})

    parameters := storsimple.BackupPolicy{
        Kind: storsimple.Kind(kind),
        BackupPolicyProperties: &storsimple.BackupPolicyProperties{
            VolumeIds: utils.ExpandStringSlice(volumeIds),
        },
    }


    future, err := client.CreateOrUpdate(ctx, deviceName, backupPolicyName, resourceGroup, managerName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Backup Policy (Manager Name %q / Resource Group %q / Backup Policy Name %q / Device Name %q): %+v", managerName, resourceGroup, backupPolicyName, deviceName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Backup Policy (Manager Name %q / Resource Group %q / Backup Policy Name %q / Device Name %q): %+v", managerName, resourceGroup, backupPolicyName, deviceName, err)
    }


    resp, err := client.Get(ctx, deviceName, backupPolicyName, resourceGroup, managerName)
    if err != nil {
        return fmt.Errorf("Error retrieving Backup Policy (Manager Name %q / Resource Group %q / Backup Policy Name %q / Device Name %q): %+v", managerName, resourceGroup, backupPolicyName, deviceName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Backup Policy (Manager Name %q / Resource Group %q / Backup Policy Name %q / Device Name %q) ID", managerName, resourceGroup, backupPolicyName, deviceName)
    }
    d.SetId(*resp.ID)

    return resourceArmBackupPolicyRead(d, meta)
}

func resourceArmBackupPolicyRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backupPoliciesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    deviceName := id.Path["devices"]
    backupPolicyName := id.Path["backupPolicies"]
    resourceGroup := id.ResourceGroup
    managerName := id.Path["managers"]

    resp, err := client.Get(ctx, deviceName, backupPolicyName, resourceGroup, managerName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Backup Policy %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Backup Policy (Manager Name %q / Resource Group %q / Backup Policy Name %q / Device Name %q): %+v", managerName, resourceGroup, backupPolicyName, deviceName, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if backupPolicyProperties := resp.BackupPolicyProperties; backupPolicyProperties != nil {
        d.Set("backup_policy_creation_type", string(backupPolicyProperties.BackupPolicyCreationType))
        d.Set("last_backup_time", (backupPolicyProperties.LastBackupTime).String())
        d.Set("next_backup_time", (backupPolicyProperties.NextBackupTime).String())
        d.Set("scheduled_backup_status", string(backupPolicyProperties.ScheduledBackupStatus))
        d.Set("schedules_count", int(*backupPolicyProperties.SchedulesCount))
        d.Set("ssm_host_name", backupPolicyProperties.SsmHostName)
        d.Set("volume_ids", utils.FlattenStringSlice(backupPolicyProperties.VolumeIds))
    }
    d.Set("backup_policy_name", backupPolicyName)
    d.Set("device_name", deviceName)
    d.Set("kind", string(resp.Kind))
    d.Set("manager_name", managerName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmBackupPolicyDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).backupPoliciesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    deviceName := id.Path["devices"]
    backupPolicyName := id.Path["backupPolicies"]
    resourceGroup := id.ResourceGroup
    managerName := id.Path["managers"]

    future, err := client.Delete(ctx, deviceName, backupPolicyName, resourceGroup, managerName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Backup Policy (Manager Name %q / Resource Group %q / Backup Policy Name %q / Device Name %q): %+v", managerName, resourceGroup, backupPolicyName, deviceName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Backup Policy (Manager Name %q / Resource Group %q / Backup Policy Name %q / Device Name %q): %+v", managerName, resourceGroup, backupPolicyName, deviceName, err)
        }
    }

    return nil
}
