// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmServerEndpoint() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmServerEndpointCreate,
        Read: resourceArmServerEndpointRead,
        Update: resourceArmServerEndpointUpdate,
        Delete: resourceArmServerEndpointDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "server_endpoint_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "storage_sync_service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "sync_group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "cloud_tiering": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(storagesync.on),
                    string(storagesync.off),
                }, false),
                Default: string(storagesync.on),
            },

            "offline_data_transfer": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(storagesync.on),
                    string(storagesync.off),
                }, false),
                Default: string(storagesync.on),
            },

            "offline_data_transfer_share_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "pattern": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "recall_path": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "tier_files_older_than_days": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "volume_free_space_percent": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "cloud_tiering_status": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "health": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "last_cloud_tiering_result": {
                            Type: schema.TypeInt,
                            Computed: true,
                        },
                        "last_success_timestamp": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "last_updated_timestamp": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "friendly_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_operation_name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_workflow_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "offline_data_transfer_storage_account_resource_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "offline_data_transfer_storage_account_tenant_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "recall_status": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "last_updated_timestamp": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "recall_errors": {
                            Type: schema.TypeList,
                            Computed: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "error_code": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                },
                            },
                        },
                        "total_recall_errors_count": {
                            Type: schema.TypeInt,
                            Computed: true,
                        },
                    },
                },
            },

            "server_local_path": {
                Type: schema.TypeString,
                Computed: true,
            },

            "server_resource_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "sync_status": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "combined_health": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "download_activity": {
                            Type: schema.TypeList,
                            Computed: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "applied_bytes": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "applied_item_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "per_item_error_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "timestamp": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "total_bytes": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "total_item_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                },
                            },
                        },
                        "download_health": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "download_status": {
                            Type: schema.TypeList,
                            Computed: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "files_not_syncing_errors": {
                                        Type: schema.TypeList,
                                        Computed: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "error_code": {
                                                    Type: schema.TypeInt,
                                                    Computed: true,
                                                },
                                                "persistent_count": {
                                                    Type: schema.TypeInt,
                                                    Computed: true,
                                                },
                                                "transient_count": {
                                                    Type: schema.TypeInt,
                                                    Computed: true,
                                                },
                                            },
                                        },
                                    },
                                    "last_sync_per_item_error_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "last_sync_result": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "last_sync_success_timestamp": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "last_sync_timestamp": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "persistent_files_not_syncing_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "transient_files_not_syncing_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                },
                            },
                        },
                        "last_updated_timestamp": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "offline_data_transfer_status": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "sync_activity": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "total_persistent_files_not_syncing_count": {
                            Type: schema.TypeInt,
                            Computed: true,
                        },
                        "upload_activity": {
                            Type: schema.TypeList,
                            Computed: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "applied_bytes": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "applied_item_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "per_item_error_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "timestamp": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "total_bytes": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "total_item_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                },
                            },
                        },
                        "upload_health": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "upload_status": {
                            Type: schema.TypeList,
                            Computed: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "files_not_syncing_errors": {
                                        Type: schema.TypeList,
                                        Computed: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "error_code": {
                                                    Type: schema.TypeInt,
                                                    Computed: true,
                                                },
                                                "persistent_count": {
                                                    Type: schema.TypeInt,
                                                    Computed: true,
                                                },
                                                "transient_count": {
                                                    Type: schema.TypeInt,
                                                    Computed: true,
                                                },
                                            },
                                        },
                                    },
                                    "last_sync_per_item_error_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "last_sync_result": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "last_sync_success_timestamp": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "last_sync_timestamp": {
                                        Type: schema.TypeString,
                                        Computed: true,
                                    },
                                    "persistent_files_not_syncing_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                    "transient_files_not_syncing_count": {
                                        Type: schema.TypeInt,
                                        Computed: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmServerEndpointCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serverEndpointsClient
    ctx, cancel := timeouts.ForCreate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("server_endpoint_name").(string)
    storageSyncServiceName := d.Get("storage_sync_service_name").(string)
    syncGroupName := d.Get("sync_group_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, storageSyncServiceName, syncGroupName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Server Endpoint (Server Endpoint Name %q / Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, syncGroupName, storageSyncServiceName, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_server_endpoint", *existing.ID)
        }
    }

    cloudTiering := d.Get("cloud_tiering").(string)
    offlineDataTransfer := d.Get("offline_data_transfer").(string)
    offlineDataTransferShareName := d.Get("offline_data_transfer_share_name").(string)
    pattern := d.Get("pattern").(string)
    recallPath := d.Get("recall_path").(string)
    tierFilesOlderThanDays := d.Get("tier_files_older_than_days").(int)
    volumeFreeSpacePercent := d.Get("volume_free_space_percent").(int)

    parameters := storagesync.RecallActionParameters{
        Pattern: utils.String(pattern),
        ServerEndpointUpdateProperties: &storagesync.ServerEndpointUpdateProperties{
            CloudTiering: storagesync.(cloudTiering),
            OfflineDataTransfer: storagesync.(offlineDataTransfer),
            OfflineDataTransferShareName: utils.String(offlineDataTransferShareName),
            TierFilesOlderThanDays: utils.Int(tierFilesOlderThanDays),
            VolumeFreeSpacePercent: utils.Int(volumeFreeSpacePercent),
        },
        RecallPath: utils.String(recallPath),
    }


    future, err := client.Create(ctx, resourceGroupName, storageSyncServiceName, syncGroupName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Server Endpoint (Server Endpoint Name %q / Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, syncGroupName, storageSyncServiceName, resourceGroupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Server Endpoint (Server Endpoint Name %q / Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, syncGroupName, storageSyncServiceName, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, storageSyncServiceName, syncGroupName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Server Endpoint (Server Endpoint Name %q / Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, syncGroupName, storageSyncServiceName, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Server Endpoint (Server Endpoint Name %q / Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q) ID", name, syncGroupName, storageSyncServiceName, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmServerEndpointRead(d, meta)
}

func resourceArmServerEndpointRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serverEndpointsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    storageSyncServiceName := id.Path["storageSyncServices"]
    syncGroupName := id.Path["syncGroups"]
    name := id.Path["serverEndpoints"]

    resp, err := client.Get(ctx, resourceGroupName, storageSyncServiceName, syncGroupName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Server Endpoint %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Server Endpoint (Server Endpoint Name %q / Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, syncGroupName, storageSyncServiceName, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    if serverEndpointUpdateProperties := resp.ServerEndpointUpdateProperties; serverEndpointUpdateProperties != nil {
        d.Set("cloud_tiering", string(serverEndpointUpdateProperties.CloudTiering))
        if err := d.Set("cloud_tiering_status", flattenArmServerEndpointServerEndpointCloudTieringStatus(serverEndpointUpdateProperties.CloudTieringStatus)); err != nil {
            return fmt.Errorf("Error setting `cloud_tiering_status`: %+v", err)
        }
        d.Set("friendly_name", serverEndpointUpdateProperties.FriendlyName)
        d.Set("last_operation_name", serverEndpointUpdateProperties.LastOperationName)
        d.Set("last_workflow_id", serverEndpointUpdateProperties.LastWorkflowID)
        d.Set("offline_data_transfer", string(serverEndpointUpdateProperties.OfflineDataTransfer))
        d.Set("offline_data_transfer_share_name", serverEndpointUpdateProperties.OfflineDataTransferShareName)
        d.Set("offline_data_transfer_storage_account_resource_id", serverEndpointUpdateProperties.OfflineDataTransferStorageAccountResourceID)
        d.Set("offline_data_transfer_storage_account_tenant_id", serverEndpointUpdateProperties.OfflineDataTransferStorageAccountTenantID)
        d.Set("provisioning_state", serverEndpointUpdateProperties.ProvisioningState)
        if err := d.Set("recall_status", flattenArmServerEndpointServerEndpointRecallStatus(serverEndpointUpdateProperties.RecallStatus)); err != nil {
            return fmt.Errorf("Error setting `recall_status`: %+v", err)
        }
        d.Set("server_local_path", serverEndpointUpdateProperties.ServerLocalPath)
        d.Set("server_resource_id", serverEndpointUpdateProperties.ServerResourceID)
        if err := d.Set("sync_status", flattenArmServerEndpointServerEndpointSyncStatus(serverEndpointUpdateProperties.SyncStatus)); err != nil {
            return fmt.Errorf("Error setting `sync_status`: %+v", err)
        }
        d.Set("tier_files_older_than_days", serverEndpointUpdateProperties.TierFilesOlderThanDays)
        d.Set("volume_free_space_percent", serverEndpointUpdateProperties.VolumeFreeSpacePercent)
    }
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    d.Set("server_endpoint_name", name)
    d.Set("storage_sync_service_name", storageSyncServiceName)
    d.Set("sync_group_name", syncGroupName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmServerEndpointUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serverEndpointsClient
    ctx, cancel := timeouts.ForUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

      resourceGroupName := d.Get("resource_group").(string)
    cloudTiering := d.Get("cloud_tiering").(string)
    offlineDataTransfer := d.Get("offline_data_transfer").(string)
    offlineDataTransferShareName := d.Get("offline_data_transfer_share_name").(string)
    pattern := d.Get("pattern").(string)
    recallPath := d.Get("recall_path").(string)
    name := d.Get("server_endpoint_name").(string)
    storageSyncServiceName := d.Get("storage_sync_service_name").(string)
    syncGroupName := d.Get("sync_group_name").(string)
    tierFilesOlderThanDays := d.Get("tier_files_older_than_days").(int)
    volumeFreeSpacePercent := d.Get("volume_free_space_percent").(int)

    parameters := storagesync.RecallActionParameters{
        Pattern: utils.String(pattern),
        ServerEndpointUpdateProperties: &storagesync.ServerEndpointUpdateProperties{
            CloudTiering: storagesync.(cloudTiering),
            OfflineDataTransfer: storagesync.(offlineDataTransfer),
            OfflineDataTransferShareName: utils.String(offlineDataTransferShareName),
            TierFilesOlderThanDays: utils.Int(tierFilesOlderThanDays),
            VolumeFreeSpacePercent: utils.Int(volumeFreeSpacePercent),
        },
        RecallPath: utils.String(recallPath),
    }


    future, err := client.Update(ctx, resourceGroupName, storageSyncServiceName, syncGroupName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Server Endpoint (Server Endpoint Name %q / Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, syncGroupName, storageSyncServiceName, resourceGroupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Server Endpoint (Server Endpoint Name %q / Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, syncGroupName, storageSyncServiceName, resourceGroupName, err)
    }

    return resourceArmServerEndpointRead(d, meta)
}

func resourceArmServerEndpointDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serverEndpointsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    storageSyncServiceName := id.Path["storageSyncServices"]
    syncGroupName := id.Path["syncGroups"]
    name := id.Path["serverEndpoints"]

    future, err := client.Delete(ctx, resourceGroupName, storageSyncServiceName, syncGroupName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Server Endpoint (Server Endpoint Name %q / Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, syncGroupName, storageSyncServiceName, resourceGroupName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Server Endpoint (Server Endpoint Name %q / Sync Group Name %q / Storage Sync Service Name %q / Resource Group %q): %+v", name, syncGroupName, storageSyncServiceName, resourceGroupName, err)
        }
    }

    return nil
}


func flattenArmServerEndpointServerEndpointCloudTieringStatus(input *storagesync.ServerEndpointCloudTieringStatus) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["health"] = string(input.Health)
    if lastCloudTieringResult := input.LastCloudTieringResult; lastCloudTieringResult != nil {
        result["last_cloud_tiering_result"] = int(*lastCloudTieringResult)
    }
    if lastSuccessTimestamp := input.LastSuccessTimestamp; lastSuccessTimestamp != nil {
        result["last_success_timestamp"] = (*lastSuccessTimestamp).String()
    }
    if lastUpdatedTimestamp := input.LastUpdatedTimestamp; lastUpdatedTimestamp != nil {
        result["last_updated_timestamp"] = (*lastUpdatedTimestamp).String()
    }

    return []interface{}{result}
}

func flattenArmServerEndpointServerEndpointRecallStatus(input *storagesync.ServerEndpointRecallStatus) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if lastUpdatedTimestamp := input.LastUpdatedTimestamp; lastUpdatedTimestamp != nil {
        result["last_updated_timestamp"] = (*lastUpdatedTimestamp).String()
    }
    result["recall_errors"] = flattenArmServerEndpointServerEndpointRecallError(input.RecallErrors)
    if totalRecallErrorsCount := input.TotalRecallErrorsCount; totalRecallErrorsCount != nil {
        result["total_recall_errors_count"] = int(*totalRecallErrorsCount)
    }

    return []interface{}{result}
}

func flattenArmServerEndpointServerEndpointSyncStatus(input *storagesync.ServerEndpointSyncStatus) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["combined_health"] = string(input.CombinedHealth)
    result["download_activity"] = flattenArmServerEndpointServerEndpointSyncActivityStatus(input.DownloadActivity)
    result["download_health"] = string(input.DownloadHealth)
    result["download_status"] = flattenArmServerEndpointServerEndpointSyncSessionStatus(input.DownloadStatus)
    if lastUpdatedTimestamp := input.LastUpdatedTimestamp; lastUpdatedTimestamp != nil {
        result["last_updated_timestamp"] = (*lastUpdatedTimestamp).String()
    }
    result["offline_data_transfer_status"] = string(input.OfflineDataTransferStatus)
    result["sync_activity"] = string(input.SyncActivity)
    if totalPersistentFilesNotSyncingCount := input.TotalPersistentFilesNotSyncingCount; totalPersistentFilesNotSyncingCount != nil {
        result["total_persistent_files_not_syncing_count"] = int(*totalPersistentFilesNotSyncingCount)
    }
    result["upload_activity"] = flattenArmServerEndpointServerEndpointSyncActivityStatus(input.UploadActivity)
    result["upload_health"] = string(input.UploadHealth)
    result["upload_status"] = flattenArmServerEndpointServerEndpointSyncSessionStatus(input.UploadStatus)

    return []interface{}{result}
}

func flattenArmServerEndpointServerEndpointRecallError(input *[]storagesync.ServerEndpointRecallError) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if count := item.Count; count != nil {
            v["count"] = int(*count)
        }
        if errorCode := item.ErrorCode; errorCode != nil {
            v["error_code"] = int(*errorCode)
        }

        results = append(results, v)
    }

    return results
}

func flattenArmServerEndpointServerEndpointSyncActivityStatus(input *storagesync.ServerEndpointSyncActivityStatus) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if appliedBytes := input.AppliedBytes; appliedBytes != nil {
        result["applied_bytes"] = int(*appliedBytes)
    }
    if appliedItemCount := input.AppliedItemCount; appliedItemCount != nil {
        result["applied_item_count"] = int(*appliedItemCount)
    }
    if perItemErrorCount := input.PerItemErrorCount; perItemErrorCount != nil {
        result["per_item_error_count"] = int(*perItemErrorCount)
    }
    if timestamp := input.Timestamp; timestamp != nil {
        result["timestamp"] = (*timestamp).String()
    }
    if totalBytes := input.TotalBytes; totalBytes != nil {
        result["total_bytes"] = int(*totalBytes)
    }
    if totalItemCount := input.TotalItemCount; totalItemCount != nil {
        result["total_item_count"] = int(*totalItemCount)
    }

    return []interface{}{result}
}

func flattenArmServerEndpointServerEndpointSyncSessionStatus(input *storagesync.ServerEndpointSyncSessionStatus) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["files_not_syncing_errors"] = flattenArmServerEndpointServerEndpointFilesNotSyncingError(input.FilesNotSyncingErrors)
    if lastSyncPerItemErrorCount := input.LastSyncPerItemErrorCount; lastSyncPerItemErrorCount != nil {
        result["last_sync_per_item_error_count"] = int(*lastSyncPerItemErrorCount)
    }
    if lastSyncResult := input.LastSyncResult; lastSyncResult != nil {
        result["last_sync_result"] = int(*lastSyncResult)
    }
    if lastSyncSuccessTimestamp := input.LastSyncSuccessTimestamp; lastSyncSuccessTimestamp != nil {
        result["last_sync_success_timestamp"] = (*lastSyncSuccessTimestamp).String()
    }
    if lastSyncTimestamp := input.LastSyncTimestamp; lastSyncTimestamp != nil {
        result["last_sync_timestamp"] = (*lastSyncTimestamp).String()
    }
    if persistentFilesNotSyncingCount := input.PersistentFilesNotSyncingCount; persistentFilesNotSyncingCount != nil {
        result["persistent_files_not_syncing_count"] = int(*persistentFilesNotSyncingCount)
    }
    if transientFilesNotSyncingCount := input.TransientFilesNotSyncingCount; transientFilesNotSyncingCount != nil {
        result["transient_files_not_syncing_count"] = int(*transientFilesNotSyncingCount)
    }

    return []interface{}{result}
}

func flattenArmServerEndpointServerEndpointFilesNotSyncingError(input *[]storagesync.ServerEndpointFilesNotSyncingError) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if errorCode := item.ErrorCode; errorCode != nil {
            v["error_code"] = int(*errorCode)
        }
        if persistentCount := item.PersistentCount; persistentCount != nil {
            v["persistent_count"] = int(*persistentCount)
        }
        if transientCount := item.TransientCount; transientCount != nil {
            v["transient_count"] = int(*transientCount)
        }

        results = append(results, v)
    }

    return results
}
