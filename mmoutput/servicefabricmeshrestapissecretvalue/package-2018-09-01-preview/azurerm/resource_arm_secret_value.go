// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmSecretValue() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmSecretValueCreateUpdate,
        Read: resourceArmSecretValueRead,
        Update: resourceArmSecretValueCreateUpdate,
        Delete: resourceArmSecretValueDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "secret_resource_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "value": {
                Type: schema.TypeString,
                Optional: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmSecretValueCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).secretValueClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    secretResourceName := d.Get("secret_resource_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, secretResourceName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Secret Value %q (Secret Resource Name %q / Resource Group %q): %+v", name, secretResourceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_secret_value", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    value := d.Get("value").(string)
    t := d.Get("tags").(map[string]interface{})

    secretValueResourceDescription := servicefabricmeshrestapis.SecretValueResourceDescription{
        Location: utils.String(location),
        SecretValueResourceProperties: &servicefabricmeshrestapis.SecretValueResourceProperties{
            Value: utils.String(value),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Create(ctx, resourceGroup, secretResourceName, name, secretValueResourceDescription); err != nil {
        return fmt.Errorf("Error creating Secret Value %q (Secret Resource Name %q / Resource Group %q): %+v", name, secretResourceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, secretResourceName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Secret Value %q (Secret Resource Name %q / Resource Group %q): %+v", name, secretResourceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Secret Value %q (Secret Resource Name %q / Resource Group %q) ID", name, secretResourceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmSecretValueRead(d, meta)
}

func resourceArmSecretValueRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).secretValueClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    secretResourceName := id.Path["secrets"]
    name := id.Path["values"]

    resp, err := client.Get(ctx, resourceGroup, secretResourceName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Secret Value %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Secret Value %q (Secret Resource Name %q / Resource Group %q): %+v", name, secretResourceName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if secretValueResourceProperties := resp.SecretValueResourceProperties; secretValueResourceProperties != nil {
        d.Set("provisioning_state", secretValueResourceProperties.ProvisioningState)
        d.Set("value", secretValueResourceProperties.Value)
    }
    d.Set("secret_resource_name", secretResourceName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}


func resourceArmSecretValueDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).secretValueClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    secretResourceName := id.Path["secrets"]
    name := id.Path["values"]

    if _, err := client.Delete(ctx, resourceGroup, secretResourceName, name); err != nil {
        return fmt.Errorf("Error deleting Secret Value %q (Secret Resource Name %q / Resource Group %q): %+v", name, secretResourceName, resourceGroup, err)
    }

    return nil
}
