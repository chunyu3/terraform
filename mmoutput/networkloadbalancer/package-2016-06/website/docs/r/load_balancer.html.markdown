---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_load_balancer"
sidebar_current: "docs-azurerm-resource-load-balancer"
description: |-
  Manage Azure LoadBalancer instance.
---

# azurerm_load_balancer

Manage Azure LoadBalancer instance.


## Argument Reference

The following arguments are supported:

* `resource_group` - (Required) The name of the resource group. Changing this forces a new resource to be created.

* `load_balancer_name` - (Required) The name of the loadBalancer. Changing this forces a new resource to be created.

* `id` - (Optional) Resource Id Changing this forces a new resource to be created.

* `location` - (Optional) Resource location Changing this forces a new resource to be created.

* `backend_address_pools` - (Optional) One or more `backend_address_pool` block defined below.

* `etag` - (Optional) Gets a unique read-only string that changes whenever the resource is updated Changing this forces a new resource to be created.

* `frontend_ipconfigurations` - (Optional) One or more `frontend_ipconfiguration` block defined below.

* `inbound_nat_pools` - (Optional) One or more `inbound_nat_pool` block defined below.

* `inbound_nat_rules` - (Optional) One or more `inbound_nat_rule` block defined below.

* `load_balancing_rules` - (Optional) One or more `load_balancing_rule` block defined below.

* `outbound_nat_rules` - (Optional) One or more `outbound_nat_rule` block defined below.

* `probes` - (Optional) One or more `probe` block defined below.

* `resource_guid` - (Optional) Gets or sets resource guid property of the Load balancer resource

* `tags` - (Optional) Resource tags Changing this forces a new resource to be created.

---

The `backend_address_pool` block supports the following:

* `id` - (Optional) Resource Id

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated

---

The `frontend_ipconfiguration` block supports the following:

* `id` - (Optional) Resource Id

* `private_ip_address` - (Optional) Gets or sets the privateIPAddress of the IP Configuration

* `private_ipallocation_method` - (Optional) Gets or sets PrivateIP allocation method Defaults to `Static`.

* `subnet` - (Optional) One `subnet` block defined below.

* `public_ip_address` - (Optional) One `public_ip_address` block defined below.

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated


---

The `subnet` block supports the following:

* `id` - (Optional) Resource Id

* `name` - (Optional) Gets or sets the name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated

---

The `public_ip_address` block supports the following:

* `id` - (Optional) Resource Id

* `location` - (Optional) Resource location Changing this forces a new resource to be created.

* `tags` - (Optional) Resource tags

* `etag` - (Optional) Gets a unique read-only string that changes whenever the resource is updated

---

The `inbound_nat_pool` block supports the following:

* `id` - (Optional) Resource Id

* `frontend_ipconfiguration` - (Optional) One `frontend_ipconfiguration` block defined below.

* `protocol` - (Required) Gets or sets the transport protocol for the endpoint. Possible values are Udp or Tcp

* `frontend_port_range_start` - (Required) Gets or sets the starting port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

* `frontend_port_range_end` - (Required) Gets or sets the ending port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

* `backend_port` - (Required) Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated


---

The `frontend_ipconfiguration` block supports the following:

* `id` - (Optional) Resource Id

---

The `inbound_nat_rule` block supports the following:

* `id` - (Optional) Resource Id

* `frontend_ipconfiguration` - (Optional) One `frontend_ipconfiguration` block defined below.

* `protocol` - (Optional) Gets or sets the transport protocol for the endpoint. Possible values are Udp or Tcp Defaults to `Udp`.

* `frontend_port` - (Optional) Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

* `backend_port` - (Optional) Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API

* `idle_timeout_in_minutes` - (Optional) Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp

* `enable_floating_ip` - (Optional) Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated


---

The `frontend_ipconfiguration` block supports the following:

* `id` - (Optional) Resource Id

---

The `load_balancing_rule` block supports the following:

* `id` - (Optional) Resource Id

* `frontend_ipconfiguration` - (Optional) One `frontend_ipconfiguration` block defined below.

* `backend_address_pool` - (Optional) One `backend_address_pool` block defined below.

* `probe` - (Optional) One `probe` block defined below.

* `protocol` - (Required) Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp

* `load_distribution` - (Optional) Gets or sets the load distribution policy for this rule Defaults to `Default`.

* `frontend_port` - (Required) Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

* `backend_port` - (Optional) Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API

* `idle_timeout_in_minutes` - (Optional) Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp

* `enable_floating_ip` - (Optional) Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated


---

The `frontend_ipconfiguration` block supports the following:

* `id` - (Optional) Resource Id

---

The `backend_address_pool` block supports the following:

* `id` - (Optional) Resource Id

---

The `probe` block supports the following:

* `id` - (Optional) Resource Id

---

The `outbound_nat_rule` block supports the following:

* `id` - (Optional) Resource Id

* `allocated_outbound_ports` - (Optional) Gets or sets the number of outbound ports to be used for SNAT

* `frontend_ipconfigurations` - (Optional) One or more `frontend_ipconfiguration` block defined below.

* `backend_address_pool` - (Required) One `backend_address_pool` block defined below.

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated


---

The `frontend_ipconfiguration` block supports the following:

* `id` - (Optional) Resource Id

---

The `backend_address_pool` block supports the following:

* `id` - (Optional) Resource Id

---

The `probe` block supports the following:

* `id` - (Optional) Resource Id

* `protocol` - (Required) Gets or sets the protocol of the end point. Possible values are http or Tcp. If Tcp is specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from the specifies URI is required for the probe to be successful

* `port` - (Required) Gets or sets Port for communicating the probe. Possible values range from 1 to 65535, inclusive.

* `interval_in_seconds` - (Optional) Gets or sets the interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5

* `number_of_probes` - (Optional) Gets or sets the number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.

* `request_path` - (Optional) Gets or sets the URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value

* `name` - (Optional) Gets name of the resource that is unique within a resource group. This name can be used to access the resource

* `etag` - (Optional) A unique read-only string that changes whenever the resource is updated

## Attributes Reference

The following attributes are exported:

* `provisioning_state` - Gets provisioning state of the PublicIP resource Updating/Deleting/Failed

* `name` - Resource name

* `type` - Resource type
