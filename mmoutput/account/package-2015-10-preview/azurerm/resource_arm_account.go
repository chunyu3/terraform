// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAccount() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAccountCreate,
        Read: resourceArmAccountRead,
        Update: resourceArmAccountUpdate,
        Delete: resourceArmAccountDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "data_lake_store_accounts": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "suffix": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "default_data_lake_store_account": {
                Type: schema.TypeString,
                Optional: true,
            },

            "max_degree_of_parallelism": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "max_job_count": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "storage_accounts": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "access_key": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "suffix": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "creation_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "endpoint": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_modified_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmAccountCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Account (Resource Group %q): %+v", resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_account", *existing.ID)
        }
    }

    name := d.Get("name").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    dataLakeStoreAccounts := d.Get("data_lake_store_accounts").([]interface{})
    defaultDataLakeStoreAccount := d.Get("default_data_lake_store_account").(string)
    maxDegreeOfParallelism := d.Get("max_degree_of_parallelism").(int)
    maxJobCount := d.Get("max_job_count").(int)
    storageAccounts := d.Get("storage_accounts").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := datalakeanalytics.Account{
        Location: utils.String(location),
        Name: utils.String(name),
        AccountProperties: &datalakeanalytics.AccountProperties{
            DataLakeStoreAccounts: expandArmAccountDataLakeStoreAccountInfo(dataLakeStoreAccounts),
            DefaultDataLakeStoreAccount: utils.String(defaultDataLakeStoreAccount),
            MaxDegreeOfParallelism: utils.Int32(int32(maxDegreeOfParallelism)),
            MaxJobCount: utils.Int32(int32(maxJobCount)),
            StorageAccounts: expandArmAccountStorageAccountInfo(storageAccounts),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Create(ctx, resourceGroup, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Account (Resource Group %q): %+v", resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Account (Resource Group %q): %+v", resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup)
    if err != nil {
        return fmt.Errorf("Error retrieving Account (Resource Group %q): %+v", resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Account (Resource Group %q) ID", resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAccountRead(d, meta)
}

func resourceArmAccountRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup

    resp, err := client.Get(ctx, resourceGroup)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Account %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Account (Resource Group %q): %+v", resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if accountProperties := resp.AccountProperties; accountProperties != nil {
        d.Set("creation_time", (accountProperties.CreationTime).String())
        if err := d.Set("data_lake_store_accounts", flattenArmAccountDataLakeStoreAccountInfo(accountProperties.DataLakeStoreAccounts)); err != nil {
            return fmt.Errorf("Error setting `data_lake_store_accounts`: %+v", err)
        }
        d.Set("default_data_lake_store_account", accountProperties.DefaultDataLakeStoreAccount)
        d.Set("endpoint", accountProperties.Endpoint)
        d.Set("last_modified_time", (accountProperties.LastModifiedTime).String())
        d.Set("max_degree_of_parallelism", int(*accountProperties.MaxDegreeOfParallelism))
        d.Set("max_job_count", int(*accountProperties.MaxJobCount))
        d.Set("provisioning_state", string(accountProperties.ProvisioningState))
        d.Set("state", string(accountProperties.State))
        if err := d.Set("storage_accounts", flattenArmAccountStorageAccountInfo(accountProperties.StorageAccounts)); err != nil {
            return fmt.Errorf("Error setting `storage_accounts`: %+v", err)
        }
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmAccountUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    dataLakeStoreAccounts := d.Get("data_lake_store_accounts").([]interface{})
    defaultDataLakeStoreAccount := d.Get("default_data_lake_store_account").(string)
    maxDegreeOfParallelism := d.Get("max_degree_of_parallelism").(int)
    maxJobCount := d.Get("max_job_count").(int)
    storageAccounts := d.Get("storage_accounts").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := datalakeanalytics.Account{
        Location: utils.String(location),
        Name: utils.String(name),
        AccountProperties: &datalakeanalytics.AccountProperties{
            DataLakeStoreAccounts: expandArmAccountDataLakeStoreAccountInfo(dataLakeStoreAccounts),
            DefaultDataLakeStoreAccount: utils.String(defaultDataLakeStoreAccount),
            MaxDegreeOfParallelism: utils.Int32(int32(maxDegreeOfParallelism)),
            MaxJobCount: utils.Int32(int32(maxJobCount)),
            StorageAccounts: expandArmAccountStorageAccountInfo(storageAccounts),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Account (Resource Group %q): %+v", resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Account (Resource Group %q): %+v", resourceGroup, err)
    }

    return resourceArmAccountRead(d, meta)
}

func resourceArmAccountDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).accountClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup

    future, err := client.Delete(ctx, resourceGroup)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Account (Resource Group %q): %+v", resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Account (Resource Group %q): %+v", resourceGroup, err)
        }
    }

    return nil
}

func expandArmAccountDataLakeStoreAccountInfo(input []interface{}) *[]datalakeanalytics.DataLakeStoreAccountInfo {
    results := make([]datalakeanalytics.DataLakeStoreAccountInfo, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        suffix := v["suffix"].(string)

        result := datalakeanalytics.DataLakeStoreAccountInfo{
            Name: utils.String(name),
            DataLakeStoreAccountInfoProperties: &datalakeanalytics.DataLakeStoreAccountInfoProperties{
                Suffix: utils.String(suffix),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmAccountStorageAccountInfo(input []interface{}) *[]datalakeanalytics.StorageAccountInfo {
    results := make([]datalakeanalytics.StorageAccountInfo, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        accessKey := v["access_key"].(string)
        suffix := v["suffix"].(string)

        result := datalakeanalytics.StorageAccountInfo{
            Name: utils.String(name),
            StorageAccountProperties: &datalakeanalytics.StorageAccountProperties{
                AccessKey: utils.String(accessKey),
                Suffix: utils.String(suffix),
            },
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmAccountDataLakeStoreAccountInfo(input *[]datalakeanalytics.DataLakeStoreAccountInfo) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if dataLakeStoreAccountInfoProperties := item.DataLakeStoreAccountInfoProperties; dataLakeStoreAccountInfoProperties != nil {
            if suffix := dataLakeStoreAccountInfoProperties.Suffix; suffix != nil {
                v["suffix"] = *suffix
            }
        }

        results = append(results, v)
    }

    return results
}

func flattenArmAccountStorageAccountInfo(input *[]datalakeanalytics.StorageAccountInfo) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if name := item.Name; name != nil {
            v["name"] = *name
        }
        if storageAccountProperties := item.StorageAccountProperties; storageAccountProperties != nil {
            if accessKey := storageAccountProperties.AccessKey; accessKey != nil {
                v["access_key"] = *accessKey
            }
            if suffix := storageAccountProperties.Suffix; suffix != nil {
                v["suffix"] = *suffix
            }
        }

        results = append(results, v)
    }

    return results
}
