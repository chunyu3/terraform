// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmMediaservice() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmMediaserviceCreate,
        Read: resourceArmMediaserviceRead,
        Update: resourceArmMediaserviceUpdate,
        Delete: resourceArmMediaserviceDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "storage_accounts": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(mediaservices.Primary),
                                string(mediaservices.Secondary),
                            }, false),
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "media_service_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmMediaserviceCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).mediaservicesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, accountName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Mediaservice (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_mediaservice", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    storageAccounts := d.Get("storage_accounts").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := mediaservices.MediaService{
        Location: utils.String(location),
        MediaServiceProperties: &mediaservices.MediaServiceProperties{
            StorageAccounts: expandArmMediaserviceStorageAccount(storageAccounts),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, accountName, parameters); err != nil {
        return fmt.Errorf("Error creating Mediaservice (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName)
    if err != nil {
        return fmt.Errorf("Error retrieving Mediaservice (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Mediaservice (Account Name %q / Resource Group %q) ID", accountName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmMediaserviceRead(d, meta)
}

func resourceArmMediaserviceRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).mediaservicesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaservices"]

    resp, err := client.Get(ctx, resourceGroup, accountName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Mediaservice %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Mediaservice (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("account_name", accountName)
    if mediaServiceProperties := resp.MediaServiceProperties; mediaServiceProperties != nil {
        d.Set("media_service_id", mediaServiceProperties.MediaServiceID)
        if err := d.Set("storage_accounts", flattenArmMediaserviceStorageAccount(mediaServiceProperties.StorageAccounts)); err != nil {
            return fmt.Errorf("Error setting `storage_accounts`: %+v", err)
        }
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmMediaserviceUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).mediaservicesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    storageAccounts := d.Get("storage_accounts").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := mediaservices.MediaService{
        Location: utils.String(location),
        MediaServiceProperties: &mediaservices.MediaServiceProperties{
            StorageAccounts: expandArmMediaserviceStorageAccount(storageAccounts),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, accountName, parameters); err != nil {
        return fmt.Errorf("Error updating Mediaservice (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
    }

    return resourceArmMediaserviceRead(d, meta)
}

func resourceArmMediaserviceDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).mediaservicesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["mediaservices"]

    if _, err := client.Delete(ctx, resourceGroup, accountName); err != nil {
        return fmt.Errorf("Error deleting Mediaservice (Account Name %q / Resource Group %q): %+v", accountName, resourceGroup, err)
    }

    return nil
}

func expandArmMediaserviceStorageAccount(input []interface{}) *[]mediaservices.StorageAccount {
    results := make([]mediaservices.StorageAccount, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        id := v["id"].(string)
        type := v["type"].(string)

        result := mediaservices.StorageAccount{
            ID: utils.String(id),
            Type: mediaservices.StorageAccountType(type),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmMediaserviceStorageAccount(input *[]mediaservices.StorageAccount) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if id := item.ID; id != nil {
            v["id"] = *id
        }
        v["type"] = string(item.Type)

        results = append(results, v)
    }

    return results
}
