// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmFile() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmFileCreate,
        Read: resourceArmFileRead,
        Update: resourceArmFileUpdate,
        Delete: resourceArmFileDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "file_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "project_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "extension": {
                Type: schema.TypeString,
                Optional: true,
            },

            "file_path": {
                Type: schema.TypeString,
                Optional: true,
            },

            "media_type": {
                Type: schema.TypeString,
                Optional: true,
            },

            "last_modified": {
                Type: schema.TypeString,
                Computed: true,
            },

            "size": {
                Type: schema.TypeInt,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmFileCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).filesClient
    ctx := meta.(*ArmClient).StopContext

    fileName := d.Get("file_name").(string)
    groupName := d.Get("group_name").(string)
    projectName := d.Get("project_name").(string)
    serviceName := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, groupName, serviceName, projectName, fileName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing File (File Name %q / Project Name %q / Service Name %q / Group Name %q): %+v", fileName, projectName, serviceName, groupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_file", *existing.ID)
        }
    }

    etag := d.Get("etag").(string)
    extension := d.Get("extension").(string)
    filePath := d.Get("file_path").(string)
    mediaType := d.Get("media_type").(string)

    parameters := azuredatabasemigrationservice.ProjectFile{
        Etag: utils.String(etag),
        ProjectFileProperties: &azuredatabasemigrationservice.ProjectFileProperties{
            Extension: utils.String(extension),
            FilePath: utils.String(filePath),
            MediaType: utils.String(mediaType),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, groupName, serviceName, projectName, fileName, parameters); err != nil {
        return fmt.Errorf("Error creating File (File Name %q / Project Name %q / Service Name %q / Group Name %q): %+v", fileName, projectName, serviceName, groupName, err)
    }


    resp, err := client.Get(ctx, groupName, serviceName, projectName, fileName)
    if err != nil {
        return fmt.Errorf("Error retrieving File (File Name %q / Project Name %q / Service Name %q / Group Name %q): %+v", fileName, projectName, serviceName, groupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read File (File Name %q / Project Name %q / Service Name %q / Group Name %q) ID", fileName, projectName, serviceName, groupName)
    }
    d.SetId(*resp.ID)

    return resourceArmFileRead(d, meta)
}

func resourceArmFileRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).filesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    groupName := id.ResourceGroup
    serviceName := id.Path["services"]
    projectName := id.Path["projects"]
    fileName := id.Path["files"]

    resp, err := client.Get(ctx, groupName, serviceName, projectName, fileName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] File %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading File (File Name %q / Project Name %q / Service Name %q / Group Name %q): %+v", fileName, projectName, serviceName, groupName, err)
    }


    d.Set("name", resp.Name)
    d.Set("etag", resp.Etag)
    if projectFileProperties := resp.ProjectFileProperties; projectFileProperties != nil {
        d.Set("extension", projectFileProperties.Extension)
        d.Set("file_path", projectFileProperties.FilePath)
        d.Set("last_modified", (projectFileProperties.LastModified).String())
        d.Set("media_type", projectFileProperties.MediaType)
        d.Set("size", int(*projectFileProperties.Size))
    }
    d.Set("file_name", fileName)
    d.Set("group_name", groupName)
    d.Set("project_name", projectName)
    d.Set("service_name", serviceName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmFileUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).filesClient
    ctx := meta.(*ArmClient).StopContext

    etag := d.Get("etag").(string)
    extension := d.Get("extension").(string)
    fileName := d.Get("file_name").(string)
    filePath := d.Get("file_path").(string)
    groupName := d.Get("group_name").(string)
    mediaType := d.Get("media_type").(string)
    projectName := d.Get("project_name").(string)
    serviceName := d.Get("service_name").(string)

    parameters := azuredatabasemigrationservice.ProjectFile{
        Etag: utils.String(etag),
        ProjectFileProperties: &azuredatabasemigrationservice.ProjectFileProperties{
            Extension: utils.String(extension),
            FilePath: utils.String(filePath),
            MediaType: utils.String(mediaType),
        },
    }


    if _, err := client.Update(ctx, groupName, serviceName, projectName, fileName, parameters); err != nil {
        return fmt.Errorf("Error updating File (File Name %q / Project Name %q / Service Name %q / Group Name %q): %+v", fileName, projectName, serviceName, groupName, err)
    }

    return resourceArmFileRead(d, meta)
}

func resourceArmFileDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).filesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    groupName := id.ResourceGroup
    serviceName := id.Path["services"]
    projectName := id.Path["projects"]
    fileName := id.Path["files"]

    if _, err := client.Delete(ctx, groupName, serviceName, projectName, fileName); err != nil {
        return fmt.Errorf("Error deleting File (File Name %q / Project Name %q / Service Name %q / Group Name %q): %+v", fileName, projectName, serviceName, groupName, err)
    }

    return nil
}
