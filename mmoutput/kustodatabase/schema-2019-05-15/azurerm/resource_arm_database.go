// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDatabase() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDatabaseCreate,
        Read: resourceArmDatabaseRead,
        Update: resourceArmDatabaseUpdate,
        Delete: resourceArmDatabaseDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "cluster_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "value": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "role": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(kusto.Admin),
                                string(kusto.Ingestor),
                                string(kusto.Monitor),
                                string(kusto.User),
                                string(kusto.UnrestrictedViewers),
                                string(kusto.Viewer),
                            }, false),
                        },
                        "type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(kusto.App),
                                string(kusto.Group),
                                string(kusto.User),
                            }, false),
                        },
                        "app_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "email": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "fqn": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },
        },
    }
}

func resourceArmDatabaseCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    clusterName := d.Get("cluster_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, clusterName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Database %q (Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_database", *existing.ID)
        }
    }

    value := d.Get("value").([]interface{})

    parameters := kusto.DatabaseUpdate{
        Value: expandArmDatabaseDatabasePrincipal(value),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, clusterName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Database %q (Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Database %q (Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, clusterName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Database %q (Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Database %q (Cluster Name %q / Resource Group %q) ID", name, clusterName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmDatabaseRead(d, meta)
}

func resourceArmDatabaseRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    clusterName := id.Path["clusters"]
    name := id.Path["databases"]

    resp, err := client.Get(ctx, resourceGroup, clusterName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Database %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Database %q (Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("resource_group", resourceGroup)
    d.Set("cluster_name", clusterName)

    return nil
}

func resourceArmDatabaseUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasesClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    clusterName := d.Get("cluster_name").(string)
    value := d.Get("value").([]interface{})

    parameters := kusto.DatabaseUpdate{
        Value: expandArmDatabaseDatabasePrincipal(value),
    }


    future, err := client.Update(ctx, resourceGroup, clusterName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Database %q (Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Database %q (Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroup, err)
    }

    return resourceArmDatabaseRead(d, meta)
}

func resourceArmDatabaseDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    clusterName := id.Path["clusters"]
    name := id.Path["databases"]

    future, err := client.Delete(ctx, resourceGroup, clusterName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Database %q (Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Database %q (Cluster Name %q / Resource Group %q): %+v", name, clusterName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmDatabaseDatabasePrincipal(input []interface{}) *[]kusto.DatabasePrincipal {
    results := make([]kusto.DatabasePrincipal, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        role := v["role"].(string)
        name := v["name"].(string)
        type := v["type"].(string)
        fqn := v["fqn"].(string)
        email := v["email"].(string)
        appId := v["app_id"].(string)

        result := kusto.DatabasePrincipal{
            AppID: utils.String(appId),
            Email: utils.String(email),
            Fqn: utils.String(fqn),
            Name: utils.String(name),
            Role: kusto.DatabasePrincipalRole(role),
            Type: kusto.DatabasePrincipalType(type),
        }

        results = append(results, result)
    }
    return &results
}
