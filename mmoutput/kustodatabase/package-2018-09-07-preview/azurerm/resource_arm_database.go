// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDatabase() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDatabaseCreate,
        Read: resourceArmDatabaseRead,
        Update: resourceArmDatabaseUpdate,
        Delete: resourceArmDatabaseDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "cluster_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "database_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "soft_delete_period_in_days": {
                Type: schema.TypeInt,
                Required: true,
            },

            "hot_cache_period_in_days": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "statistics": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "size": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmDatabaseCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    clusterName := d.Get("cluster_name").(string)
    databaseName := d.Get("database_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, clusterName, databaseName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Database (Database Name %q / Cluster Name %q / Resource Group %q): %+v", databaseName, clusterName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_database", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    hotCachePeriodInDays := d.Get("hot_cache_period_in_days").(int)
    softDeletePeriodInDays := d.Get("soft_delete_period_in_days").(int)
    statistics := d.Get("statistics").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := kusto.Database{
        Location: utils.String(location),
        DatabaseProperties: &kusto.DatabaseProperties{
            HotCachePeriodInDays: utils.Int(hotCachePeriodInDays),
            SoftDeletePeriodInDays: utils.Int(softDeletePeriodInDays),
            Statistics: expandArmDatabaseDatabaseStatistics(statistics),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, clusterName, databaseName, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Database (Database Name %q / Cluster Name %q / Resource Group %q): %+v", databaseName, clusterName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Database (Database Name %q / Cluster Name %q / Resource Group %q): %+v", databaseName, clusterName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, clusterName, databaseName)
    if err != nil {
        return fmt.Errorf("Error retrieving Database (Database Name %q / Cluster Name %q / Resource Group %q): %+v", databaseName, clusterName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Database (Database Name %q / Cluster Name %q / Resource Group %q) ID", databaseName, clusterName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmDatabaseRead(d, meta)
}

func resourceArmDatabaseRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasesClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    clusterName := id.Path["clusters"]
    databaseName := id.Path["databases"]

    resp, err := client.Get(ctx, resourceGroup, clusterName, databaseName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Database %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Database (Database Name %q / Cluster Name %q / Resource Group %q): %+v", databaseName, clusterName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("cluster_name", clusterName)
    d.Set("database_name", databaseName)
    d.Set("etag", resp.Etag)
    if databaseProperties := resp.DatabaseProperties; databaseProperties != nil {
        d.Set("hot_cache_period_in_days", databaseProperties.HotCachePeriodInDays)
        d.Set("provisioning_state", string(databaseProperties.ProvisioningState))
        d.Set("soft_delete_period_in_days", databaseProperties.SoftDeletePeriodInDays)
        if err := d.Set("statistics", flattenArmDatabaseDatabaseStatistics(databaseProperties.Statistics)); err != nil {
            return fmt.Errorf("Error setting `statistics`: %+v", err)
        }
    }
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmDatabaseUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasesClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    clusterName := d.Get("cluster_name").(string)
    databaseName := d.Get("database_name").(string)
    hotCachePeriodInDays := d.Get("hot_cache_period_in_days").(int)
    softDeletePeriodInDays := d.Get("soft_delete_period_in_days").(int)
    statistics := d.Get("statistics").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := kusto.Database{
        Location: utils.String(location),
        DatabaseProperties: &kusto.DatabaseProperties{
            HotCachePeriodInDays: utils.Int(hotCachePeriodInDays),
            SoftDeletePeriodInDays: utils.Int(softDeletePeriodInDays),
            Statistics: expandArmDatabaseDatabaseStatistics(statistics),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.Update(ctx, resourceGroup, clusterName, databaseName, parameters)
    if err != nil {
        return fmt.Errorf("Error updating Database (Database Name %q / Cluster Name %q / Resource Group %q): %+v", databaseName, clusterName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for update of Database (Database Name %q / Cluster Name %q / Resource Group %q): %+v", databaseName, clusterName, resourceGroup, err)
    }

    return resourceArmDatabaseRead(d, meta)
}

func resourceArmDatabaseDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).databasesClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    clusterName := id.Path["clusters"]
    databaseName := id.Path["databases"]

    future, err := client.Delete(ctx, resourceGroup, clusterName, databaseName)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Database (Database Name %q / Cluster Name %q / Resource Group %q): %+v", databaseName, clusterName, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Database (Database Name %q / Cluster Name %q / Resource Group %q): %+v", databaseName, clusterName, resourceGroup, err)
        }
    }

    return nil
}

func expandArmDatabaseDatabaseStatistics(input []interface{}) *kusto.DatabaseStatistics {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    size := v["size"].(int)

    result := kusto.DatabaseStatistics{
        Size: utils.Int(size),
    }
    return &result
}


func flattenArmDatabaseDatabaseStatistics(input *kusto.DatabaseStatistics) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if size := input.Size; size != nil {
        result["size"] = *size
    }

    return []interface{}{result}
}
