// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPrivateEndpointConnection() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPrivateEndpointConnectionCreateUpdate,
        Read: resourceArmPrivateEndpointConnectionRead,
        Update: resourceArmPrivateEndpointConnectionCreateUpdate,
        Delete: resourceArmPrivateEndpointConnectionDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "private_endpoint_connection_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "server_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "private_endpoint": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "private_link_service_connection_state": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "description": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "status": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "tags": tags.Schema(),

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmPrivateEndpointConnectionCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).privateEndpointConnectionsClient
    ctx, cancel := timeouts.ForCreateUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("private_endpoint_connection_name").(string)
    serverName := d.Get("server_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, serverName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Private Endpoint Connection (Private Endpoint Connection Name %q / Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_private_endpoint_connection", *existing.ID)
        }
    }

    privateEndpoint := d.Get("private_endpoint").([]interface{})
    privateLinkServiceConnectionState := d.Get("private_link_service_connection_state").([]interface{})
    tags := d.Get("tags").(map[string]interface{})

    parameters := mariadb.TagsObject{
        PrivateEndpointConnectionProperties: &mariadb.PrivateEndpointConnectionProperties{
            PrivateEndpoint: expandArmPrivateEndpointConnectionPrivateEndpointProperty(privateEndpoint),
            PrivateLinkServiceConnectionState: expandArmPrivateEndpointConnectionPrivateLinkServiceConnectionStateProperty(privateLinkServiceConnectionState),
        },
        Tags: tags.Expand(tags),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroupName, serverName, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Private Endpoint Connection (Private Endpoint Connection Name %q / Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroupName, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Private Endpoint Connection (Private Endpoint Connection Name %q / Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, serverName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Private Endpoint Connection (Private Endpoint Connection Name %q / Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Private Endpoint Connection (Private Endpoint Connection Name %q / Server Name %q / Resource Group %q) ID", name, serverName, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmPrivateEndpointConnectionRead(d, meta)
}

func resourceArmPrivateEndpointConnectionRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).privateEndpointConnectionsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    serverName := id.Path["servers"]
    name := id.Path["privateEndpointConnections"]

    resp, err := client.Get(ctx, resourceGroupName, serverName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Private Endpoint Connection %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Private Endpoint Connection (Private Endpoint Connection Name %q / Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    d.Set("id", resp.ID)
    d.Set("name", resp.Name)
    if privateEndpointConnectionProperties := resp.PrivateEndpointConnectionProperties; privateEndpointConnectionProperties != nil {
        if err := d.Set("private_endpoint", flattenArmPrivateEndpointConnectionPrivateEndpointProperty(privateEndpointConnectionProperties.PrivateEndpoint)); err != nil {
            return fmt.Errorf("Error setting `private_endpoint`: %+v", err)
        }
        if err := d.Set("private_link_service_connection_state", flattenArmPrivateEndpointConnectionPrivateLinkServiceConnectionStateProperty(privateEndpointConnectionProperties.PrivateLinkServiceConnectionState)); err != nil {
            return fmt.Errorf("Error setting `private_link_service_connection_state`: %+v", err)
        }
        d.Set("provisioning_state", privateEndpointConnectionProperties.ProvisioningState)
    }
    d.Set("private_endpoint_connection_name", name)
    d.Set("server_name", serverName)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmPrivateEndpointConnectionDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).privateEndpointConnectionsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    serverName := id.Path["servers"]
    name := id.Path["privateEndpointConnections"]

    future, err := client.Delete(ctx, resourceGroupName, serverName, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Private Endpoint Connection (Private Endpoint Connection Name %q / Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroupName, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Private Endpoint Connection (Private Endpoint Connection Name %q / Server Name %q / Resource Group %q): %+v", name, serverName, resourceGroupName, err)
        }
    }

    return nil
}

func expandArmPrivateEndpointConnectionPrivateEndpointProperty(input []interface{}) *mariadb.PrivateEndpointProperty {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    iD := v["id"].(string)

    result := mariadb.PrivateEndpointProperty{
        ID: utils.String(iD),
    }
    return &result
}

func expandArmPrivateEndpointConnectionPrivateLinkServiceConnectionStateProperty(input []interface{}) *mariadb.PrivateLinkServiceConnectionStateProperty {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    status := v["status"].(string)
    description := v["description"].(string)

    result := mariadb.PrivateLinkServiceConnectionStateProperty{
        Description: utils.String(description),
        Status: utils.String(status),
    }
    return &result
}


func flattenArmPrivateEndpointConnectionPrivateEndpointProperty(input *mariadb.PrivateEndpointProperty) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}

func flattenArmPrivateEndpointConnectionPrivateLinkServiceConnectionStateProperty(input *mariadb.PrivateLinkServiceConnectionStateProperty) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if description := input.Description; description != nil {
        result["description"] = *description
    }
    if status := input.Status; status != nil {
        result["status"] = *status
    }

    return []interface{}{result}
}
