// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmFileShare() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmFileShareCreate,
        Read: resourceArmFileShareRead,
        Update: resourceArmFileShareUpdate,
        Delete: resourceArmFileShareDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "account_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "share_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "metadata": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "share_quota": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "etag": {
                Type: schema.TypeString,
                Computed: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "last_modified_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmFileShareCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).fileSharesClient
    ctx, cancel := timeouts.ForCreate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    name := d.Get("share_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, accountName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing File Share (Share Name %q / Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_file_share", *existing.ID)
        }
    }

    metadata := d.Get("metadata").(map[string]interface{})
    shareQuota := d.Get("share_quota").(int)

    fileShare := storage.FileShare{
        FileShareProperties: &storage.FileShareProperties{
            Metadata: utils.ExpandKeyValuePairs(metadata),
            ShareQuota: utils.Int(shareQuota),
        },
    }


    if _, err := client.Create(ctx, resourceGroupName, accountName, name, fileShare); err != nil {
        return fmt.Errorf("Error creating File Share (Share Name %q / Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, accountName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving File Share (Share Name %q / Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read File Share (Share Name %q / Account Name %q / Resource Group %q) ID", name, accountName, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmFileShareRead(d, meta)
}

func resourceArmFileShareRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).fileSharesClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    accountName := id.Path["storageAccounts"]
    name := id.Path["shares"]

    resp, err := client.Get(ctx, resourceGroupName, accountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] File Share %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading File Share (Share Name %q / Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    d.Set("account_name", accountName)
    d.Set("etag", resp.Etag)
    d.Set("id", resp.ID)
    if fileShareProperties := resp.FileShareProperties; fileShareProperties != nil {
        d.Set("last_modified_time", (fileShareProperties.LastModifiedTime).String())
        d.Set("metadata", utils.FlattenKeyValuePairs(fileShareProperties.Metadata))
        d.Set("share_quota", fileShareProperties.ShareQuota)
    }
    d.Set("name", resp.Name)
    d.Set("share_name", name)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmFileShareUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).fileSharesClient
    ctx, cancel := timeouts.ForUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

      resourceGroupName := d.Get("resource_group").(string)
    accountName := d.Get("account_name").(string)
    metadata := d.Get("metadata").(map[string]interface{})
    name := d.Get("share_name").(string)
    shareQuota := d.Get("share_quota").(int)

    fileShare := storage.FileShare{
        FileShareProperties: &storage.FileShareProperties{
            Metadata: utils.ExpandKeyValuePairs(metadata),
            ShareQuota: utils.Int(shareQuota),
        },
    }


    if _, err := client.Update(ctx, resourceGroupName, accountName, name, fileShare); err != nil {
        return fmt.Errorf("Error updating File Share (Share Name %q / Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroupName, err)
    }

    return resourceArmFileShareRead(d, meta)
}

func resourceArmFileShareDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).fileSharesClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    accountName := id.Path["storageAccounts"]
    name := id.Path["shares"]

    if _, err := client.Delete(ctx, resourceGroupName, accountName, name); err != nil {
        return fmt.Errorf("Error deleting File Share (Share Name %q / Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroupName, err)
    }

    return nil
}
