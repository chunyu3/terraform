// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmStorageInsight() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmStorageInsightCreateUpdate,
        Read: resourceArmStorageInsightRead,
        Update: resourceArmStorageInsightCreateUpdate,
        Delete: resourceArmStorageInsightDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "storage_account": {
                Type: schema.TypeList,
                Required: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                        "key": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "workspace_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "containers": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "e_tag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "tables": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmStorageInsightCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).storageInsightsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)
    workspaceName := d.Get("workspace_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, workspaceName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Storage Insight %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_storage_insight", *existing.ID)
        }
    }

    containers := d.Get("containers").([]interface{})
    eTag := d.Get("e_tag").(string)
    storageAccount := d.Get("storage_account").([]interface{})
    tables := d.Get("tables").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    parameters := operationalinsights.StorageInsight{
        ETag: utils.String(eTag),
        StorageInsightProperties: &operationalinsights.StorageInsightProperties{
            Containers: utils.ExpandStringSlice(containers),
            StorageAccount: expandArmStorageInsightStorageAccount(storageAccount),
            Tables: utils.ExpandStringSlice(tables),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, workspaceName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Storage Insight %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, workspaceName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Storage Insight %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Storage Insight %q (Workspace Name %q / Resource Group %q) ID", name, workspaceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmStorageInsightRead(d, meta)
}

func resourceArmStorageInsightRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).storageInsightsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    workspaceName := id.Path["workspaces"]
    name := id.Path["storageInsightConfigs"]

    resp, err := client.Get(ctx, resourceGroup, workspaceName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Storage Insight %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Storage Insight %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)
    d.Set("workspace_name", workspaceName)

    return nil
}


func resourceArmStorageInsightDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).storageInsightsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.Path["resourcegroups"]
    workspaceName := id.Path["workspaces"]
    name := id.Path["storageInsightConfigs"]

    if _, err := client.Delete(ctx, resourceGroup, workspaceName, name); err != nil {
        return fmt.Errorf("Error deleting Storage Insight %q (Workspace Name %q / Resource Group %q): %+v", name, workspaceName, resourceGroup, err)
    }

    return nil
}

func expandArmStorageInsightStorageAccount(input []interface{}) *operationalinsights.StorageAccount {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    key := v["key"].(string)

    result := operationalinsights.StorageAccount{
        ID: utils.String(id),
        Key: utils.String(key),
    }
    return &result
}
