// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmProject() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmProjectCreate,
        Read: resourceArmProjectRead,
        Update: resourceArmProjectUpdate,
        Delete: resourceArmProjectDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "group_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "project_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "source_platform": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuredatabasemigrationservice.SQL),
                    string(azuredatabasemigrationservice.Unknown),
                }, false),
            },

            "target_platform": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(azuredatabasemigrationservice.SQLDB),
                    string(azuredatabasemigrationservice.Unknown),
                }, false),
            },

            "databases_info": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "source_database_name": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validate.NoEmptyStrings,
                        },
                    },
                },
            },

            "source_connection_info": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "password": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "user_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "target_connection_info": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "password": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "user_name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "creation_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmProjectCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).projectsClient
    ctx := meta.(*ArmClient).StopContext

    groupName := d.Get("group_name").(string)
    projectName := d.Get("project_name").(string)
    serviceName := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, groupName, serviceName, projectName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Project (Project Name %q / Service Name %q / Group Name %q): %+v", projectName, serviceName, groupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_project", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    databasesInfo := d.Get("databases_info").([]interface{})
    sourceConnectionInfo := d.Get("source_connection_info").([]interface{})
    sourcePlatform := d.Get("source_platform").(string)
    targetConnectionInfo := d.Get("target_connection_info").([]interface{})
    targetPlatform := d.Get("target_platform").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := azuredatabasemigrationservice.Project{
        Location: utils.String(location),
        ProjectProperties: &azuredatabasemigrationservice.ProjectProperties{
            DatabasesInfo: expandArmProjectDatabaseInfo(databasesInfo),
            SourceConnectionInfo: expandArmProjectConnectionInfo(sourceConnectionInfo),
            SourcePlatform: azuredatabasemigrationservice.ProjectSourcePlatform(sourcePlatform),
            TargetConnectionInfo: expandArmProjectConnectionInfo(targetConnectionInfo),
            TargetPlatform: azuredatabasemigrationservice.ProjectTargetPlatform(targetPlatform),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.CreateOrUpdate(ctx, groupName, serviceName, projectName, parameters); err != nil {
        return fmt.Errorf("Error creating Project (Project Name %q / Service Name %q / Group Name %q): %+v", projectName, serviceName, groupName, err)
    }


    resp, err := client.Get(ctx, groupName, serviceName, projectName)
    if err != nil {
        return fmt.Errorf("Error retrieving Project (Project Name %q / Service Name %q / Group Name %q): %+v", projectName, serviceName, groupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Project (Project Name %q / Service Name %q / Group Name %q) ID", projectName, serviceName, groupName)
    }
    d.SetId(*resp.ID)

    return resourceArmProjectRead(d, meta)
}

func resourceArmProjectRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).projectsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    groupName := id.ResourceGroup
    serviceName := id.Path["services"]
    projectName := id.Path["projects"]

    resp, err := client.Get(ctx, groupName, serviceName, projectName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Project %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Project (Project Name %q / Service Name %q / Group Name %q): %+v", projectName, serviceName, groupName, err)
    }


    d.Set("name", resp.Name)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if projectProperties := resp.ProjectProperties; projectProperties != nil {
        d.Set("creation_time", (projectProperties.CreationTime).String())
        if err := d.Set("databases_info", flattenArmProjectDatabaseInfo(projectProperties.DatabasesInfo)); err != nil {
            return fmt.Errorf("Error setting `databases_info`: %+v", err)
        }
        d.Set("provisioning_state", string(projectProperties.ProvisioningState))
        if err := d.Set("source_connection_info", flattenArmProjectConnectionInfo(projectProperties.SourceConnectionInfo)); err != nil {
            return fmt.Errorf("Error setting `source_connection_info`: %+v", err)
        }
        d.Set("source_platform", string(projectProperties.SourcePlatform))
        if err := d.Set("target_connection_info", flattenArmProjectConnectionInfo(projectProperties.TargetConnectionInfo)); err != nil {
            return fmt.Errorf("Error setting `target_connection_info`: %+v", err)
        }
        d.Set("target_platform", string(projectProperties.TargetPlatform))
    }
    d.Set("group_name", groupName)
    d.Set("project_name", projectName)
    d.Set("service_name", serviceName)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmProjectUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).projectsClient
    ctx := meta.(*ArmClient).StopContext

    databasesInfo := d.Get("databases_info").([]interface{})
    groupName := d.Get("group_name").(string)
    projectName := d.Get("project_name").(string)
    serviceName := d.Get("service_name").(string)
    sourceConnectionInfo := d.Get("source_connection_info").([]interface{})
    sourcePlatform := d.Get("source_platform").(string)
    targetConnectionInfo := d.Get("target_connection_info").([]interface{})
    targetPlatform := d.Get("target_platform").(string)
    t := d.Get("tags").(map[string]interface{})

    parameters := azuredatabasemigrationservice.Project{
        Location: utils.String(location),
        ProjectProperties: &azuredatabasemigrationservice.ProjectProperties{
            DatabasesInfo: expandArmProjectDatabaseInfo(databasesInfo),
            SourceConnectionInfo: expandArmProjectConnectionInfo(sourceConnectionInfo),
            SourcePlatform: azuredatabasemigrationservice.ProjectSourcePlatform(sourcePlatform),
            TargetConnectionInfo: expandArmProjectConnectionInfo(targetConnectionInfo),
            TargetPlatform: azuredatabasemigrationservice.ProjectTargetPlatform(targetPlatform),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, groupName, serviceName, projectName, parameters); err != nil {
        return fmt.Errorf("Error updating Project (Project Name %q / Service Name %q / Group Name %q): %+v", projectName, serviceName, groupName, err)
    }

    return resourceArmProjectRead(d, meta)
}

func resourceArmProjectDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).projectsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    groupName := id.ResourceGroup
    serviceName := id.Path["services"]
    projectName := id.Path["projects"]

    if _, err := client.Delete(ctx, groupName, serviceName, projectName); err != nil {
        return fmt.Errorf("Error deleting Project (Project Name %q / Service Name %q / Group Name %q): %+v", projectName, serviceName, groupName, err)
    }

    return nil
}

func expandArmProjectDatabaseInfo(input []interface{}) *[]azuredatabasemigrationservice.DatabaseInfo {
    results := make([]azuredatabasemigrationservice.DatabaseInfo, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        sourceDatabaseName := v["source_database_name"].(string)

        result := azuredatabasemigrationservice.DatabaseInfo{
            SourceDatabaseName: utils.String(sourceDatabaseName),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmProjectConnectionInfo(input []interface{}) *azuredatabasemigrationservice.ConnectionInfo {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    userName := v["user_name"].(string)
    password := v["password"].(string)

    result := azuredatabasemigrationservice.ConnectionInfo{
        Password: utils.String(password),
        UserName: utils.String(userName),
    }
    return &result
}


func flattenArmProjectDatabaseInfo(input *[]azuredatabasemigrationservice.DatabaseInfo) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        if sourceDatabaseName := item.SourceDatabaseName; sourceDatabaseName != nil {
            v["source_database_name"] = *sourceDatabaseName
        }

        results = append(results, v)
    }

    return results
}

func flattenArmProjectConnectionInfo(input *azuredatabasemigrationservice.ConnectionInfo) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if password := input.Password; password != nil {
        result["password"] = *password
    }
    if userName := input.UserName; userName != nil {
        result["user_name"] = *userName
    }

    return []interface{}{result}
}
