// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmLogger() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmLoggerCreate,
        Read: resourceArmLoggerRead,
        Update: resourceArmLoggerUpdate,
        Delete: resourceArmLoggerDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "credentials": {
                Type: schema.TypeMap,
                Required: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "logger_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.azureEventHub),
                    string(apimanagement.applicationInsights),
                }, false),
            },

            "loggerid": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "is_buffered": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "sampling": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "evaluation_interval": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateIso8601Duration(),
                        },
                        "initial_percentage": {
                            Type: schema.TypeFloat,
                            Optional: true,
                        },
                        "max_percentage": {
                            Type: schema.TypeFloat,
                            Optional: true,
                        },
                        "max_telemetry_items_per_second": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "min_percentage": {
                            Type: schema.TypeFloat,
                            Optional: true,
                        },
                        "moving_average_ratio": {
                            Type: schema.TypeFloat,
                            Optional: true,
                        },
                        "percentage": {
                            Type: schema.TypeFloat,
                            Optional: true,
                        },
                        "percentage_decrease_timeout": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateIso8601Duration(),
                        },
                        "percentage_increase_timeout": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateIso8601Duration(),
                        },
                        "sampling_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(apimanagement.fixed),
                                string(apimanagement.adaptive),
                            }, false),
                            Default: string(apimanagement.fixed),
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmLoggerCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).loggerClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    loggerid := d.Get("loggerid").(string)
    serviceName := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serviceName, loggerid)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Logger (Loggerid %q / Service Name %q / Resource Group %q): %+v", loggerid, serviceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_logger", *existing.ID)
        }
    }

    credentials := d.Get("credentials").(map[string]interface{})
    description := d.Get("description").(string)
    isBuffered := d.Get("is_buffered").(bool)
    loggerType := d.Get("logger_type").(string)
    sampling := d.Get("sampling").([]interface{})

    parameters := apimanagement.LoggerContract{
        LoggerContractProperties: &apimanagement.LoggerContractProperties{
            Credentials: utils.ExpandKeyValuePairs(credentials),
            Description: utils.String(description),
            IsBuffered: utils.Bool(isBuffered),
            LoggerType: apimanagement.LoggerType(loggerType),
            Sampling: expandArmLoggerLoggerSamplingContract(sampling),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, serviceName, loggerid, parameters); err != nil {
        return fmt.Errorf("Error creating Logger (Loggerid %q / Service Name %q / Resource Group %q): %+v", loggerid, serviceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serviceName, loggerid)
    if err != nil {
        return fmt.Errorf("Error retrieving Logger (Loggerid %q / Service Name %q / Resource Group %q): %+v", loggerid, serviceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Logger (Loggerid %q / Service Name %q / Resource Group %q) ID", loggerid, serviceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmLoggerRead(d, meta)
}

func resourceArmLoggerRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).loggerClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    loggerid := id.Path["loggers"]

    resp, err := client.Get(ctx, resourceGroup, serviceName, loggerid)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Logger %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Logger (Loggerid %q / Service Name %q / Resource Group %q): %+v", loggerid, serviceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if loggerContractProperties := resp.LoggerContractProperties; loggerContractProperties != nil {
        d.Set("credentials", utils.FlattenKeyValuePairs(loggerContractProperties.Credentials))
        d.Set("description", loggerContractProperties.Description)
        d.Set("is_buffered", loggerContractProperties.IsBuffered)
        d.Set("logger_type", string(loggerContractProperties.LoggerType))
        if err := d.Set("sampling", flattenArmLoggerLoggerSamplingContract(loggerContractProperties.Sampling)); err != nil {
            return fmt.Errorf("Error setting `sampling`: %+v", err)
        }
    }
    d.Set("loggerid", loggerid)
    d.Set("service_name", serviceName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmLoggerUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).loggerClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    credentials := d.Get("credentials").(map[string]interface{})
    description := d.Get("description").(string)
    isBuffered := d.Get("is_buffered").(bool)
    loggerType := d.Get("logger_type").(string)
    loggerid := d.Get("loggerid").(string)
    sampling := d.Get("sampling").([]interface{})
    serviceName := d.Get("service_name").(string)

    parameters := apimanagement.LoggerContract{
        LoggerContractProperties: &apimanagement.LoggerContractProperties{
            Credentials: utils.ExpandKeyValuePairs(credentials),
            Description: utils.String(description),
            IsBuffered: utils.Bool(isBuffered),
            LoggerType: apimanagement.LoggerType(loggerType),
            Sampling: expandArmLoggerLoggerSamplingContract(sampling),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, serviceName, loggerid, parameters); err != nil {
        return fmt.Errorf("Error updating Logger (Loggerid %q / Service Name %q / Resource Group %q): %+v", loggerid, serviceName, resourceGroup, err)
    }

    return resourceArmLoggerRead(d, meta)
}

func resourceArmLoggerDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).loggerClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    loggerid := id.Path["loggers"]

    if _, err := client.Delete(ctx, resourceGroup, serviceName, loggerid); err != nil {
        return fmt.Errorf("Error deleting Logger (Loggerid %q / Service Name %q / Resource Group %q): %+v", loggerid, serviceName, resourceGroup, err)
    }

    return nil
}

func expandArmLoggerLoggerSamplingContract(input []interface{}) *apimanagement.LoggerSamplingContract {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    samplingType := v["sampling_type"].(string)
    percentage := v["percentage"].(float64)
    maxTelemetryItemsPerSecond := v["max_telemetry_items_per_second"].(int)
    evaluationInterval := v["evaluation_interval"].(string)
    percentageDecreaseTimeout := v["percentage_decrease_timeout"].(string)
    percentageIncreaseTimeout := v["percentage_increase_timeout"].(string)
    minPercentage := v["min_percentage"].(float64)
    maxPercentage := v["max_percentage"].(float64)
    movingAverageRatio := v["moving_average_ratio"].(float64)
    initialPercentage := v["initial_percentage"].(float64)

    result := apimanagement.LoggerSamplingContract{
        LoggerSamplingProperties: &apimanagement.LoggerSamplingProperties{
            EvaluationInterval: utils.String(evaluationInterval),
            InitialPercentage: utils.Float(initialPercentage),
            MaxPercentage: utils.Float(maxPercentage),
            MaxTelemetryItemsPerSecond: utils.Int32(int32(maxTelemetryItemsPerSecond)),
            MinPercentage: utils.Float(minPercentage),
            MovingAverageRatio: utils.Float(movingAverageRatio),
            Percentage: utils.Float(percentage),
            PercentageDecreaseTimeout: utils.String(percentageDecreaseTimeout),
            PercentageIncreaseTimeout: utils.String(percentageIncreaseTimeout),
            SamplingType: apimanagement.SamplingType(samplingType),
        },
    }
    return &result
}


func flattenArmLoggerLoggerSamplingContract(input *apimanagement.LoggerSamplingContract) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if loggerSamplingProperties := input.LoggerSamplingProperties; loggerSamplingProperties != nil {
        if evaluationInterval := loggerSamplingProperties.EvaluationInterval; evaluationInterval != nil {
            result["evaluation_interval"] = *evaluationInterval
        }
        if initialPercentage := loggerSamplingProperties.InitialPercentage; initialPercentage != nil {
            result["initial_percentage"] = *initialPercentage
        }
        if maxPercentage := loggerSamplingProperties.MaxPercentage; maxPercentage != nil {
            result["max_percentage"] = *maxPercentage
        }
        if maxTelemetryItemsPerSecond := loggerSamplingProperties.MaxTelemetryItemsPerSecond; maxTelemetryItemsPerSecond != nil {
            result["max_telemetry_items_per_second"] = int(*maxTelemetryItemsPerSecond)
        }
        if minPercentage := loggerSamplingProperties.MinPercentage; minPercentage != nil {
            result["min_percentage"] = *minPercentage
        }
        if movingAverageRatio := loggerSamplingProperties.MovingAverageRatio; movingAverageRatio != nil {
            result["moving_average_ratio"] = *movingAverageRatio
        }
        if percentage := loggerSamplingProperties.Percentage; percentage != nil {
            result["percentage"] = *percentage
        }
        if percentageDecreaseTimeout := loggerSamplingProperties.PercentageDecreaseTimeout; percentageDecreaseTimeout != nil {
            result["percentage_decrease_timeout"] = *percentageDecreaseTimeout
        }
        if percentageIncreaseTimeout := loggerSamplingProperties.PercentageIncreaseTimeout; percentageIncreaseTimeout != nil {
            result["percentage_increase_timeout"] = *percentageIncreaseTimeout
        }
        result["sampling_type"] = string(loggerSamplingProperties.SamplingType)
    }

    return []interface{}{result}
}
