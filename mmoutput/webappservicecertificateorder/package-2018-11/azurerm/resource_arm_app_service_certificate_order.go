// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAppServiceCertificateOrder() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAppServiceCertificateOrderCreate,
        Read: resourceArmAppServiceCertificateOrderRead,
        Update: resourceArmAppServiceCertificateOrderUpdate,
        Delete: resourceArmAppServiceCertificateOrderDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "certificate_order_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "product_type": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(web.StandardDomainValidatedSsl),
                    string(web.StandardDomainValidatedWildCardSsl),
                }, false),
            },

            "auto_renew": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "certificates": {
                Type: schema.TypeMap,
                Optional: true,
                Elem: &schema.Schema{Type: schema.TypeString},
            },

            "csr": {
                Type: schema.TypeString,
                Optional: true,
            },

            "distinguished_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "key_size": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "kind": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "validity_in_years": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "app_service_certificate_not_renewable_reasons": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Schema{
                    Type: schema.TypeString,
                },
            },

            "domain_verification_token": {
                Type: schema.TypeString,
                Computed: true,
            },

            "expiration_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "intermediate": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "issuer": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "not_after": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "not_before": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "raw_data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "serial_number": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "signature_algorithm": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "subject": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "thumbprint": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "version": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "is_private_key_external": {
                Type: schema.TypeBool,
                Computed: true,
            },

            "last_certificate_issuance_time": {
                Type: schema.TypeString,
                Computed: true,
            },

            "next_auto_renewal_time_stamp": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "root": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "issuer": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "not_after": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "not_before": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "raw_data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "serial_number": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "signature_algorithm": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "subject": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "thumbprint": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "version": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "serial_number": {
                Type: schema.TypeString,
                Computed: true,
            },

            "signed_certificate": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "issuer": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "not_after": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "not_before": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validateRFC3339Date,
                        },
                        "raw_data": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "serial_number": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "signature_algorithm": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "subject": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "thumbprint": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "version": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "status": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmAppServiceCertificateOrderCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).appServiceCertificateOrdersClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    certificateOrderName := d.Get("certificate_order_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, certificateOrderName)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing App Service Certificate Order (Certificate Order Name %q / Resource Group %q): %+v", certificateOrderName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_app_service_certificate_order", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    autoRenew := d.Get("auto_renew").(bool)
    certificates := d.Get("certificates").(map[string]interface{})
    csr := d.Get("csr").(string)
    distinguishedName := d.Get("distinguished_name").(string)
    keySize := d.Get("key_size").(int)
    kind := d.Get("kind").(string)
    productType := d.Get("product_type").(string)
    validityInYears := d.Get("validity_in_years").(int)
    t := d.Get("tags").(map[string]interface{})

    certificateDistinguishedName := web.AppServiceCertificateOrder{
        Kind: utils.String(kind),
        Location: utils.String(location),
        AppServiceCertificateOrder_properties: &web.AppServiceCertificateOrder_properties{
            AutoRenew: utils.Bool(autoRenew),
            Certificates: utils.ExpandKeyValuePairs(certificates),
            Csr: utils.String(csr),
            DistinguishedName: utils.String(distinguishedName),
            KeySize: utils.Int32(int32(keySize)),
            ProductType: web.CertificateProductType(productType),
            ValidityInYears: utils.Int32(int32(validityInYears)),
        },
        Tags: tags.Expand(t),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, certificateOrderName, certificateDistinguishedName)
    if err != nil {
        return fmt.Errorf("Error creating App Service Certificate Order (Certificate Order Name %q / Resource Group %q): %+v", certificateOrderName, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of App Service Certificate Order (Certificate Order Name %q / Resource Group %q): %+v", certificateOrderName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, certificateOrderName)
    if err != nil {
        return fmt.Errorf("Error retrieving App Service Certificate Order (Certificate Order Name %q / Resource Group %q): %+v", certificateOrderName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read App Service Certificate Order (Certificate Order Name %q / Resource Group %q) ID", certificateOrderName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmAppServiceCertificateOrderRead(d, meta)
}

func resourceArmAppServiceCertificateOrderRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).appServiceCertificateOrdersClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    certificateOrderName := id.Path["certificateOrders"]

    resp, err := client.Get(ctx, resourceGroup, certificateOrderName)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] App Service Certificate Order %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading App Service Certificate Order (Certificate Order Name %q / Resource Group %q): %+v", certificateOrderName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if appServiceCertificateOrderProperties := resp.AppServiceCertificateOrder_properties; appServiceCertificateOrderProperties != nil {
        if err := d.Set("app_service_certificate_not_renewable_reasons", flattenArmAppServiceCertificateOrder(string(appServiceCertificateOrderProperties.AppServiceCertificateNotRenewableReasons))); err != nil {
            return fmt.Errorf("Error setting `app_service_certificate_not_renewable_reasons`: %+v", err)
        }
        d.Set("auto_renew", appServiceCertificateOrderProperties.AutoRenew)
        d.Set("certificates", utils.FlattenKeyValuePairs(appServiceCertificateOrderProperties.Certificates))
        d.Set("csr", appServiceCertificateOrderProperties.Csr)
        d.Set("distinguished_name", appServiceCertificateOrderProperties.DistinguishedName)
        d.Set("domain_verification_token", appServiceCertificateOrderProperties.DomainVerificationToken)
        d.Set("expiration_time", (appServiceCertificateOrderProperties.ExpirationTime).String())
        if err := d.Set("intermediate", flattenArmAppServiceCertificateOrderCertificateDetails(appServiceCertificateOrderProperties.Intermediate)); err != nil {
            return fmt.Errorf("Error setting `intermediate`: %+v", err)
        }
        d.Set("is_private_key_external", appServiceCertificateOrderProperties.IsPrivateKeyExternal)
        d.Set("key_size", int(*appServiceCertificateOrderProperties.KeySize))
        d.Set("last_certificate_issuance_time", (appServiceCertificateOrderProperties.LastCertificateIssuanceTime).String())
        d.Set("next_auto_renewal_time_stamp", (appServiceCertificateOrderProperties.NextAutoRenewalTimeStamp).String())
        d.Set("product_type", string(appServiceCertificateOrderProperties.ProductType))
        d.Set("provisioning_state", string(appServiceCertificateOrderProperties.ProvisioningState))
        if err := d.Set("root", flattenArmAppServiceCertificateOrderCertificateDetails(appServiceCertificateOrderProperties.Root)); err != nil {
            return fmt.Errorf("Error setting `root`: %+v", err)
        }
        d.Set("serial_number", appServiceCertificateOrderProperties.SerialNumber)
        if err := d.Set("signed_certificate", flattenArmAppServiceCertificateOrderCertificateDetails(appServiceCertificateOrderProperties.SignedCertificate)); err != nil {
            return fmt.Errorf("Error setting `signed_certificate`: %+v", err)
        }
        d.Set("status", string(appServiceCertificateOrderProperties.Status))
        d.Set("validity_in_years", int(*appServiceCertificateOrderProperties.ValidityInYears))
    }
    d.Set("certificate_order_name", certificateOrderName)
    d.Set("kind", resp.Kind)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmAppServiceCertificateOrderUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).appServiceCertificateOrdersClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    autoRenew := d.Get("auto_renew").(bool)
    certificateOrderName := d.Get("certificate_order_name").(string)
    certificates := d.Get("certificates").(map[string]interface{})
    csr := d.Get("csr").(string)
    distinguishedName := d.Get("distinguished_name").(string)
    keySize := d.Get("key_size").(int)
    kind := d.Get("kind").(string)
    productType := d.Get("product_type").(string)
    validityInYears := d.Get("validity_in_years").(int)
    t := d.Get("tags").(map[string]interface{})

    certificateDistinguishedName := web.AppServiceCertificateOrder{
        Kind: utils.String(kind),
        Location: utils.String(location),
        AppServiceCertificateOrder_properties: &web.AppServiceCertificateOrder_properties{
            AutoRenew: utils.Bool(autoRenew),
            Certificates: utils.ExpandKeyValuePairs(certificates),
            Csr: utils.String(csr),
            DistinguishedName: utils.String(distinguishedName),
            KeySize: utils.Int32(int32(keySize)),
            ProductType: web.CertificateProductType(productType),
            ValidityInYears: utils.Int32(int32(validityInYears)),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Update(ctx, resourceGroup, certificateOrderName, certificateDistinguishedName); err != nil {
        return fmt.Errorf("Error updating App Service Certificate Order (Certificate Order Name %q / Resource Group %q): %+v", certificateOrderName, resourceGroup, err)
    }

    return resourceArmAppServiceCertificateOrderRead(d, meta)
}

func resourceArmAppServiceCertificateOrderDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).appServiceCertificateOrdersClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    certificateOrderName := id.Path["certificateOrders"]

    if _, err := client.Delete(ctx, resourceGroup, certificateOrderName); err != nil {
        return fmt.Errorf("Error deleting App Service Certificate Order (Certificate Order Name %q / Resource Group %q): %+v", certificateOrderName, resourceGroup, err)
    }

    return nil
}


func flattenArmAppServiceCertificateOrder(input *[]web.) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        result := string(item)
        results = append(results, result)
    }

    return results
}

func flattenArmAppServiceCertificateOrderCertificateDetails(input *web.CertificateDetails) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})


    return []interface{}{result}
}
