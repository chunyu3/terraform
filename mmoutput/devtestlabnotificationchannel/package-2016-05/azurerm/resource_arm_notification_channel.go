// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmNotificationChannel() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmNotificationChannelCreate,
        Read: resourceArmNotificationChannelRead,
        Update: resourceArmNotificationChannelUpdate,
        Delete: resourceArmNotificationChannelDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "lab_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "event_name": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(devtestlab.AutoShutdown),
                    string(devtestlab.Cost),
                }, false),
                Default: string(devtestlab.AutoShutdown),
            },

            "events": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "event_name": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(devtestlab.AutoShutdown),
                                string(devtestlab.Cost),
                            }, false),
                            Default: string(devtestlab.AutoShutdown),
                        },
                    },
                },
            },

            "json_payload": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "location": azure.SchemaLocation(),

            "tags": tags.Schema(),

            "unique_identifier": {
                Type: schema.TypeString,
                Optional: true,
            },

            "web_hook_url": {
                Type: schema.TypeString,
                Optional: true,
            },

            "created_date": {
                Type: schema.TypeString,
                Computed: true,
            },

            "id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "provisioning_state": {
                Type: schema.TypeString,
                Computed: true,
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmNotificationChannelCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).notificationChannelsClient
    ctx, cancel := timeouts.ForCreate(meta.(*ArmClient).StopContext, d)
    defer cancel()

    resourceGroupName := d.Get("resource_group").(string)
    name := d.Get("lab_name").(string)
    name := d.Get("name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroupName, name, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Notification Channel (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_notification_channel", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    description := d.Get("description").(string)
    eventName := d.Get("event_name").(string)
    events := d.Get("events").([]interface{})
    jSONPayload := d.Get("json_payload").(string)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    webHookURL := d.Get("web_hook_url").(string)
    tags := d.Get("tags").(map[string]interface{})

    notificationChannel := devtestlab.NotificationChannelFragment{
        EventName: devtestlab.NotificationChannelEventType(eventName),
        JSONPayload: utils.String(jSONPayload),
        Location: utils.String(location),
        NotificationChannelPropertiesFragment: &devtestlab.NotificationChannelPropertiesFragment{
            Description: utils.String(description),
            Events: expandArmNotificationChannelEventFragment(events),
            UniqueIdentifier: utils.String(uniqueIdentifier),
            WebHookURL: utils.String(webHookURL),
        },
        Tags: tags.Expand(tags),
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroupName, name, name, notificationChannel); err != nil {
        return fmt.Errorf("Error creating Notification Channel (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
    }


    resp, err := client.Get(ctx, resourceGroupName, name, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Notification Channel (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Notification Channel (Name %q / Lab Name %q / Resource Group %q) ID", name, name, resourceGroupName)
    }
    d.SetId(*resp.ID)

    return resourceArmNotificationChannelRead(d, meta)
}

func resourceArmNotificationChannelRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).notificationChannelsClient
    ctx, cancel := timeouts.ForRead(meta.(*ArmClient).StopContext, d)
    defer cancel()

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["labs"]
    name := id.Path["notificationchannels"]

    resp, err := client.Get(ctx, resourceGroupName, name, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Notification Channel %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Notification Channel (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
    }


    d.Set("resource_group", resourceGroupName)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    if notificationChannelPropertiesFragment := resp.NotificationChannelPropertiesFragment; notificationChannelPropertiesFragment != nil {
        d.Set("created_date", (notificationChannelPropertiesFragment.CreatedDate).String())
        d.Set("description", notificationChannelPropertiesFragment.Description)
        if err := d.Set("events", flattenArmNotificationChannelEventFragment(notificationChannelPropertiesFragment.Events)); err != nil {
            return fmt.Errorf("Error setting `events`: %+v", err)
        }
        d.Set("provisioning_state", notificationChannelPropertiesFragment.ProvisioningState)
        d.Set("unique_identifier", notificationChannelPropertiesFragment.UniqueIdentifier)
        d.Set("web_hook_url", notificationChannelPropertiesFragment.WebHookURL)
    }
    d.Set("id", resp.ID)
    d.Set("lab_name", name)
    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("type", resp.Type)

    return tags.FlattenAndSet(d, resp.Tags)
}

func resourceArmNotificationChannelUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).notificationChannelsClient
    ctx, cancel := timeouts.ForUpdate(meta.(*ArmClient).StopContext, d)
    defer cancel()

      resourceGroupName := d.Get("resource_group").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    description := d.Get("description").(string)
    eventName := d.Get("event_name").(string)
    events := d.Get("events").([]interface{})
    jSONPayload := d.Get("json_payload").(string)
    name := d.Get("lab_name").(string)
    name := d.Get("name").(string)
    uniqueIdentifier := d.Get("unique_identifier").(string)
    webHookURL := d.Get("web_hook_url").(string)
    tags := d.Get("tags").(map[string]interface{})

    notificationChannel := devtestlab.NotificationChannelFragment{
        EventName: devtestlab.NotificationChannelEventType(eventName),
        JSONPayload: utils.String(jSONPayload),
        Location: utils.String(location),
        NotificationChannelPropertiesFragment: &devtestlab.NotificationChannelPropertiesFragment{
            Description: utils.String(description),
            Events: expandArmNotificationChannelEventFragment(events),
            UniqueIdentifier: utils.String(uniqueIdentifier),
            WebHookURL: utils.String(webHookURL),
        },
        Tags: tags.Expand(tags),
    }


    if _, err := client.Update(ctx, resourceGroupName, name, name, notificationChannel); err != nil {
        return fmt.Errorf("Error updating Notification Channel (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
    }

    return resourceArmNotificationChannelRead(d, meta)
}

func resourceArmNotificationChannelDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).notificationChannelsClient
    ctx, cancel := timeouts.ForDelete(meta.(*ArmClient).StopContext, d)
    defer cancel()


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroupName := id.ResourceGroup
    name := id.Path["labs"]
    name := id.Path["notificationchannels"]

    if _, err := client.Delete(ctx, resourceGroupName, name, name); err != nil {
        return fmt.Errorf("Error deleting Notification Channel (Name %q / Lab Name %q / Resource Group %q): %+v", name, name, resourceGroupName, err)
    }

    return nil
}

func expandArmNotificationChannelEventFragment(input []interface{}) *[]devtestlab.EventFragment {
    results := make([]devtestlab.EventFragment, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        eventName := v["event_name"].(string)

        result := devtestlab.EventFragment{
            EventName: devtestlab.NotificationChannelEventType(eventName),
        }

        results = append(results, result)
    }
    return &results
}


func flattenArmNotificationChannelEventFragment(input *[]devtestlab.EventFragment) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range *input {
        v := make(map[string]interface{})

        v["event_name"] = string(item.EventName)

        results = append(results, v)
    }

    return results
}
