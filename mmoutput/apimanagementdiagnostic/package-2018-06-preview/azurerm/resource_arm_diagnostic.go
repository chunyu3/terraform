// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmDiagnostic() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmDiagnosticCreate,
        Read: resourceArmDiagnosticRead,
        Update: resourceArmDiagnosticUpdate,
        Delete: resourceArmDiagnosticDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "diagnostic_id": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "logger_id": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "service_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "always_log": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(apimanagement.allErrors),
                }, false),
                Default: string(apimanagement.allErrors),
            },

            "backend": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "request": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "body": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "bytes": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "headers": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                },
                            },
                        },
                        "response": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "body": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "bytes": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "headers": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "enable_http_correlation_headers": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "frontend": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "request": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "body": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "bytes": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "headers": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                },
                            },
                        },
                        "response": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "body": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "bytes": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "headers": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "sampling": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "percentage": {
                            Type: schema.TypeFloat,
                            Optional: true,
                        },
                        "sampling_type": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(apimanagement.fixed),
                            }, false),
                            Default: string(apimanagement.fixed),
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmDiagnosticCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).diagnosticClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    diagnosticID := d.Get("diagnostic_id").(string)
    serviceName := d.Get("service_name").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, serviceName, diagnosticID)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Diagnostic (Diagnostic %q / Service Name %q / Resource Group %q): %+v", diagnosticID, serviceName, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_diagnostic", *existing.ID)
        }
    }

    alwaysLog := d.Get("always_log").(string)
    backend := d.Get("backend").([]interface{})
    enableHttpCorrelationHeaders := d.Get("enable_http_correlation_headers").(bool)
    frontend := d.Get("frontend").([]interface{})
    loggerId := d.Get("logger_id").(string)
    sampling := d.Get("sampling").([]interface{})

    parameters := apimanagement.DiagnosticContract{
        DiagnosticContractProperties: &apimanagement.DiagnosticContractProperties{
            AlwaysLog: apimanagement.AlwaysLog(alwaysLog),
            Backend: expandArmDiagnosticPipelineDiagnosticSettings(backend),
            EnableHttpCorrelationHeaders: utils.Bool(enableHttpCorrelationHeaders),
            Frontend: expandArmDiagnosticPipelineDiagnosticSettings(frontend),
            LoggerID: utils.String(loggerId),
            Sampling: expandArmDiagnosticSamplingSettings(sampling),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, serviceName, diagnosticID, parameters); err != nil {
        return fmt.Errorf("Error creating Diagnostic (Diagnostic %q / Service Name %q / Resource Group %q): %+v", diagnosticID, serviceName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, serviceName, diagnosticID)
    if err != nil {
        return fmt.Errorf("Error retrieving Diagnostic (Diagnostic %q / Service Name %q / Resource Group %q): %+v", diagnosticID, serviceName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Diagnostic (Diagnostic %q / Service Name %q / Resource Group %q) ID", diagnosticID, serviceName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmDiagnosticRead(d, meta)
}

func resourceArmDiagnosticRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).diagnosticClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    diagnosticID := id.Path["diagnostics"]

    resp, err := client.Get(ctx, resourceGroup, serviceName, diagnosticID)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Diagnostic %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Diagnostic (Diagnostic %q / Service Name %q / Resource Group %q): %+v", diagnosticID, serviceName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if diagnosticContractProperties := resp.DiagnosticContractProperties; diagnosticContractProperties != nil {
        d.Set("always_log", string(diagnosticContractProperties.AlwaysLog))
        if err := d.Set("backend", flattenArmDiagnosticPipelineDiagnosticSettings(diagnosticContractProperties.Backend)); err != nil {
            return fmt.Errorf("Error setting `backend`: %+v", err)
        }
        d.Set("enable_http_correlation_headers", diagnosticContractProperties.EnableHttpCorrelationHeaders)
        if err := d.Set("frontend", flattenArmDiagnosticPipelineDiagnosticSettings(diagnosticContractProperties.Frontend)); err != nil {
            return fmt.Errorf("Error setting `frontend`: %+v", err)
        }
        d.Set("logger_id", diagnosticContractProperties.LoggerID)
        if err := d.Set("sampling", flattenArmDiagnosticSamplingSettings(diagnosticContractProperties.Sampling)); err != nil {
            return fmt.Errorf("Error setting `sampling`: %+v", err)
        }
    }
    d.Set("diagnostic_id", diagnosticID)
    d.Set("service_name", serviceName)
    d.Set("type", resp.Type)

    return nil
}

func resourceArmDiagnosticUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).diagnosticClient
    ctx := meta.(*ArmClient).StopContext

    resourceGroup := d.Get("resource_group").(string)
    alwaysLog := d.Get("always_log").(string)
    backend := d.Get("backend").([]interface{})
    diagnosticID := d.Get("diagnostic_id").(string)
    enableHttpCorrelationHeaders := d.Get("enable_http_correlation_headers").(bool)
    frontend := d.Get("frontend").([]interface{})
    loggerId := d.Get("logger_id").(string)
    sampling := d.Get("sampling").([]interface{})
    serviceName := d.Get("service_name").(string)

    parameters := apimanagement.DiagnosticContract{
        DiagnosticContractProperties: &apimanagement.DiagnosticContractProperties{
            AlwaysLog: apimanagement.AlwaysLog(alwaysLog),
            Backend: expandArmDiagnosticPipelineDiagnosticSettings(backend),
            EnableHttpCorrelationHeaders: utils.Bool(enableHttpCorrelationHeaders),
            Frontend: expandArmDiagnosticPipelineDiagnosticSettings(frontend),
            LoggerID: utils.String(loggerId),
            Sampling: expandArmDiagnosticSamplingSettings(sampling),
        },
    }


    if _, err := client.Update(ctx, resourceGroup, serviceName, diagnosticID, parameters); err != nil {
        return fmt.Errorf("Error updating Diagnostic (Diagnostic %q / Service Name %q / Resource Group %q): %+v", diagnosticID, serviceName, resourceGroup, err)
    }

    return resourceArmDiagnosticRead(d, meta)
}

func resourceArmDiagnosticDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).diagnosticClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    serviceName := id.Path["service"]
    diagnosticID := id.Path["diagnostics"]

    if _, err := client.Delete(ctx, resourceGroup, serviceName, diagnosticID); err != nil {
        return fmt.Errorf("Error deleting Diagnostic (Diagnostic %q / Service Name %q / Resource Group %q): %+v", diagnosticID, serviceName, resourceGroup, err)
    }

    return nil
}

func expandArmDiagnosticPipelineDiagnosticSettings(input []interface{}) *apimanagement.PipelineDiagnosticSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    request := v["request"].([]interface{})
    response := v["response"].([]interface{})

    result := apimanagement.PipelineDiagnosticSettings{
        Request: expandArmDiagnosticHttpMessageDiagnostic(request),
        Response: expandArmDiagnosticHttpMessageDiagnostic(response),
    }
    return &result
}

func expandArmDiagnosticSamplingSettings(input []interface{}) *apimanagement.SamplingSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    samplingType := v["sampling_type"].(string)
    percentage := v["percentage"].(float64)

    result := apimanagement.SamplingSettings{
        Percentage: utils.Float(percentage),
        SamplingType: apimanagement.SamplingType(samplingType),
    }
    return &result
}

func expandArmDiagnosticHttpMessageDiagnostic(input []interface{}) *apimanagement.HttpMessageDiagnostic {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    headers := v["headers"].([]interface{})
    body := v["body"].([]interface{})

    result := apimanagement.HttpMessageDiagnostic{
        Body: expandArmDiagnosticBodyDiagnosticSettings(body),
        Headers: utils.ExpandStringSlice(headers),
    }
    return &result
}

func expandArmDiagnosticBodyDiagnosticSettings(input []interface{}) *apimanagement.BodyDiagnosticSettings {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    bytes := v["bytes"].(int)

    result := apimanagement.BodyDiagnosticSettings{
        Bytes: utils.Int32(int32(bytes)),
    }
    return &result
}


func flattenArmDiagnosticPipelineDiagnosticSettings(input *apimanagement.PipelineDiagnosticSettings) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["request"] = flattenArmDiagnosticHttpMessageDiagnostic(input.Request)
    result["response"] = flattenArmDiagnosticHttpMessageDiagnostic(input.Response)

    return []interface{}{result}
}

func flattenArmDiagnosticSamplingSettings(input *apimanagement.SamplingSettings) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if percentage := input.Percentage; percentage != nil {
        result["percentage"] = *percentage
    }
    result["sampling_type"] = string(input.SamplingType)

    return []interface{}{result}
}

func flattenArmDiagnosticHttpMessageDiagnostic(input *apimanagement.HttpMessageDiagnostic) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    result["body"] = flattenArmDiagnosticBodyDiagnosticSettings(input.Body)
    result["headers"] = utils.FlattenStringSlice(input.Headers)

    return []interface{}{result}
}

func flattenArmDiagnosticBodyDiagnosticSettings(input *apimanagement.BodyDiagnosticSettings) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if bytes := input.Bytes; bytes != nil {
        result["bytes"] = int(*bytes)
    }

    return []interface{}{result}
}
