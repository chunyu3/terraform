// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmApplication() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmApplicationCreateUpdate,
        Read: resourceArmApplicationRead,
        Update: resourceArmApplicationCreateUpdate,
        Delete: resourceArmApplicationDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "debug_params": {
                Type: schema.TypeString,
                Optional: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "diagnostics": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "default_sink_refs": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Schema{
                                Type: schema.TypeString,
                            },
                        },
                        "enabled": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "sinks": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "description": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "services": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "code_packages": {
                            Type: schema.TypeList,
                            Required: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "image": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Required: true,
                                        ValidateFunc: validate.NoEmptyStrings,
                                    },
                                    "resources": {
                                        Type: schema.TypeList,
                                        Required: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "requests": {
                                                    Type: schema.TypeList,
                                                    Required: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                        Schema: map[string]*schema.Schema{
                                                            "cpu": {
                                                                Type: schema.TypeFloat,
                                                                Required: true,
                                                            },
                                                            "memory_in_gb": {
                                                                Type: schema.TypeFloat,
                                                                Required: true,
                                                            },
                                                        },
                                                    },
                                                },
                                                "limits": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                        Schema: map[string]*schema.Schema{
                                                            "cpu": {
                                                                Type: schema.TypeFloat,
                                                                Optional: true,
                                                            },
                                                            "memory_in_gb": {
                                                                Type: schema.TypeFloat,
                                                                Optional: true,
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                    "commands": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                    "diagnostics": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "enabled": {
                                                    Type: schema.TypeBool,
                                                    Optional: true,
                                                },
                                                "sink_refs": {
                                                    Type: schema.TypeList,
                                                    Optional: true,
                                                    Elem: &schema.Schema{
                                                        Type: schema.TypeString,
                                                    },
                                                },
                                            },
                                        },
                                    },
                                    "endpoints": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "name": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                                "port": {
                                                    Type: schema.TypeInt,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "entrypoint": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "environment_variables": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "name": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "value": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "image_registry_credential": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "server": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                                "username": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                                "password": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "labels": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "name": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                                "value": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                            },
                                        },
                                    },
                                    "settings": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "name": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                                "value": {
                                                    Type: schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "volume_refs": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Resource{
                                            Schema: map[string]*schema.Schema{
                                                "destination_path": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                                "name": {
                                                    Type: schema.TypeString,
                                                    Required: true,
                                                    ValidateFunc: validate.NoEmptyStrings,
                                                },
                                                "read_only": {
                                                    Type: schema.TypeBool,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "os_type": {
                            Type: schema.TypeString,
                            Required: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(servicefabricmeshrestapis.Linux),
                                string(servicefabricmeshrestapis.Windows),
                            }, false),
                        },
                        "description": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "diagnostics": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "enabled": {
                                        Type: schema.TypeBool,
                                        Optional: true,
                                    },
                                    "sink_refs": {
                                        Type: schema.TypeList,
                                        Optional: true,
                                        Elem: &schema.Schema{
                                            Type: schema.TypeString,
                                        },
                                    },
                                },
                            },
                        },
                        "health_state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(servicefabricmeshrestapis.Invalid),
                                string(servicefabricmeshrestapis.Ok),
                                string(servicefabricmeshrestapis.Warning),
                                string(servicefabricmeshrestapis.Error),
                                string(servicefabricmeshrestapis.Unknown),
                            }, false),
                            Default: string(servicefabricmeshrestapis.Invalid),
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "network_refs": {
                            Type: schema.TypeList,
                            Optional: true,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "replica_count": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tags.Schema(),
        },
    }
}

func resourceArmApplicationCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if features.ShouldResourcesBeImported() && d.IsNewResource() {
        existing, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(existing.Response) {
                return fmt.Errorf("Error checking for present of existing Application %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if existing.ID != nil && *existing.ID != "" {
            return tf.ImportAsExistsError("azurerm_application", *existing.ID)
        }
    }

    location := azure.NormalizeLocation(d.Get("location").(string))
    debugParams := d.Get("debug_params").(string)
    description := d.Get("description").(string)
    diagnostics := d.Get("diagnostics").([]interface{})
    services := d.Get("services").([]interface{})
    t := d.Get("tags").(map[string]interface{})

    applicationResourceDescription := servicefabricmeshrestapis.ApplicationResourceDescription{
        Location: utils.String(location),
        ApplicationProperties: &servicefabricmeshrestapis.ApplicationResourceProperties{
            DebugParams: utils.String(debugParams),
            Description: utils.String(description),
            Diagnostics: expandArmApplicationDiagnosticsDescription(diagnostics),
            Services: expandArmApplicationServiceResourceDescription(services),
        },
        Tags: tags.Expand(t),
    }


    if _, err := client.Create(ctx, resourceGroup, name, applicationResourceDescription); err != nil {
        return fmt.Errorf("Error creating Application %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Application %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Application %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmApplicationRead(d, meta)
}

func resourceArmApplicationRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationClient
    ctx := meta.(*ArmClient).StopContext

    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["applications"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Application %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Application %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    d.Set("type", resp.Type)

    return nil
}


func resourceArmApplicationDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).applicationClient
    ctx := meta.(*ArmClient).StopContext


    id, err := azure.ParseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["applications"]

    if _, err := client.Delete(ctx, resourceGroup, name); err != nil {
        return fmt.Errorf("Error deleting Application %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    return nil
}

func expandArmApplicationDiagnosticsDescription(input []interface{}) *servicefabricmeshrestapis.DiagnosticsDescription {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    sinks := v["sinks"].([]interface{})
    enabled := v["enabled"].(bool)
    defaultSinkRefs := v["default_sink_refs"].([]interface{})

    result := servicefabricmeshrestapis.DiagnosticsDescription{
        DefaultSinkRefs: utils.ExpandStringSlice(defaultSinkRefs),
        Enabled: utils.Bool(enabled),
        Sinks: expandArmApplicationDiagnosticsSinkProperties(sinks),
    }
    return &result
}

func expandArmApplicationServiceResourceDescription(input []interface{}) *[]servicefabricmeshrestapis.ServiceResourceDescription {
    results := make([]servicefabricmeshrestapis.ServiceResourceDescription, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        osType := v["os_type"].(string)
        codePackages := v["code_packages"].([]interface{})
        networkRefs := v["network_refs"].([]interface{})
        diagnostics := v["diagnostics"].([]interface{})
        description := v["description"].(string)
        replicaCount := v["replica_count"].(int)
        healthState := v["health_state"].(string)

        result := servicefabricmeshrestapis.ServiceResourceDescription{
            Name: utils.String(name),
            ApplicationProperties: &servicefabricmeshrestapis.ServiceResourceProperties{
                CodePackages: expandArmApplicationContainerCodePackageProperties(codePackages),
                Description: utils.String(description),
                Diagnostics: expandArmApplicationDiagnosticsRef(diagnostics),
                HealthState: servicefabricmeshrestapis.HealthState(healthState),
                NetworkRefs: expandArmApplicationNetworkRef(networkRefs),
                OsType: servicefabricmeshrestapis.OperatingSystemTypes(osType),
                ReplicaCount: utils.Int(replicaCount),
            },
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationDiagnosticsSinkProperties(input []interface{}) *[]servicefabricmeshrestapis.DiagnosticsSinkProperties {
    results := make([]servicefabricmeshrestapis.DiagnosticsSinkProperties, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        description := v["description"].(string)

        result := servicefabricmeshrestapis.DiagnosticsSinkProperties{
            Description: utils.String(description),
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationContainerCodePackageProperties(input []interface{}) *[]servicefabricmeshrestapis.ContainerCodePackageProperties {
    results := make([]servicefabricmeshrestapis.ContainerCodePackageProperties, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        image := v["image"].(string)
        imageRegistryCredential := v["image_registry_credential"].([]interface{})
        entrypoint := v["entrypoint"].(string)
        commands := v["commands"].([]interface{})
        environmentVariables := v["environment_variables"].([]interface{})
        settings := v["settings"].([]interface{})
        labels := v["labels"].([]interface{})
        endpoints := v["endpoints"].([]interface{})
        resources := v["resources"].([]interface{})
        volumeRefs := v["volume_refs"].([]interface{})
        diagnostics := v["diagnostics"].([]interface{})

        result := servicefabricmeshrestapis.ContainerCodePackageProperties{
            Commands: utils.ExpandStringSlice(commands),
            Diagnostics: expandArmApplicationDiagnosticsRef(diagnostics),
            Endpoints: expandArmApplicationEndpointProperties(endpoints),
            Entrypoint: utils.String(entrypoint),
            EnvironmentVariables: expandArmApplicationEnvironmentVariable(environmentVariables),
            Image: utils.String(image),
            ImageRegistryCredential: expandArmApplicationImageRegistryCredential(imageRegistryCredential),
            Labels: expandArmApplicationContainerLabel(labels),
            Name: utils.String(name),
            Resources: expandArmApplicationResourceRequirements(resources),
            Settings: expandArmApplicationSetting(settings),
            VolumeRefs: expandArmApplicationContainerVolume(volumeRefs),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationDiagnosticsRef(input []interface{}) *servicefabricmeshrestapis.DiagnosticsRef {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    enabled := v["enabled"].(bool)
    sinkRefs := v["sink_refs"].([]interface{})

    result := servicefabricmeshrestapis.DiagnosticsRef{
        Enabled: utils.Bool(enabled),
        SinkRefs: utils.ExpandStringSlice(sinkRefs),
    }
    return &result
}

func expandArmApplicationNetworkRef(input []interface{}) *[]servicefabricmeshrestapis.NetworkRef {
    results := make([]servicefabricmeshrestapis.NetworkRef, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)

        result := servicefabricmeshrestapis.NetworkRef{
            Name: utils.String(name),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationEndpointProperties(input []interface{}) *[]servicefabricmeshrestapis.EndpointProperties {
    results := make([]servicefabricmeshrestapis.EndpointProperties, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        port := v["port"].(int)

        result := servicefabricmeshrestapis.EndpointProperties{
            Name: utils.String(name),
            Port: utils.Int(port),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationEnvironmentVariable(input []interface{}) *[]servicefabricmeshrestapis.EnvironmentVariable {
    results := make([]servicefabricmeshrestapis.EnvironmentVariable, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        value := v["value"].(string)

        result := servicefabricmeshrestapis.EnvironmentVariable{
            Name: utils.String(name),
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationImageRegistryCredential(input []interface{}) *servicefabricmeshrestapis.ImageRegistryCredential {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    server := v["server"].(string)
    username := v["username"].(string)
    password := v["password"].(string)

    result := servicefabricmeshrestapis.ImageRegistryCredential{
        Password: utils.String(password),
        Server: utils.String(server),
        Username: utils.String(username),
    }
    return &result
}

func expandArmApplicationContainerLabel(input []interface{}) *[]servicefabricmeshrestapis.ContainerLabel {
    results := make([]servicefabricmeshrestapis.ContainerLabel, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        value := v["value"].(string)

        result := servicefabricmeshrestapis.ContainerLabel{
            Name: utils.String(name),
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationResourceRequirements(input []interface{}) *servicefabricmeshrestapis.ResourceRequirements {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    requests := v["requests"].([]interface{})
    limits := v["limits"].([]interface{})

    result := servicefabricmeshrestapis.ResourceRequirements{
        Limits: expandArmApplicationResourceLimits(limits),
        Requests: expandArmApplicationResourceRequests(requests),
    }
    return &result
}

func expandArmApplicationSetting(input []interface{}) *[]servicefabricmeshrestapis.Setting {
    results := make([]servicefabricmeshrestapis.Setting, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        value := v["value"].(string)

        result := servicefabricmeshrestapis.Setting{
            Name: utils.String(name),
            Value: utils.String(value),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationContainerVolume(input []interface{}) *[]servicefabricmeshrestapis.ContainerVolume {
    results := make([]servicefabricmeshrestapis.ContainerVolume, 0)
    for _, item := range input {
        v := item.(map[string]interface{})
        name := v["name"].(string)
        readOnly := v["read_only"].(bool)
        destinationPath := v["destination_path"].(string)

        result := servicefabricmeshrestapis.ContainerVolume{
            DestinationPath: utils.String(destinationPath),
            Name: utils.String(name),
            ReadOnly: utils.Bool(readOnly),
        }

        results = append(results, result)
    }
    return &results
}

func expandArmApplicationResourceLimits(input []interface{}) *servicefabricmeshrestapis.ResourceLimits {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    memoryInGb := v["memory_in_gb"].(float64)
    cpu := v["cpu"].(float64)

    result := servicefabricmeshrestapis.ResourceLimits{
        CPU: utils.Float(cpu),
        MemoryInGB: utils.Float(memoryInGb),
    }
    return &result
}

func expandArmApplicationResourceRequests(input []interface{}) *servicefabricmeshrestapis.ResourceRequests {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    memoryInGb := v["memory_in_gb"].(float64)
    cpu := v["cpu"].(float64)

    result := servicefabricmeshrestapis.ResourceRequests{
        CPU: utils.Float(cpu),
        MemoryInGB: utils.Float(memoryInGb),
    }
    return &result
}
