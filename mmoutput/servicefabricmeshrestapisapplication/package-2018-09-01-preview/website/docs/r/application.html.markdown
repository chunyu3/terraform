---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/Azure/magic-module-specs
#
# ----------------------------------------------------------------------------
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_application"
sidebar_current: "docs-azurerm-resource-application"
description: |-
  Manage Azure Application instance.
---

# azurerm_application

Manage Azure Application instance.


## Argument Reference

The following arguments are supported:

* `name` - (Required) The identity of the application. Changing this forces a new resource to be created.

* `resource_group` - (Required) Azure resource group name Changing this forces a new resource to be created.

* `location` - (Required) The geo-location where the resource lives Changing this forces a new resource to be created.

* `debug_params` - (Optional) Internal - used by Visual Studio to setup the debugging session on the local development environment.

* `description` - (Optional) User readable description of the application.

* `diagnostics` - (Optional) One `diagnostic` block defined below.

* `services` - (Optional) One or more `service` block defined below.

* `tags` - (Optional) Resource tags. Changing this forces a new resource to be created.

---

The `diagnostic` block supports the following:

* `sinks` - (Optional) One or more `sink` block defined below.

* `enabled` - (Optional) Status of whether or not sinks are enabled.

* `default_sink_refs` - (Optional) The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.


---

The `sink` block supports the following:

* `name` - (Optional) Name of the sink. This value is referenced by DiagnosticsReferenceDescription

* `description` - (Optional) A description of the sink.

---

The `service` block supports the following:

* `name` - (Optional) The name of the resource

* `os_type` - (Required) The operation system required by the code in service.

* `code_packages` - (Required) One or more `code_package` block defined below.

* `network_refs` - (Optional) One or more `network_ref` block defined below.

* `diagnostics` - (Optional) One `diagnostic` block defined below.

* `description` - (Optional) User readable description of the service.

* `replica_count` - (Optional) The number of replicas of the service to create. Defaults to 1 if not specified.

* `auto_scaling_policies` - (Optional) One or more `auto_scaling_policy` block defined below.


---

The `code_package` block supports the following:

* `name` - (Required) The name of the code package.

* `image` - (Required) The Container image to use.

* `image_registry_credential` - (Optional) One `image_registry_credential` block defined below.

* `entrypoint` - (Optional) Override for the default entry point in the container.

* `commands` - (Optional) Command array to execute within the container in exec form.

* `environment_variables` - (Optional) One or more `environment_variable` block defined below.

* `settings` - (Optional) One or more `setting` block defined below.

* `labels` - (Optional) One or more `label` block defined below.

* `endpoints` - (Optional) One or more `endpoint` block defined below.

* `resources` - (Required) One `resource` block defined below.

* `volume_refs` - (Optional) One or more `volume_ref` block defined below.

* `volumes` - (Optional) One or more `volume` block defined below.

* `diagnostics` - (Optional) One `diagnostic` block defined below.

* `reliable_collections_refs` - (Optional) One or more `reliable_collections_ref` block defined below.


---

The `image_registry_credential` block supports the following:

* `server` - (Required) Docker image registry server, without protocol such as `http` and `https`.

* `username` - (Required) The username for the private registry.

* `password` - (Optional) The password for the private registry. The password is required for create or update operations, however it is not returned in the get or list operations.

---

The `environment_variable` block supports the following:

* `name` - (Optional) The name of the environment variable.

* `value` - (Optional) The value of the environment variable.

---

The `setting` block supports the following:

* `name` - (Optional) The name of the setting.

* `value` - (Optional) The value of the setting.

---

The `label` block supports the following:

* `name` - (Required) The name of the container label.

* `value` - (Required) The value of the container label.

---

The `endpoint` block supports the following:

* `name` - (Required) The name of the endpoint.

* `port` - (Optional) Port used by the container.

---

The `resource` block supports the following:

* `requests` - (Required) One `request` block defined below.

* `limits` - (Optional) One `limit` block defined below.


---

The `request` block supports the following:

* `memory_in_gb` - (Required) The memory request in GB for this container.

* `cpu` - (Required) Requested number of CPU cores. At present, only full cores are supported.

---

The `limit` block supports the following:

* `memory_in_gb` - (Optional) The memory limit in GB.

* `cpu` - (Optional) CPU limits in cores. At present, only full cores are supported.

---

The `volume_ref` block supports the following:

* `name` - (Required) Name of the volume being referenced.

* `read_only` - (Optional) The flag indicating whether the volume is read only. Default is 'false'.

* `destination_path` - (Required) The path within the container at which the volume should be mounted. Only valid path characters are allowed.

---

The `volume` block supports the following:

* `name` - (Required) Name of the volume being referenced.

* `read_only` - (Optional) The flag indicating whether the volume is read only. Default is 'false'.

* `destination_path` - (Required) The path within the container at which the volume should be mounted. Only valid path characters are allowed.

* `creation_parameters` - (Required) One `creation_parameter` block defined below.


---

The `creation_parameter` block supports the following:

* `description` - (Optional) User readable description of the volume.

---

The `diagnostic` block supports the following:

* `enabled` - (Optional) Status of whether or not sinks are enabled.

* `sink_refs` - (Optional) List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.

---

The `reliable_collections_ref` block supports the following:

* `name` - (Required) Name of ReliableCollection resource. Right now it's not used and you can use any string.

* `do_not_persist_state` - (Optional) False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.

---

The `network_ref` block supports the following:

* `name` - (Optional) Name of the network

* `endpoint_refs` - (Optional) One or more `endpoint_ref` block defined below.


---

The `endpoint_ref` block supports the following:

* `name` - (Optional) Name of the endpoint.

---

The `diagnostic` block supports the following:

* `enabled` - (Optional) Status of whether or not sinks are enabled.

* `sink_refs` - (Optional) List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.

---

The `auto_scaling_policy` block supports the following:

* `name` - (Required) The name of the auto scaling policy.

## Attributes Reference

The following attributes are exported:

* `provisioning_state` - State of the resource.

* `service_names` - Names of the services in the application.

* `status` - Status of the application.

* `status_details` - Gives additional information about the current status of the application.

* `health_state` - Describes the health state of an application resource.

* `unhealthy_evaluation` - When the application's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.

* `id` - Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}

* `name` - The name of the resource

* `type` - The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
